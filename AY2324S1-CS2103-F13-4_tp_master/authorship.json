[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"[![Java CI](https://github.com/AY2324S1-CS2103-F13-4/tp/actions/workflows/gradle.yml/badge.svg?branch\u003dmaster)](https://github.com/AY2324S1-CS2103-F13-4/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"**UniMate** is a powerful desktop application designed to streamline contact and events management.","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"Users can effortlessly manage their contacts, schedule events, and keep track of important information, all in one place.","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"* For the detailed documentation of this project, see the **[UniMate Product Website](https://ay2324s1-cs2103-f13-4.github.io/tp/)**.","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"* If you are interested about developing UniMate, the **[Developer Guide](https://ay2324s1-cs2103-f13-4.github.io/tp/DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"### Acknowledgements","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"- This project is forked from the AddressBook-Level3 project created by [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"junhonglow":11,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"run {","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-27"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"lihongguang00":4,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"This project was done by a team of 4 members.","lastModifiedDate":"2023-09-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"### Li Hongguang","lastModifiedDate":"2023-09-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"\u003cimg src\u003d\"images/lihongguang00.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"[[github](https://github.com/lihongguang00)]","lastModifiedDate":"2023-09-27"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"[[portfolio](team/lihongguang00.md)]","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"- Role: Team Member","lastModifiedDate":"2023-09-29"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"- Responsibilities: TBD","lastModifiedDate":"2023-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"### Andre Sim","lastModifiedDate":"2023-09-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"\u003cimg src\u003d\"images/fallman2.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"[[github](http://github.com/fallman2)]","lastModifiedDate":"2023-09-26"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"[[portfolio](team/fallman2.md)]","lastModifiedDate":"2023-09-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"- Role: Team Member","lastModifiedDate":"2023-09-29"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"- Responsibilities: TBD","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"### Low Jun Hong","lastModifiedDate":"2023-09-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"\u003cimg src\u003d\"images/junhonglow.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"[[github](http://github.com/junhonglow)]","lastModifiedDate":"2023-09-27"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"[[portfolio](team/junhonglow.md)]","lastModifiedDate":"2023-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"- Role: Developer","lastModifiedDate":"2023-09-29"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"- Responsibilities: TBD","lastModifiedDate":"2023-09-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"### Nicholas Lee","lastModifiedDate":"2023-09-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"\u003cimg src\u003d\"images/nicrandomlee.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"[[github](http://github.com/nicrandomlee)]","lastModifiedDate":"2023-09-29"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"[[portfolio](team/nicrandomlee.md)]","lastModifiedDate":"2023-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-29"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"- Role: Developer","lastModifiedDate":"2023-09-29"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"- Responsibilities: TBD","lastModifiedDate":"2023-09-29"}],"authorContributionMap":{"junhonglow":5,"lihongguang00":15,"Fallman2":5,"-":27}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"# UniMate Developer Guide","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"_{ list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well }_","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2023-10-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2023-10-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2023-10-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2023-10-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2023-10-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2023-10-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2023-10-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2023-10-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2023-10-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2023-10-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"**Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/BetterModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-10-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2023-10-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2023-10-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"nicrandomlee"},"content":"### Adding Events","lastModifiedDate":"2023-10-29"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"#### Implementation","lastModifiedDate":"2023-10-26"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"The addEvent feature is facilitated by the `Calendar` class. It allows the users to block out some time","lastModifiedDate":"2023-10-26"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"in their personal `Calendar` with some `Event` that has the following attributes:","lastModifiedDate":"2023-10-26"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"* `DESCRIPTION`  —  Brief description of the `Event`","lastModifiedDate":"2023-10-26"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"* `START_DATE_TIME`  —  Starting date and time of the `Event`","lastModifiedDate":"2023-10-26"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"* `END_DATE_TIME`  —  End date and time of the `Event`","lastModifiedDate":"2023-10-26"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"The syntax used to call this command is as follows: `addEvent d/DESCRIPTION ts/START_DATE_TIME te/END_DATE_TIME`,","lastModifiedDate":"2023-10-26"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"with the `START_DATE_TIME` and `END_DATE_TIME` in the `yyyy-MM-dd HH:mm` format. If any of the fields are missing","lastModifiedDate":"2023-10-26"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"or if the formatting is incorrect, an error message will be thrown along with usage instructions on the correct","lastModifiedDate":"2023-10-26"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"formatting.","lastModifiedDate":"2023-10-26"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"Given below is an example usage scenario and how the addEvent feature behaves at each step.","lastModifiedDate":"2023-10-26"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"Step 1. The user launches the application for the first time. The user\u0027s personal `Calendar` will be initialized","lastModifiedDate":"2023-10-26"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"as an empty calendar.","lastModifiedDate":"2023-10-26"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"Step 2. The user executes `addEvent d/Go to school ts/2023-10-26 08:00 te/2023-10-26 16:00` to add the `Event`","lastModifiedDate":"2023-10-26"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"of `Go to school` from `2023-10-26 8am` to `2023-10-26 4pm`. This will call the `UniMateParser#execute()`,","lastModifiedDate":"2023-10-26"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"passing in the user input from the user.","lastModifiedDate":"2023-10-26"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"Step 3. Since the command is an `addEvent` command, it passes the user input to `AddEventCommandParser#parse()`","lastModifiedDate":"2023-10-26"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"for parsing.","lastModifiedDate":"2023-10-26"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"Step 4. The `AddEventCommandParser#parse` command will parse the command into 3 argument fields  — ","lastModifiedDate":"2023-10-26"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"`DESCRIPTION`, `START_DATE_TIME` and `END_DATE_TIME`. The `DESCRIPTION` is passed into","lastModifiedDate":"2023-10-26"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"`ParserUtil#parseEventDescription()` to produce a `EventDescription` object, while the `START_DATE_TIME`","lastModifiedDate":"2023-10-26"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"and `END_DATE_TIME` are passed into `ParserUtil#parseEventPeriod()` to produce a `EventPeriod` object.","lastModifiedDate":"2023-10-26"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"**Note**: If the `DESCRIPTION` is empty, or the `START_DATE_TIME` or `END_DATE_TIME` are of invalid","lastModifiedDate":"2023-10-26"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"format, a `ParseException` will be thrown, displaying the appropriate command usage format.","lastModifiedDate":"2023-10-26"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":196,"author":{"gitId":"lihongguang00"},"content":"Step 5. The `EventDescription` and `EventPeriod` objects produced in Step 4 are then passed into","lastModifiedDate":"2023-10-26"},{"lineNumber":197,"author":{"gitId":"lihongguang00"},"content":"the constructor for `Event`, creating an `Event` object with the respective user-defined attributes. This","lastModifiedDate":"2023-10-26"},{"lineNumber":198,"author":{"gitId":"lihongguang00"},"content":"`Event` object is then passed into the constructor of the `AddEventCommand` object.","lastModifiedDate":"2023-10-26"},{"lineNumber":199,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":200,"author":{"gitId":"lihongguang00"},"content":"Step 6. `AddEventCommand#execute()` is then called, and the calendar will check if there is an existing","lastModifiedDate":"2023-10-26"},{"lineNumber":201,"author":{"gitId":"lihongguang00"},"content":"`Event` that has a conflicting timing with the new `Event` to be added. Since the calendar is empty,","lastModifiedDate":"2023-10-26"},{"lineNumber":202,"author":{"gitId":"lihongguang00"},"content":"no errors will be raised and the user will see his new `Event` displayed in the UI in the `My Calendar`","lastModifiedDate":"2023-10-26"},{"lineNumber":203,"author":{"gitId":"lihongguang00"},"content":"region.","lastModifiedDate":"2023-10-26"},{"lineNumber":204,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":205,"author":{"gitId":"lihongguang00"},"content":"**Note**: Suppose there is a conflicting `Event` that already exists in the `Calendar`","lastModifiedDate":"2023-10-26"},{"lineNumber":206,"author":{"gitId":"lihongguang00"},"content":"with the `Event` to be added, the new `Event` will not be added, and a message that states that there","lastModifiedDate":"2023-10-26"},{"lineNumber":207,"author":{"gitId":"lihongguang00"},"content":"is a timing conflict will be reflected in the UI status bar.","lastModifiedDate":"2023-10-26"},{"lineNumber":208,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":209,"author":{"gitId":"lihongguang00"},"content":"#### Design considerations:","lastModifiedDate":"2023-10-26"},{"lineNumber":210,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":211,"author":{"gitId":"lihongguang00"},"content":"**Aspect: Appropriate time period of an event:**","lastModifiedDate":"2023-10-26"},{"lineNumber":212,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":213,"author":{"gitId":"lihongguang00"},"content":"* **Alternative 1 (Current choice): No restriction on time period**","lastModifiedDate":"2023-10-26"},{"lineNumber":214,"author":{"gitId":"lihongguang00"},"content":"    * Pros: Allows users to add multi-day `Event` such as multi-day business trips.","lastModifiedDate":"2023-10-26"},{"lineNumber":215,"author":{"gitId":"lihongguang00"},"content":"    * Cons: For users that rarely have multi-day `Event`, having to type the date twice when calling the command might be troublesome.","lastModifiedDate":"2023-10-26"},{"lineNumber":216,"author":{"gitId":"lihongguang00"},"content":"* **Alternative 2: Restrict events to a single day**","lastModifiedDate":"2023-10-26"},{"lineNumber":217,"author":{"gitId":"lihongguang00"},"content":"    * Pros: User only has to type date once when calling command.","lastModifiedDate":"2023-10-26"},{"lineNumber":218,"author":{"gitId":"lihongguang00"},"content":"    * Cons: For multi-day `Event`, user has to call the command multiple times for all the relevant days","lastModifiedDate":"2023-10-26"},{"lineNumber":219,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":220,"author":{"gitId":"lihongguang00"},"content":"{more aspects and alternatives to be added}","lastModifiedDate":"2023-10-26"},{"lineNumber":221,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":222,"author":{"gitId":"nicrandomlee"},"content":"### Deleting Events","lastModifiedDate":"2023-10-29"},{"lineNumber":223,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":224,"author":{"gitId":"nicrandomlee"},"content":"#### Implementation","lastModifiedDate":"2023-10-29"},{"lineNumber":225,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":226,"author":{"gitId":"nicrandomlee"},"content":"The deletion of events is facilitated by the `model::deleteEventAt` method and the `model::findEventAt` method. The","lastModifiedDate":"2023-10-29"},{"lineNumber":227,"author":{"gitId":"nicrandomlee"},"content":"former method deletes the event stored in the `Calendar` object which itself is an attribute of the `Model` object by","lastModifiedDate":"2023-10-29"},{"lineNumber":228,"author":{"gitId":"nicrandomlee"},"content":"calling a similar method `Calendar::deleteEventAt`. These methods take in a `LocalDateTime` object and finds the method","lastModifiedDate":"2023-10-29"},{"lineNumber":229,"author":{"gitId":"nicrandomlee"},"content":"within the `Calendar` object, then in the case of `model::deleteEventAt`, deletes the event. Given below is an example","lastModifiedDate":"2023-10-29"},{"lineNumber":230,"author":{"gitId":"nicrandomlee"},"content":"usage scenario of the command.","lastModifiedDate":"2023-10-29"},{"lineNumber":231,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":232,"author":{"gitId":"nicrandomlee"},"content":"Step 1. The user launches the application and creates an event.","lastModifiedDate":"2023-10-29"},{"lineNumber":233,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":234,"author":{"gitId":"nicrandomlee"},"content":"Step 2. The user executes `deleteEvent 2023-12-09 12:00` command to delete the event at that time. The `deleteEvent`","lastModifiedDate":"2023-10-29"},{"lineNumber":235,"author":{"gitId":"nicrandomlee"},"content":"command calls `Model#findEventAt(LocalDateTime)` to find an event at the specified date and time. This event is then stored as a","lastModifiedDate":"2023-10-29"},{"lineNumber":236,"author":{"gitId":"nicrandomlee"},"content":"variable `toDelete`.","lastModifiedDate":"2023-10-29"},{"lineNumber":237,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":238,"author":{"gitId":"nicrandomlee"},"content":"**Note**: If no event is found at the specified date and time at any point of the command execution, an","lastModifiedDate":"2023-10-29"},{"lineNumber":239,"author":{"gitId":"nicrandomlee"},"content":"`EventNotFoundException` is thrown which causes an error message to be displayed.","lastModifiedDate":"2023-10-29"},{"lineNumber":240,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":241,"author":{"gitId":"nicrandomlee"},"content":"Step 3. The command then calls `Model#deleteEventAt(LocalDateTime)`. This method calls similar methods of","lastModifiedDate":"2023-10-29"},{"lineNumber":242,"author":{"gitId":"nicrandomlee"},"content":"`Calendar#deleteEventAt(LocalDateTime)` which calls `AllDaysEventListManager#deleteEventAt(LocalDateTime)`.","lastModifiedDate":"2023-10-29"},{"lineNumber":243,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":244,"author":{"gitId":"nicrandomlee"},"content":"Step 4. The `AllDaysEventListManager` checks for an event at the specified date and time again, then checks for all days","lastModifiedDate":"2023-10-29"},{"lineNumber":245,"author":{"gitId":"nicrandomlee"},"content":"for which the event lasts for. Then, for each day, the event is removed from the `SingleDayEventList`.","lastModifiedDate":"2023-10-29"},{"lineNumber":246,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":247,"author":{"gitId":"nicrandomlee"},"content":"Step 5. The deleted event which was previously stored in as a variable is displayed in the `CommandResult` to show the","lastModifiedDate":"2023-10-29"},{"lineNumber":248,"author":{"gitId":"nicrandomlee"},"content":"user which command was deleted.","lastModifiedDate":"2023-10-29"},{"lineNumber":249,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":250,"author":{"gitId":"nicrandomlee"},"content":"**Design considerations**","lastModifiedDate":"2023-10-29"},{"lineNumber":251,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":252,"author":{"gitId":"nicrandomlee"},"content":"* The design of the `deleteEvent` command is dependent on the structure of the `Calendar` object. Should the structure","lastModifiedDate":"2023-10-29"},{"lineNumber":253,"author":{"gitId":"nicrandomlee"},"content":"  of how the event objects are stored change, a new implementation will be required for the command.","lastModifiedDate":"2023-10-29"},{"lineNumber":254,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":255,"author":{"gitId":"nicrandomlee"},"content":"### Contact Filtering","lastModifiedDate":"2023-10-29"},{"lineNumber":256,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":257,"author":{"gitId":"nicrandomlee"},"content":"#### Implementation","lastModifiedDate":"2023-10-29"},{"lineNumber":258,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":259,"author":{"gitId":"nicrandomlee"},"content":"The filtering function executed by `FilterCommand` is facilitated by the `PersonFilter` class.","lastModifiedDate":"2023-10-29"},{"lineNumber":260,"author":{"gitId":"nicrandomlee"},"content":"which itself is similar to the `EditPersonDescriptor` class found in `EditCommand.java`. It stores the fields by which","lastModifiedDate":"2023-10-29"},{"lineNumber":261,"author":{"gitId":"nicrandomlee"},"content":"the contacts are to be filtered and creates a predicate to facilitate the filtering. Notably, it implements the","lastModifiedDate":"2023-10-29"},{"lineNumber":262,"author":{"gitId":"nicrandomlee"},"content":"following operation:","lastModifiedDate":"2023-10-29"},{"lineNumber":263,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":264,"author":{"gitId":"nicrandomlee"},"content":"* `PersonFilter#matchesFilter(Person)` - Compares the values of the attributes of the `Person` to the strings stored as","lastModifiedDate":"2023-10-29"},{"lineNumber":265,"author":{"gitId":"nicrandomlee"},"content":"  attributes in the `PersonFilter` object. This method is later used as a lambda method to filter the contact list.","lastModifiedDate":"2023-10-29"},{"lineNumber":266,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":267,"author":{"gitId":"nicrandomlee"},"content":"Given below is an example of how the filter function works at each step.","lastModifiedDate":"2023-10-29"},{"lineNumber":268,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":269,"author":{"gitId":"nicrandomlee"},"content":"Step 1. The user executes `filter n/Bob t/CS` to filter contacts to see only people with \"Bob\" in their name and have at","lastModifiedDate":"2023-10-29"},{"lineNumber":270,"author":{"gitId":"nicrandomlee"},"content":"least 1 tag with \"CS\" in it. The input is passed to `UniMateParser` which then parses it with the `FilterCommandParser`.","lastModifiedDate":"2023-10-29"},{"lineNumber":271,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":272,"author":{"gitId":"nicrandomlee"},"content":"Step 2. The `FilterCommandParser` parses the input and creates a corresponding `PersonFilter` object with null for all","lastModifiedDate":"2023-10-29"},{"lineNumber":273,"author":{"gitId":"nicrandomlee"},"content":"parameters. It then sets all specified attributes of the created `PersonFilter` while leaving unspecified fields as","lastModifiedDate":"2023-10-29"},{"lineNumber":274,"author":{"gitId":"nicrandomlee"},"content":"null. The `FilterCommandParser` finally returns a newly created `FilterCommand` with the PersonFilter used in the","lastModifiedDate":"2023-10-29"},{"lineNumber":275,"author":{"gitId":"nicrandomlee"},"content":"constructor.","lastModifiedDate":"2023-10-29"},{"lineNumber":276,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":277,"author":{"gitId":"nicrandomlee"},"content":"Step 3. `FilterCommand#execute` is called. In this method, `model#updateFilteredPersonList` is called with","lastModifiedDate":"2023-10-29"},{"lineNumber":278,"author":{"gitId":"nicrandomlee"},"content":"`PersonFilter#matchesFilter` being used as the predicate. This updates the GUI and populates the filtered list with","lastModifiedDate":"2023-10-29"},{"lineNumber":279,"author":{"gitId":"nicrandomlee"},"content":"only `Person` objects that match the filter.","lastModifiedDate":"2023-10-29"},{"lineNumber":280,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":281,"author":{"gitId":"nicrandomlee"},"content":"Step 4. The number of people displayed is returned as a `CommandResult`.","lastModifiedDate":"2023-10-29"},{"lineNumber":282,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":283,"author":{"gitId":"nicrandomlee"},"content":"### Contact Sorting","lastModifiedDate":"2023-10-29"},{"lineNumber":284,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":285,"author":{"gitId":"nicrandomlee"},"content":"#### Implementation","lastModifiedDate":"2023-10-29"},{"lineNumber":286,"author":{"gitId":"nicrandomlee"},"content":"The sort function executed by `SortCommand`.","lastModifiedDate":"2023-10-29"},{"lineNumber":287,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":288,"author":{"gitId":"nicrandomlee"},"content":"The sort function allows users to sort all persons in `UniMate` based on a given criteria. The following criterion for sort are shown below","lastModifiedDate":"2023-10-29"},{"lineNumber":289,"author":{"gitId":"nicrandomlee"},"content":"- Sort by name (optional: in the reverse order)","lastModifiedDate":"2023-10-29"},{"lineNumber":290,"author":{"gitId":"nicrandomlee"},"content":"- Sort by address (optional: in the reverse order)","lastModifiedDate":"2023-10-29"},{"lineNumber":291,"author":{"gitId":"nicrandomlee"},"content":"- Sort by email (optional: in the reverse order)","lastModifiedDate":"2023-10-29"},{"lineNumber":292,"author":{"gitId":"nicrandomlee"},"content":"- Sort by phone (optional: in the reverse order)","lastModifiedDate":"2023-10-29"},{"lineNumber":293,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":294,"author":{"gitId":"nicrandomlee"},"content":"The syntax used to call this command is as follows, without the [ ] braces: `sort [/byname][/byaddress][/byemail][byphone] [/reverse]`. Do note that sorting by reverse is optional.","lastModifiedDate":"2023-10-29"},{"lineNumber":295,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":296,"author":{"gitId":"nicrandomlee"},"content":"Given below is an example of how the sort function works at each step. We will simulate a user using the sort function to sort UniMate contacts by name in descending order.","lastModifiedDate":"2023-10-29"},{"lineNumber":297,"author":{"gitId":"nicrandomlee"},"content":"1. The user executes `sort /byname /reverse` to find his friend\u0027s contact. The input is passed into `UniMateParser` which then parses it with the `SortCommandParser`.","lastModifiedDate":"2023-10-29"},{"lineNumber":298,"author":{"gitId":"nicrandomlee"},"content":"2. The `SortCommandParser` parses the input and first checks for arguments provided. If the arguments are empty, invalid or in the wrong format, a helper message will appear to allow the user to reference the sample run case. The arguments are then matched by the keywords provided to determine the basis for sorting using a `SortComparator`. All the comparators are added into an ArrayList of `SortComparator` for `SortCommand` to parse.","lastModifiedDate":"2023-10-29"},{"lineNumber":299,"author":{"gitId":"nicrandomlee"},"content":"3. `SortCommand` is initialized parses the array from step 2 to determine the basis of comparison when the command is executed. The `SortCommandParser` finally returns a newly created `SortCommand` consisting of a Person Comparator that decides the method of sorting for the UniMate address book.","lastModifiedDate":"2023-10-29"},{"lineNumber":300,"author":{"gitId":"nicrandomlee"},"content":"4. `SortCommand#execute` is called. In this method, `model#sortPersonList` is called with the Person Comparator created in step 3. This in turn calls `AddressBook#sortPersons` which calls the storage function to save the contacts in the json file based on the sorted order.","lastModifiedDate":"2023-10-29"},{"lineNumber":301,"author":{"gitId":"nicrandomlee"},"content":"5. The GUI then reads in the json file to obtain the order of addresses and populates the sorted list with the sorting criteria provided.","lastModifiedDate":"2023-10-29"},{"lineNumber":302,"author":{"gitId":"nicrandomlee"},"content":"6. The success message is returned as a `CommandResult` and displayed on the GUI result display panel.","lastModifiedDate":"2023-10-29"},{"lineNumber":303,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":304,"author":{"gitId":"nicrandomlee"},"content":"**Design considerations**","lastModifiedDate":"2023-10-29"},{"lineNumber":305,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":306,"author":{"gitId":"nicrandomlee"},"content":"* The design of the `sort` command is dependent on the structure of the `AddressBookStorage` object. Should the structure","lastModifiedDate":"2023-10-29"},{"lineNumber":307,"author":{"gitId":"nicrandomlee"},"content":"  of how the AddressBook objects are stored change, a new implementation will be required for the command.","lastModifiedDate":"2023-10-29"},{"lineNumber":308,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":309,"author":{"gitId":"nicrandomlee"},"content":"### TaskList Feature (Work in Progress)","lastModifiedDate":"2023-10-29"},{"lineNumber":310,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":311,"author":{"gitId":"nicrandomlee"},"content":"#### Implementation","lastModifiedDate":"2023-10-29"},{"lineNumber":312,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":313,"author":{"gitId":"nicrandomlee"},"content":"The proposed tasklist feature is facilitated by \u0027TaskList\u0027. It extends a ReadOnlyTaskList that will be used for the","lastModifiedDate":"2023-10-29"},{"lineNumber":314,"author":{"gitId":"nicrandomlee"},"content":"saving of the users\u0027 tasks. Additionally, it implements the following operations:","lastModifiedDate":"2023-10-29"},{"lineNumber":315,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":316,"author":{"gitId":"nicrandomlee"},"content":"*`TaskList#addTask()` -- Adds a task to the current tasklist and saves it to memory.","lastModifiedDate":"2023-10-29"},{"lineNumber":317,"author":{"gitId":"nicrandomlee"},"content":"*`TaskList#deleteTask()` -- Delete an existing task from the current tasklist and saves it to memory.","lastModifiedDate":"2023-10-29"},{"lineNumber":318,"author":{"gitId":"nicrandomlee"},"content":"*`TaskList#editTask()` -- Edits an existing task from the current tasklist and saves it to memory.","lastModifiedDate":"2023-10-29"},{"lineNumber":319,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":320,"author":{"gitId":"nicrandomlee"},"content":"These operations are exposed in the `Model` interface as `Model#addTask()`, `Model#deleteTask()` and `Model#editTask()`","lastModifiedDate":"2023-10-29"},{"lineNumber":321,"author":{"gitId":"nicrandomlee"},"content":"respectively.","lastModifiedDate":"2023-10-29"},{"lineNumber":322,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":323,"author":{"gitId":"nicrandomlee"},"content":"##### Adding Task","lastModifiedDate":"2023-10-29"},{"lineNumber":324,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":325,"author":{"gitId":"nicrandomlee"},"content":"The adding of tasks is facilitated by the `model#addTask()` method.","lastModifiedDate":"2023-10-29"},{"lineNumber":326,"author":{"gitId":"nicrandomlee"},"content":"The method adds a task to the `TaskList` object which itself is an attribute of the `ModelManager` object by","lastModifiedDate":"2023-10-29"},{"lineNumber":327,"author":{"gitId":"nicrandomlee"},"content":"calling a similar method `Model::addTask()`.","lastModifiedDate":"2023-10-29"},{"lineNumber":328,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":329,"author":{"gitId":"nicrandomlee"},"content":"These methods take in a `Description` and `Optional(Deadline)` object and finds the method within the `TaskList` object,","lastModifiedDate":"2023-10-29"},{"lineNumber":330,"author":{"gitId":"nicrandomlee"},"content":"then adds the `Task` object to the TaskList.","lastModifiedDate":"2023-10-29"},{"lineNumber":331,"author":{"gitId":"nicrandomlee"},"content":"Given below is an example usage scenario of the command.","lastModifiedDate":"2023-10-29"},{"lineNumber":332,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":333,"author":{"gitId":"nicrandomlee"},"content":"Step 1. The user launches the application and creates a task.","lastModifiedDate":"2023-10-29"},{"lineNumber":334,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":335,"author":{"gitId":"nicrandomlee"},"content":"Step 2. The user executes `addTask d/CS2105 Assignment te/2023-12-12 12:00 ` command to add the task.","lastModifiedDate":"2023-10-29"},{"lineNumber":336,"author":{"gitId":"nicrandomlee"},"content":"The `addTask` method in the model is called, adding the task to the tasklist, and saving the tasklist to memory.","lastModifiedDate":"2023-10-29"},{"lineNumber":337,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":338,"author":{"gitId":"nicrandomlee"},"content":"**Note**: There is no limit to the number of tasks of the same description or deadline that can be created.","lastModifiedDate":"2023-10-29"},{"lineNumber":339,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":340,"author":{"gitId":"nicrandomlee"},"content":"**Design considerations**","lastModifiedDate":"2023-10-29"},{"lineNumber":341,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":342,"author":{"gitId":"nicrandomlee"},"content":"* The design of the `addTask` command is such that a deadline is made optional.","lastModifiedDate":"2023-10-29"},{"lineNumber":343,"author":{"gitId":"nicrandomlee"},"content":"* This current implementation allows for more freedom to the user but might be more difficult to manage with the addition of Optionals.","lastModifiedDate":"2023-10-29"},{"lineNumber":344,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":345,"author":{"gitId":"nicrandomlee"},"content":"##### Delete Task (To be added)","lastModifiedDate":"2023-10-29"},{"lineNumber":346,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":347,"author":{"gitId":"nicrandomlee"},"content":"##### Edit Task (To be added)","lastModifiedDate":"2023-10-29"},{"lineNumber":348,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":349,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":350,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2023-10-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2023-10-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2023-10-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":380,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":386,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":390,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram.puml\" alt\u003d\"UndoSequenceDiagram\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":400,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":402,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":403,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":404,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":406,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":408,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2023-10-29"},{"lineNumber":429,"author":{"gitId":"nicrandomlee"},"content":"    * Pros: Easy to implement.","lastModifiedDate":"2023-10-29"},{"lineNumber":430,"author":{"gitId":"nicrandomlee"},"content":"    * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2023-10-29"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":432,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2023-10-29"},{"lineNumber":433,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"nicrandomlee"},"content":"    * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2023-10-29"},{"lineNumber":435,"author":{"gitId":"nicrandomlee"},"content":"    * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2023-10-29"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":444,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-29"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2023-10-29"},{"lineNumber":449,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2023-10-29"},{"lineNumber":450,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2023-10-29"},{"lineNumber":451,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2023-10-29"},{"lineNumber":452,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2023-10-29"},{"lineNumber":453,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-29"},{"lineNumber":455,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts","lastModifiedDate":"2023-10-29"},{"lineNumber":464,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2023-10-29"},{"lineNumber":465,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2023-10-29"},{"lineNumber":466,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2023-10-29"},{"lineNumber":467,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2023-10-29"},{"lineNumber":468,"author":{"gitId":"nicrandomlee"},"content":"* is an NUS student","lastModifiedDate":"2023-10-29"},{"lineNumber":469,"author":{"gitId":"nicrandomlee"},"content":"* has a need to organize and coordinate schedules","lastModifiedDate":"2023-10-29"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"nicrandomlee"},"content":"**Value proposition**: manage contacts faster than a typical mouse/GUI driven app","lastModifiedDate":"2023-10-29"},{"lineNumber":473,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"lihongguang00"},"content":"| Priority | As a …                                                              | I want to …                                                                  | So that I can…                                                                          |","lastModifiedDate":"2023-10-15"},{"lineNumber":476,"author":{"gitId":"nicrandomlee"},"content":"| -------- | ------------------------------------------------------------------- | ---------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- |","lastModifiedDate":"2023-10-26"},{"lineNumber":477,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | NUS student                                                         | search for the contacts of other students within my university               | contact them for group projects                                                         |","lastModifiedDate":"2023-10-03"},{"lineNumber":478,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | NUS student                                                         | search for a name in the contact                                             | easily find the person’s contact                                                        |","lastModifiedDate":"2023-10-03"},{"lineNumber":479,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | NUS student                                                         | add contacts into my address book easily                                     | retrieve the saved contact                                                              |","lastModifiedDate":"2023-10-03"},{"lineNumber":480,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | NUS student living on campus                                        | save the contacts of my neighbors                                            | contact them in case of any emergencies                                                 |","lastModifiedDate":"2023-10-03"},{"lineNumber":481,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | NUS student living on campus                                        | save the addresses of my neighbours                                          | locate them easily when necessary                                                       |","lastModifiedDate":"2023-10-03"},{"lineNumber":482,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | NUS student in multiple CCAs                                        | filter my contacts by tags to identify all people in a group                 | find the relevant contacts in a certain group quickly                                   |","lastModifiedDate":"2023-10-03"},{"lineNumber":483,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | student staying on campus                                           | label multiple tags to my contacts                                           | locate my friends taking the same module and staying in the same campus residence as me |","lastModifiedDate":"2023-10-03"},{"lineNumber":484,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | user that is familiar with the keyboard                             | use the keyboard to type commands in the applications                        | access the features of the application                                                  |","lastModifiedDate":"2023-10-03"},{"lineNumber":485,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | user with bad memory                                                | save a short description of my contact                                       | identify my contacts better                                                             |","lastModifiedDate":"2023-10-03"},{"lineNumber":486,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | visual-reliant user                                                 | save a photo of the person into my contacts                                  | quickly recognise and find them                                                         |","lastModifiedDate":"2023-10-03"},{"lineNumber":487,"author":{"gitId":"lihongguang00"},"content":"| `* * *`  | non-tech-savvy user                                                 | use the help feature of the app                                              | navigate about the app easily                                                           |","lastModifiedDate":"2023-10-03"},{"lineNumber":488,"author":{"gitId":"nicrandomlee"},"content":"| `* *`    | NUS student                                                         | sort all contacts by name                                                    | easily find a person\u0027s contact                                                          |","lastModifiedDate":"2023-10-29"},{"lineNumber":489,"author":{"gitId":"nicrandomlee"},"content":"| `* *`    | NUS student                                                         | sort all contacts by name in reverse                                         | easily find a person\u0027s contact                                                          |","lastModifiedDate":"2023-10-29"},{"lineNumber":490,"author":{"gitId":"nicrandomlee"},"content":"| `* *`    | NUS student                                                         | sort all contacts by email                                                   | easily find a person\u0027s contact                                                          |","lastModifiedDate":"2023-10-29"},{"lineNumber":491,"author":{"gitId":"nicrandomlee"},"content":"| `* *`    | NUS student                                                         | sort all contacts by email in reverse                                        | easily find a person\u0027s contact                                                          |","lastModifiedDate":"2023-10-29"},{"lineNumber":492,"author":{"gitId":"nicrandomlee"},"content":"| `* *`    | NUS student                                                         | sort all contacts by address                                                 | easily find a person\u0027s contact                                                          |","lastModifiedDate":"2023-10-29"},{"lineNumber":493,"author":{"gitId":"nicrandomlee"},"content":"| `* *`    | NUS student                                                         | sort all contacts by address in reverse                                      | easily find a person\u0027s contact                                                          |","lastModifiedDate":"2023-10-29"},{"lineNumber":494,"author":{"gitId":"nicrandomlee"},"content":"| `* *`    | NUS student                                                         | sort all contacts by phone                                                   | easily find a person\u0027s contact                                                          |","lastModifiedDate":"2023-10-29"},{"lineNumber":495,"author":{"gitId":"nicrandomlee"},"content":"| `* *`    | NUS student                                                         | sort all contacts by phone in reverse                                        | easily find a person\u0027s contact                                                          |","lastModifiedDate":"2023-10-29"},{"lineNumber":496,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | NUS student                                                         | import the NUS calendar into the application                                 | view all academic commitments more conveniently                                         |","lastModifiedDate":"2023-10-03"},{"lineNumber":497,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | NUS Student                                                         | compare timetables/calendars with my peers easily                            | plan meetings more conveniently                                                         |","lastModifiedDate":"2023-10-03"},{"lineNumber":498,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | NUS student                                                         | allocate tasks and responsibilities within a project or CCA group            | tasks can be done efficiently                                                           |","lastModifiedDate":"2023-10-03"},{"lineNumber":499,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | NUS Student in multiple CCAs                                        | group my contacts                                                            | identify which group my contacts belong to                                              |","lastModifiedDate":"2023-10-03"},{"lineNumber":500,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | NUS student doing a group project                                   | export my calendar in my application                                         | send it to my teammates to coordinate meeting times                                     |","lastModifiedDate":"2023-10-03"},{"lineNumber":501,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | forgetful user                                                      | view a password hint                                                         | I can recall my password when I forget it                                               |","lastModifiedDate":"2023-10-03"},{"lineNumber":502,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | forgetful student                                                   | be reminded of upcoming assignments                                          | prioritize which assignment to work on first                                            |","lastModifiedDate":"2023-10-03"},{"lineNumber":503,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | forgetful student                                                   | be reminded of upcoming examinations                                         | prioritize which exam module to study on first                                          |","lastModifiedDate":"2023-10-03"},{"lineNumber":504,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | forgetful student                                                   | be reminded of upcoming projects                                             | prioritize which project to work on first                                               |","lastModifiedDate":"2023-10-03"},{"lineNumber":505,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | forgetful student                                                   | be reminded of upcoming tutorials                                            | so that I can prioritize which tutorial to complete first                               |","lastModifiedDate":"2023-10-03"},{"lineNumber":506,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | security conscious user                                             | password-protect my appliation                                               | prevent others from accessing my application profile easily                             |","lastModifiedDate":"2023-10-03"},{"lineNumber":507,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | data conscious user                                                 | backup my data                                                               | so that I can recover it in the case my data is corrupted                               |","lastModifiedDate":"2023-10-03"},{"lineNumber":508,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | user who cares about user experience                                | change the color of my user interface                                        | modify the interface to my liking                                                       |","lastModifiedDate":"2023-10-03"},{"lineNumber":509,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | user with a strong urge for aesthetics                              | interact with a clean user interface                                         | feel at ease when using the application                                                 |","lastModifiedDate":"2023-10-03"},{"lineNumber":510,"author":{"gitId":"lihongguang00"},"content":"| `* *`    | non-tech-savvy user that does not know how to use terminal commands | use buttons around the application to navigate around the application easily |","lastModifiedDate":"2023-10-03"},{"lineNumber":511,"author":{"gitId":"lihongguang00"},"content":"| `*`      | student who prefers using a tablet                                  | I can use the application on my tablet                                       | access contacts easily on my tablet                                                     |","lastModifiedDate":"2023-10-03"},{"lineNumber":512,"author":{"gitId":"lihongguang00"},"content":"| `*`      | student who prefers mobile devices                                  | I can use the application on my mobile phone                                 | sync my contacts with those in the application                                          |","lastModifiedDate":"2023-10-03"},{"lineNumber":513,"author":{"gitId":"lihongguang00"},"content":"| `*`      | student in a group project                                          | send a QR code of my application contact details                             | have my teammates add my contact details on the application much faster                 |","lastModifiedDate":"2023-10-03"},{"lineNumber":514,"author":{"gitId":"lihongguang00"},"content":"| `*`      | user who prefers cloud storage                                      | sync the contacts in my application with Google Contacts                     | save it in cloud-based storage                                                          |","lastModifiedDate":"2023-10-03"},{"lineNumber":515,"author":{"gitId":"lihongguang00"},"content":"| `*`      | user accustomed to a PC                                             | view all commands at once                                                    | explore features quickly                                                                |","lastModifiedDate":"2023-10-03"},{"lineNumber":516,"author":{"gitId":"lihongguang00"},"content":"| `*`      | user with a tendency to open many applications at once              | have the application time out and exit                                       | ensure my computer would not be cluttered by too many applications                      |","lastModifiedDate":"2023-10-03"},{"lineNumber":517,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"nicrandomlee"},"content":"_{More to be added}_","lastModifiedDate":"2023-10-26"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":523,"author":{"gitId":"lihongguang00"},"content":"(For all use cases below, the **System** is the `UniMate` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2023-10-03"},{"lineNumber":524,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":525,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC1 List persons**","lastModifiedDate":"2023-10-03"},{"lineNumber":526,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":528,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":531,"author":{"gitId":"-"},"content":"1. User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"lihongguang00"},"content":"2. UniMate shows a list of persons","lastModifiedDate":"2023-10-03"},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":537,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":540,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2023-10-29"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":542,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":543,"author":{"gitId":"nicrandomlee"},"content":"* 2b. UniMate displays a message to the user.","lastModifiedDate":"2023-10-29"},{"lineNumber":544,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":545,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":546,"author":{"gitId":"-"},"content":"Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":549,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC2 Delete a person**","lastModifiedDate":"2023-10-03"},{"lineNumber":550,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":551,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":552,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":553,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":554,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":555,"author":{"gitId":"lihongguang00"},"content":"1.  User requests to list persons (UC1)","lastModifiedDate":"2023-10-03"},{"lineNumber":556,"author":{"gitId":"lihongguang00"},"content":"2.  User requests to delete a specific person in the list","lastModifiedDate":"2023-10-03"},{"lineNumber":557,"author":{"gitId":"lihongguang00"},"content":"3.  UniMate deletes the person","lastModifiedDate":"2023-10-03"},{"lineNumber":558,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":559,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":560,"author":{"gitId":"lihongguang00"},"content":"Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":561,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":563,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2023-10-29"},{"lineNumber":564,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":566,"author":{"gitId":"nicrandomlee"},"content":"* 3a1. UniMate shows an error message.","lastModifiedDate":"2023-10-29"},{"lineNumber":567,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":568,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"     Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":572,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC3 Add a person**","lastModifiedDate":"2023-10-03"},{"lineNumber":573,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":574,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":575,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":576,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":577,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":578,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":579,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":580,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":581,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":582,"author":{"gitId":"lihongguang00"},"content":"1.  User requests to add in a person into the UniMate","lastModifiedDate":"2023-10-03"},{"lineNumber":583,"author":{"gitId":"lihongguang00"},"content":"2.  UniMate adds the person","lastModifiedDate":"2023-10-03"},{"lineNumber":584,"author":{"gitId":"lihongguang00"},"content":"3.  UniMate displays a success message","lastModifiedDate":"2023-10-03"},{"lineNumber":585,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":586,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":587,"author":{"gitId":"lihongguang00"},"content":"Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":588,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":589,"author":{"gitId":"lihongguang00"},"content":"**Extensions**","lastModifiedDate":"2023-10-03"},{"lineNumber":590,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":591,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":592,"author":{"gitId":"nicrandomlee"},"content":"* 1a. The given format is wrong","lastModifiedDate":"2023-10-29"},{"lineNumber":593,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":594,"author":{"gitId":"nicrandomlee"},"content":"    * 1a1. UniMate shows an error message","lastModifiedDate":"2023-10-29"},{"lineNumber":595,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":596,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":597,"author":{"gitId":"lihongguang00"},"content":"Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":598,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":599,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":600,"author":{"gitId":"nicrandomlee"},"content":"* 1b. Person is already in UniMate","lastModifiedDate":"2023-10-29"},{"lineNumber":601,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":602,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":603,"author":{"gitId":"lihongguang00"},"content":"      Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":604,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":605,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":606,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC4 Clear All Entries**","lastModifiedDate":"2023-10-03"},{"lineNumber":607,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":608,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":609,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":610,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":611,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":612,"author":{"gitId":"lihongguang00"},"content":"1.  User requests to clear all entries in UniMate","lastModifiedDate":"2023-10-03"},{"lineNumber":613,"author":{"gitId":"lihongguang00"},"content":"2.  UniMate deletes all entries","lastModifiedDate":"2023-10-03"},{"lineNumber":614,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":615,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":616,"author":{"gitId":"lihongguang00"},"content":"      Use Case Ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":617,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":618,"author":{"gitId":"lihongguang00"},"content":"**Extensions**","lastModifiedDate":"2023-10-03"},{"lineNumber":619,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":620,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":621,"author":{"gitId":"nicrandomlee"},"content":"* 1a. UniMate has no data","lastModifiedDate":"2023-10-29"},{"lineNumber":622,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":623,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":624,"author":{"gitId":"lihongguang00"},"content":"    Use Case Ends","lastModifiedDate":"2023-10-03"},{"lineNumber":625,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":626,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":627,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC5 Edit persons**","lastModifiedDate":"2023-10-03"},{"lineNumber":628,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":629,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":630,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":631,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":632,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":633,"author":{"gitId":"lihongguang00"},"content":"1. Use requests to list all persons(UC1).","lastModifiedDate":"2023-10-03"},{"lineNumber":634,"author":{"gitId":"lihongguang00"},"content":"2. User requests to edit person at a specified index with new parameters.","lastModifiedDate":"2023-10-03"},{"lineNumber":635,"author":{"gitId":"lihongguang00"},"content":"3. UniMate updates the person at specified index with new parameters.","lastModifiedDate":"2023-10-03"},{"lineNumber":636,"author":{"gitId":"lihongguang00"},"content":"   Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":637,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":638,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":639,"author":{"gitId":"lihongguang00"},"content":"**Extensions**","lastModifiedDate":"2023-10-03"},{"lineNumber":640,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":641,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":642,"author":{"gitId":"nicrandomlee"},"content":"* 2a. The given index is invalid.","lastModifiedDate":"2023-10-29"},{"lineNumber":643,"author":{"gitId":"nicrandomlee"},"content":"    * 2a1. UniMate displays an error message.","lastModifiedDate":"2023-10-29"},{"lineNumber":644,"author":{"gitId":"lihongguang00"},"content":"      Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":645,"author":{"gitId":"nicrandomlee"},"content":"* 2b. The given parameters are invalid.","lastModifiedDate":"2023-10-29"},{"lineNumber":646,"author":{"gitId":"nicrandomlee"},"content":"    * 2b1. UniMate displays an error message.","lastModifiedDate":"2023-10-29"},{"lineNumber":647,"author":{"gitId":"lihongguang00"},"content":"      Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":648,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":649,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":650,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC6 Exit application**","lastModifiedDate":"2023-10-03"},{"lineNumber":651,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":652,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":653,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":654,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":655,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":656,"author":{"gitId":"lihongguang00"},"content":"1. User requests to exit the application.","lastModifiedDate":"2023-10-03"},{"lineNumber":657,"author":{"gitId":"lihongguang00"},"content":"2. UniMate closes the application.","lastModifiedDate":"2023-10-03"},{"lineNumber":658,"author":{"gitId":"lihongguang00"},"content":"   Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":659,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":660,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":661,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC7 Search by name**","lastModifiedDate":"2023-10-03"},{"lineNumber":662,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":663,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":664,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":665,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":666,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":667,"author":{"gitId":"lihongguang00"},"content":"1. User requests to search persons by specified keywords","lastModifiedDate":"2023-10-03"},{"lineNumber":668,"author":{"gitId":"lihongguang00"},"content":"2. UniMate displays persons with names that match keywords","lastModifiedDate":"2023-10-03"},{"lineNumber":669,"author":{"gitId":"lihongguang00"},"content":"   Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":670,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":671,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":672,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":673,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC8 View events**","lastModifiedDate":"2023-10-03"},{"lineNumber":674,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":675,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":676,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":677,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":678,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":679,"author":{"gitId":"lihongguang00"},"content":"1. User requests to view events.","lastModifiedDate":"2023-10-03"},{"lineNumber":680,"author":{"gitId":"lihongguang00"},"content":"2. UniMate displays all events.","lastModifiedDate":"2023-10-03"},{"lineNumber":681,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":682,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":683,"author":{"gitId":"lihongguang00"},"content":"Use Case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":684,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":685,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":686,"author":{"gitId":"nicrandomlee"},"content":"**Extensions**","lastModifiedDate":"2023-10-29"},{"lineNumber":687,"author":{"gitId":"nicrandomlee"},"content":"* 2a. There are no events recorded.","lastModifiedDate":"2023-10-29"},{"lineNumber":688,"author":{"gitId":"lihongguang00"},"content":"  2a1. Unimate displays a message indicating that there are no events.","lastModifiedDate":"2023-10-03"},{"lineNumber":689,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":690,"author":{"gitId":"lihongguang00"},"content":"  Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":691,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":692,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":693,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC9 Add an event**","lastModifiedDate":"2023-10-03"},{"lineNumber":694,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":695,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":696,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":697,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":698,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":699,"author":{"gitId":"lihongguang00"},"content":"1. User requests to add an event.","lastModifiedDate":"2023-10-03"},{"lineNumber":700,"author":{"gitId":"lihongguang00"},"content":"2. UniMate adds the event.","lastModifiedDate":"2023-10-03"},{"lineNumber":701,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":702,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":703,"author":{"gitId":"lihongguang00"},"content":"Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":704,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":705,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":706,"author":{"gitId":"nicrandomlee"},"content":"**Extensions**","lastModifiedDate":"2023-10-29"},{"lineNumber":707,"author":{"gitId":"nicrandomlee"},"content":"*  2a. UniMate detects a conflict with an existing event.","lastModifiedDate":"2023-10-29"},{"lineNumber":708,"author":{"gitId":"lihongguang00"},"content":"   2a1. UniMate shows conflicted timings and requests to modify one of the timings.","lastModifiedDate":"2023-10-03"},{"lineNumber":709,"author":{"gitId":"lihongguang00"},"content":"   2a2. User modifies the timing and submits the new timings.","lastModifiedDate":"2023-10-03"},{"lineNumber":710,"author":{"gitId":"lihongguang00"},"content":"   Steps 2a1 and 2a2 are repeated until there are no conflicts in timings.","lastModifiedDate":"2023-10-03"},{"lineNumber":711,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":712,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":713,"author":{"gitId":"lihongguang00"},"content":"    Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":714,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":715,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":716,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC10 Delete an event**","lastModifiedDate":"2023-10-03"},{"lineNumber":717,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":718,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":719,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":720,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":721,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":722,"author":{"gitId":"lihongguang00"},"content":"1. User requests to view events.(UC 8)","lastModifiedDate":"2023-10-03"},{"lineNumber":723,"author":{"gitId":"lihongguang00"},"content":"2. User requests to delete an event.","lastModifiedDate":"2023-10-03"},{"lineNumber":724,"author":{"gitId":"lihongguang00"},"content":"3. UniMate deletes the event.","lastModifiedDate":"2023-10-03"},{"lineNumber":725,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":726,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":727,"author":{"gitId":"lihongguang00"},"content":"Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":728,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":729,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":730,"author":{"gitId":"nicrandomlee"},"content":"**Extensions**","lastModifiedDate":"2023-10-29"},{"lineNumber":731,"author":{"gitId":"nicrandomlee"},"content":"* 2a. Event does not exist.","lastModifiedDate":"2023-10-29"},{"lineNumber":732,"author":{"gitId":"nicrandomlee"},"content":"  2a1. UniMate shows an error message.","lastModifiedDate":"2023-10-26"},{"lineNumber":733,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":734,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":735,"author":{"gitId":"lihongguang00"},"content":"    Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":736,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":737,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":738,"author":{"gitId":"lihongguang00"},"content":"**Use case: UC11 Edit an event**","lastModifiedDate":"2023-10-03"},{"lineNumber":739,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":740,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":741,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":742,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":743,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":744,"author":{"gitId":"lihongguang00"},"content":"1. User requests to view events. (UC 8)","lastModifiedDate":"2023-10-03"},{"lineNumber":745,"author":{"gitId":"lihongguang00"},"content":"2. User requests to edit an event.","lastModifiedDate":"2023-10-03"},{"lineNumber":746,"author":{"gitId":"lihongguang00"},"content":"3. Unimate edits the event.","lastModifiedDate":"2023-10-03"},{"lineNumber":747,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":748,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":749,"author":{"gitId":"nicrandomlee"},"content":"**Extensions**","lastModifiedDate":"2023-10-29"},{"lineNumber":750,"author":{"gitId":"nicrandomlee"},"content":"* 2a. Event does not exist.","lastModifiedDate":"2023-10-29"},{"lineNumber":751,"author":{"gitId":"nicrandomlee"},"content":"  2a1. UniMate shows an error message.","lastModifiedDate":"2023-10-26"},{"lineNumber":752,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":753,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":754,"author":{"gitId":"lihongguang00"},"content":"    Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":755,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":756,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":757,"author":{"gitId":"nicrandomlee"},"content":"*  3a. UniMate detects a conflict with an existing event.","lastModifiedDate":"2023-10-29"},{"lineNumber":758,"author":{"gitId":"lihongguang00"},"content":"   3a1. UniMate shows conflicted timings and requests to modify one of the timings.","lastModifiedDate":"2023-10-03"},{"lineNumber":759,"author":{"gitId":"lihongguang00"},"content":"   3a2. User modifies the timing and submits the new timings.","lastModifiedDate":"2023-10-03"},{"lineNumber":760,"author":{"gitId":"lihongguang00"},"content":"   Steps 3a1 and 3a2 are repeated until there are no conflicts in timings.","lastModifiedDate":"2023-10-03"},{"lineNumber":761,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":762,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":763,"author":{"gitId":"lihongguang00"},"content":"    Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":764,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":765,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":766,"author":{"gitId":"Fallman2"},"content":"**Use case: UC12 Filter by fields.**","lastModifiedDate":"2023-10-14"},{"lineNumber":767,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":768,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":769,"author":{"gitId":"lihongguang00"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":770,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":771,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":772,"author":{"gitId":"Fallman2"},"content":"1. User requests to list persons with specific words in specific fields.","lastModifiedDate":"2023-10-14"},{"lineNumber":773,"author":{"gitId":"Fallman2"},"content":"2. UniMate displays persons matching all provided keywords in specified fields and the number of people matching all","lastModifiedDate":"2023-10-14"},{"lineNumber":774,"author":{"gitId":"Fallman2"},"content":"   specified fields.","lastModifiedDate":"2023-10-14"},{"lineNumber":775,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":776,"author":{"gitId":"lihongguang00"},"content":"   Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":777,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":778,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":779,"author":{"gitId":"lihongguang00"},"content":"**Extensions**","lastModifiedDate":"2023-10-03"},{"lineNumber":780,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":781,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":782,"author":{"gitId":"nicrandomlee"},"content":"* 2a. There are no persons matching the specified keywords","lastModifiedDate":"2023-10-29"},{"lineNumber":783,"author":{"gitId":"nicrandomlee"},"content":"    * UniMate displays a message that 0 people have been displayed.","lastModifiedDate":"2023-10-29"},{"lineNumber":784,"author":{"gitId":"nicrandomlee"},"content":"      Use case ends.","lastModifiedDate":"2023-10-26"},{"lineNumber":785,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":786,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":787,"author":{"gitId":"nicrandomlee"},"content":"**Use case: UC13 Sort by fields.**","lastModifiedDate":"2023-10-26"},{"lineNumber":788,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":789,"author":{"gitId":"nicrandomlee"},"content":"**MSS**","lastModifiedDate":"2023-10-26"},{"lineNumber":790,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":791,"author":{"gitId":"nicrandomlee"},"content":"1. User requests to sort persons","lastModifiedDate":"2023-10-26"},{"lineNumber":792,"author":{"gitId":"nicrandomlee"},"content":"2. UniMate displays persons in specified order and by specified parameter","lastModifiedDate":"2023-10-26"},{"lineNumber":793,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":794,"author":{"gitId":"lihongguang00"},"content":"   Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":795,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":796,"author":{"gitId":"nicrandomlee"},"content":"**Extensions**","lastModifiedDate":"2023-10-26"},{"lineNumber":797,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":798,"author":{"gitId":"nicrandomlee"},"content":"- 1a. User uses the wrong delimiter or makes a spelling mistake, or provides incorrect number of arguments","lastModifiedDate":"2023-10-29"},{"lineNumber":799,"author":{"gitId":"nicrandomlee"},"content":"    - UniMate displays a message to show a helper message outlining the correct syntax and available sort options","lastModifiedDate":"2023-10-29"},{"lineNumber":800,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":801,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":802,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":803,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":804,"author":{"gitId":"lihongguang00"},"content":"2.  Should be able to hold up to 200 events without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2023-10-03"},{"lineNumber":805,"author":{"gitId":"lihongguang00"},"content":"3.  Calendar should have a combined 1 academic year look forward and look back period (In AY22/23, can look through calendar for this academic year)","lastModifiedDate":"2023-10-03"},{"lineNumber":806,"author":{"gitId":"lihongguang00"},"content":"4. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2023-10-03"},{"lineNumber":807,"author":{"gitId":"lihongguang00"},"content":"5. Calendar should be able to check if there are any event timing conflicts within 1 second","lastModifiedDate":"2023-10-03"},{"lineNumber":808,"author":{"gitId":"lihongguang00"},"content":"6. System should be easily picked up by a freshman at NUS with just the application\u0027s website","lastModifiedDate":"2023-10-03"},{"lineNumber":809,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":810,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":811,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2023-10-29"},{"lineNumber":812,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":813,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":814,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":815,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2023-10-29"},{"lineNumber":816,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2023-10-29"},{"lineNumber":817,"author":{"gitId":"nicrandomlee"},"content":"* * **Event**: An activity to be marked on the calendar with a specified time frame.","lastModifiedDate":"2023-10-29"},{"lineNumber":818,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":819,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-29"},{"lineNumber":820,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":821,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":822,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":823,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":824,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":825,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":826,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":827,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":828,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2023-10-29"},{"lineNumber":829,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":830,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":831,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":832,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":833,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":834,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":835,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":836,"author":{"gitId":"-"},"content":"    1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":837,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":838,"author":{"gitId":"-"},"content":"    1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":839,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":840,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":841,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":842,"author":{"gitId":"-"},"content":"    1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":843,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":844,"author":{"gitId":"-"},"content":"    1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":845,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":846,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":847,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":848,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":849,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":850,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":851,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":852,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":853,"author":{"gitId":"-"},"content":"    1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":854,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":855,"author":{"gitId":"-"},"content":"    1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":856,"author":{"gitId":"-"},"content":"       Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":857,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":858,"author":{"gitId":"-"},"content":"    1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":859,"author":{"gitId":"-"},"content":"       Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":860,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":861,"author":{"gitId":"-"},"content":"    1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":862,"author":{"gitId":"-"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":863,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":864,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":865,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":866,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":867,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":868,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":869,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":870,"author":{"gitId":"-"},"content":"    1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":871,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":872,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"nicrandomlee":247,"lihongguang00":250,"Fallman2":4,"-":371}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"UniMate is a desktop app for students to **manage contacts** and **manage schedules** optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, UniMate can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2023-09-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"1. Download the latest `UniMate.jar` from [here](https://github.com/se-edu/addressbook-level3/releases).","lastModifiedDate":"2023-09-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for UniMate.","lastModifiedDate":"2023-09-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar UniMate.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-09-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   * `list` : Lists all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2023-01-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * `delete 3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2023-01-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * `clear` : Deletes all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"**Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2023-06-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"## Contact Management","lastModifiedDate":"2023-09-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"Adds a person to the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"**Tip:** A person can have any number of tags (including 0)","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"### Listing all persons : `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"### Locating persons by tag: `filter`","lastModifiedDate":"2023-09-26"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"Finds persons whose fields contain any of the given keywords.","lastModifiedDate":"2023-10-14"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"Format: `filter [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2023-10-14"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"* Filter is case-insensitive. e.g. `cs2103` will match `CS2103`","lastModifiedDate":"2023-09-26"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"* The order of the fields does not matter.","lastModifiedDate":"2023-10-14"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"* All provided fields are searched","lastModifiedDate":"2023-10-14"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"* All tags containing the words will be matched e.g. `Ba` will return `Badminton` or `Basketball` or `Football` or `Backgammon`.","lastModifiedDate":"2023-09-26"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"* Only persons matching all specified fields will be returned (i.e. `and` search).","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"Examples:","lastModifiedDate":"2023-09-26"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"* `filter t/CS2103` - Displays all contacts with the CS2103 tag or tags containing ``CS2103`` e.g. CS2103T","lastModifiedDate":"2023-10-14"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"* `filter t/MA2116 t/CS1010S n/John e/@u.nus.edu` - Displays all contacts with the ``MA2116`` and ``CS1010S`` tags as well as","lastModifiedDate":"2023-10-14"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"with a name containing ``John`` and an email address with the domain ``u.nus.edu``","lastModifiedDate":"2023-10-14"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"nicrandomlee"},"content":"### Sort persons : `sort`","lastModifiedDate":"2023-10-29"},{"lineNumber":165,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":166,"author":{"gitId":"nicrandomlee"},"content":"* Sorts all persons by specified `comparator`.","lastModifiedDate":"2023-10-29"},{"lineNumber":167,"author":{"gitId":"nicrandomlee"},"content":"* The comparator refers to the attribute(s) provided for the basis to sort. ","lastModifiedDate":"2023-10-29"},{"lineNumber":168,"author":{"gitId":"nicrandomlee"},"content":"* Sorting is done in ascending order by default. To sort by descending order, the keyword `reverse` can be used (see Examples below).","lastModifiedDate":"2023-10-29"},{"lineNumber":169,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":170,"author":{"gitId":"nicrandomlee"},"content":"Examples:","lastModifiedDate":"2023-10-29"},{"lineNumber":171,"author":{"gitId":"nicrandomlee"},"content":"* `sort /byname` sorts all contacts in UniMate address book by the full name of `Person`","lastModifiedDate":"2023-10-29"},{"lineNumber":172,"author":{"gitId":"nicrandomlee"},"content":"* `sort /byaddress /reverse` sorts all contacts in UniMate address book by the address of `Person`","lastModifiedDate":"2023-10-29"},{"lineNumber":173,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"Fallman2"},"content":"## Calendar System","lastModifiedDate":"2023-09-26"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"### Adding an event","lastModifiedDate":"2023-10-15"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"Adds an event to the user\u0027s calendar.","lastModifiedDate":"2023-09-26"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"Format: `addEvent d/DESCRIPTION ts/START_DATE_TIME ts/END_DATE_TIME`","lastModifiedDate":"2023-10-15"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"* Adds the event starting from `START_DATE_TIME` and ending at `END_DATE_TIME`","lastModifiedDate":"2023-10-15"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"* `START_DATE_TIME` and `END_DATE_TIME` must be in `yyyy-MM-dd HH:mm` format","lastModifiedDate":"2023-10-15"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"Example:","lastModifiedDate":"2023-09-26"},{"lineNumber":198,"author":{"gitId":"Fallman2"},"content":"* `addEvent Cry about deadlines d/12/12/2012 s/2200 e/2359`","lastModifiedDate":"2023-09-26"},{"lineNumber":199,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":200,"author":{"gitId":"Fallman2"},"content":"### Deleting an event (Coming Soon)","lastModifiedDate":"2023-09-26"},{"lineNumber":201,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":202,"author":{"gitId":"Fallman2"},"content":"Deletes an event from the user\u0027s calendar.","lastModifiedDate":"2023-09-26"},{"lineNumber":203,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":204,"author":{"gitId":"Fallman2"},"content":"Format `deleteEvent d/DATE s/START_TIME`","lastModifiedDate":"2023-09-26"},{"lineNumber":205,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":206,"author":{"gitId":"Fallman2"},"content":"* Deletes an event starting from `START_TIME` on `DATE`","lastModifiedDate":"2023-09-26"},{"lineNumber":207,"author":{"gitId":"Fallman2"},"content":"* If there is no event starting at `START_TIME`, an error will be returned","lastModifiedDate":"2023-09-26"},{"lineNumber":208,"author":{"gitId":"Fallman2"},"content":"* `START_TIME` must be in 24 hour notation","lastModifiedDate":"2023-09-26"},{"lineNumber":209,"author":{"gitId":"Fallman2"},"content":"* `DATE` must be in the format `DD/MM/YYYY`","lastModifiedDate":"2023-09-26"},{"lineNumber":210,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":211,"author":{"gitId":"Fallman2"},"content":"Example:","lastModifiedDate":"2023-09-26"},{"lineNumber":212,"author":{"gitId":"Fallman2"},"content":"`deleteEvent d/12/12/2012 s/2200`","lastModifiedDate":"2023-09-26"},{"lineNumber":213,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":214,"author":{"gitId":"Fallman2"},"content":"### Viewing all events (Coming Soon)","lastModifiedDate":"2023-09-26"},{"lineNumber":215,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":216,"author":{"gitId":"Fallman2"},"content":"Opens a view of all events currently stored in the calendar.","lastModifiedDate":"2023-09-26"},{"lineNumber":217,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":218,"author":{"gitId":"Fallman2"},"content":"Format: `viewEvents`","lastModifiedDate":"2023-09-26"},{"lineNumber":219,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":220,"author":{"gitId":"Fallman2"},"content":"## Miscellaneous","lastModifiedDate":"2023-09-26"},{"lineNumber":221,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":222,"author":{"gitId":"Fallman2"},"content":"### Force saving all contacts and events","lastModifiedDate":"2023-09-26"},{"lineNumber":223,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":224,"author":{"gitId":"Fallman2"},"content":"Forces a save of all current contacts and events iin the program.","lastModifiedDate":"2023-09-26"},{"lineNumber":225,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":226,"author":{"gitId":"Fallman2"},"content":"Format: `save`","lastModifiedDate":"2023-09-26"},{"lineNumber":227,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":228,"author":{"gitId":"Fallman2"},"content":"* All data is also saved in the hard disk automatically when the program is closed.","lastModifiedDate":"2023-09-26"},{"lineNumber":229,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":236,"author":{"gitId":"-"},"content":"AddressBook data are saved automatically as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2023-09-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":240,"author":{"gitId":"-"},"content":"**Caution:**","lastModifiedDate":"2023-09-12"},{"lineNumber":241,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.  Hence, it is recommended to take a backup of the file before editing it.","lastModifiedDate":"2023-09-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":244,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"Fallman2"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous UniMate home folder.","lastModifiedDate":"2023-09-26"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"Action     | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-12"},{"lineNumber":267,"author":{"gitId":"-"},"content":"**Add**    | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"**Clear**  | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"Fallman2"},"content":"**Filter** | `filter TAG [MORE_TAGS]` \u003cbr\u003e e.g., `filter CSGOD CS2103`","lastModifiedDate":"2023-09-26"},{"lineNumber":273,"author":{"gitId":"-"},"content":"**List** | `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"lihongguang00"},"content":"**addEvent** | `addEvent d/DESCRIPTION ts/START_DATE_TIME te/END_DATE_TIME` \u003cbr\u003e e.g., `addEvent d/Cry about deadlines ts/2023-01-01 00:01 te/2023-12-31 23:59`","lastModifiedDate":"2023-10-15"},{"lineNumber":276,"author":{"gitId":"Fallman2"},"content":"**deleteEvent** | `deleteEvent d/DATE s/START_TIME` \u003cbr\u003e e.g., `deleteEvent d/12/12/2012 s/2200`","lastModifiedDate":"2023-09-26"},{"lineNumber":277,"author":{"gitId":"Fallman2"},"content":"**viewEvents** | `viewEvents`","lastModifiedDate":"2023-09-26"}],"authorContributionMap":{"Fallman2":66,"nicrandomlee":10,"lihongguang00":5,"-":196}},{"path":"docs/_markbind/layouts/default.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003chead-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003clink rel\u003d\"stylesheet\" href\u003d\"{{baseUrl}}/stylesheets/main.css\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c/head-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cheader sticky\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \u003cnavbar type\u003d\"dark\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"    \u003ca slot\u003d\"brand\" href\u003d\"{{baseUrl}}/index.html\" title\u003d\"Home\" class\u003d\"navbar-brand\"\u003eUniMate\u003c/a\u003e","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/UserGuide.html\" class\u003d\"nav-link\"\u003eUser Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/DeveloperGuide.html\" class\u003d\"nav-link\"\u003eDeveloper Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/AboutUs.html\" class\u003d\"nav-link\"\u003eAbout Us\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"    \u003cli\u003e\u003ca href\u003d\"https://github.com/AY2324S1-CS2103-F13-4/tp\" target\u003d\"_blank\" class\u003d\"nav-link\"\u003e\u003cmd\u003e:fab-github:\u003c/md\u003e\u003c/a\u003e","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cli slot\u003d\"right\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003cform class\u003d\"navbar-form\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003csearchbar :data\u003d\"searchData\" placeholder\u003d\"Search\" :on-hit\u003d\"searchCallback\" menu-align-right\u003e\u003c/searchbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003c/form\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/navbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/header\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"flex-body\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"site-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"site-nav-top\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"fw-bold mb-2\" style\u003d\"font-size: 1.25rem;\"\u003eSite Map\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003csite-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* [Home]({{ baseUrl }}/index.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* [User Guide]({{ baseUrl }}/UserGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * [Quick Start]({{ baseUrl }}/UserGuide.html#quick-start)","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  * [Features]({{ baseUrl }}/UserGuide.html#features)","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * [FAQ]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * [Command Summary]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"* [Developer Guide]({{ baseUrl }}/DeveloperGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  * [Acknowledgements]({{ baseUrl }}/DeveloperGuide.html#acknowledgements)","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  * [Setting Up]({{ baseUrl }}/DeveloperGuide.html#setting-up-getting-started)","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * [Design]({{ baseUrl }}/DeveloperGuide.html#design)","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * [Implementation]({{ baseUrl }}/DeveloperGuide.html#implementation)","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * [Documentation, logging, testing, configuration, dev-ops]({{ baseUrl }}/DeveloperGuide.html#documentation-logging-testing-configuration-dev-ops)","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * [Appendix: Requirements]({{ baseUrl }}/DeveloperGuide.html#appendix-requirements)","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * [Appendix: Instructions for manual testing]({{ baseUrl }}/DeveloperGuide.html#appendix-instructions-for-manual-testing)","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Tutorials","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * [Tracing code]({{ baseUrl }}/tutorials/TracingCode.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * [Adding a command]({{ baseUrl }}/tutorials/AddRemark.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  * [Removing Fields]({{ baseUrl }}/tutorials/RemovingFields.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [About Us]({{ baseUrl }}/AboutUs.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003c/site-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  \u003cdiv id\u003d\"content-wrapper\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    {{ content }}","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"page-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      \u003cpage-nav /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \u003cscroll-top-button\u003e\u003c/scroll-top-button\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003cfooter\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  \u003c!-- Support MarkBind by including a link to us on your landing page! --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"text-center\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003csmall\u003e[\u003cmd\u003e**Powered by**\u003c/md\u003e \u003cimg src\u003d\"https://markbind.org/favicon.ico\" width\u003d\"30\"\u003e {{MarkBind}}, generated on {{timestamp}}]\u003c/small\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c/footer\u003e","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"junhonglow":2,"-":64}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"title: UniMate","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"[![Java CI](https://github.com/AY2324S1-CS2103-F13-4/tp/actions/workflows/gradle.yml/badge.svg?branch\u003dmaster)](https://github.com/AY2324S1-CS2103-F13-4/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"[![codecov](https://codecov.io/gh/AY2324S1-CS2103-F13-4/tp/graph/badge.svg?token\u003d4OY8ODQQBU)](https://codecov.io/gh/AY2324S1-CS2103-F13-4/tp)","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"**UniMate is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"* If you are interested in using UniMate, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"* If you are interested about developing UniMate, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"junhonglow":6,"-":12}},{"path":"docs/team/fallman2.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"---","lastModifiedDate":"2023-09-26"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"layout: page","lastModifiedDate":"2023-09-26"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"title: Andre Sim\u0027s Project Portfolio Page","lastModifiedDate":"2023-09-26"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"---","lastModifiedDate":"2023-09-26"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"### Project: UniMate","lastModifiedDate":"2023-09-26"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"UniMate is a desktop address book application used for managing contacts and calendars. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java.","lastModifiedDate":"2023-09-26"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-09-26"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"* **New Feature**: `to be added soon,`","lastModifiedDate":"2023-09-26"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"    * What it does: `to be added soon,`","lastModifiedDate":"2023-09-26"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    * Justification: `to be added soon,`","lastModifiedDate":"2023-09-26"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    * Highlights: `to be added soon,`","lastModifiedDate":"2023-09-26"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    * Credits: `to be added soon,`","lastModifiedDate":"2023-09-26"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2023-09-26"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-09-26"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"* **Project management**:","lastModifiedDate":"2023-09-26"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2023-09-26"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-09-26"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    * `to be added soon,`","lastModifiedDate":"2023-09-26"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    * `to be added soon,`","lastModifiedDate":"2023-09-26"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"* **Documentation**:","lastModifiedDate":"2023-09-26"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    * User Guide:","lastModifiedDate":"2023-09-26"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        * Added documentation for the features `filter`, `addEvent` and `deleteEvent` [\\#72]()","lastModifiedDate":"2023-09-26"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    * Developer Guide:","lastModifiedDate":"2023-09-26"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        * `to be added soon,`","lastModifiedDate":"2023-09-26"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"* **Community**:","lastModifiedDate":"2023-09-26"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#2](https://github.com/AY2324S1-CS2103-F13-4/tp/pull/2).","lastModifiedDate":"2023-09-26"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    * Contributed to forum discussions (examples: `to be added soon,`)","lastModifiedDate":"2023-09-26"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: `to be added soon,`)","lastModifiedDate":"2023-09-26"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-09-26"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"* **Tools**:","lastModifiedDate":"2023-09-26"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    * `to be added soon,`","lastModifiedDate":"2023-09-26"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    * `to be added soon,`","lastModifiedDate":"2023-09-26"}],"authorContributionMap":{"Fallman2":42}},{"path":"docs/team/junhonglow.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2023-10-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: John Doe\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"### Project: UniMate","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"UniMate is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-10-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"* **New Feature**: To be determined","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2023-10-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2023-10-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code\u0026since\u003d2023-09-22\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003djunhonglow\u0026zR\u003dAY2324S1-CS2103-F13-4%2Ftp%5Bmaster%5D\u0026zACS\u003d104.16170212765958\u0026zS\u003d2023-09-22\u0026zFS\u003d\u0026zU\u003d2023-10-05\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)","lastModifiedDate":"2023-10-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2023-10-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2023-10-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2023-10-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2023-10-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2023-10-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2023-10-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2023-10-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2023-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2023-10-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2023-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2023-10-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2023-10-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2023-10-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"junhonglow":4,"-":42}},{"path":"docs/team/lihongguang00.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"  title: \"Hongguang\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"### Project: UniMate","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"UniMate is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"* **New Feature**: To be determined","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD:docs/team/junhonglow.md","lastModifiedDate":"2023-10-15"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code\u0026since\u003d2023-09-22\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003djunhonglow\u0026zR\u003dAY2324S1-CS2103-F13-4%2Ftp%5Bmaster%5D\u0026zACS\u003d104.16170212765958\u0026zS\u003d2023-09-22\u0026zFS\u003d\u0026zU\u003d2023-10-05\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)","lastModifiedDate":"2023-10-15"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dlihongguang00%20\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code\u0026since\u003d2023-09-22\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003dlihongguang00\u0026tabRepo\u003dAY2324S1-CS2103-F13-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026authorshipIsIgnoredFilesChecked\u003dfalse)","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Merge-Conflict:docs/team/lihongguang00.md","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"lihongguang00":9,"-":41}},{"path":"docs/team/nicrandomlee.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"---","lastModifiedDate":"2023-09-27"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"layout: page","lastModifiedDate":"2023-09-27"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"title: Nicholas Lee\u0027s Project Portfolio Page","lastModifiedDate":"2023-09-27"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"---","lastModifiedDate":"2023-09-27"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2023-09-27"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-09-27"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-09-27"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"- **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2023-09-27"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"  - What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2023-09-27"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"  - Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2023-09-27"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"  - Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2023-09-27"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"  - Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_","lastModifiedDate":"2023-09-27"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"- **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2023-09-27"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"- **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-09-27"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"- **Project management**:","lastModifiedDate":"2023-09-27"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"  - Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2023-09-27"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2023-09-27"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"  - Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2023-09-27"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"  - Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2023-09-27"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"- **Documentation**:","lastModifiedDate":"2023-09-27"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"  - User Guide:","lastModifiedDate":"2023-09-27"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"    - Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2023-09-27"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"    - Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2023-09-27"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"  - Developer Guide:","lastModifiedDate":"2023-09-27"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"    - Added implementation details of the `delete` feature.","lastModifiedDate":"2023-09-27"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"- **Community**:","lastModifiedDate":"2023-09-27"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"  - PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2023-09-27"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"  - Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2023-09-27"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"  - Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2023-09-27"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"  - Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2023-09-27"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"- **Tools**:","lastModifiedDate":"2023-09-27"},{"lineNumber":48,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":49,"author":{"gitId":"nicrandomlee"},"content":"  - Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2023-09-27"},{"lineNumber":50,"author":{"gitId":"nicrandomlee"},"content":"  - Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2023-09-27"},{"lineNumber":51,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":52,"author":{"gitId":"nicrandomlee"},"content":"- _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-09-27"}],"authorContributionMap":{"nicrandomlee":52}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.util.SampleCalendarUtil;","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"import seedu.address.storage.CalendarStorage;","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"import seedu.address.storage.JsonCalendarStorage;","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 2, true);","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2023-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"        CalendarStorage calendarStorage \u003d new JsonCalendarStorage(userPrefs.getCalendarFilePath());","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"        storage \u003d new StorageManager(addressBookStorage, calendarStorage, userPrefsStorage);","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"Using data file : \" + storage.getAddressBookFilePath());","lastModifiedDate":"2023-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"junhonglow"},"content":"        ReadOnlyAddressBook addressBookInitialData;","lastModifiedDate":"2023-10-19"},{"lineNumber":86,"author":{"gitId":"junhonglow"},"content":"        Optional\u003cReadOnlyCalendar\u003e calendarOptional;","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"junhonglow"},"content":"        ReadOnlyCalendar calendarInitialData;","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                logger.info(\"Creating a new data file \" + storage.getAddressBookFilePath()","lastModifiedDate":"2023-05-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                        + \" populated with a sample AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"junhonglow"},"content":"            addressBookInitialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"junhonglow"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"junhonglow"},"content":"            logger.warning(\"Data file at \" + storage.getAddressBookFilePath() + \" could not be loaded.\"","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"junhonglow"},"content":"                    + \" Will be starting with an empty AddressBook.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"junhonglow"},"content":"            addressBookInitialData \u003d new AddressBook();","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"junhonglow"},"content":"        try {","lastModifiedDate":"2023-10-19"},{"lineNumber":103,"author":{"gitId":"junhonglow"},"content":"            calendarOptional \u003d storage.readCalendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":104,"author":{"gitId":"junhonglow"},"content":"            if (!calendarOptional.isPresent()) {","lastModifiedDate":"2023-10-19"},{"lineNumber":105,"author":{"gitId":"junhonglow"},"content":"                logger.info(\"Creating a new data file \" + storage.getCalendarFilePath()","lastModifiedDate":"2023-10-19"},{"lineNumber":106,"author":{"gitId":"junhonglow"},"content":"                        + \" populated with a sample Calendar.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"junhonglow"},"content":"            }","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"junhonglow"},"content":"            calendarInitialData \u003d calendarOptional.orElseGet(SampleCalendarUtil::getSampleCalendar);","lastModifiedDate":"2023-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file at \" + storage.getAddressBookFilePath() + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                    + \" Will be starting with an empty AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":112,"author":{"gitId":"junhonglow"},"content":"            calendarInitialData \u003d new Calendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"junhonglow"},"content":"        return new ModelManager(addressBookInitialData, calendarInitialData, userPrefs);","lastModifiedDate":"2023-10-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            if (!configOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new config file \" + configFilePathUsed);","lastModifiedDate":"2023-05-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                    + \" Using default config properties.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        logger.info(\"Using preference file : \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            if (!prefsOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new preference file \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.warning(\"Preference file at \" + prefsFilePath + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                    + \" Using default preferences.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junhonglow":27,"-":181}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     * Returns the Calendar.","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     * @return the Calendar.","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    ReadOnlyCalendar getCalendar();","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    /** Returns an unmodifiable view of the filtered list of events */","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"    ObservableList\u003cEvent\u003e getEventList();","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    /** Returns an unmodifiable view of the filtered list of events for the week */","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    ObservableList\u003cEvent\u003e getCurrentWeekEventList();","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"junhonglow":3,"lihongguang00":12,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.parser.UniMateParser;","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-06-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    private final UniMateParser uniMateParser;","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        uniMateParser \u003d new UniMateParser();","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        Command command \u003d uniMateParser.parseCommand(commandText);","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"            storage.saveCalendar(model.getCalendar());","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        } catch (AccessDeniedException e) {","lastModifiedDate":"2023-06-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);","lastModifiedDate":"2023-06-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);","lastModifiedDate":"2023-06-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    public ReadOnlyCalendar getCalendar() {","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        return model.getCalendar();","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"        return model.getEventList();","lastModifiedDate":"2023-10-21"},{"lineNumber":80,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    public ObservableList\u003cEvent\u003e getCurrentWeekEventList() {","lastModifiedDate":"2023-10-25"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"        return model.getCurrentWeekEventList();","lastModifiedDate":"2023-10-25"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"junhonglow":7,"lihongguang00":15,"-":84}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    public static final String MESSAGE_INDEX_OUT_OF_BOUNDS \u003d \"Event index is out of bounds!\";","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    public static final String MESSAGE_DATE_CHANGE_SUCCESSFUL \u003d \"Successfully changed!\";","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    private static final String MESSAGE_EVENT_ADDED_SUCCESSFULLY \u003d \"Event added successfully!\";","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    private static final String MESSAGE_EVENT_TIMING_CONFLICT \u003d \"Conflicting timing!\";","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        builder.append(person.getName())","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .append(person.getPhone())","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .append(person.getEmail())","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .append(person.getAddress())","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .append(\"; Tags: \");","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        person.getTags().forEach(builder::append);","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     * Formats the event for display to the user.","lastModifiedDate":"2023-10-08"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-08"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be displayed.","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     * @return String of appropriate format.","lastModifiedDate":"2023-10-08"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    public static String format(Event event) {","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        builder.append(event.getDescription())","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"                .append(\"; \")","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"                .append(event.getEventPeriod());","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lihongguang00":18,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/AddContactEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE_TIME;","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE_TIME;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"import java.util.List;","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":" * Adds an event to the calendar of an existing person in the address book.","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"public class AddContactEventCommand extends Command {","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"    public static final String COMMAND_WORD \u003d \"addContactEvent\";","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the calendar of the person \"","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"            + \"identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"DESCRIPTION \"","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"            + PREFIX_EVENT_START_DATE_TIME + \"START DATE AND TIME \"","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"            + PREFIX_EVENT_END_DATE_TIME + \"END DATE AND TIME...\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"Nap \"","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"            + PREFIX_EVENT_START_DATE_TIME + \"2024-01-01 12:00 \"","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"            + PREFIX_EVENT_END_DATE_TIME + \"2024-01-01 18:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"    public static final String MESSAGE_ADD_EVENT_TO_PERSON_SUCCESS \u003d \"New event added to %s: %2$s\";","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"    public static final String MESSAGE_EVENT_CONFLICT \u003d \"This event is conflicting with another event\";","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"    private final Index index;","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"    private final Event event;","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"     * @param index of the person in the filtered person list to add an event to","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"     * @param event event to be added to the person","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"    public AddContactEventCommand(Index index, Event event) {","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"        this.event \u003d event;","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"junhonglow"},"content":"        //Obtain the calendar of the person and tries to add an event to the person\u0027s calendar","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"junhonglow"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"        Calendar calendar \u003d personToEdit.getCalendar();","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"        if (!calendar.canAddEvent(event)) {","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"            throw new CommandException(MESSAGE_EVENT_CONFLICT);","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"        calendar.addEvent(event);","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, calendar);","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"junhonglow"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-29"},{"lineNumber":81,"author":{"gitId":"junhonglow"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_EVENT_TO_PERSON_SUCCESS,","lastModifiedDate":"2023-10-29"},{"lineNumber":82,"author":{"gitId":"junhonglow"},"content":"                editedPerson.getName(), Messages.format(event)));","lastModifiedDate":"2023-10-29"},{"lineNumber":83,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":84,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":85,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":86,"author":{"gitId":"junhonglow"},"content":"     * Creates and returns a {@code Person} with the new Calendar {@code calendar}","lastModifiedDate":"2023-10-29"},{"lineNumber":87,"author":{"gitId":"junhonglow"},"content":"     * edited with {@code event}.","lastModifiedDate":"2023-10-29"},{"lineNumber":88,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"junhonglow"},"content":"    private static Person createEditedPerson(Person personToEdit, Calendar calendar) {","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"junhonglow"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":92,"author":{"gitId":"junhonglow"},"content":"        Name updatedName \u003d personToEdit.getName();","lastModifiedDate":"2023-10-29"},{"lineNumber":93,"author":{"gitId":"junhonglow"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();","lastModifiedDate":"2023-10-29"},{"lineNumber":94,"author":{"gitId":"junhonglow"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();","lastModifiedDate":"2023-10-29"},{"lineNumber":95,"author":{"gitId":"junhonglow"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();","lastModifiedDate":"2023-10-29"},{"lineNumber":96,"author":{"gitId":"junhonglow"},"content":"        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();","lastModifiedDate":"2023-10-29"},{"lineNumber":97,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":98,"author":{"gitId":"junhonglow"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, calendar);","lastModifiedDate":"2023-10-29"},{"lineNumber":99,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":101,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":102,"author":{"gitId":"junhonglow"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-29"},{"lineNumber":103,"author":{"gitId":"junhonglow"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-29"},{"lineNumber":104,"author":{"gitId":"junhonglow"},"content":"            return true;","lastModifiedDate":"2023-10-29"},{"lineNumber":105,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":106,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":107,"author":{"gitId":"junhonglow"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-29"},{"lineNumber":108,"author":{"gitId":"junhonglow"},"content":"        if (!(other instanceof AddContactEventCommand)) {","lastModifiedDate":"2023-10-29"},{"lineNumber":109,"author":{"gitId":"junhonglow"},"content":"            return false;","lastModifiedDate":"2023-10-29"},{"lineNumber":110,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":111,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":112,"author":{"gitId":"junhonglow"},"content":"        AddContactEventCommand otherAddContactEventCommand \u003d (AddContactEventCommand) other;","lastModifiedDate":"2023-10-29"},{"lineNumber":113,"author":{"gitId":"junhonglow"},"content":"        return index.equals(otherAddContactEventCommand.index)","lastModifiedDate":"2023-10-29"},{"lineNumber":114,"author":{"gitId":"junhonglow"},"content":"                \u0026\u0026 event.equals(otherAddContactEventCommand.event);","lastModifiedDate":"2023-10-29"},{"lineNumber":115,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":116,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":117,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":118,"author":{"gitId":"junhonglow"},"content":"    public String toString() {","lastModifiedDate":"2023-10-29"},{"lineNumber":119,"author":{"gitId":"junhonglow"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-29"},{"lineNumber":120,"author":{"gitId":"junhonglow"},"content":"                .add(\"index\", index)","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"junhonglow"},"content":"                .add(\"event\", event)","lastModifiedDate":"2023-10-29"},{"lineNumber":122,"author":{"gitId":"junhonglow"},"content":"                .toString();","lastModifiedDate":"2023-10-29"},{"lineNumber":123,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":124,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"junhonglow":124}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE_TIME;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE_TIME;","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":" * Adds an event to the calendar.","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    public static final String COMMAND_WORD \u003d \"addEvent\";","lastModifiedDate":"2023-10-09"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the calendar. \"","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"DESCRIPTION \"","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"            + PREFIX_EVENT_START_DATE_TIME + \"START DATE AND TIME \"","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"            + PREFIX_EVENT_END_DATE_TIME + \"END DATE AND TIME...\\n\"","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"            + PREFIX_EVENT_DESCRIPTION + \"Nap \"","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"            + PREFIX_EVENT_START_DATE_TIME + \"2024-01-01 12:00 \"","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"            + PREFIX_EVENT_END_DATE_TIME + \"2024-01-01 18:00\";","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    public static final String MESSAGE_EVENT_CONFLICT \u003d \"This event is conflicting with another event\";","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    private final Event toAdd;","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     * Creates an AddEventCommand to add the event into the calendar.","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be added.","lastModifiedDate":"2023-10-08"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    public AddEventCommand(Event event) {","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        toAdd \u003d event;","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        if (!model.canAddEvent(toAdd)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"            throw new CommandException(MESSAGE_EVENT_CONFLICT);","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        model.addEvent(toAdd);","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"            return true;","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        if (!(other instanceof AddEventCommand)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        AddEventCommand otherAddCommand \u003d (AddEventCommand) other;","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    public String toString() {","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"                .toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"lihongguang00":80}},{"path":"src/main/java/seedu/address/logic/commands/ClearEventsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE_TIME;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE_TIME;","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":" * Deletes all events within a time range in the calendar.","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":" * Also uses a confirmation check to ensure that events are not accidentally deleted","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"public class ClearEventsCommand extends Command {","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    public static final String COMMAND_WORD \u003d \"clearEvents\";","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes events within a time range from the calendar. \"","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_EVENT_START_DATE_TIME + \"START DATE AND TIME \"","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_EVENT_END_DATE_TIME + \"END DATE AND TIME\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_EVENT_START_DATE_TIME + \"2024-01-01 12:00 \"","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_EVENT_END_DATE_TIME + \"2024-01-01 18:00\";","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"The following events within the time period have been deleted:\\n\";","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    public static final String MESSAGE_NO_EVENTS \u003d \"There are no events within this time period.\";","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    public static final String MESSAGE_WITHIN_RANGE \u003d \"The following events are within the time period:\\n\";","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    public static final String MESSAGE_ADD_CONFIRMATION \u003d \"Reenter the command with [c/CONFIRMED] at the end to \"","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            + \"confirm deletion.\\n\";","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    public static final String COMMAND_RESEND_FORMAT \u003d \"clearEvents ts/%s te/%s c/CONFIRMED\";","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    private final EventPeriod clearPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    private final boolean isConfirmed;","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"     * Creates a ClearEventsCommand to delete all events within a time range from the calendar.","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"     * @param clearPeriod The time period for which to delete all events.","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"     * @param isConfirmed A boolean to check if the deletion is confirmed by the user.","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    public ClearEventsCommand(EventPeriod clearPeriod, boolean isConfirmed) {","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        requireAllNonNull(clearPeriod, isConfirmed);","lastModifiedDate":"2023-10-28"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        this.clearPeriod \u003d clearPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        this.isConfirmed \u003d isConfirmed;","lastModifiedDate":"2023-10-28"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        List\u003cEvent\u003e eventsInRange \u003d model.eventsInRange(clearPeriod);","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        if (eventsInRange.isEmpty()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"            throw new CommandException(MESSAGE_NO_EVENTS);","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        StringBuilder sb;","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        if (isConfirmed) {","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"            sb \u003d new StringBuilder(MESSAGE_SUCCESS);","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"            sb \u003d new StringBuilder(MESSAGE_WITHIN_RANGE);","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-10-28"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"        for (Event event:eventsInRange) {","lastModifiedDate":"2023-10-28"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"            sb.append(String.format(\"%d. %s\\n\", i, Messages.format(event)));","lastModifiedDate":"2023-10-28"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"            i++;","lastModifiedDate":"2023-10-28"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"        if (isConfirmed) {","lastModifiedDate":"2023-10-28"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"            model.deleteEventsInRange(clearPeriod);","lastModifiedDate":"2023-10-28"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        } else {","lastModifiedDate":"2023-10-28"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"            sb.append(MESSAGE_ADD_CONFIRMATION);","lastModifiedDate":"2023-10-28"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"            sb.append(String.format(COMMAND_RESEND_FORMAT,","lastModifiedDate":"2023-10-28"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"                    clearPeriod.getFormattedStart(),","lastModifiedDate":"2023-10-28"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"                    clearPeriod.getFormattedEnd()));","lastModifiedDate":"2023-10-28"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        return new CommandResult(sb.toString());","lastModifiedDate":"2023-10-28"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"            return true;","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"        if (!(other instanceof ClearEventsCommand)) {","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"            return false;","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"        ClearEventsCommand otherClearEventsCommand \u003d (ClearEventsCommand) other;","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"        boolean periodIsEqual \u003d clearPeriod.equals(otherClearEventsCommand.clearPeriod);","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"        boolean confirmationIsEqual \u003d isConfirmed \u003d\u003d otherClearEventsCommand.isConfirmed;","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"        return periodIsEqual \u0026\u0026 confirmationIsEqual;","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"                .add(\"toClearWithin\", clearPeriod)","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"                .add(\"confirmed\", isConfirmed)","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"                .toString();","lastModifiedDate":"2023-10-28"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"Fallman2":109}},{"path":"src/main/java/seedu/address/logic/commands/DeleteEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":" * Deletes an event from the calendar.","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"public class DeleteEventCommand extends Command {","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public static final String COMMAND_WORD \u003d \"deleteEvent\";","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an event from the calendar. \"","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"            + \"ANY TIME WITHIN EVENT DURATION \\n\"","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"            + \"2024-01-01 12:00 \";","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Event deleted: %1$s\";","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    public static final String MESSAGE_NO_EVENT \u003d \"There is no valid existing event at this timing.\";","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"    private final LocalDateTime eventTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"     * Creates a DeleteEventCommand to delete an event from the calendar.","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"     * @param eventTime time of the event to delete.","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    public DeleteEventCommand(LocalDateTime eventTime) {","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(eventTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        Event toDelete;","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"            toDelete \u003d model.findEventAt(eventTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"            model.deleteEventAt(eventTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        } catch (EventNotFoundException e) {","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"            throw new CommandException(MESSAGE_NO_EVENT);","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toDelete)));","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"            return true;","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"        if (!(other instanceof DeleteEventCommand)) {","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"            return false;","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        DeleteEventCommand otherDeleteCommand \u003d (DeleteEventCommand) other;","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        return eventTime.equals(otherDeleteCommand.eventTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"                .add(\"toDeleteAt\", eventTime)","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"                .toString();","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Fallman2":74}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":104,"author":{"gitId":"junhonglow"},"content":"        Calendar calendar \u003d personToEdit.getCalendar();","lastModifiedDate":"2023-10-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"junhonglow"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, calendar);","lastModifiedDate":"2023-10-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(address, otherEditPersonDescriptor.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(tags, otherEditPersonDescriptor.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                    .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                    .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"junhonglow":3,"-":241}},{"path":"src/main/java/seedu/address/logic/commands/FilterCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static java.util.Objects.nonNull;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":" * Filters contact list to display contacts matching specified criteria.","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"public class FilterCommand extends Command {","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose attributes contain any of \"","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_NAME + \"Hugh \"","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_PHONE + \"90 \"","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_EMAIL + \"@u.nus.edu \"","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_ADDRESS + \"123, Tengah Ave 6, #69-420 \"","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_TAG + \"CS2103 \"","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"            + PREFIX_TAG + \"CSGod\";","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    public static final String CONTACTS_NOT_FILTERED \u003d String.format(\"%s \\n%s\",","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"            \"At least one parameter is required to filter contacts.\", MESSAGE_USAGE);","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    private final PersonFilter personFilter;","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"     * Filters out all persons that do not match the filter criteria specified.","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"     * Field matching is case-insensitive","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"     * @param personFilter Details to filter people with","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"    public FilterCommand(PersonFilter personFilter) {","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(personFilter);","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        this.personFilter \u003d personFilter;","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        model.updateFilteredPersonList(personFilter::matchesFilter);","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        return new CommandResult(","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"            return true;","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"        if (!(other instanceof FilterCommand)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"            return false;","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"        FilterCommand otherFilterCommand \u003d (FilterCommand) other;","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"        return personFilter.equals(otherFilterCommand.personFilter);","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    public String toString() {","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"                .add(\"personFilter\", personFilter)","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"                .toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"     * Stores the details to filter the contacts by. Contacts will be filtered by each non-empty field .","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"    public static class PersonFilter {","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"        private String name;","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"        private String phone;","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"        private String email;","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"        private String address;","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"        public PersonFilter() {}","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"        /**","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"         * Creates a copy of a filter with the same parameters as another filter.","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"         *","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"         * @param toCopy The other filter to create a copy of.","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"         */","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"        public PersonFilter(PersonFilter toCopy) {","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"            setName(toCopy.name);","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"        /**","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"         */","lastModifiedDate":"2023-10-14"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2023-10-14"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2023-10-14"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"        public void setName(String name) {","lastModifiedDate":"2023-10-14"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"            this.name \u003d name;","lastModifiedDate":"2023-10-14"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"        public String getName() {","lastModifiedDate":"2023-10-14"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"            return name;","lastModifiedDate":"2023-10-14"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"        public void setPhone(String phone) {","lastModifiedDate":"2023-10-14"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2023-10-14"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"        public String getPhone() {","lastModifiedDate":"2023-10-14"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"            return phone;","lastModifiedDate":"2023-10-14"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"        public void setEmail(String email) {","lastModifiedDate":"2023-10-14"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"            this.email \u003d email;","lastModifiedDate":"2023-10-14"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"        public String getEmail() {","lastModifiedDate":"2023-10-14"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"            return email;","lastModifiedDate":"2023-10-14"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"        public void setAddress(String address) {","lastModifiedDate":"2023-10-14"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"            this.address \u003d address;","lastModifiedDate":"2023-10-14"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"        public String getAddress() {","lastModifiedDate":"2023-10-14"},{"lineNumber":150,"author":{"gitId":"Fallman2"},"content":"            return address;","lastModifiedDate":"2023-10-14"},{"lineNumber":151,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":152,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":153,"author":{"gitId":"Fallman2"},"content":"        /**","lastModifiedDate":"2023-10-14"},{"lineNumber":154,"author":{"gitId":"Fallman2"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2023-10-14"},{"lineNumber":155,"author":{"gitId":"Fallman2"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2023-10-14"},{"lineNumber":156,"author":{"gitId":"Fallman2"},"content":"         */","lastModifiedDate":"2023-10-14"},{"lineNumber":157,"author":{"gitId":"Fallman2"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-14"},{"lineNumber":158,"author":{"gitId":"Fallman2"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2023-10-14"},{"lineNumber":159,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":160,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":161,"author":{"gitId":"Fallman2"},"content":"        /**","lastModifiedDate":"2023-10-14"},{"lineNumber":162,"author":{"gitId":"Fallman2"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2023-10-14"},{"lineNumber":163,"author":{"gitId":"Fallman2"},"content":"         * if modification is attempted.","lastModifiedDate":"2023-10-14"},{"lineNumber":164,"author":{"gitId":"Fallman2"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2023-10-14"},{"lineNumber":165,"author":{"gitId":"Fallman2"},"content":"         */","lastModifiedDate":"2023-10-14"},{"lineNumber":166,"author":{"gitId":"Fallman2"},"content":"        public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2023-10-14"},{"lineNumber":167,"author":{"gitId":"Fallman2"},"content":"            return (tags !\u003d null) ? Collections.unmodifiableSet(tags) : null;","lastModifiedDate":"2023-10-14"},{"lineNumber":168,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"Fallman2"},"content":"        /**","lastModifiedDate":"2023-10-14"},{"lineNumber":171,"author":{"gitId":"Fallman2"},"content":"         * Predicate to test if a person passes the filter by matching all parameters.","lastModifiedDate":"2023-10-14"},{"lineNumber":172,"author":{"gitId":"Fallman2"},"content":"         *","lastModifiedDate":"2023-10-14"},{"lineNumber":173,"author":{"gitId":"Fallman2"},"content":"         * @param person The person to be tested.","lastModifiedDate":"2023-10-14"},{"lineNumber":174,"author":{"gitId":"Fallman2"},"content":"         * @return a boolean representing whether the person passed the filter.","lastModifiedDate":"2023-10-14"},{"lineNumber":175,"author":{"gitId":"Fallman2"},"content":"         */","lastModifiedDate":"2023-10-14"},{"lineNumber":176,"author":{"gitId":"Fallman2"},"content":"        public boolean matchesFilter(Person person) {","lastModifiedDate":"2023-10-14"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"            if (nonNull(name) \u0026\u0026 !person.getName().fullName.toLowerCase().contains(name.toLowerCase())) {","lastModifiedDate":"2023-10-14"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"                return false;","lastModifiedDate":"2023-10-14"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-14"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"            if (nonNull(phone) \u0026\u0026 !person.getPhone().value.contains(phone)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"                return false;","lastModifiedDate":"2023-10-14"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-14"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"            if (nonNull(email) \u0026\u0026 !person.getEmail().value.toLowerCase().contains(email.toLowerCase())) {","lastModifiedDate":"2023-10-14"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"                return false;","lastModifiedDate":"2023-10-14"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-14"},{"lineNumber":186,"author":{"gitId":"Fallman2"},"content":"            if (nonNull(address) \u0026\u0026 !person.getAddress().value.toLowerCase().contains(address.toLowerCase())) {","lastModifiedDate":"2023-10-14"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"                return false;","lastModifiedDate":"2023-10-14"},{"lineNumber":188,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-14"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"            if (nonNull(tags) \u0026\u0026 !tags.isEmpty()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"                Stream\u003cTag\u003e tagsToCheck \u003d tags.stream();","lastModifiedDate":"2023-10-14"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"                Stream\u003cTag\u003e currentTags \u003d person.getTags().stream();","lastModifiedDate":"2023-10-14"},{"lineNumber":192,"author":{"gitId":"Fallman2"},"content":"                return tagsToCheck.allMatch(x -\u003e currentTags.anyMatch(y -\u003e y.tagName.contains(x.tagName)));","lastModifiedDate":"2023-10-14"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-14"},{"lineNumber":194,"author":{"gitId":"Fallman2"},"content":"            return true;","lastModifiedDate":"2023-10-14"},{"lineNumber":195,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":198,"author":{"gitId":"Fallman2"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2023-10-14"},{"lineNumber":199,"author":{"gitId":"Fallman2"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-14"},{"lineNumber":200,"author":{"gitId":"Fallman2"},"content":"                return true;","lastModifiedDate":"2023-10-14"},{"lineNumber":201,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-14"},{"lineNumber":202,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":203,"author":{"gitId":"Fallman2"},"content":"            // instanceof handles nulls","lastModifiedDate":"2023-10-14"},{"lineNumber":204,"author":{"gitId":"Fallman2"},"content":"            if (!(other instanceof PersonFilter)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":205,"author":{"gitId":"Fallman2"},"content":"                return false;","lastModifiedDate":"2023-10-14"},{"lineNumber":206,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-14"},{"lineNumber":207,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":208,"author":{"gitId":"Fallman2"},"content":"            PersonFilter otherPersonFilter \u003d (PersonFilter) other;","lastModifiedDate":"2023-10-14"},{"lineNumber":209,"author":{"gitId":"Fallman2"},"content":"            return isEqual(name, otherPersonFilter.getName())","lastModifiedDate":"2023-10-14"},{"lineNumber":210,"author":{"gitId":"Fallman2"},"content":"                    \u0026\u0026 isEqual(phone, otherPersonFilter.getPhone())","lastModifiedDate":"2023-10-14"},{"lineNumber":211,"author":{"gitId":"Fallman2"},"content":"                    \u0026\u0026 isEqual(email, otherPersonFilter.getEmail())","lastModifiedDate":"2023-10-14"},{"lineNumber":212,"author":{"gitId":"Fallman2"},"content":"                    \u0026\u0026 isEqual(address, otherPersonFilter.getAddress())","lastModifiedDate":"2023-10-14"},{"lineNumber":213,"author":{"gitId":"Fallman2"},"content":"                    \u0026\u0026 isEqual(tags, otherPersonFilter.getTags());","lastModifiedDate":"2023-10-14"},{"lineNumber":214,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":215,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":216,"author":{"gitId":"Fallman2"},"content":"        private boolean isEqual(Object first, Object second) {","lastModifiedDate":"2023-10-14"},{"lineNumber":217,"author":{"gitId":"Fallman2"},"content":"            if (Objects.isNull(first)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":218,"author":{"gitId":"Fallman2"},"content":"                return Objects.isNull(second);","lastModifiedDate":"2023-10-14"},{"lineNumber":219,"author":{"gitId":"Fallman2"},"content":"            } else if (Objects.isNull(second)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":220,"author":{"gitId":"Fallman2"},"content":"                return false;","lastModifiedDate":"2023-10-14"},{"lineNumber":221,"author":{"gitId":"Fallman2"},"content":"            } else {","lastModifiedDate":"2023-10-14"},{"lineNumber":222,"author":{"gitId":"Fallman2"},"content":"                return first.equals(second);","lastModifiedDate":"2023-10-14"},{"lineNumber":223,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-14"},{"lineNumber":224,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":225,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":226,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":227,"author":{"gitId":"Fallman2"},"content":"        public String toString() {","lastModifiedDate":"2023-10-14"},{"lineNumber":228,"author":{"gitId":"Fallman2"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2023-10-14"},{"lineNumber":229,"author":{"gitId":"Fallman2"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2023-10-14"},{"lineNumber":230,"author":{"gitId":"Fallman2"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2023-10-14"},{"lineNumber":231,"author":{"gitId":"Fallman2"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2023-10-14"},{"lineNumber":232,"author":{"gitId":"Fallman2"},"content":"                    .add(\"address\", address)","lastModifiedDate":"2023-10-14"},{"lineNumber":233,"author":{"gitId":"Fallman2"},"content":"                    .add(\"tags\", tags)","lastModifiedDate":"2023-10-14"},{"lineNumber":234,"author":{"gitId":"Fallman2"},"content":"                    .toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":235,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":236,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":237,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Fallman2":237}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.comparer.SortComparator;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"/**","lastModifiedDate":"2023-10-17"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":" */","lastModifiedDate":"2023-10-17"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"public class SortCommand extends Command {","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";","lastModifiedDate":"2023-10-17"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"    public static final String SORTBY_KEYWORD1 \u003d \"/byaddress\";","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"    public static final String SORTBY_KEYWORD2 \u003d \"/byemail\";","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"    public static final String SORTBY_KEYWORD3 \u003d \"/byname\";","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"    public static final String SORTBY_KEYWORD4 \u003d \"/byphone\";","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"    public static final String REVERSE_KEYWORD \u003d \"/reverse\";","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all persons in UniMate \"","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"            + \"by the ascending or descending order of specified attribute. \\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + SORTBY_KEYWORD1 + \" \" + REVERSE_KEYWORD;","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons by specified order\";","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"    private Comparator\u003cPerson\u003e personComparator;","lastModifiedDate":"2023-10-18"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"     * Constructor for SortCommand, creates a comparator to sort by the specified field and order.","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"    public SortCommand(ArrayList\u003cSortComparator\u003e sortComparatorList) {","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"        SortComparator sortComparator \u003d sortComparatorList.get(0);","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"        boolean isReverse \u003d sortComparator.getIsReverse();","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"        this.personComparator \u003d isReverse","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"                ? sortComparator.reversed()","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"                : sortComparator;","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-10-17"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-17"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"        model.sortPersonList(personComparator);","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"nicrandomlee":47}},{"path":"src/main/java/seedu/address/logic/parser/AddContactEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE_TIME;","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE_TIME;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import seedu.address.logic.commands.AddContactEventCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":" * Parses input arguments and creates a new AddContactEventCommand object","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"public class AddContactEventCommandParser implements Parser\u003cAddContactEventCommand\u003e {","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"     * Parses the given {@code String} of arguments in the context of the AddContactEventCommand","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"     * and returns an AddContactEventCommand object for execution.","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"    public AddContactEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_DESCRIPTION, PREFIX_EVENT_START_DATE_TIME,","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"                        PREFIX_EVENT_END_DATE_TIME);","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"        Index index;","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"        try {","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"                    AddContactEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_DESCRIPTION, PREFIX_EVENT_START_DATE_TIME,","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"                PREFIX_EVENT_END_DATE_TIME)) {","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"                    AddContactEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_EVENT_DESCRIPTION, PREFIX_EVENT_START_DATE_TIME,","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"                PREFIX_EVENT_END_DATE_TIME);","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"        EventDescription description \u003d ParserUtil.parseEventDescription(argMultimap","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"                .getValue(PREFIX_EVENT_DESCRIPTION).get());","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"        EventPeriod eventPeriod \u003d ParserUtil.parseEventPeriod(argMultimap.getValue(PREFIX_EVENT_START_DATE_TIME).get(),","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"                argMultimap.getValue(PREFIX_EVENT_END_DATE_TIME).get());","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"        return new AddContactEventCommand(index, new Event(description, eventPeriod));","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"     * Checks if all the given prefix fields are non-empty.","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"     * @param argumentMultimap argumentMultimap managing arguments for this command.","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"     * @param prefixes prefixes to be tested.","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"     * @return true if all fields are non-empty, false if any field contains empty value.","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"junhonglow":66}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE_TIME;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE_TIME;","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":" * Parses input arguments and creates a new AddEventCommand object.","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    public AddEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"        ArgumentMultimap argMultiMap \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_DESCRIPTION, PREFIX_EVENT_START_DATE_TIME,","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"                        PREFIX_EVENT_END_DATE_TIME);","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_EVENT_DESCRIPTION, PREFIX_EVENT_START_DATE_TIME,","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"                PREFIX_EVENT_END_DATE_TIME) || !argMultiMap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        argMultiMap.verifyNoDuplicatePrefixesFor(PREFIX_EVENT_DESCRIPTION, PREFIX_EVENT_START_DATE_TIME,","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"                PREFIX_EVENT_END_DATE_TIME);","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        EventDescription description \u003d ParserUtil.parseEventDescription(argMultiMap","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"                .getValue(PREFIX_EVENT_DESCRIPTION).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod eventPeriod \u003d ParserUtil.parseEventPeriod(argMultiMap.getValue(PREFIX_EVENT_START_DATE_TIME).get(),","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"                argMultiMap.getValue(PREFIX_EVENT_END_DATE_TIME).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        return new AddEventCommand(new Event(description, eventPeriod));","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     * Checks if all the given prefix fields are non-empty.","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     * @param argumentMultimap argumentMultimap managing arguments for this command.","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * @param prefixes prefixes to be tested.","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     * @return true if all fields are non-empty, false if any field contains empty value.","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"lihongguang00":51}},{"path":"src/main/java/seedu/address/logic/parser/ClearEventsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CONFIRMATION;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE_TIME;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE_TIME;","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.ClearEventsCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":" * Parses the input arguments and creates a new ClearEventsCommand object.","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"public class ClearEventsCommandParser implements Parser\u003cClearEventsCommand\u003e {","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    private static final String CONFIRMATION \u003d \"CONFIRMED\";","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public ClearEventsCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        ArgumentMultimap argMultiMap \u003d","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"                ArgumentTokenizer.tokenize(userInput, PREFIX_EVENT_START_DATE_TIME, PREFIX_EVENT_END_DATE_TIME,","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"                        PREFIX_CONFIRMATION);","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        if (!isTimePresent(argMultiMap) || !argMultiMap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearEventsCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        argMultiMap.verifyNoDuplicatePrefixesFor(PREFIX_EVENT_START_DATE_TIME, PREFIX_EVENT_END_DATE_TIME,","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"                PREFIX_CONFIRMATION);","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        boolean isConfirmed \u003d isCommandConfirmed(argMultiMap);","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        EventPeriod clearPeriod \u003d ParserUtil.parseEventPeriod(argMultiMap.getValue(PREFIX_EVENT_START_DATE_TIME).get(),","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"                argMultiMap.getValue(PREFIX_EVENT_END_DATE_TIME).get());","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        return new ClearEventsCommand(clearPeriod, isConfirmed);","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    private static boolean isCommandConfirmed(ArgumentMultimap argumentMultimap) {","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        if (argumentMultimap.getValue(PREFIX_CONFIRMATION).isPresent()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            return argumentMultimap.getValue(PREFIX_CONFIRMATION).get().equals(CONFIRMATION);","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        return false;","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    private static boolean isTimePresent(ArgumentMultimap argumentMultimap) {","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        boolean isStartTimePresent \u003d argumentMultimap.getValue(PREFIX_EVENT_START_DATE_TIME).isPresent();","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        boolean isEndTimePresent \u003d argumentMultimap.getValue(PREFIX_EVENT_END_DATE_TIME).isPresent();","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        return isStartTimePresent \u0026\u0026 isEndTimePresent;","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"Fallman2":48}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    public static final Prefix PREFIX_EVENT_DESCRIPTION \u003d new Prefix(\"d/\");","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    public static final Prefix PREFIX_EVENT_START_DATE_TIME \u003d new Prefix(\"ts/\");","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    public static final Prefix PREFIX_EVENT_END_DATE_TIME \u003d new Prefix(\"te/\");","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    public static final Prefix PREFIX_CONFIRMATION \u003d new Prefix(\"c/\");","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"lihongguang00":5,"Fallman2":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.model.event.EventPeriod.DATE_TIME_STRING_FORMATTER;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.DeleteEventCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":" * Parses input arguments and creates a new DeleteEventCommand object.","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    public DeleteEventCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"            String eventString \u003d userInput.trim();","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"            LocalDateTime eventTime \u003d LocalDateTime.parse(eventString, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"            return new DeleteEventCommand(eventTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        } catch (Exception pe) {","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"            throw new ParseException(String.format(","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"                    MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Fallman2":26}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.ParserUtil.parseTagsForUse;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2023-07-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        parseTagsForUse(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"Fallman2":2,"-":63}},{"path":"src/main/java/seedu/address/logic/parser/FilterCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.FilterCommand.CONTACTS_NOT_FILTERED;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.ParserUtil.parseTagsForUse;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.FilterCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.FilterCommand.PersonFilter;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":" * Parses input arguments and creates a new FilterCommand object","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    public FilterCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        PersonFilter personFilter \u003d new PersonFilter();","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            personFilter.setName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"            personFilter.setPhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"            personFilter.setEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"            personFilter.setAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        parseTagsForUse(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(personFilter::setTags);","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        if (!personFilter.isAnyFieldEdited()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"            throw new ParseException(CONTACTS_NOT_FILTERED);","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"        return new FilterCommand(personFilter);","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Fallman2":54}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2023-10-14"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2023-10-14"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2023-10-14"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"    public static Optional\u003cSet\u003cTag\u003e\u003e parseTagsForUse(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2023-10-14"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2023-10-14"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-14"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2023-10-14"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2023-10-14"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"     * Parses the event description String into a EventDescription object.","lastModifiedDate":"2023-10-08"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-08"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"     * @param description description String.","lastModifiedDate":"2023-10-08"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"     * @return EventDescription object with the given description String.","lastModifiedDate":"2023-10-08"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"     * @throws ParseException if the description is empty.","lastModifiedDate":"2023-10-08"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"    public static EventDescription parseEventDescription(String description) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-10-07"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"        String trimmedDescription \u003d description.trim();","lastModifiedDate":"2023-10-07"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"        if (!EventDescription.isValid(description)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"            throw new ParseException(EventDescription.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"        return new EventDescription(trimmedDescription);","lastModifiedDate":"2023-10-07"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"     * Parses given start date string and end date string into an EventPeriod object.","lastModifiedDate":"2023-10-08"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-08"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"     * @param startDate start date string in \u0027yyyy-MM-dd HH:mm\u0027 format.","lastModifiedDate":"2023-10-08"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"     * @param endDate end date string in \u0027yyyy-MM-dd HH:mm\u0027 format.","lastModifiedDate":"2023-10-08"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"     * @return EventPeriod object describing the time period between startDate and endDate.","lastModifiedDate":"2023-10-08"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"     * @throws ParseException if the startDate or endDate strings are in inproper format.","lastModifiedDate":"2023-10-08"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"    public static EventPeriod parseEventPeriod(String startDate, String endDate) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"        requireAllNonNull(startDate, endDate);","lastModifiedDate":"2023-10-07"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"        String trimmedStartDate \u003d startDate.trim();","lastModifiedDate":"2023-10-07"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"        String trimmedEndDate \u003d endDate.trim();","lastModifiedDate":"2023-10-07"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"        if (!EventPeriod.isValidPeriod(trimmedStartDate, trimmedEndDate)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"            throw new ParseException(EventPeriod.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"        return new EventPeriod(trimmedStartDate, trimmedEndDate);","lastModifiedDate":"2023-10-07"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"lihongguang00":38,"Fallman2":16,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"import java.util.List;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.logic.commands.SortCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.comparer.AddressComparator;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.comparer.EmailComparator;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.comparer.NameComparator;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.comparer.PhoneComparator;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.comparer.SortComparator;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":" * Parses input arguments and creates a new SortCommand object","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"    public static final String PARSE_EXCEPTION_MESSAGE \u003d \"Invalid syntax for sort. Please use the \"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"            + \"following syntax in []: sort [/byname][/byemail][/byphone][/byaddress] (Optional)[/reverse]\";","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"    private static final Prefix PREFIX_DELIMITER \u003d new Prefix(\"/\");","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"    private static final String SORT_BY_ADDRESS_KEYWORD \u003d \"byaddress\";","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"    private static final String SORT_BY_EMAIL_KEYWORD \u003d \"byemail\";","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"    private static final String SORT_BY_NAME_KEYWORD \u003d \"byname\";","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"    private static final String SORT_BY_PHONE_KEYWORD \u003d \"byphone\";","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"    private static final String REVERSE_KEYWORD \u003d \"reverse\";","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"    private static final int MAX_SECONDARY_SORT \u003d 0;","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"    private static final int MAX_SORTS \u003d MAX_SECONDARY_SORT + 1;","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"    private static final int MAX_SORT_ARGS \u003d 2 + MAX_SECONDARY_SORT * 2;","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"     * and returns an SortCommand object for execution.","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"    public SortCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DELIMITER);","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor();","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"nicrandomlee"},"content":"        List\u003cString\u003e sortValues \u003d argMultimap.getAllValues(PREFIX_DELIMITER);","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"nicrandomlee"},"content":"        ArrayList\u003cSortComparator\u003e sortComparatorList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"nicrandomlee"},"content":"        boolean isEmptyArray \u003d sortValues.isEmpty();","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"nicrandomlee"},"content":"        boolean isTooManyArgs \u003d sortValues.size() \u003e MAX_SORT_ARGS;","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"nicrandomlee"},"content":"        if (isEmptyArray || isTooManyArgs) {","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"nicrandomlee"},"content":"            throw new ParseException(PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"nicrandomlee"},"content":"        for (String command: sortValues) {","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"nicrandomlee"},"content":"            String commandLower \u003d command.toLowerCase();","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"nicrandomlee"},"content":"            SortComparator sortComparator;","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"nicrandomlee"},"content":"            if (!commandLower.equals(REVERSE_KEYWORD) \u0026\u0026 sortComparatorList.size() \u003e MAX_SECONDARY_SORT) {","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"nicrandomlee"},"content":"                throw new ParseException(PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"nicrandomlee"},"content":"            }","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"nicrandomlee"},"content":"            switch (commandLower) {","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"nicrandomlee"},"content":"            case SORT_BY_ADDRESS_KEYWORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"nicrandomlee"},"content":"                sortComparator \u003d new AddressComparator(true, false, 1);","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"nicrandomlee"},"content":"                sortComparatorList.add(sortComparator);","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"nicrandomlee"},"content":"                break;","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"nicrandomlee"},"content":"            case SORT_BY_EMAIL_KEYWORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"nicrandomlee"},"content":"                sortComparator \u003d new EmailComparator(true, false, 1);","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"nicrandomlee"},"content":"                sortComparatorList.add(sortComparator);","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"nicrandomlee"},"content":"                break;","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"nicrandomlee"},"content":"            case SORT_BY_NAME_KEYWORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"nicrandomlee"},"content":"                sortComparator \u003d new NameComparator(true, false, 1);","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"nicrandomlee"},"content":"                sortComparatorList.add(sortComparator);","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"nicrandomlee"},"content":"                break;","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"nicrandomlee"},"content":"            case SORT_BY_PHONE_KEYWORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"nicrandomlee"},"content":"                sortComparator \u003d new PhoneComparator(true, false, 1);","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"nicrandomlee"},"content":"                sortComparatorList.add(sortComparator);","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"nicrandomlee"},"content":"                break;","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"nicrandomlee"},"content":"            case REVERSE_KEYWORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"nicrandomlee"},"content":"                if (sortComparatorList.isEmpty()) {","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"nicrandomlee"},"content":"                    throw new ParseException(PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"nicrandomlee"},"content":"                }","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"nicrandomlee"},"content":"                int lastIdx \u003d sortComparatorList.size() - 1;","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"nicrandomlee"},"content":"                sortComparatorList.get(lastIdx).setIsReverse(true);","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"nicrandomlee"},"content":"                break;","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"nicrandomlee"},"content":"            default:","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"nicrandomlee"},"content":"                throw new ParseException(PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"nicrandomlee"},"content":"            }","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"nicrandomlee"},"content":"        return new SortCommand(sortComparatorList);","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":102,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"nicrandomlee":102}},{"path":"src/main/java/seedu/address/logic/parser/UniMateParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import seedu.address.logic.commands.AddContactEventCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.ClearEventsCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.DeleteEventCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.FilterCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.logic.commands.SortCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":" * Parses user input for UniMate.","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"public class UniMateParser {","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UniMateParser.class);","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"        case FilterCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"            return new FilterCommandParser().parse(arguments);","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"nicrandomlee"},"content":"        case SortCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":90,"author":{"gitId":"nicrandomlee"},"content":"            return new SortCommandParser().parse(arguments);","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-10"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"            return new AddEventCommandParser().parse(arguments);","lastModifiedDate":"2023-10-10"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"        case DeleteEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"            return new DeleteEventCommandParser().parse(arguments);","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"        case ClearEventsCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"            return new ClearEventsCommandParser().parse(arguments);","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"junhonglow"},"content":"        case AddContactEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-29"},{"lineNumber":102,"author":{"gitId":"junhonglow"},"content":"            return new AddContactEventCommandParser().parse(arguments);","lastModifiedDate":"2023-10-29"},{"lineNumber":103,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"junhonglow":4,"lihongguang00":7,"Fallman2":12,"nicrandomlee":4,"-":82}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .add(\"persons\", persons)","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":112,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":113,"author":{"gitId":"nicrandomlee"},"content":"     * Sort persons in Person List according to comparator provided.","lastModifiedDate":"2023-10-17"},{"lineNumber":114,"author":{"gitId":"nicrandomlee"},"content":"     * @param comparator","lastModifiedDate":"2023-10-17"},{"lineNumber":115,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":116,"author":{"gitId":"nicrandomlee"},"content":"    public void sortPersons(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2023-10-17"},{"lineNumber":117,"author":{"gitId":"nicrandomlee"},"content":"        persons.sortPersons(comparator);","lastModifiedDate":"2023-10-17"},{"lineNumber":118,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":119,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddressBook)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        AddressBook otherAddressBook \u003d (AddressBook) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return persons.equals(otherAddressBook.persons);","lastModifiedDate":"2023-07-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"nicrandomlee":9,"-":130}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"     * Returns the user prefs\u0027 calendar file path.","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"    Path getCalendarFilePath();","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"     * Sets the user prefs\u0027 calendar file path.","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"junhonglow"},"content":"    void setCalendarFilePath(Path calendarFilePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"     * Replaces calendar data with the data in {@code calendar}.","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"    void setCalendar(ReadOnlyCalendar calendar);","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"    /** Returns the Calendar */","lastModifiedDate":"2023-10-19"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"    ReadOnlyCalendar getCalendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"     * Check if calendar can add event","lastModifiedDate":"2023-10-07"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be added","lastModifiedDate":"2023-10-07"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"     * @return true if possible, false otherwise","lastModifiedDate":"2023-10-07"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"    boolean canAddEvent(Event event);","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"     * Adds an event into the calendar","lastModifiedDate":"2023-10-07"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be added","lastModifiedDate":"2023-10-07"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"    void addEvent(Event event);","lastModifiedDate":"2023-10-07"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"     * Deletes an event at the specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"     * @param dateTime The specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"     * @throws EventNotFoundException if there is no event found at the specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"    void deleteEventAt(LocalDateTime dateTime) throws EventNotFoundException;","lastModifiedDate":"2023-10-19"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"     * Checks for an event at the specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"     * @param dateTime the specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"     * @return the Event","lastModifiedDate":"2023-10-19"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"     * @throws EventNotFoundException if there is no event at the specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"    Event findEventAt(LocalDateTime dateTime) throws EventNotFoundException;","lastModifiedDate":"2023-10-19"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"     * Looks for all events within a time range and returns them in a list.","lastModifiedDate":"2023-10-28"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"     * @param range an {@code EventPeriod} representing a time range.","lastModifiedDate":"2023-10-28"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"     * @return A list that contains all events within the time range.","lastModifiedDate":"2023-10-28"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"    List\u003cEvent\u003e eventsInRange(EventPeriod range);","lastModifiedDate":"2023-10-28"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"     * Looks for all events within a time range and deletes them.","lastModifiedDate":"2023-10-28"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"     * @param range an {@code EventPeriod} representing a time range.","lastModifiedDate":"2023-10-28"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"    void deleteEventsInRange(EventPeriod range);","lastModifiedDate":"2023-10-28"},{"lineNumber":150,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":151,"author":{"gitId":"junhonglow"},"content":"    /** Returns a view of the event list */","lastModifiedDate":"2023-10-21"},{"lineNumber":152,"author":{"gitId":"junhonglow"},"content":"    ObservableList\u003cEvent\u003e getEventList();","lastModifiedDate":"2023-10-21"},{"lineNumber":153,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"    /** Returns a view of the event list for the current week */","lastModifiedDate":"2023-10-25"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"    ObservableList\u003cEvent\u003e getCurrentWeekEventList();","lastModifiedDate":"2023-10-25"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":165,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":166,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":167,"author":{"gitId":"nicrandomlee"},"content":"     * Sorts the filtered person list by the given {@code comparator}.","lastModifiedDate":"2023-10-19"},{"lineNumber":168,"author":{"gitId":"nicrandomlee"},"content":"     * @throws NullPointerException if {@code comparator} is null.","lastModifiedDate":"2023-10-19"},{"lineNumber":169,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":170,"author":{"gitId":"nicrandomlee"},"content":"    void sortPersonList(Comparator\u003cPerson\u003e personComparator);","lastModifiedDate":"2023-10-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":22,"Fallman2":36,"nicrandomlee":8,"lihongguang00":19,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    private final Calendar calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"     * Initializes a ModelManager with the given addressBook, calendar and userPrefs.","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyCalendar calendar, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"        this.calendar \u003d new Calendar(calendar);","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"        this(new AddressBook(), new Calendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"junhonglow"},"content":"    public Path getCalendarFilePath() {","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"junhonglow"},"content":"        return userPrefs.getCalendarFilePath();","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"junhonglow"},"content":"    public void setCalendarFilePath(Path calendarFilePath) {","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"junhonglow"},"content":"        requireNonNull(calendarFilePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"junhonglow"},"content":"        userPrefs.setCalendarFilePath(calendarFilePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":137,"author":{"gitId":"nicrandomlee"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-19"},{"lineNumber":138,"author":{"gitId":"nicrandomlee"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":139,"author":{"gitId":"nicrandomlee"},"content":"    public void sortPersonList(Comparator\u003cPerson\u003e personComparator) {","lastModifiedDate":"2023-10-19"},{"lineNumber":140,"author":{"gitId":"nicrandomlee"},"content":"        addressBook.sortPersons(personComparator);","lastModifiedDate":"2023-10-19"},{"lineNumber":141,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":142,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":144,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":145,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":146,"author":{"gitId":"junhonglow"},"content":"    public void setCalendar(ReadOnlyCalendar calendar) {","lastModifiedDate":"2023-10-19"},{"lineNumber":147,"author":{"gitId":"junhonglow"},"content":"        this.calendar.resetData(calendar);","lastModifiedDate":"2023-10-19"},{"lineNumber":148,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":149,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":150,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":151,"author":{"gitId":"junhonglow"},"content":"    public ReadOnlyCalendar getCalendar() {","lastModifiedDate":"2023-10-19"},{"lineNumber":152,"author":{"gitId":"junhonglow"},"content":"        return calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":153,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":154,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":155,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":156,"author":{"gitId":"junhonglow"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-10-21"},{"lineNumber":157,"author":{"gitId":"junhonglow"},"content":"        return calendar.getEventList();","lastModifiedDate":"2023-10-21"},{"lineNumber":158,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":159,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"    public ObservableList\u003cEvent\u003e getCurrentWeekEventList() {","lastModifiedDate":"2023-10-25"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"        return calendar.getCurrentWeekEventList();","lastModifiedDate":"2023-10-25"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"    public boolean canAddEvent(Event event) {","lastModifiedDate":"2023-10-07"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"        return calendar.canAddEvent(event);","lastModifiedDate":"2023-10-14"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2023-10-07"},{"lineNumber":172,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-10-19"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"        calendar.addEvent(event);","lastModifiedDate":"2023-10-14"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"    public void deleteEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-19"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"        calendar.deleteEventAt(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"    public Event findEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-19"},{"lineNumber":186,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":188,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-10-19"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"            return calendar.findEventAt(dateTime).orElseThrow();","lastModifiedDate":"2023-10-19"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"        } catch (NoSuchElementException e) {","lastModifiedDate":"2023-10-19"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2023-10-19"},{"lineNumber":192,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":194,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":195,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"    public List\u003cEvent\u003e eventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(range);","lastModifiedDate":"2023-10-28"},{"lineNumber":198,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":199,"author":{"gitId":"Fallman2"},"content":"        return calendar.getEventsInRange(range);","lastModifiedDate":"2023-10-28"},{"lineNumber":200,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":201,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":202,"author":{"gitId":"Fallman2"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":203,"author":{"gitId":"Fallman2"},"content":"    public void deleteEventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":204,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(range);","lastModifiedDate":"2023-10-28"},{"lineNumber":205,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":206,"author":{"gitId":"Fallman2"},"content":"        calendar.deleteEventsInRange(range);","lastModifiedDate":"2023-10-28"},{"lineNumber":207,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":208,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":209,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":210,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        return addressBook.equals(otherModelManager.addressBook)","lastModifiedDate":"2023-07-13"},{"lineNumber":241,"author":{"gitId":"junhonglow"},"content":"                \u0026\u0026 calendar.equals(otherModelManager.calendar)","lastModifiedDate":"2023-10-19"},{"lineNumber":242,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons);","lastModifiedDate":"2023-07-13"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junhonglow":33,"Fallman2":40,"nicrandomlee":7,"lihongguang00":21,"-":144}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"    private Path calendarFilePath \u003d Paths.get(\"data\", \"calendar.json\");","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"    public Path getCalendarFilePath() {","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"        return calendarFilePath;","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"    public void setCalendarFilePath(Path calendarFilePath) {","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"        requireNonNull(calendarFilePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"        this.calendarFilePath \u003d calendarFilePath;","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)","lastModifiedDate":"2023-07-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(otherUserPrefs.addressBookFilePath);","lastModifiedDate":"2023-07-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junhonglow":10,"-":88}},{"path":"src/main/java/seedu/address/model/calendar/Calendar.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.calendar;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.AllDaysEventListManager;","lastModifiedDate":"2023-10-11"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":" * Represents a calendar that stores and manages events.","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"public class Calendar implements ReadOnlyCalendar {","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    private static final int DAYS_IN_WEEK \u003d 7;","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    private static final LocalDate DATE_OF_START_OF_CURRENT_WEEK \u003d LocalDate.now().minusDays(","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"            LocalDate.now().getDayOfWeek().getValue() - 1);","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    private static final LocalDate DATE_OF_END_OF_CURRENT_WEEK \u003d LocalDate.now().plusDays(","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"            DAYS_IN_WEEK - LocalDate.now().getDayOfWeek().getValue());","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    private final AllDaysEventListManager eventManager;","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    private final ObservableList\u003cEvent\u003e internalListForCurrentWeek \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a Calendar object with an empty event tree.","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    public Calendar() {","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        this.eventManager \u003d new AllDaysEventListManager();","lastModifiedDate":"2023-10-11"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"     * Creates a Calendar using the Events in the {@code toBeCopied}","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"    public Calendar(ReadOnlyCalendar toBeCopied) {","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"        this();","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"    //// overwrite operations","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"     * Replaces the contents of the Calendar with {@code events}.","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"     * {@code events} must not contain duplicate events.","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"    public void setEvents(List\u003cEvent\u003e events) {","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"        events.forEach(this::addEvent);","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"     * Resets the existing data of this {@code Calendar} with {@code newData}.","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"    public void resetData(ReadOnlyCalendar newData) {","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"        requireNonNull(newData);","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"        setEvents(newData.getEventList());","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"     * Return the AllDaysEventListManager managing the events for this calendar.","lastModifiedDate":"2023-10-11"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"     * @return the AllDaysEventListManager managing the events.","lastModifiedDate":"2023-10-11"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"    public AllDaysEventListManager getEventManager() {","lastModifiedDate":"2023-10-11"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        return this.eventManager;","lastModifiedDate":"2023-10-11"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"     * Check if the event can be added to the calendar","lastModifiedDate":"2023-10-11"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be checked.","lastModifiedDate":"2023-10-11"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"     * @return true if it can be added, false otherwise.","lastModifiedDate":"2023-10-11"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"    public boolean canAddEvent(Event event) {","lastModifiedDate":"2023-10-11"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        return eventManager.canAddEvent(event);","lastModifiedDate":"2023-10-19"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"     * Adds an event to the calendar.","lastModifiedDate":"2023-10-11"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"     * @param event The event to be added.","lastModifiedDate":"2023-10-11"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2023-10-11"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-10-11"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"        eventManager.addEvent(event);","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"junhonglow"},"content":"        internalList.setAll(eventManager.asUnmodifiableObservableList());","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"        internalListForCurrentWeek.setAll(eventManager.asUnmodifiableObservableList(","lastModifiedDate":"2023-10-25"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"                DATE_OF_START_OF_CURRENT_WEEK, DATE_OF_END_OF_CURRENT_WEEK));","lastModifiedDate":"2023-10-25"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"     * Checks if there is an event at specified time and deletes it if there is.","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"     * @param dateTime the specified time","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"    public void deleteEventAt(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"        eventManager.deleteEventAt(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":103,"author":{"gitId":"junhonglow"},"content":"        internalList.setAll(eventManager.asUnmodifiableObservableList());","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"        internalListForCurrentWeek.setAll(eventManager.asUnmodifiableObservableList(","lastModifiedDate":"2023-10-25"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"                DATE_OF_START_OF_CURRENT_WEEK, DATE_OF_END_OF_CURRENT_WEEK));","lastModifiedDate":"2023-10-25"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"     * Looks for an event at specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"     * @param dateTime the specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"     * @return an optional containing the event if there is an event at the time, an empty optional otherwise.","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"    public Optional\u003cEvent\u003e findEventAt(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-19"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"        return eventManager.eventAt(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"     * Looks for all events within a specified time range and returns them in a list.","lastModifiedDate":"2023-10-28"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"     * @param range the specified time range represented by an {@code EventPeriod}","lastModifiedDate":"2023-10-28"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"     * @return a list containing all events within the range.","lastModifiedDate":"2023-10-28"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"    public List\u003cEvent\u003e getEventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(range);","lastModifiedDate":"2023-10-28"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"        return eventManager.eventsInRange(range);","lastModifiedDate":"2023-10-28"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"     * Looks for all events within a specified time range and deletes them.","lastModifiedDate":"2023-10-28"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"     * @param range the specified time range represented by an {@code EventPeriod}","lastModifiedDate":"2023-10-28"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"    public void deleteEventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(range);","lastModifiedDate":"2023-10-28"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"        for (Event event:getEventsInRange(range)) {","lastModifiedDate":"2023-10-28"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"            deleteEventAt(event.getStartDateTime());","lastModifiedDate":"2023-10-28"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"     * Clears the calendar","lastModifiedDate":"2023-10-09"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"    public void clear() {","lastModifiedDate":"2023-10-09"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"        this.eventManager.clear();","lastModifiedDate":"2023-10-11"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"     * Check if the calendar contains the event.","lastModifiedDate":"2023-10-09"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-09"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be checked.","lastModifiedDate":"2023-10-09"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"     * @return true if it is contained in the calendar, false otherwise.","lastModifiedDate":"2023-10-09"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"    public boolean contains(Event event) {","lastModifiedDate":"2023-10-09"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"        return this.eventManager.contains(event);","lastModifiedDate":"2023-10-11"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the calendar is empty.","lastModifiedDate":"2023-10-10"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-10"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"     * @return true if calendar is empty, false otherwise.","lastModifiedDate":"2023-10-10"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-10-10"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"        return this.eventManager.isEmpty();","lastModifiedDate":"2023-10-11"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":168,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":169,"author":{"gitId":"Fallman2"},"content":"     * Checks if there are any events at all in the calendar.","lastModifiedDate":"2023-10-19"},{"lineNumber":170,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":171,"author":{"gitId":"Fallman2"},"content":"     * @return true if there are events in the calendar, false otherwise.","lastModifiedDate":"2023-10-19"},{"lineNumber":172,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":173,"author":{"gitId":"Fallman2"},"content":"    public boolean hasEvents() {","lastModifiedDate":"2023-10-19"},{"lineNumber":174,"author":{"gitId":"Fallman2"},"content":"        if (!this.isEmpty()) {","lastModifiedDate":"2023-10-19"},{"lineNumber":175,"author":{"gitId":"Fallman2"},"content":"            return eventManager.hasEvents();","lastModifiedDate":"2023-10-20"},{"lineNumber":176,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"        return false;","lastModifiedDate":"2023-10-20"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":180,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":181,"author":{"gitId":"junhonglow"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-10-19"},{"lineNumber":182,"author":{"gitId":"junhonglow"},"content":"        return internalList;","lastModifiedDate":"2023-10-20"},{"lineNumber":183,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":184,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"    public ObservableList\u003cEvent\u003e getCurrentWeekEventList() {","lastModifiedDate":"2023-10-25"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"        return internalListForCurrentWeek;","lastModifiedDate":"2023-10-25"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"    public Optional\u003cLocalTime\u003e getEarliestEventStartTimeInCurrentWeek() {","lastModifiedDate":"2023-10-26"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"        return getCurrentWeekEventList().stream().min(Event::compareStartTime).map(Event::getStartTime);","lastModifiedDate":"2023-10-27"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":196,"author":{"gitId":"lihongguang00"},"content":"    public Optional\u003cLocalTime\u003e getLatestEventEndTimeInCurrentWeek() {","lastModifiedDate":"2023-10-26"},{"lineNumber":197,"author":{"gitId":"lihongguang00"},"content":"        return getCurrentWeekEventList().stream().max(Event::compareEndTime).map(Event::getEndTime);","lastModifiedDate":"2023-10-27"},{"lineNumber":198,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":199,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":200,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":201,"author":{"gitId":"lihongguang00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-09"},{"lineNumber":202,"author":{"gitId":"lihongguang00"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-10-09"},{"lineNumber":203,"author":{"gitId":"lihongguang00"},"content":"            return true;","lastModifiedDate":"2023-10-09"},{"lineNumber":204,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":205,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":206,"author":{"gitId":"lihongguang00"},"content":"        if (!(other instanceof Calendar)) {","lastModifiedDate":"2023-10-09"},{"lineNumber":207,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-09"},{"lineNumber":208,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":209,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":210,"author":{"gitId":"lihongguang00"},"content":"        Calendar otherCalendar \u003d (Calendar) other;","lastModifiedDate":"2023-10-09"},{"lineNumber":211,"author":{"gitId":"lihongguang00"},"content":"        return this.eventManager.equals(otherCalendar.eventManager);","lastModifiedDate":"2023-10-11"},{"lineNumber":212,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":213,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"junhonglow":40,"lihongguang00":112,"Fallman2":61}},{"path":"src/main/java/seedu/address/model/calendar/ReadOnlyCalendar.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.model.calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-11"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-11"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" * Unmodifiable view of the Calendar.","lastModifiedDate":"2023-10-11"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-11"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"public interface ReadOnlyCalendar {","lastModifiedDate":"2023-10-11"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     * Generates an unmodifiable view of the event list.","lastModifiedDate":"2023-10-11"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     * @return unmodifiable view of event list.","lastModifiedDate":"2023-10-11"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    ObservableList\u003cEvent\u003e getEventList();","lastModifiedDate":"2023-10-11"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     * Generates an unmodifiable view of the event list for the current week.","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * @return unmodifiable view of event list for the current week.","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    ObservableList\u003cEvent\u003e getCurrentWeekEventList();","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     * Retrieves the earliest starting time of any event for the current week in a LocalTime object.","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     * @return the earliest starting time of any event for the current week in a LocalTime object.","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    Optional\u003cLocalTime\u003e getEarliestEventStartTimeInCurrentWeek();","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * Retrieves the latest ending time of any event for the current week in a LocalTime object.","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * @return the latest ending time of any event for the current week in a LocalTime object.","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    Optional\u003cLocalTime\u003e getLatestEventEndTimeInCurrentWeek();","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"junhonglow":1,"lihongguang00":39}},{"path":"src/main/java/seedu/address/model/event/AllDaysEventListManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-11"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-11"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.util.List;","lastModifiedDate":"2023-10-11"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.util.NavigableMap;","lastModifiedDate":"2023-10-11"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import java.util.TreeMap;","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-11"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":" * Manages the SingleDayEventList objects for every day.","lastModifiedDate":"2023-10-11"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-11"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"public class AllDaysEventListManager {","lastModifiedDate":"2023-10-11"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    private final NavigableMap\u003cString, SingleDayEventList\u003e dayToEventListMap;","lastModifiedDate":"2023-10-11"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * Creates a AllDaysEventListManager to manage the daily events.","lastModifiedDate":"2023-10-11"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    public AllDaysEventListManager() {","lastModifiedDate":"2023-10-11"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        this.dayToEventListMap \u003d new TreeMap\u003cString, SingleDayEventList\u003e();","lastModifiedDate":"2023-10-11"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * Check if the event is conflicting with any events stored in the manager.","lastModifiedDate":"2023-10-11"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be added.","lastModifiedDate":"2023-10-11"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the event can be added, false otherwise.","lastModifiedDate":"2023-10-11"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    public boolean canAddEvent(Event event) {","lastModifiedDate":"2023-10-11"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        List\u003cLocalDate\u003e eventDays \u003d event.getEventDays();","lastModifiedDate":"2023-10-11"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        return eventDays.stream().filter(x -\u003e dayToEventListMap.containsKey(x.toString()))","lastModifiedDate":"2023-10-11"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"                .allMatch(x -\u003e dayToEventListMap.get(x.toString()).isEventAddValid(event));","lastModifiedDate":"2023-10-11"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     * Stores the event to the appropriate SingleDayEventList objects corresponding to the event\u0027s dates.","lastModifiedDate":"2023-10-11"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be added.","lastModifiedDate":"2023-10-11"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2023-10-11"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        List\u003cLocalDate\u003e eventDays \u003d event.getEventDays();","lastModifiedDate":"2023-10-11"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        for (LocalDate date : eventDays) {","lastModifiedDate":"2023-10-11"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"            if (!(dayToEventListMap.containsKey(date.toString()))) {","lastModifiedDate":"2023-10-11"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"                dayToEventListMap.put(date.toString(), new SingleDayEventList(date));","lastModifiedDate":"2023-10-11"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-10-11"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"            dayToEventListMap.get(date.toString()).addEvent(event.boundEventByDate(date));","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     * Clears the manager.","lastModifiedDate":"2023-10-11"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    public void clear() {","lastModifiedDate":"2023-10-11"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        this.dayToEventListMap.clear();","lastModifiedDate":"2023-10-11"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"     * Check if the event is stored in this manager.","lastModifiedDate":"2023-10-11"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be checked.","lastModifiedDate":"2023-10-11"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"     * @return true if it is stored, false otherwise.","lastModifiedDate":"2023-10-11"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    public boolean contains(Event event) {","lastModifiedDate":"2023-10-11"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        for (LocalDate date : event.getEventDays()) {","lastModifiedDate":"2023-10-11"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"            if (!(this.dayToEventListMap.getOrDefault(date.toString(), new SingleDayEventList(date))","lastModifiedDate":"2023-10-11"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"                    .containsEvent(event))) {","lastModifiedDate":"2023-10-11"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"                return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-10-11"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"        return true;","lastModifiedDate":"2023-10-11"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"     * Check if this manager has an equivalent SingleDayEventList object stored in its dayToEventListMap.","lastModifiedDate":"2023-10-11"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"     * @param day SingleDayEventList object to be checked.","lastModifiedDate":"2023-10-11"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"     * @return true if there is a equivalent SingleDayEventList object stored in this manager, false otherwise.","lastModifiedDate":"2023-10-11"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"    private boolean contains(SingleDayEventList day) {","lastModifiedDate":"2023-10-11"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"        for (SingleDayEventList thisDay : this.dayToEventListMap.values()) {","lastModifiedDate":"2023-10-11"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"            if (thisDay.equals(day)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"                return true;","lastModifiedDate":"2023-10-11"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-10-11"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"        return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"     * Checks if there is an event at the specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"     * @param dateTime the specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"     * @return an optional containing the event at the specified time if there is an event, an empty optional otherwise.","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"    public Optional\u003cEvent\u003e eventAt(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"        String key \u003d dateTime.toLocalDate().toString();","lastModifiedDate":"2023-10-19"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"        if (dayToEventListMap.containsKey((key))) {","lastModifiedDate":"2023-10-19"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"            return dayToEventListMap.get(key).eventAtTime(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"        return Optional.empty();","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"     * Looks for an event at specified time and deletes it if found.","lastModifiedDate":"2023-10-19"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"     * @param dateTime the specified time.","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"     * @throws EventNotFoundException if no event is found.","lastModifiedDate":"2023-10-19"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"    public void deleteEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-19"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"        Optional\u003cEvent\u003e optionalToDelete \u003d eventAt(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"        try {","lastModifiedDate":"2023-10-19"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"            Event toDelete \u003d optionalToDelete.orElseThrow();","lastModifiedDate":"2023-10-19"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"            List\u003cLocalDate\u003e days \u003d toDelete.getEventDays();","lastModifiedDate":"2023-10-19"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"            days.stream().map(LocalDate::toString)","lastModifiedDate":"2023-10-19"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"                    .forEach(x -\u003e dayToEventListMap.get(x).remove(toDelete));","lastModifiedDate":"2023-10-19"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"        } catch (NoSuchElementException e) {","lastModifiedDate":"2023-10-19"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2023-10-19"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"     * Looks for events within a specified time and returns the list of events.","lastModifiedDate":"2023-10-28"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"     * @param range the {@code EventPeriod} describing the time range to check.","lastModifiedDate":"2023-10-28"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"     * @return A list of events or an empty list if no events are within the range.","lastModifiedDate":"2023-10-28"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"    public List\u003cEvent\u003e eventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"        List\u003cLocalDate\u003e days \u003d range.getDates();","lastModifiedDate":"2023-10-28"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"        return days.stream().map(LocalDate::toString)","lastModifiedDate":"2023-10-28"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"                .flatMap(x -\u003e dayToEventListMap.containsKey(x)","lastModifiedDate":"2023-10-28"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"                        ? dayToEventListMap.get(x).eventsInRange(range).stream()","lastModifiedDate":"2023-10-28"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"                        : Stream.\u003cEvent\u003eempty())","lastModifiedDate":"2023-10-28"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"                .distinct()","lastModifiedDate":"2023-10-28"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-10-28"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the manager is empty.","lastModifiedDate":"2023-10-11"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the manager has no events stored, false otherwise.","lastModifiedDate":"2023-10-11"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-10-11"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"        return this.dayToEventListMap.isEmpty();","lastModifiedDate":"2023-10-11"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":152,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":153,"author":{"gitId":"junhonglow"},"content":"     * Returns the event list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-10-19"},{"lineNumber":154,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":155,"author":{"gitId":"junhonglow"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-19"},{"lineNumber":156,"author":{"gitId":"junhonglow"},"content":"        List\u003cEvent\u003e list \u003d dayToEventListMap.values().stream()","lastModifiedDate":"2023-10-19"},{"lineNumber":157,"author":{"gitId":"junhonglow"},"content":"                .flatMap(singleDayEventList -\u003e singleDayEventList.getDayEventList().stream())","lastModifiedDate":"2023-10-19"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"                .map(Event::getParentEvent).distinct()","lastModifiedDate":"2023-10-28"},{"lineNumber":159,"author":{"gitId":"junhonglow"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-10-19"},{"lineNumber":160,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":161,"author":{"gitId":"junhonglow"},"content":"        return FXCollections.observableList(list);","lastModifiedDate":"2023-10-19"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"     * Returns the event list storing events that occur between the start and end dates as an unmodifiable","lastModifiedDate":"2023-10-25"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"     * ObservableList.","lastModifiedDate":"2023-10-25"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"     * @param startDate start date.","lastModifiedDate":"2023-10-25"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"     * @param endDate end date.","lastModifiedDate":"2023-10-25"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"     * @return the event list storing events that occur between the start and end dates as an unmodifiable","lastModifiedDate":"2023-10-25"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"     *     ObservableList.","lastModifiedDate":"2023-10-25"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList(LocalDate startDate, LocalDate endDate) {","lastModifiedDate":"2023-10-25"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"        List\u003cEvent\u003e list \u003d dayToEventListMap.values().stream()","lastModifiedDate":"2023-10-25"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"                .flatMap(singleDayEventList -\u003e singleDayEventList.getDayEventList().stream())","lastModifiedDate":"2023-10-25"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"                .filter(event -\u003e event.occursBetweenDates(startDate, endDate))","lastModifiedDate":"2023-10-25"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-10-25"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"        return FXCollections.observableList(list);","lastModifiedDate":"2023-10-25"},{"lineNumber":180,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":181,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"     * Checks if there are any events at all in the manager.","lastModifiedDate":"2023-10-19"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"     * @return true if there are any events in the manager, false otherwise.","lastModifiedDate":"2023-10-19"},{"lineNumber":186,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"    public boolean hasEvents() {","lastModifiedDate":"2023-10-19"},{"lineNumber":188,"author":{"gitId":"Fallman2"},"content":"        if (!this.isEmpty()) {","lastModifiedDate":"2023-10-19"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"            return dayToEventListMap.values().stream().map(SingleDayEventList::isEmpty).anyMatch(x -\u003e x.equals(false));","lastModifiedDate":"2023-10-28"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"        return false;","lastModifiedDate":"2023-10-20"},{"lineNumber":192,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":193,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-11"},{"lineNumber":196,"author":{"gitId":"lihongguang00"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-11"},{"lineNumber":197,"author":{"gitId":"lihongguang00"},"content":"            return true;","lastModifiedDate":"2023-10-11"},{"lineNumber":198,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":199,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":200,"author":{"gitId":"lihongguang00"},"content":"        if (!(other instanceof AllDaysEventListManager)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":201,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":202,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":203,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":204,"author":{"gitId":"lihongguang00"},"content":"        AllDaysEventListManager otherManager \u003d (AllDaysEventListManager) other;","lastModifiedDate":"2023-10-11"},{"lineNumber":205,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":206,"author":{"gitId":"lihongguang00"},"content":"        if (!(this.dayToEventListMap.size() \u003d\u003d otherManager.dayToEventListMap.size())) {","lastModifiedDate":"2023-10-11"},{"lineNumber":207,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":208,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":209,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":210,"author":{"gitId":"lihongguang00"},"content":"        for (SingleDayEventList day : this.dayToEventListMap.values()) {","lastModifiedDate":"2023-10-11"},{"lineNumber":211,"author":{"gitId":"lihongguang00"},"content":"            if (!otherManager.contains(day)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":212,"author":{"gitId":"lihongguang00"},"content":"                return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":213,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-10-11"},{"lineNumber":214,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":215,"author":{"gitId":"lihongguang00"},"content":"        return true;","lastModifiedDate":"2023-10-11"},{"lineNumber":216,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":217,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"junhonglow":17,"lihongguang00":136,"Fallman2":64}},{"path":"src/main/java/seedu/address/model/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.time.DayOfWeek;","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.time.Duration;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-11"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import java.util.List;","lastModifiedDate":"2023-10-11"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":" * Represents an event in the calendar","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"public class Event {","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    private EventDescription description;","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    private EventPeriod eventPeriod;","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    private Optional\u003cEvent\u003e parentEvent;","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an event with a given description occurring over the given time period.","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     * @param eventPeriod The period of time when the event occurs.","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    public Event(EventDescription description, EventPeriod eventPeriod) {","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        requireAllNonNull(description, eventPeriod);","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d eventPeriod;","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        this.parentEvent \u003d Optional.\u003cEvent\u003eempty();","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an event with a given description occurring over a given time period with a parent Event.","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * @param eventPeriod The period of the time when the event occurs.","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     * @param parent parent Event object this Event object was dervied from.","lastModifiedDate":"2023-10-25"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    private Event(EventDescription description, EventPeriod eventPeriod, Event parent) {","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        requireAllNonNull(description, eventPeriod, parent);","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d eventPeriod;","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        this.parentEvent \u003d Optional.\u003cEvent\u003eof(parent);","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     * Creates and returns a new Event object that is guaranteed to not conflict with any other event.","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"     * @return A new non-conflicting Event object.","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    public static Event createNonConflictingEvent() {","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        return new Event(EventDescription.createUnusedDescription(), EventPeriod.createNonConflictingPeriod());","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     * Gets the description of the event.","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     * @return The description of the event.","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    public EventDescription getDescription() {","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        return this.description;","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     * Gets the time period during which the event occurs.","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     * @return The time period of the event.","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"    public EventPeriod getEventPeriod() {","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"        return this.eventPeriod;","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"     * Checks if this event overlaps with another event period","lastModifiedDate":"2023-10-28"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"     * @param period The other event period.","lastModifiedDate":"2023-10-28"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"     * @return True if there is an overlap, false otherwise.","lastModifiedDate":"2023-10-28"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"    public boolean isPeriodConflicting(EventPeriod period) {","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(period);","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"        return eventPeriod.isOverlapping(period);","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"     * Checks if this event conflicts with another event.","lastModifiedDate":"2023-10-07"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"     * @param other The other event to check for conflicts with.","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"     * @return True if there is a conflict, false otherwise.","lastModifiedDate":"2023-10-07"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"    public boolean isConflicting(Event other) {","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(other);","lastModifiedDate":"2023-10-07"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"        return isPeriodConflicting(other.eventPeriod);","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"     * Changes the description of the event.","lastModifiedDate":"2023-10-07"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"     * @param description The new description for the event.","lastModifiedDate":"2023-10-07"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"    public void changeDescription(EventDescription description) {","lastModifiedDate":"2023-10-07"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-10-07"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"     * Changes the time period during which the event occurs.","lastModifiedDate":"2023-10-07"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"     * @param eventPeriod The new time period for the event.","lastModifiedDate":"2023-10-07"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"    public void changeEventPeriod(EventPeriod eventPeriod) {","lastModifiedDate":"2023-10-07"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(eventPeriod);","lastModifiedDate":"2023-10-07"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d eventPeriod;","lastModifiedDate":"2023-10-07"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"     * Get the dates the event spans, stored in a list.","lastModifiedDate":"2023-10-11"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"     * @return list of the dates the event spans.","lastModifiedDate":"2023-10-11"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"    public List\u003cLocalDate\u003e getEventDays() {","lastModifiedDate":"2023-10-11"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"        return this.eventPeriod.getDates();","lastModifiedDate":"2023-10-11"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"     * Checks if the {@code @LocalDateTime} is during the event.","lastModifiedDate":"2023-10-19"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"     * @param dateTime the specified {@code @LocalDateTime}.","lastModifiedDate":"2023-10-19"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"     * @return true if the time is during the event, false otherwise.","lastModifiedDate":"2023-10-19"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"    public boolean isDuring(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-19"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"        return this.eventPeriod.isWithin(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"     * Bounds the {@code @Event} such that the {@code @EventPeriod} of the formatted event happens within","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"     * the specified {@code @LocalDate}.","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"     * @param date the specified {@code @LocalDate}.","lastModifiedDate":"2023-10-24"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"     * @return new {@code @Event} with adjusted {@code @EventPeriod}.","lastModifiedDate":"2023-10-24"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"    public Event boundEventByDate(LocalDate date) {","lastModifiedDate":"2023-10-24"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"        if (hasParent()) {","lastModifiedDate":"2023-10-25"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"            return this;","lastModifiedDate":"2023-10-25"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"        return new Event(description, eventPeriod.boundPeriodByDate(date), this);","lastModifiedDate":"2023-10-25"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"     * Get the parent Event object of this Event object.","lastModifiedDate":"2023-10-25"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"     * @return the parent Event object. If there is no parent, returns itself.","lastModifiedDate":"2023-10-25"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"    public Event getParentEvent() {","lastModifiedDate":"2023-10-25"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"        return parentEvent.orElse(this);","lastModifiedDate":"2023-10-25"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"     * Checks if this Event object has a parent Event.","lastModifiedDate":"2023-10-25"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"     * @return true if it has a parent Event object, false otherwise.","lastModifiedDate":"2023-10-25"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"    public boolean hasParent() {","lastModifiedDate":"2023-10-25"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"        return parentEvent.isPresent();","lastModifiedDate":"2023-10-25"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"    public LocalDateTime getStartDateTime() {","lastModifiedDate":"2023-10-28"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"        if (hasParent()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"            return parentEvent.get().getStartDateTime();","lastModifiedDate":"2023-10-28"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"        return eventPeriod.getStart();","lastModifiedDate":"2023-10-28"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the Event\u0027s eventDuration spans a single day.","lastModifiedDate":"2023-10-27"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"     * @return true if it spans a single day, false otherwise.","lastModifiedDate":"2023-10-27"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"    private boolean isEventDurationSingleDay() {","lastModifiedDate":"2023-10-27"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"        return eventPeriod.isSingleDay();","lastModifiedDate":"2023-10-27"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"     * Checks if parent Event\u0027s EventPeriod overlaps with the start and end dates(inclusive).","lastModifiedDate":"2023-10-25"},{"lineNumber":196,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":197,"author":{"gitId":"lihongguang00"},"content":"     * @param start start date.","lastModifiedDate":"2023-10-25"},{"lineNumber":198,"author":{"gitId":"lihongguang00"},"content":"     * @param end end date.","lastModifiedDate":"2023-10-25"},{"lineNumber":199,"author":{"gitId":"lihongguang00"},"content":"     * @return true if the parent Event\u0027s EventPeriod overlaps with the start and end date.","lastModifiedDate":"2023-10-25"},{"lineNumber":200,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":201,"author":{"gitId":"lihongguang00"},"content":"    public boolean occursBetweenDates(LocalDate start, LocalDate end) {","lastModifiedDate":"2023-10-25"},{"lineNumber":202,"author":{"gitId":"lihongguang00"},"content":"        requireAllNonNull(start, end);","lastModifiedDate":"2023-10-25"},{"lineNumber":203,"author":{"gitId":"lihongguang00"},"content":"        return eventPeriod.isOverlapping(start, end);","lastModifiedDate":"2023-10-28"},{"lineNumber":204,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":205,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":206,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":207,"author":{"gitId":"lihongguang00"},"content":"     * Compare the start time (independent of date) of this Event with another.","lastModifiedDate":"2023-10-26"},{"lineNumber":208,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":209,"author":{"gitId":"lihongguang00"},"content":"     * @param other other Event.","lastModifiedDate":"2023-10-26"},{"lineNumber":210,"author":{"gitId":"lihongguang00"},"content":"     * @return a negative integer if this Event has an earlier start time than the other, 0 if they have the same start","lastModifiedDate":"2023-10-26"},{"lineNumber":211,"author":{"gitId":"lihongguang00"},"content":"     *     time and a positive integer otherwise.","lastModifiedDate":"2023-10-26"},{"lineNumber":212,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":213,"author":{"gitId":"lihongguang00"},"content":"    public int compareStartTime(Event other) {","lastModifiedDate":"2023-10-26"},{"lineNumber":214,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(other);","lastModifiedDate":"2023-10-26"},{"lineNumber":215,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":216,"author":{"gitId":"lihongguang00"},"content":"        return this.eventPeriod.compareStartTime(other.eventPeriod);","lastModifiedDate":"2023-10-26"},{"lineNumber":217,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":218,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":219,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":220,"author":{"gitId":"lihongguang00"},"content":"     * Compare the end time (independent of date) of this Event with another.","lastModifiedDate":"2023-10-26"},{"lineNumber":221,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":222,"author":{"gitId":"lihongguang00"},"content":"     * @param other other Event.","lastModifiedDate":"2023-10-26"},{"lineNumber":223,"author":{"gitId":"lihongguang00"},"content":"     * @return a negative integer if this Event has an earlier end time than the other, 0 if they have the same end time","lastModifiedDate":"2023-10-26"},{"lineNumber":224,"author":{"gitId":"lihongguang00"},"content":"     *     and a positive integer otherwise.","lastModifiedDate":"2023-10-26"},{"lineNumber":225,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":226,"author":{"gitId":"lihongguang00"},"content":"    public int compareEndTime(Event other) {","lastModifiedDate":"2023-10-26"},{"lineNumber":227,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(other);","lastModifiedDate":"2023-10-26"},{"lineNumber":228,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":229,"author":{"gitId":"lihongguang00"},"content":"        return this.eventPeriod.compareEndTime(other.eventPeriod);","lastModifiedDate":"2023-10-26"},{"lineNumber":230,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":231,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":232,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":233,"author":{"gitId":"lihongguang00"},"content":"     * Get the start time of the event as a LocalTime object, omitting the date.","lastModifiedDate":"2023-10-26"},{"lineNumber":234,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":235,"author":{"gitId":"lihongguang00"},"content":"     * @return the start time of the event as a LocalTime object, omitting the date.","lastModifiedDate":"2023-10-26"},{"lineNumber":236,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":237,"author":{"gitId":"lihongguang00"},"content":"    public LocalTime getStartTime() {","lastModifiedDate":"2023-10-26"},{"lineNumber":238,"author":{"gitId":"lihongguang00"},"content":"        return eventPeriod.getStartTime();","lastModifiedDate":"2023-10-26"},{"lineNumber":239,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":240,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":241,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":242,"author":{"gitId":"lihongguang00"},"content":"     * Get the end time of the event as a LocalTime object, omitting the date.","lastModifiedDate":"2023-10-26"},{"lineNumber":243,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":244,"author":{"gitId":"lihongguang00"},"content":"     * @return the end time of the event as a LocalTime object, omitting the date.","lastModifiedDate":"2023-10-26"},{"lineNumber":245,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":246,"author":{"gitId":"lihongguang00"},"content":"    public LocalTime getEndTime() {","lastModifiedDate":"2023-10-26"},{"lineNumber":247,"author":{"gitId":"lihongguang00"},"content":"        return eventPeriod.getEndTime();","lastModifiedDate":"2023-10-26"},{"lineNumber":248,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":249,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":250,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":251,"author":{"gitId":"lihongguang00"},"content":"     * Get the duration of the Event, stored in a LocalTime object.","lastModifiedDate":"2023-10-27"},{"lineNumber":252,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":253,"author":{"gitId":"lihongguang00"},"content":"     * @return LocalTime object of the duration of the Event.","lastModifiedDate":"2023-10-27"},{"lineNumber":254,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":255,"author":{"gitId":"lihongguang00"},"content":"    public Duration getDurationOfEvent() {","lastModifiedDate":"2023-10-30"},{"lineNumber":256,"author":{"gitId":"lihongguang00"},"content":"        return eventPeriod.getDuration();","lastModifiedDate":"2023-10-27"},{"lineNumber":257,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":258,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":259,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":260,"author":{"gitId":"lihongguang00"},"content":"     * Get the description of the Event in a String format.","lastModifiedDate":"2023-10-27"},{"lineNumber":261,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":262,"author":{"gitId":"lihongguang00"},"content":"     * @return String of the description of the Event.","lastModifiedDate":"2023-10-27"},{"lineNumber":263,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":264,"author":{"gitId":"lihongguang00"},"content":"    public String getDescriptionString() {","lastModifiedDate":"2023-10-27"},{"lineNumber":265,"author":{"gitId":"lihongguang00"},"content":"        return description.getDescription();","lastModifiedDate":"2023-10-27"},{"lineNumber":266,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":267,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":268,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":269,"author":{"gitId":"lihongguang00"},"content":"     * Get the DayOfWeek of the Event. Event has to have a EventPeriod that spans a single day.","lastModifiedDate":"2023-10-27"},{"lineNumber":270,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":271,"author":{"gitId":"lihongguang00"},"content":"     * @return DayOfWeek of the Event.","lastModifiedDate":"2023-10-27"},{"lineNumber":272,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":273,"author":{"gitId":"lihongguang00"},"content":"    public DayOfWeek getDayOfWeek() {","lastModifiedDate":"2023-10-27"},{"lineNumber":274,"author":{"gitId":"lihongguang00"},"content":"        assert(isEventDurationSingleDay());","lastModifiedDate":"2023-10-27"},{"lineNumber":275,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":276,"author":{"gitId":"lihongguang00"},"content":"        return eventPeriod.getDayOfWeek();","lastModifiedDate":"2023-10-27"},{"lineNumber":277,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":278,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":279,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":280,"author":{"gitId":"lihongguang00"},"content":"     * Get the number of minutes elapsed from the input time to the start time of the Event.","lastModifiedDate":"2023-10-27"},{"lineNumber":281,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":282,"author":{"gitId":"lihongguang00"},"content":"     * @param time input time.","lastModifiedDate":"2023-10-27"},{"lineNumber":283,"author":{"gitId":"lihongguang00"},"content":"     * @return number of minutes elapsed from the input time to the start time of the Event.","lastModifiedDate":"2023-10-27"},{"lineNumber":284,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":285,"author":{"gitId":"lihongguang00"},"content":"    public long getMinutesFromTimeToStartTime(LocalTime time) {","lastModifiedDate":"2023-10-27"},{"lineNumber":286,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(time);","lastModifiedDate":"2023-10-27"},{"lineNumber":287,"author":{"gitId":"lihongguang00"},"content":"        return eventPeriod.getMinutesFromTimeToStartTime(time);","lastModifiedDate":"2023-10-27"},{"lineNumber":288,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":289,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":290,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":291,"author":{"gitId":"lihongguang00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-09"},{"lineNumber":292,"author":{"gitId":"lihongguang00"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-09"},{"lineNumber":293,"author":{"gitId":"lihongguang00"},"content":"            return true;","lastModifiedDate":"2023-10-09"},{"lineNumber":294,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":295,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":296,"author":{"gitId":"lihongguang00"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2023-10-09"},{"lineNumber":297,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-09"},{"lineNumber":298,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":299,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":300,"author":{"gitId":"lihongguang00"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2023-10-09"},{"lineNumber":301,"author":{"gitId":"lihongguang00"},"content":"        return (otherEvent.description.equals(this.description)","lastModifiedDate":"2023-10-27"},{"lineNumber":302,"author":{"gitId":"lihongguang00"},"content":"                \u0026\u0026 (otherEvent.eventPeriod.equals(this.eventPeriod)","lastModifiedDate":"2023-10-27"},{"lineNumber":303,"author":{"gitId":"lihongguang00"},"content":"                        || otherEvent.eventPeriod.isContinuous(this.eventPeriod)));","lastModifiedDate":"2023-10-27"},{"lineNumber":304,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":305,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"lihongguang00":272,"Fallman2":33}},{"path":"src/main/java/seedu/address/model/event/EventDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.exceptions.InvalidDescriptionException;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":" * Represents the description of an event.","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"public class EventDescription {","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Description cannot be empty.\";","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    private final String description;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an EventDescription object with the given description.","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    public EventDescription(String description) {","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"            throw new InvalidDescriptionException();","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     * Creates and returns a new EventDescription object with a placeholder description.","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     * @return A new EventDescription object with a placeholder description.","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    public static EventDescription createUnusedDescription() {","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        return new EventDescription(\"THIS IS A PLACEHOLDER\");","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the given string is a valid description for creating a EventDescription object.","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * @param description description String to be checked.","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * @return true if description is non-empty, false if it is empty.","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    public static boolean isValid(String description) {","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        return !description.isEmpty();","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     * Retrieve the underlying String of the description.","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"     * @return String of the description.","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"    public String getDescription() {","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        return this.description;","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-09"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-09"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"            return true;","lastModifiedDate":"2023-10-09"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"        if (!(other instanceof EventDescription)) {","lastModifiedDate":"2023-10-09"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-09"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        EventDescription otherDescription \u003d (EventDescription) other;","lastModifiedDate":"2023-10-09"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        return otherDescription.description.equals(this.description);","lastModifiedDate":"2023-10-09"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    public String toString() {","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"        return this.description;","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"lihongguang00":74}},{"path":"src/main/java/seedu/address/model/event/EventPeriod.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static java.time.temporal.ChronoUnit.MINUTES;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import java.time.DayOfWeek;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import java.time.Duration;","lastModifiedDate":"2023-10-11"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-11"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import java.util.List;","lastModifiedDate":"2023-10-11"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.exceptions.DateOutOfBoundsException;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":" * Represents a period in time when an event will occur.","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"public class EventPeriod implements Comparable\u003cEventPeriod\u003e {","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"The start date and time and end date and time should \"","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"            + \"be in the format \u0027yyyy-MM-dd HH:mm\u0027 where:\\n\"","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"            + \"    -\u0027yyyy\u0027 is the year.\\n\"","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"            + \"    -\u0027MM\u0027 is the month.\\n\"","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"            + \"    -\u0027dd\u0027 is the day.\\n\"","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"            + \"    -\u0027HH:mm\u0027 is the time in 24-hour format.\";","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    public static final DateTimeFormatter DATE_TIME_STRING_FORMATTER \u003d DateTimeFormatter.ofPattern(","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"            \"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    private static final LocalTime MAX_TIME_OF_DAY \u003d LocalTime.MIDNIGHT.minusMinutes(1);","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    private final LocalDateTime start;","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    private final LocalDateTime end;","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an EventPeriod object with the given start and end date/time strings.","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * @param startString The string representation of the start date and time.","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * @param endString The string representation of the end date and time.","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    public EventPeriod(String startString, String endString) {","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        this(LocalDateTime.parse(startString, DATE_TIME_STRING_FORMATTER),","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"                LocalDateTime.parse(endString, DATE_TIME_STRING_FORMATTER));","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    private EventPeriod(LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    public LocalDateTime getStart() {","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        return this.start;","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     * Creates and returns a new EventPeriod object with minimum date/time values.","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"     * @return A new EventPeriod object with minimum date/time values.","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"    public static EventPeriod createNonConflictingPeriod() {","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"        return new EventPeriod(LocalDateTime.MAX, LocalDateTime.MIN);","lastModifiedDate":"2023-10-09"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the given start and end date/time strings form a valid period.","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"     * @param startString The string representation of the start date and time.","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     * @param endString The string representation of the end date and time.","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     * @return True if the period is valid, false otherwise.","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"    public static boolean isValidPeriod(String startString, String endString) {","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"        requireAllNonNull(startString, endString);","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"        LocalDateTime startDateTime;","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        LocalDateTime endDateTime;","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"        try {","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"            startDateTime \u003d LocalDateTime.parse(startString, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"            endDateTime \u003d LocalDateTime.parse(endString, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        } catch (DateTimeParseException invalidFormatException) {","lastModifiedDate":"2023-10-07"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-07"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"        return startDateTime.isBefore(endDateTime);","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"     * Checks if this EventPeriod overlaps with another EventPeriod.","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"     * @param other The EventPeriod to check for overlap with.","lastModifiedDate":"2023-10-07"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"     * @return True if there is an overlap, false otherwise.","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"    public boolean isOverlapping(EventPeriod other) {","lastModifiedDate":"2023-10-07"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(other);","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"        return this.start.isBefore(other.end) \u0026\u0026 other.start.isBefore(this.end);","lastModifiedDate":"2023-10-07"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"     * Checks if this EventPeriod overlaps with the given start date and end date.","lastModifiedDate":"2023-10-25"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"     * @param start start date.","lastModifiedDate":"2023-10-25"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"     * @param end end date.","lastModifiedDate":"2023-10-25"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"     * @return True if there is an overlap, false otherwise.","lastModifiedDate":"2023-10-25"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"    public boolean isOverlapping(LocalDate start, LocalDate end) {","lastModifiedDate":"2023-10-25"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"        requireAllNonNull(start, end);","lastModifiedDate":"2023-10-25"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"        boolean isThisEventStartingAfterOtherEventEnds \u003d this.start.toLocalDate().isAfter(end);","lastModifiedDate":"2023-10-28"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"        boolean isThisEventEndedBeforeOtherEventStarts \u003d this.end.toLocalDate().isBefore(start);","lastModifiedDate":"2023-10-28"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"        return !(isThisEventStartingAfterOtherEventEnds || isThisEventEndedBeforeOtherEventStarts);","lastModifiedDate":"2023-10-28"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"     * Checks if a specified {@code @LocalDateTime} is within the {@code @EventPeriod}.","lastModifiedDate":"2023-10-19"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"     * @param dateTime the specified {@code @LocalDateTime}.","lastModifiedDate":"2023-10-19"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"     * @return True if it is within the period, false otherwise.","lastModifiedDate":"2023-10-19"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"    public boolean isWithin(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-19"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"        return (start.isEqual(dateTime) || start.isBefore(dateTime)) \u0026\u0026 end.isAfter(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"     * Compares this EventPeriod with another EventPeriod.","lastModifiedDate":"2023-10-07"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"     * @param other The EventPeriod to compare with.","lastModifiedDate":"2023-10-07"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"     * @return 1 if this EventPeriod is after the other, -1 if it\u0027s before, 0 if they are the same.","lastModifiedDate":"2023-10-07"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-14"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"    public int compareTo(EventPeriod other) {","lastModifiedDate":"2023-10-07"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(other);","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"        if (this.start.isBefore(other.start)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"            return -1;","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"        } else if (this.start.isEqual(other.start)) {","lastModifiedDate":"2023-10-10"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"            return 0;","lastModifiedDate":"2023-10-10"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-10-10"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"            return 1;","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"     * Get the dates the eventPeriod spans, stored in an arrayList.","lastModifiedDate":"2023-10-11"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"     * @return list of the dates the eventPeriod spans.","lastModifiedDate":"2023-10-11"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"    public List\u003cLocalDate\u003e getDates() {","lastModifiedDate":"2023-10-11"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"        Duration durationBetweenStartAndEnd \u003d Duration.between(start, end);","lastModifiedDate":"2023-10-11"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"        long numberOfDays \u003d durationBetweenStartAndEnd.toDays();","lastModifiedDate":"2023-10-11"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"        List\u003cLocalDate\u003e listOfDates \u003d new ArrayList\u003cLocalDate\u003e();","lastModifiedDate":"2023-10-11"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"        for (long i \u003d 0; i \u003c\u003d numberOfDays; i++) {","lastModifiedDate":"2023-10-11"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"            listOfDates.add(this.start.toLocalDate().plusDays(i));","lastModifiedDate":"2023-10-11"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"        return listOfDates;","lastModifiedDate":"2023-10-11"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":157,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":158,"author":{"gitId":"junhonglow"},"content":"     * Get the string representation of the EventPeriod.","lastModifiedDate":"2023-10-19"},{"lineNumber":159,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":160,"author":{"gitId":"junhonglow"},"content":"     * @return string representation of the period the eventPeriod spans.","lastModifiedDate":"2023-10-19"},{"lineNumber":161,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":162,"author":{"gitId":"junhonglow"},"content":"    public String getFormattedPeriod() {","lastModifiedDate":"2023-10-19"},{"lineNumber":163,"author":{"gitId":"junhonglow"},"content":"        String startString \u003d start.format(DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-19"},{"lineNumber":164,"author":{"gitId":"junhonglow"},"content":"        String endString \u003d end.format(DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-19"},{"lineNumber":165,"author":{"gitId":"junhonglow"},"content":"        return startString + \" - \" + endString;","lastModifiedDate":"2023-10-19"},{"lineNumber":166,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":167,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":168,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":169,"author":{"gitId":"Fallman2"},"content":"     * Get the string representation of the EventPeriod start DateTime.","lastModifiedDate":"2023-10-28"},{"lineNumber":170,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":171,"author":{"gitId":"Fallman2"},"content":"     * @return string representation of the start DateTime.","lastModifiedDate":"2023-10-28"},{"lineNumber":172,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":173,"author":{"gitId":"Fallman2"},"content":"    public String getFormattedStart() {","lastModifiedDate":"2023-10-28"},{"lineNumber":174,"author":{"gitId":"Fallman2"},"content":"        return start.format(DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-28"},{"lineNumber":175,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":176,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"     * Get the string representation of the EventPeriod end DateTime.","lastModifiedDate":"2023-10-28"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"     * @return string representation of the end DateTime.","lastModifiedDate":"2023-10-28"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"    public String getFormattedEnd() {","lastModifiedDate":"2023-10-28"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"        return end.format(DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-28"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"     * Checks if another {@code @EventPeriod} occurs within a minute with this {@code @EventPeriod}.","lastModifiedDate":"2023-10-24"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"     * @param other the other {@code @EventPeriod}.","lastModifiedDate":"2023-10-24"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"     * @return true if they are apart by a single minute.","lastModifiedDate":"2023-10-24"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"    public boolean isContinuous(EventPeriod other) {","lastModifiedDate":"2023-10-24"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(other);","lastModifiedDate":"2023-10-24"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"        return this.start.plusMinutes(1) \u003d\u003d other.end || other.start.plusMinutes(1) \u003d\u003d this.end;","lastModifiedDate":"2023-10-24"},{"lineNumber":196,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":197,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":198,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":199,"author":{"gitId":"lihongguang00"},"content":"     * Bounds the {@code EventPeriod} such that the start and end lies within the specified {@code LocalDate}.","lastModifiedDate":"2023-10-24"},{"lineNumber":200,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":201,"author":{"gitId":"lihongguang00"},"content":"     * @param date the specified {@code @LocalDate}.","lastModifiedDate":"2023-10-24"},{"lineNumber":202,"author":{"gitId":"lihongguang00"},"content":"     * @return new {@code @EventPeriod} with adjusted start and end times.","lastModifiedDate":"2023-10-24"},{"lineNumber":203,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":204,"author":{"gitId":"lihongguang00"},"content":"    public EventPeriod boundPeriodByDate(LocalDate date) {","lastModifiedDate":"2023-10-24"},{"lineNumber":205,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-10-24"},{"lineNumber":206,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":207,"author":{"gitId":"lihongguang00"},"content":"        boolean isDateOnStartDate \u003d date.isEqual(start.toLocalDate());","lastModifiedDate":"2023-10-28"},{"lineNumber":208,"author":{"gitId":"lihongguang00"},"content":"        boolean isDateOnEndDate \u003d date.isEqual(end.toLocalDate());","lastModifiedDate":"2023-10-28"},{"lineNumber":209,"author":{"gitId":"lihongguang00"},"content":"        boolean isDateAfterStartDate \u003d date.isAfter(start.toLocalDate());","lastModifiedDate":"2023-10-28"},{"lineNumber":210,"author":{"gitId":"lihongguang00"},"content":"        boolean isDateBeforeEndDate \u003d date.isBefore(end.toLocalDate());","lastModifiedDate":"2023-10-28"},{"lineNumber":211,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":212,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":213,"author":{"gitId":"lihongguang00"},"content":"        if (isDateOnStartDate \u0026\u0026 isDateOnEndDate) {","lastModifiedDate":"2023-10-28"},{"lineNumber":214,"author":{"gitId":"lihongguang00"},"content":"            return this;","lastModifiedDate":"2023-10-24"},{"lineNumber":215,"author":{"gitId":"lihongguang00"},"content":"        } else if (isDateOnStartDate) {","lastModifiedDate":"2023-10-28"},{"lineNumber":216,"author":{"gitId":"lihongguang00"},"content":"            return new EventPeriod(start, LocalDateTime.of(date, MAX_TIME_OF_DAY));","lastModifiedDate":"2023-10-24"},{"lineNumber":217,"author":{"gitId":"lihongguang00"},"content":"        } else if (isDateOnEndDate) {","lastModifiedDate":"2023-10-28"},{"lineNumber":218,"author":{"gitId":"lihongguang00"},"content":"            return new EventPeriod(LocalDateTime.of(date, LocalTime.MIDNIGHT), end);","lastModifiedDate":"2023-10-24"},{"lineNumber":219,"author":{"gitId":"lihongguang00"},"content":"        } else if (isDateAfterStartDate \u0026\u0026 isDateBeforeEndDate) {","lastModifiedDate":"2023-10-28"},{"lineNumber":220,"author":{"gitId":"lihongguang00"},"content":"            return new EventPeriod(LocalDateTime.of(date, LocalTime.MIDNIGHT),","lastModifiedDate":"2023-10-25"},{"lineNumber":221,"author":{"gitId":"lihongguang00"},"content":"                    LocalDateTime.of(date, MAX_TIME_OF_DAY));","lastModifiedDate":"2023-10-25"},{"lineNumber":222,"author":{"gitId":"lihongguang00"},"content":"        } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":223,"author":{"gitId":"lihongguang00"},"content":"            throw new DateOutOfBoundsException();","lastModifiedDate":"2023-10-24"},{"lineNumber":224,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":225,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":226,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":227,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":228,"author":{"gitId":"lihongguang00"},"content":"     * Compare the start time (independent of date) of this EventPeriod with another.","lastModifiedDate":"2023-10-26"},{"lineNumber":229,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":230,"author":{"gitId":"lihongguang00"},"content":"     * @param other other EventPeriod object.","lastModifiedDate":"2023-10-26"},{"lineNumber":231,"author":{"gitId":"lihongguang00"},"content":"     * @return a negative integer if this EventPeriod has an earlier start time than the other, 0 if both have the same","lastModifiedDate":"2023-10-26"},{"lineNumber":232,"author":{"gitId":"lihongguang00"},"content":"     *     start time and a positive integer otherwise.","lastModifiedDate":"2023-10-26"},{"lineNumber":233,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":234,"author":{"gitId":"lihongguang00"},"content":"    public int compareStartTime(EventPeriod other) {","lastModifiedDate":"2023-10-26"},{"lineNumber":235,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(other);","lastModifiedDate":"2023-10-26"},{"lineNumber":236,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":237,"author":{"gitId":"lihongguang00"},"content":"        return this.start.toLocalTime().compareTo(other.start.toLocalTime());","lastModifiedDate":"2023-10-26"},{"lineNumber":238,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":239,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":240,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":241,"author":{"gitId":"lihongguang00"},"content":"     * Compare the end time (independent of date) of this EventPeriod with another.","lastModifiedDate":"2023-10-26"},{"lineNumber":242,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":243,"author":{"gitId":"lihongguang00"},"content":"     * @param other other EventPeriod object.","lastModifiedDate":"2023-10-26"},{"lineNumber":244,"author":{"gitId":"lihongguang00"},"content":"     * @return a negative integer if this EventPeriod has an earlier end time than the other, 0 if both have the same","lastModifiedDate":"2023-10-26"},{"lineNumber":245,"author":{"gitId":"lihongguang00"},"content":"     *     end time and a positive integer otherwise.","lastModifiedDate":"2023-10-26"},{"lineNumber":246,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":247,"author":{"gitId":"lihongguang00"},"content":"    public int compareEndTime(EventPeriod other) {","lastModifiedDate":"2023-10-26"},{"lineNumber":248,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(other);","lastModifiedDate":"2023-10-26"},{"lineNumber":249,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":250,"author":{"gitId":"lihongguang00"},"content":"        return this.end.toLocalTime().compareTo(other.end.toLocalTime());","lastModifiedDate":"2023-10-26"},{"lineNumber":251,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":252,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":253,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":254,"author":{"gitId":"lihongguang00"},"content":"     * Get the start time as a LocalTime of the EventPeriod, omitting the date.","lastModifiedDate":"2023-10-26"},{"lineNumber":255,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":256,"author":{"gitId":"lihongguang00"},"content":"     * @return the start time as a LocalTime of the EventPeriod.","lastModifiedDate":"2023-10-26"},{"lineNumber":257,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":258,"author":{"gitId":"lihongguang00"},"content":"    public LocalTime getStartTime() {","lastModifiedDate":"2023-10-26"},{"lineNumber":259,"author":{"gitId":"lihongguang00"},"content":"        return start.toLocalTime();","lastModifiedDate":"2023-10-26"},{"lineNumber":260,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":261,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":262,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":263,"author":{"gitId":"lihongguang00"},"content":"     * Get the end time as a LocalTime of the EventPeriod, omitting the date.","lastModifiedDate":"2023-10-26"},{"lineNumber":264,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":265,"author":{"gitId":"lihongguang00"},"content":"     * @return the end time as a LocalTime of the EventPeriod.","lastModifiedDate":"2023-10-26"},{"lineNumber":266,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":267,"author":{"gitId":"lihongguang00"},"content":"    public LocalTime getEndTime() {","lastModifiedDate":"2023-10-26"},{"lineNumber":268,"author":{"gitId":"lihongguang00"},"content":"        return end.toLocalTime();","lastModifiedDate":"2023-10-26"},{"lineNumber":269,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":270,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":271,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":272,"author":{"gitId":"lihongguang00"},"content":"     * Get the duration of the EventPeriod stored in a LocalTime.","lastModifiedDate":"2023-10-27"},{"lineNumber":273,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":274,"author":{"gitId":"lihongguang00"},"content":"     * @return duration of the EventPeriod stored in a LocalTime.","lastModifiedDate":"2023-10-27"},{"lineNumber":275,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":276,"author":{"gitId":"lihongguang00"},"content":"    public Duration getDuration() {","lastModifiedDate":"2023-10-30"},{"lineNumber":277,"author":{"gitId":"lihongguang00"},"content":"        Duration periodDuration \u003d Duration.between(start, end);","lastModifiedDate":"2023-10-30"},{"lineNumber":278,"author":{"gitId":"lihongguang00"},"content":"        if (end.toLocalTime().equals(MAX_TIME_OF_DAY)) {","lastModifiedDate":"2023-10-30"},{"lineNumber":279,"author":{"gitId":"lihongguang00"},"content":"            periodDuration \u003d periodDuration.plusMinutes(1);","lastModifiedDate":"2023-10-30"},{"lineNumber":280,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":281,"author":{"gitId":"lihongguang00"},"content":"        return periodDuration;","lastModifiedDate":"2023-10-30"},{"lineNumber":282,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":283,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":284,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":285,"author":{"gitId":"lihongguang00"},"content":"     * Checks if the start and end LocalDateTime objects occur on the same date.","lastModifiedDate":"2023-10-27"},{"lineNumber":286,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":287,"author":{"gitId":"lihongguang00"},"content":"     * @return true if they both occur on the same date, false otherwise.","lastModifiedDate":"2023-10-27"},{"lineNumber":288,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":289,"author":{"gitId":"lihongguang00"},"content":"    public boolean isSingleDay() {","lastModifiedDate":"2023-10-27"},{"lineNumber":290,"author":{"gitId":"lihongguang00"},"content":"        return start.toLocalDate().isEqual(end.toLocalDate());","lastModifiedDate":"2023-10-27"},{"lineNumber":291,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":292,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":293,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":294,"author":{"gitId":"lihongguang00"},"content":"     * Get the DayOfWeek of this EventPeriod. EventPeriod has to only span a single day.","lastModifiedDate":"2023-10-27"},{"lineNumber":295,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":296,"author":{"gitId":"lihongguang00"},"content":"     * @return DayOfWeek of this EventPeriod.","lastModifiedDate":"2023-10-27"},{"lineNumber":297,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":298,"author":{"gitId":"lihongguang00"},"content":"    public DayOfWeek getDayOfWeek() {","lastModifiedDate":"2023-10-27"},{"lineNumber":299,"author":{"gitId":"lihongguang00"},"content":"        assert(isSingleDay());","lastModifiedDate":"2023-10-27"},{"lineNumber":300,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":301,"author":{"gitId":"lihongguang00"},"content":"        return start.getDayOfWeek();","lastModifiedDate":"2023-10-27"},{"lineNumber":302,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":303,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":304,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":305,"author":{"gitId":"lihongguang00"},"content":"     * Get the number of minutes elapsed from the input time to the start time of this EventPeriod.","lastModifiedDate":"2023-10-27"},{"lineNumber":306,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":307,"author":{"gitId":"lihongguang00"},"content":"     * @param time input time.","lastModifiedDate":"2023-10-27"},{"lineNumber":308,"author":{"gitId":"lihongguang00"},"content":"     * @return minutes elapsed from the input time to the start time of the EventPeriod.","lastModifiedDate":"2023-10-27"},{"lineNumber":309,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":310,"author":{"gitId":"lihongguang00"},"content":"    public long getMinutesFromTimeToStartTime(LocalTime time) {","lastModifiedDate":"2023-10-27"},{"lineNumber":311,"author":{"gitId":"lihongguang00"},"content":"        return MINUTES.between(time, getStartTime());","lastModifiedDate":"2023-10-27"},{"lineNumber":312,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":313,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":314,"author":{"gitId":"lihongguang00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-09"},{"lineNumber":315,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(other);","lastModifiedDate":"2023-10-13"},{"lineNumber":316,"author":{"gitId":"lihongguang00"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-09"},{"lineNumber":317,"author":{"gitId":"lihongguang00"},"content":"            return true;","lastModifiedDate":"2023-10-09"},{"lineNumber":318,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":319,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":320,"author":{"gitId":"lihongguang00"},"content":"        if (!(other instanceof EventPeriod)) {","lastModifiedDate":"2023-10-09"},{"lineNumber":321,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-09"},{"lineNumber":322,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":323,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":324,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod otherEventPeriod \u003d (EventPeriod) other;","lastModifiedDate":"2023-10-09"},{"lineNumber":325,"author":{"gitId":"lihongguang00"},"content":"        return otherEventPeriod.start.isEqual(this.start) \u0026\u0026 otherEventPeriod.end.isEqual(this.end);","lastModifiedDate":"2023-10-09"},{"lineNumber":326,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":327,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":328,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":329,"author":{"gitId":"lihongguang00"},"content":"    public String toString() {","lastModifiedDate":"2023-10-07"},{"lineNumber":330,"author":{"gitId":"lihongguang00"},"content":"        return \"start: \"","lastModifiedDate":"2023-10-07"},{"lineNumber":331,"author":{"gitId":"lihongguang00"},"content":"                + this.start.format(DATE_TIME_STRING_FORMATTER)","lastModifiedDate":"2023-10-07"},{"lineNumber":332,"author":{"gitId":"lihongguang00"},"content":"                + \"; end: \"","lastModifiedDate":"2023-10-07"},{"lineNumber":333,"author":{"gitId":"lihongguang00"},"content":"                + this.end.format(DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-07"},{"lineNumber":334,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":335,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"junhonglow":11,"lihongguang00":290,"Fallman2":34}},{"path":"src/main/java/seedu/address/model/event/SingleDayEventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-11"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-11"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-11"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import java.util.Map;","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import java.util.NavigableMap;","lastModifiedDate":"2023-10-11"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-11"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import java.util.TreeMap;","lastModifiedDate":"2023-10-11"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-11"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-11"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.exceptions.ConflictingEventException;","lastModifiedDate":"2023-10-11"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-11"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-11"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":" * Stores the event for a single day.","lastModifiedDate":"2023-10-11"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-11"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"public class SingleDayEventList {","lastModifiedDate":"2023-10-11"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    private final LocalDate date;","lastModifiedDate":"2023-10-11"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    private final NavigableMap\u003cEventPeriod, Event\u003e eventTree;","lastModifiedDate":"2023-10-11"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a SingleDayEventList to store events for the day.","lastModifiedDate":"2023-10-11"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    public SingleDayEventList(LocalDate date) {","lastModifiedDate":"2023-10-11"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-10-11"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        this.eventTree \u003d new TreeMap\u003cEventPeriod, Event\u003e(EventPeriod::compareTo);","lastModifiedDate":"2023-10-11"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * Checks if adding an event is valid without causing conflicts with existing events.","lastModifiedDate":"2023-10-11"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * @param event The event to be added.","lastModifiedDate":"2023-10-11"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * @return True if the event can be added without conflicts, false otherwise.","lastModifiedDate":"2023-10-11"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    public boolean isEventAddValid(Event event) {","lastModifiedDate":"2023-10-11"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-10-11"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod eventPeriod \u003d event.getEventPeriod();","lastModifiedDate":"2023-10-11"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        Event precedingEvent \u003d Optional.\u003cMap.Entry\u003cEventPeriod, Event\u003e\u003eofNullable(this.eventTree.floorEntry(","lastModifiedDate":"2023-10-11"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"                eventPeriod)).map(Map.Entry::getValue).orElse(Event.createNonConflictingEvent());","lastModifiedDate":"2023-10-11"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        Event proceedingEvent \u003d Optional.\u003cMap.Entry\u003cEventPeriod, Event\u003e\u003eofNullable(this.eventTree.ceilingEntry(","lastModifiedDate":"2023-10-11"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"                eventPeriod)).map(Map.Entry::getValue).orElse(Event.createNonConflictingEvent());","lastModifiedDate":"2023-10-11"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        return !(precedingEvent.isConflicting(event) || proceedingEvent.isConflicting(event));","lastModifiedDate":"2023-10-11"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"     * Adds an event to the event tree.","lastModifiedDate":"2023-10-11"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     * @param event The event to be added.","lastModifiedDate":"2023-10-11"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2023-10-11"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-10-11"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        if (!isEventAddValid(event)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"            throw new ConflictingEventException();","lastModifiedDate":"2023-10-11"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        this.eventTree.put(event.getEventPeriod(), event);","lastModifiedDate":"2023-10-11"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"     * Check if the event exists in the list.","lastModifiedDate":"2023-10-11"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"     * @param event event to be checked.","lastModifiedDate":"2023-10-11"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     * @return true if it exists in the list, false otherwise.","lastModifiedDate":"2023-10-11"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    public boolean containsEvent(Event event) {","lastModifiedDate":"2023-10-11"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-10-11"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"        for (Event thisEvent : eventTree.values()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"            if (event.equals(thisEvent)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"                return true;","lastModifiedDate":"2023-10-11"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-10-11"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"     * Check if there is an event at specified time","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"     * @param dateTime the specified time","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"     * @return an {@code @Optional} containing the event if there is an event at the time, empty optional otherwise.","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"    public Optional\u003cEvent\u003e eventAtTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"        for (Event event : eventTree.values()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"            Event parentEvent \u003d event.getParentEvent();","lastModifiedDate":"2023-10-25"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"            if (parentEvent.isDuring(dateTime)) {","lastModifiedDate":"2023-10-25"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"                return Optional.of(event.getParentEvent());","lastModifiedDate":"2023-10-25"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"        return Optional.empty();","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"     * Looks for all events within a time range and returns a List containing these events.","lastModifiedDate":"2023-10-28"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"     * @param eventPeriod The specified time range represented by a {@code EventPeriod}","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"     * @return A List object containing all events that are within the time range.","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"    public List\u003cEvent\u003e eventsInRange(EventPeriod eventPeriod) {","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"        ArrayList\u003cEvent\u003e output \u003d new ArrayList\u003cEvent\u003e();","lastModifiedDate":"2023-10-28"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"        for (Event thisEvent : eventTree.values()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"            if (thisEvent.isPeriodConflicting(eventPeriod)) {","lastModifiedDate":"2023-10-28"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"                output.add(thisEvent.getParentEvent());","lastModifiedDate":"2023-10-28"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"            }","lastModifiedDate":"2023-10-28"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"        return output;","lastModifiedDate":"2023-10-28"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"     * Removes the event from the list. The event must exist in the list.","lastModifiedDate":"2023-10-11"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"     * @param toRemove event to be removed.","lastModifiedDate":"2023-10-11"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"    public void remove(Event toRemove) {","lastModifiedDate":"2023-10-11"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-10-11"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"        for (Event thisEvent : this.eventTree.values()) {","lastModifiedDate":"2023-10-11"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"            if (toRemove.getParentEvent().equals(thisEvent.getParentEvent())) {","lastModifiedDate":"2023-10-25"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"                this.eventTree.remove(thisEvent.getEventPeriod(), thisEvent);","lastModifiedDate":"2023-10-11"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"                return;","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-10-11"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"        throw new EventNotFoundException();","lastModifiedDate":"2023-10-11"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"     * Returns the events for the day as an observableList.","lastModifiedDate":"2023-10-11"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-11"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"     * @return the events for the day as an observableList.","lastModifiedDate":"2023-10-11"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"    public ObservableList\u003cEvent\u003e getDayEventList() {","lastModifiedDate":"2023-10-11"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"        return FXCollections.\u003cEvent\u003eobservableArrayList(this.eventTree.values()","lastModifiedDate":"2023-10-11"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"                .toArray(new Event[0]));","lastModifiedDate":"2023-10-11"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"     * Checks if there are no events present in this list.","lastModifiedDate":"2023-10-19"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"     * @return true if there are no events present, false otherwise.","lastModifiedDate":"2023-10-19"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-10-19"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"        return eventTree.isEmpty();","lastModifiedDate":"2023-10-19"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-11"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-10-11"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"            return true;","lastModifiedDate":"2023-10-11"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"        if (!(other instanceof SingleDayEventList)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"        SingleDayEventList otherDay \u003d (SingleDayEventList) other;","lastModifiedDate":"2023-10-11"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"        if (!(this.eventTree.size() \u003d\u003d otherDay.eventTree.size())) {","lastModifiedDate":"2023-10-11"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"            return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"        for (Event thisEvent : this.eventTree.values()) {","lastModifiedDate":"2023-10-11"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"            if (!otherDay.containsEvent(thisEvent)) {","lastModifiedDate":"2023-10-11"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"                return false;","lastModifiedDate":"2023-10-11"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-10-11"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"        return true;","lastModifiedDate":"2023-10-11"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"lihongguang00":130,"Fallman2":43}},{"path":"src/main/java/seedu/address/model/event/exceptions/ConflictingEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event.exceptions;","lastModifiedDate":"2023-10-11"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-11"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * Signals that the operation will result in events that overlap in their time frame.","lastModifiedDate":"2023-10-11"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-11"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class ConflictingEventException extends RuntimeException {","lastModifiedDate":"2023-10-11"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"    public ConflictingEventException() {","lastModifiedDate":"2023-10-11"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"        super(\"Operation would result in events with overlapping timeframe\");","lastModifiedDate":"2023-10-11"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"lihongguang00":10}},{"path":"src/main/java/seedu/address/model/event/exceptions/DateOutOfBoundsException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event.exceptions;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * Thrown when the date input to bound the {@code @EventPeriod} is outside the original bounds of the","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" * {@code @EventPeriod}.","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"public class DateOutOfBoundsException extends RuntimeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"lihongguang00":8}},{"path":"src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event.exceptions;","lastModifiedDate":"2023-10-11"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-11"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * Signals that the event could not be found in the calendar.","lastModifiedDate":"2023-10-11"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-11"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class EventNotFoundException extends RuntimeException {","lastModifiedDate":"2023-10-11"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"lihongguang00":7}},{"path":"src/main/java/seedu/address/model/event/exceptions/InvalidDescriptionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event.exceptions;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":" * This exception is thrown when an eventDescription has a description that is invalid.","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"public class InvalidDescriptionException extends RuntimeException {","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"lihongguang00":7}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    private final Calendar calendar \u003d new Calendar();","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"     * Primary constructor for a person object.","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"     * Alternative constructor to be used when replacing the calendar of a contact.","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Calendar calendar) {","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"        this.email \u003d email;","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"        this.address \u003d address;","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"        this.calendar.resetData(calendar);","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"    public Calendar getCalendar() {","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"        return calendar;","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":81,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"junhonglow"},"content":"     * Returns a view of the events belonging to this person","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"junhonglow"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"junhonglow"},"content":"        return calendar.getEventList();","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                \u0026\u0026 address.equals(otherPerson.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                \u0026\u0026 tags.equals(otherPerson.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"junhonglow":32,"-":117}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"import javafx.collections.transformation.SortedList;","lastModifiedDate":"2023-10-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":103,"author":{"gitId":"nicrandomlee"},"content":"     * Sort persons in Person List according to comparator provided.","lastModifiedDate":"2023-10-17"},{"lineNumber":104,"author":{"gitId":"nicrandomlee"},"content":"     * @param comparator","lastModifiedDate":"2023-10-17"},{"lineNumber":105,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":106,"author":{"gitId":"nicrandomlee"},"content":"    public void sortPersons(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2023-10-17"},{"lineNumber":107,"author":{"gitId":"nicrandomlee"},"content":"        internalList.setAll(new SortedList\u003cPerson\u003e(this.internalList, comparator));","lastModifiedDate":"2023-10-17"},{"lineNumber":108,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":109,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (!(other instanceof UniquePersonList)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        UniquePersonList otherUniquePersonList \u003d (UniquePersonList) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return internalList.equals(otherUniquePersonList.internalList);","lastModifiedDate":"2023-07-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return internalList.toString();","lastModifiedDate":"2019-02-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nicrandomlee":10,"-":150}},{"path":"src/main/java/seedu/address/model/person/comparer/AddressComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.model.person.comparer;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":" * A comparator that sorts Person objects by address.","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"public class AddressComparator extends SortComparator {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"     * The sort type for this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"    public static final String SORT_TYPE \u003d \"address\";","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"     * Creates a new AddressComparator with the given parameters.","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"     * @param isActive Whether this comparator is currently active.","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"     * @param isReverse Whether to sort in reverse order.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"     * @param priority The priority of this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"    public AddressComparator(boolean isActive, boolean isReverse, int priority) {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"        super(isActive, isReverse, priority);","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"     * Compares two Person objects by address.","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"     * @param p1 The first Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"     * @param p2 The second Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"     * @return A negative integer, zero, or a positive integer as the first argument is less than,","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"     *     equal to, or greater than the second.","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"    public int compare(Person p1, Person p2) {","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"        if (p1.equals(p2)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"            return 0;","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"        return p1.getAddress().value.compareTo(p2.getAddress().value);","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"nicrandomlee":40}},{"path":"src/main/java/seedu/address/model/person/comparer/EmailComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.model.person.comparer;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":" * A comparator that sorts Person objects by email.","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"public class EmailComparator extends SortComparator {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"     * The sort type for this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"    public static final String SORT_TYPE \u003d \"email\";","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"     * Creates a new AddressComparator with the given parameters.","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"     * @param isActive Whether this comparator is currently active.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"     * @param isReverse Whether to sort in reverse order.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"     * @param priority The priority of this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"    public EmailComparator(boolean isActive, boolean isReverse, int priority) {","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"        super(isActive, isReverse, priority);","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"     * Compares two Person objects by email.","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"     * @param p1 The first Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"     * @param p2 The second Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"     * @return A negative integer, zero, or a positive integer as the first argument is less than,","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"     *     equal to, or greater than the second.","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"    public int compare(Person p1, Person p2) {","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"        if (p1.equals(p2)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"            return 0;","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"        return p1.getEmail().value.compareTo(p2.getEmail().value);","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"nicrandomlee":41}},{"path":"src/main/java/seedu/address/model/person/comparer/NameComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.model.person.comparer;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":" * A comparator that sorts Person objects by name.","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"public class NameComparator extends SortComparator {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"     * The sort type for this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"    public static final String SORT_TYPE \u003d \"name\";","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"     * Creates a new NameComparator with the given parameters.","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"     * @param isActive Whether this comparator is currently active.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"     * @param isReverse Whether to sort in reverse order.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"     * @param priority The priority of this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"    public NameComparator(boolean isActive, boolean isReverse, int priority) {","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"        super(isActive, isReverse, priority);","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"     * Compares two Person objects by name.","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"     * @param p1 The first Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"     * @param p2 The second Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"     * @return A negative integer, zero, or a positive integer as the first argument is less than,","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"     *     equal to, or greater than the second.","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"    public int compare(Person p1, Person p2) {","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"        if (p1.equals(p2)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"            return 0;","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"        return p1.getName().fullName.compareTo(p2.getName().fullName);","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"nicrandomlee":41}},{"path":"src/main/java/seedu/address/model/person/comparer/PhoneComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.model.person.comparer;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":" * A comparator that sorts Person objects by phone number.","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"public class PhoneComparator extends SortComparator {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"     * The sort type for this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"    public static final String SORT_TYPE \u003d \"phone\";","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"     * Creates a new PhoneComparator with the given parameters.","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"     * @param isActive Whether this comparator is currently active.","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"     * @param isReverse Whether to sort in reverse order.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"     * @param priority The priority of this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"    public PhoneComparator(boolean isActive, boolean isReverse, int priority) {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"        super(isActive, isReverse, priority);","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"     * Compares two Person objects by phone number.","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"     * @param p1 The first Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"     * @param p2 The second Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"     * @return A negative integer, zero, or a positive integer as the first argument is less than,","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"     *     equal to, or greater than the second.","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"    public int compare(Person p1, Person p2) {","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"        if (p1.equals(p2)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"            return 0;","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"        return p1.getPhone().value.compareTo(p2.getPhone().value);","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"nicrandomlee":40}},{"path":"src/main/java/seedu/address/model/person/comparer/SortComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.model.person.comparer;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":" * An abstract class that defines a comparator for sorting Person objects.","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"public abstract class SortComparator implements Comparator\u003cPerson\u003e {","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"     * Whether this comparator is currently active.","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"    protected boolean isActive;","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"     * Whether to sort in reverse order.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"    protected boolean isReverse;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"     * The priority of this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"    protected int priority;","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"     * Creates a new SortComparator with the given parameters.","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"     * @param isActive Whether this comparator is currently active.","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"     * @param isReverse Whether to sort in reverse order.","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"     * @param priority The priority of this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"    public SortComparator(boolean isActive, boolean isReverse, int priority) {","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"        this.isActive \u003d isActive;","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"        this.isReverse \u003d isReverse;","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"        this.priority \u003d isActive ? priority : -1;","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"     * Returns whether this comparator is currently active.","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"     * @return Whether this comparator is currently active.","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"    public boolean getIsActive() {","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"        return this.isActive;","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"nicrandomlee"},"content":"     * Returns whether to sort in reverse order.","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"nicrandomlee"},"content":"     * @return Whether to sort in reverse order.","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"nicrandomlee"},"content":"    public boolean getIsReverse() {","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"nicrandomlee"},"content":"        return this.isReverse;","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"nicrandomlee"},"content":"     * Sets whether to sort in reverse order","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"nicrandomlee"},"content":"    public void setIsReverse(boolean isReverse) {","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"nicrandomlee"},"content":"        this.isReverse \u003d isReverse;","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"nicrandomlee"},"content":"     * Returns the priority of this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"nicrandomlee"},"content":"     * @return The priority of this comparator.","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"nicrandomlee"},"content":"    public int getPriority() {","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"nicrandomlee"},"content":"        return this.priority;","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"nicrandomlee"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"nicrandomlee"},"content":"     * Compares two Person objects using this comparator\u0027s sorting criteria.","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"nicrandomlee"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"nicrandomlee"},"content":"     * @param p1 The first Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"nicrandomlee"},"content":"     * @param p2 The second Person to compare.","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"nicrandomlee"},"content":"     * @return A negative integer, zero, or a positive integer as the first argument is less than,","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"nicrandomlee"},"content":"     *      equal to, or greater than the second.","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"nicrandomlee"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"nicrandomlee"},"content":"    public abstract int compare(Person p1, Person p2);","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"nicrandomlee":84}},{"path":"src/main/java/seedu/address/model/util/SampleCalendarUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.model.util;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":" * Contains utility methods for populating {@code Calendar} with sample data.","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"public class SampleCalendarUtil {","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"    public static Event[] getSampleEvents() {","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"        return new Event[] {","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"            new Event(new EventDescription(\"Weekly team meeting\"),","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"                    new EventPeriod(\"2023-10-25 09:00\", \"2023-10-25 10:30\")),","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"            new Event(new EventDescription(\" Annual health checkup\"),","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"                    new EventPeriod(\"2023-11-10 15:15\", \"2023-11-10 16:00\")),","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"            new Event(new EventDescription(\" Birthday celebration\"),","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"                    new EventPeriod(\"2023-11-15 18:00\", \"2023-11-15 22:00\"))","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"        };","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"    public static ReadOnlyCalendar getSampleCalendar() {","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"        Calendar sampleCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"        for (Event sampleEvent : getSampleEvents()) {","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"            sampleCalendar.addEvent(sampleEvent);","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"        return sampleCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":32}},{"path":"src/main/java/seedu/address/storage/CalendarStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-11"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-11"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" * Represents a storage for the Calendar.","lastModifiedDate":"2023-10-11"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-11"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"public interface CalendarStorage {","lastModifiedDate":"2023-10-11"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"    Path getCalendarFilePath();","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"     * Returns AddressBook data as a {@link ReadOnlyCalendar}.","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"    Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataLoadingException;","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"     * @see #getCalendarFilePath()","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"    Optional\u003cReadOnlyCalendar\u003e readCalendar(Path filePath) throws DataLoadingException;","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"     * Saves the given {@link ReadOnlyCalendar} to the storage.","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"     * @param calendar cannot be null.","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"    void saveCalendar(ReadOnlyCalendar calendar) throws IOException;","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"     * @see #saveCalendar(ReadOnlyCalendar)","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"    void saveCalendar(ReadOnlyCalendar addressBook, Path filePath) throws IOException;","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-11"}],"authorContributionMap":{"junhonglow":37,"lihongguang00":8}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":" * Jackson-friendly version of {@link Event}.","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"class JsonAdaptedEvent {","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"    public static final String INVALID_FIELD_MESSAGE_FORMAT \u003d EventPeriod.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"    private final String description;","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"    private final String eventPeriod;","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"     * Constructs a {@code JsonAdaptedEvent} with the given event details.","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"description\") String description,","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"                            @JsonProperty(\"eventPeriod\") String eventPeriod) {","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"        this.eventPeriod \u003d eventPeriod;","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"     * Converts a given {@code Event} into this class for Jackson use.","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"    public JsonAdaptedEvent(Event source) {","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"        description \u003d source.getDescription().getDescription();","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"        eventPeriod \u003d source.getEventPeriod().getFormattedPeriod();","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Event} object.","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event.","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"    public Event toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"                            EventDescription.class.getSimpleName()));","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"        if (!EventDescription.isValid(description)) {","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"            throw new IllegalValueException(EventDescription.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"        final EventDescription modelDescription \u003d new EventDescription(description);","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"        // Event Periods are expected to be saved in this format yyyy-MM-dd HH:mm - yyyy-MM-dd HH:mm","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"        String start;","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"        String end;","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"        if (eventPeriod \u003d\u003d null) {","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"            throw new IllegalValueException(","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"                            EventPeriod.class.getSimpleName()));","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"        String[] parts \u003d eventPeriod.split(\" - \");","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"        if (parts.length \u003d\u003d 2) {","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"            start \u003d parts[0];","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"            end \u003d parts[1];","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"        } else {","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"            throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"junhonglow"},"content":"                    EventPeriod.class.getSimpleName()));","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"junhonglow"},"content":"        if (!EventPeriod.isValidPeriod(start, end)) {","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"            throw new IllegalValueException(EventPeriod.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"        final EventPeriod modelEventPeriod \u003d new EventPeriod(start, end);","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"        return new Event(modelDescription, modelEventPeriod);","lastModifiedDate":"2023-10-19"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":79}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Calendar contains duplicate event(s).\";","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-01-09"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"            @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags, @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (tags !\u003d null) {","lastModifiedDate":"2023-01-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            this.tags.addAll(tags);","lastModifiedDate":"2023-01-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"        this.events.addAll(events);","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        tags.addAll(source.getTags().stream()","lastModifiedDate":"2023-01-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"        events.addAll(source.getEventList().stream().map(Event::getParentEvent).distinct()","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"                .map(JsonAdaptedEvent::new).collect(Collectors.toList()));","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-01-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":114,"author":{"gitId":"junhonglow"},"content":"        Calendar calendar \u003d new Calendar();","lastModifiedDate":"2023-11-01"},{"lineNumber":115,"author":{"gitId":"junhonglow"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"junhonglow"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"junhonglow"},"content":"            if (calendar.contains(event)) {","lastModifiedDate":"2023-11-01"},{"lineNumber":118,"author":{"gitId":"junhonglow"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2023-11-01"},{"lineNumber":119,"author":{"gitId":"junhonglow"},"content":"            }","lastModifiedDate":"2023-11-01"},{"lineNumber":120,"author":{"gitId":"junhonglow"},"content":"            calendar.addEvent(event);","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":122,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":123,"author":{"gitId":"junhonglow"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, calendar);","lastModifiedDate":"2023-11-01"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"junhonglow":19,"-":107}},{"path":"src/main/java/seedu/address/storage/JsonCalendarStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":" * A class to access Calendar data stored as a json file on the hard disk.","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"public class JsonCalendarStorage implements CalendarStorage {","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonCalendarStorage.class);","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"    private Path filePath;","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"    public JsonCalendarStorage(Path filePath) {","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    public Path getCalendarFilePath() {","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"        return filePath;","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"    public Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataLoadingException {","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"        return readCalendar(filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"     * Similar to {@link #readCalendar()}.","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"    public Optional\u003cReadOnlyCalendar\u003e readCalendar(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"        Optional\u003cJsonSerializableCalendar\u003e jsonCalendar \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"                filePath, JsonSerializableCalendar.class);","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"        if (!jsonCalendar.isPresent()) {","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"        try {","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"            return Optional.of(jsonCalendar.get().toModelType());","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"    public void saveCalendar(ReadOnlyCalendar calendar) throws IOException {","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"        saveCalendar(calendar, filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"     * Similar to {@link #saveCalendar(ReadOnlyCalendar)}.","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"junhonglow"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"junhonglow"},"content":"    public void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException {","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"        requireNonNull(calendar);","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"junhonglow"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableCalendar(calendar), filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":80,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":80}},{"path":"src/main/java/seedu/address/storage/JsonSerializableCalendar.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":" * An Immutable Calendar that is serializable to JSON format.","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"@JsonRootName(value \u003d \"calendar\")","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"class JsonSerializableCalendar {","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Calendar contains duplicate event(s).\";","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"     * Constructs a {@code JsonSerializableCalendar} with the given events.","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"    public JsonSerializableCalendar(@JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"        this.events.addAll(events);","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"     * Converts a given {@code ReadOnlyCalendar} into this class for Jackson use.","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableCalendar}.","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"    public JsonSerializableCalendar(ReadOnlyCalendar source) {","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        events.addAll(source.getEventList().stream().map(Event::getParentEvent).distinct()","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"                .map(JsonAdaptedEvent::new).collect(Collectors.toList()));","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"    public Calendar toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"        Calendar calendar \u003d new Calendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"            if (calendar.contains(event)) {","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"            }","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"            calendar.addEvent(event);","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"        return calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":58,"lihongguang00":2}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"public interface Storage extends AddressBookStorage, CalendarStorage, UserPrefsStorage {","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"    Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataLoadingException;","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"    void saveCalendar(ReadOnlyCalendar calendar) throws IOException;","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"junhonglow":8,"-":31}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    private CalendarStorage calendarStorage;","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    public StorageManager(AddressBookStorage addressBookStorage,","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"                          CalendarStorage calendarStorage,","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"                          UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"        this.calendarStorage \u003d calendarStorage;","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-11"},{"lineNumber":83,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"junhonglow"},"content":"    public Path getCalendarFilePath() {","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"junhonglow"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2023-10-19"},{"lineNumber":86,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"junhonglow"},"content":"    public Optional\u003cReadOnlyCalendar\u003e readCalendar() throws DataLoadingException {","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"junhonglow"},"content":"        return readCalendar(calendarStorage.getCalendarFilePath());","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"junhonglow"},"content":"    public Optional\u003cReadOnlyCalendar\u003e readCalendar(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"junhonglow"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"junhonglow"},"content":"        return calendarStorage.readCalendar(filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"junhonglow"},"content":"    public void saveCalendar(ReadOnlyCalendar calendar) throws IOException {","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"junhonglow"},"content":"        saveCalendar(calendar, calendarStorage.getCalendarFilePath());","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":104,"author":{"gitId":"junhonglow"},"content":"    @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":105,"author":{"gitId":"junhonglow"},"content":"    public void saveCalendar(ReadOnlyCalendar calendar, Path filePath) throws IOException {","lastModifiedDate":"2023-10-19"},{"lineNumber":106,"author":{"gitId":"junhonglow"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"junhonglow"},"content":"        calendarStorage.saveCalendar(calendar, filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junhonglow":31,"lihongguang00":3,"-":76}},{"path":"src/main/java/seedu/address/ui/CalendarContainer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.GridPane;","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" * Represents the container for displaying the calendar view in the user interface.","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" * It contains various graphical elements such as the calendar label, event space, and background.","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"public class CalendarContainer extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    private static final String FXML \u003d \"CalendarContainer.fxml\";","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    private ReadOnlyCalendar calendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    @FXML","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    private StackPane calendarLabelPlaceholder;","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    @FXML","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    private StackPane eventSpaceContainer;","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    @FXML","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    private GridPane eventSpaceBackground;","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    @FXML","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    private GridPane eventSpace;","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a CalendarContainer with the specified ReadOnlyCalendar.","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * @param calendar The ReadOnlyCalendar to be displayed in the container.","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    public CalendarContainer(ReadOnlyCalendar calendar) {","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        super(FXML);","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        this.calendar \u003d calendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        fillCalendar();","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     * Fills the calendar container with the necessary components (calendar labels and event spaces).","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    public void fillCalendar() {","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        calendarLabelPlaceholder.getChildren().add(new CalendarLabelColumn().getRoot());","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        eventSpaceBackground.getChildren().add(new EventSpaceBackground(calendar).getRoot());","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"        eventSpace.getChildren().add(new CalendarEventSpace(calendar).getRoot());","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"lihongguang00":48}},{"path":"src/main/java/seedu/address/ui/CalendarEventSpace.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static java.time.temporal.ChronoUnit.MINUTES;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.ListChangeListener;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.GridPane;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.shape.Rectangle;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.shape.StrokeType;","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":" * The UI component that represents the space for displaying events in a calendar view.","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"public class CalendarEventSpace extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    private static final String FXML \u003d \"CalendarEventSpace.fxml\";","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    private static final LocalTime DEFAULT_CALENDAR_START_TIME \u003d LocalTime.of(8, 0);","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    private static final LocalTime DEFAULT_CALENDAR_END_TIME \u003d LocalTime.of(18, 0);","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    private static final int NUMBER_OF_ROWS \u003d 8;","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    private static final int NUMBER_OF_HALF_HOURS_IN_HOUR \u003d 2;","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    private static final int NUMBER_OF_MINUTES_IN_HALF_HOUR \u003d 30;","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    private static final int NUMBER_OF_MINUTES_IN_AN_HOUR \u003d 60;","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    private static final int NODE_WIDTH_PER_HALF_HOUR \u003d 25;","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    private static final int MAXIMUM_DISPLAY_HOUR_OF_DAY \u003d 23;","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    private static final int NODE_HEIGHT \u003d 30;","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    private final ReadOnlyCalendar calendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    private final ObservableList\u003cEvent\u003e eventList;","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    private final ObservableList\u003cAnchorPane\u003e rowList \u003d FXCollections.\u003cAnchorPane\u003eobservableArrayList();","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    private LocalTime calendarStartTime \u003d DEFAULT_CALENDAR_START_TIME;","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    private LocalTime calendarEndTime \u003d DEFAULT_CALENDAR_END_TIME;","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    private GridPane eventSpace;","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a CalendarEventSpace with the given ReadOnlyCalendar.","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     * @param calendar The ReadOnlyCalendar to be displayed in the event space.","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    public CalendarEventSpace(ReadOnlyCalendar calendar) {","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        super(FXML);","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        this.calendar \u003d calendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        eventList \u003d calendar.getCurrentWeekEventList();","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        updateStartAndEnd();","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        initializeEventSpace();","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"        addEventCards();","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        addListenerToEventList();","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"     * Initializes the event space by creating and adding empty rows to the grid.","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    private void initializeEventSpace() {","lastModifiedDate":"2023-10-27"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        Stream.\u003cAnchorPane\u003egenerate(AnchorPane::new).limit(NUMBER_OF_ROWS).forEachOrdered(pane -\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"            pane.setPrefHeight(NODE_HEIGHT);","lastModifiedDate":"2023-10-27"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"            pane.setPrefWidth(calculateCalendarWidth());","lastModifiedDate":"2023-10-27"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"            pane.setMaxWidth(calculateCalendarWidth());","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"            eventSpace.addRow(eventSpace.getRowCount(), pane);","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"            rowList.add(pane);","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        });","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"     * Adds a listener to the event list to update the event space when events change.","lastModifiedDate":"2023-10-27"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"    private void addListenerToEventList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"        eventList.addListener((ListChangeListener\u003cEvent\u003e) c -\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"            clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"            updateStartAndEnd();","lastModifiedDate":"2023-10-27"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"            initializeEventSpace();","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"            addEventCards();","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"        });","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"     * Clears the event space by removing all event cards.","lastModifiedDate":"2023-10-27"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"    private void clear() {","lastModifiedDate":"2023-10-27"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        eventSpace.getChildren().clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        rowList.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"     * Calculates the width of the calendar space based on the time range being displayed.","lastModifiedDate":"2023-10-27"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"     * @return The calculated width of the calendar space.","lastModifiedDate":"2023-10-27"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"    private int calculateCalendarWidth() {","lastModifiedDate":"2023-10-27"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        long minutesBetweenStartAndEnd \u003d MINUTES.between(calendarStartTime, calendarEndTime);","lastModifiedDate":"2023-10-27"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"        int numberOfHoursToShow \u003d calendarEndTime.getHour() - calendarStartTime.getHour();","lastModifiedDate":"2023-10-27"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"        if (minutesBetweenStartAndEnd % NUMBER_OF_MINUTES_IN_AN_HOUR \u003e 0) {","lastModifiedDate":"2023-10-27"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"            numberOfHoursToShow++;","lastModifiedDate":"2023-10-27"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"        return numberOfHoursToShow * NODE_WIDTH_PER_HALF_HOUR * NUMBER_OF_HALF_HOURS_IN_HOUR;","lastModifiedDate":"2023-10-27"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"     * Updates the start and end times for the displayed calendar.","lastModifiedDate":"2023-10-27"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"    private void updateStartAndEnd() {","lastModifiedDate":"2023-10-27"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"        LocalTime newStartTime \u003d calendar.getEarliestEventStartTimeInCurrentWeek()","lastModifiedDate":"2023-10-27"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"                .map(time -\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"                    return time.minusMinutes(time.getMinute());","lastModifiedDate":"2023-10-27"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"                })","lastModifiedDate":"2023-10-27"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"                .orElse(calendarStartTime);","lastModifiedDate":"2023-10-27"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        LocalTime newEndTime \u003d calendar.getLatestEventEndTimeInCurrentWeek()","lastModifiedDate":"2023-10-27"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"                .map(time -\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"                    if (time.getMinute() \u003d\u003d 0 || time.getHour() \u003d\u003d MAXIMUM_DISPLAY_HOUR_OF_DAY) {","lastModifiedDate":"2023-10-28"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"                        return time;","lastModifiedDate":"2023-10-27"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"                    }","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"                    return time.plusMinutes(NUMBER_OF_MINUTES_IN_AN_HOUR - time.getMinute());","lastModifiedDate":"2023-10-28"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"                })","lastModifiedDate":"2023-10-27"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"                .orElse(calendarEndTime);","lastModifiedDate":"2023-10-27"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"        calendarStartTime \u003d newStartTime.isBefore(DEFAULT_CALENDAR_START_TIME)","lastModifiedDate":"2023-10-27"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"                ? newStartTime : DEFAULT_CALENDAR_START_TIME;","lastModifiedDate":"2023-10-27"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"        calendarEndTime \u003d newEndTime.isAfter(DEFAULT_CALENDAR_END_TIME)","lastModifiedDate":"2023-10-27"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"                ? newEndTime : DEFAULT_CALENDAR_END_TIME;","lastModifiedDate":"2023-10-27"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"     * Adds event cards to the event space for all events.","lastModifiedDate":"2023-10-27"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"    private void addEventCards() {","lastModifiedDate":"2023-10-27"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"        eventList.forEach(event -\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"            StackPane eventNode \u003d generateEventCard(event);","lastModifiedDate":"2023-10-27"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"            rowList.get(findRow(event)).getChildren().add(eventNode);","lastModifiedDate":"2023-10-27"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"            AnchorPane.setLeftAnchor(eventNode, findLeftOffset(event));","lastModifiedDate":"2023-10-27"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"        });","lastModifiedDate":"2023-10-26"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"     * Generates an event card for the given event.","lastModifiedDate":"2023-10-27"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"     * @param event The event for which to create a card.","lastModifiedDate":"2023-10-27"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"     * @return A StackPane containing the event card.","lastModifiedDate":"2023-10-27"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"    private StackPane generateEventCard(Event event) {","lastModifiedDate":"2023-10-27"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"        double widthMultiplier \u003d (double) event.getDurationOfEvent().toMinutes() / NUMBER_OF_MINUTES_IN_AN_HOUR;","lastModifiedDate":"2023-10-30"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"        StackPane cardHolder \u003d new StackPane();","lastModifiedDate":"2023-10-27"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"        Rectangle cardRectangle \u003d new Rectangle();","lastModifiedDate":"2023-10-27"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"        cardRectangle.setHeight(NODE_HEIGHT);","lastModifiedDate":"2023-10-27"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"        cardRectangle.setWidth(widthMultiplier * NODE_WIDTH_PER_HALF_HOUR * NUMBER_OF_HALF_HOURS_IN_HOUR);","lastModifiedDate":"2023-10-27"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"        cardRectangle.setFill(Color.CRIMSON);","lastModifiedDate":"2023-10-27"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"        cardRectangle.setStroke(Color.BLACK);","lastModifiedDate":"2023-10-27"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"        cardRectangle.setStrokeType(StrokeType.INSIDE);","lastModifiedDate":"2023-10-28"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"        Label description \u003d new Label();","lastModifiedDate":"2023-10-27"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"        description.setMaxHeight(NODE_HEIGHT);","lastModifiedDate":"2023-10-27"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"        description.setMaxWidth(widthMultiplier * NODE_WIDTH_PER_HALF_HOUR * NUMBER_OF_HALF_HOURS_IN_HOUR);","lastModifiedDate":"2023-10-27"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"        description.setText(event.getDescriptionString());","lastModifiedDate":"2023-10-27"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"        description.setAlignment(Pos.CENTER);","lastModifiedDate":"2023-10-27"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"        cardHolder.getChildren().addAll(cardRectangle, description);","lastModifiedDate":"2023-10-27"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"        return cardHolder;","lastModifiedDate":"2023-10-27"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"     * Determines the row (day) in which an event should be placed in the event space.","lastModifiedDate":"2023-10-27"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"     * @param event The event for which to find the row.","lastModifiedDate":"2023-10-27"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"     * @return The row (day) index.","lastModifiedDate":"2023-10-27"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"    private int findRow(Event event) {","lastModifiedDate":"2023-10-27"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"        return event.getDayOfWeek().getValue();","lastModifiedDate":"2023-10-27"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"     * Calculates the left offset for positioning an event card in the event space.","lastModifiedDate":"2023-10-27"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"     * @param event The event for which to calculate the left offset.","lastModifiedDate":"2023-10-27"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"     * @return The left offset in pixels.","lastModifiedDate":"2023-10-27"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"    private double findLeftOffset(Event event) {","lastModifiedDate":"2023-10-27"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"        return ((double) event.getMinutesFromTimeToStartTime(calendarStartTime)","lastModifiedDate":"2023-10-27"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"                / NUMBER_OF_MINUTES_IN_HALF_HOUR) * NODE_WIDTH_PER_HALF_HOUR;","lastModifiedDate":"2023-10-27"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":196,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":197,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"lihongguang00":197}},{"path":"src/main/java/seedu/address/ui/CalendarLabelColumn.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * The UI component that represents the column of labels in a calendar view, typically displaying day names or headers.","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public class CalendarLabelColumn extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    private static final String FXML \u003d \"CalendarLabelColumn.fxml\";","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"     * Constructs a CalendarLabelColumn with the appropriate FXML file.","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    public CalendarLabelColumn() {","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"        super(FXML);","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"lihongguang00":17}},{"path":"src/main/java/seedu/address/ui/EventCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"public class EventCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"    private static final String FXML \u003d \"EventListCard.fxml\";","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"     *","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"    public final Event event;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"    @FXML","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    @FXML","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"    private Label description;","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    @FXML","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"    private Label id;","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    @FXML","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"    private Label eventPeriod;","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"    public EventCard(Event event, int displayedIndex) {","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"        super(FXML);","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"        this.event \u003d event;","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"        description.setText(event.getDescription().getDescription());","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"        eventPeriod.setText(event.getEventPeriod().getFormattedPeriod());","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"junhonglow":45}},{"path":"src/main/java/seedu/address/ui/EventListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"public class EventListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"    private static final String FXML \u003d \"EventListPanel.fxml\";","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EventListPanel.class);","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"    @FXML","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"    private ListView\u003cEvent\u003e eventListView;","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"    public EventListPanel(ObservableList\u003cEvent\u003e eventList) {","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"        super(FXML);","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"        eventListView.setItems(eventList);","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"        eventListView.setCellFactory(listView -\u003e new EventListViewCell());","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"    class EventListViewCell extends ListCell\u003cEvent\u003e {","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"        protected void updateItem(Event event, boolean empty) {","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"            super.updateItem(event, empty);","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"            if (empty || event \u003d\u003d null) {","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"                setGraphic(null);","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"                setText(null);","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"            } else {","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"                setGraphic(new EventCard(event, getIndex() + 1).getRoot());","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"            }","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"junhonglow":49}},{"path":"src/main/java/seedu/address/ui/EventSpaceBackground.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.ListChangeListener;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":" * The UI component that represents the background grid for an event space, displaying time intervals.","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"public class EventSpaceBackground extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    private static final String FXML \u003d \"EventSpaceBackground.fxml\";","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    private static final LocalTime DEFAULT_CALENDAR_START_TIME \u003d LocalTime.of(8, 0);","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    private static final LocalTime DEFAULT_CALENDAR_END_TIME \u003d LocalTime.of(18, 0);","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    private static final int NUMBER_OF_HOURS_IN_ONE_DAY \u003d 24;","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    private static final int MAXIMUM_DISPLAY_HOUR \u003d 23;","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    private static final int NUMBER_OF_MINUTES_IN_AN_HOUR \u003d 60;","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    private LocalTime calendarStartTime \u003d DEFAULT_CALENDAR_START_TIME;","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    private LocalTime calendarEndTime \u003d DEFAULT_CALENDAR_END_TIME;","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    private ReadOnlyCalendar calendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    private ObservableList\u003cEvent\u003e eventList;","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    private ObservableList\u003cEventSpaceBackgroundColumn\u003e columns;","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    private HBox backgroundGrid;","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an EventSpaceBackground with the given ReadOnlyCalendar.","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * @param calendar The ReadOnlyCalendar to be displayed in the background.","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    public EventSpaceBackground(ReadOnlyCalendar calendar) {","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        super(FXML);","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        this.calendar \u003d calendar;","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        eventList \u003d calendar.getCurrentWeekEventList();","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        columns \u003d FXCollections.\u003cEventSpaceBackgroundColumn\u003eobservableArrayList();","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        fillBackground();","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        updateStartAndEnd();","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        showRelevantBackground();","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        addListenerToEventList();","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"     * Adds a listener to the event list to update the background when events change.","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    private void addListenerToEventList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        eventList.addListener((ListChangeListener\u003cEvent\u003e) c -\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"            updateStartAndEnd();","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            showRelevantBackground();","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        });","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"     * Fills the background with time intervals.","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    public void fillBackground() {","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        Stream.\u003cLocalTime\u003eiterate(LocalTime.MIDNIGHT, time -\u003e time.plusHours(1))","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"                .limit(NUMBER_OF_HOURS_IN_ONE_DAY)","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"                .map(EventSpaceBackgroundColumn::new)","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"                .forEachOrdered(column -\u003e columns.add(column));","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"        columns.forEach(column -\u003e backgroundGrid.getChildren().add(column.getRoot()));","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"     * Updates the start and end times based on the events in the calendar.","lastModifiedDate":"2023-10-27"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"    private void updateStartAndEnd() {","lastModifiedDate":"2023-10-27"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        LocalTime newStartTime \u003d calendar.getEarliestEventStartTimeInCurrentWeek()","lastModifiedDate":"2023-10-27"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"                .map(time -\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"                    return time.minusMinutes(time.getMinute());","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"                })","lastModifiedDate":"2023-10-27"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"                .orElse(calendarStartTime);","lastModifiedDate":"2023-10-27"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"        LocalTime newEndTime \u003d calendar.getLatestEventEndTimeInCurrentWeek()","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"                .map(time -\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"                    if (time.getMinute() \u003d\u003d 0 || time.getHour() \u003d\u003d MAXIMUM_DISPLAY_HOUR) {","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"                        return time;","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"                    }","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"                    return time.plusMinutes(NUMBER_OF_MINUTES_IN_AN_HOUR - time.getMinute());","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"                })","lastModifiedDate":"2023-10-27"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"                .orElse(calendarEndTime);","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        calendarStartTime \u003d newStartTime.isBefore(DEFAULT_CALENDAR_START_TIME)","lastModifiedDate":"2023-10-27"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"                ? newStartTime : DEFAULT_CALENDAR_START_TIME;","lastModifiedDate":"2023-10-27"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"        calendarEndTime \u003d newEndTime.isAfter(DEFAULT_CALENDAR_END_TIME)","lastModifiedDate":"2023-10-27"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"                ? newEndTime : DEFAULT_CALENDAR_END_TIME;","lastModifiedDate":"2023-10-27"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"     * Shows the relevant background columns based on the current time range.","lastModifiedDate":"2023-10-27"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"    private void showRelevantBackground() {","lastModifiedDate":"2023-10-27"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        columns.stream().filter(column -\u003e !column.isWithin(calendarStartTime, calendarEndTime))","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"                .map(EventSpaceBackgroundColumn::getRoot).forEach(region -\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"                    region.setVisible(false);","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"                    region.setManaged(false);","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"                });","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"        columns.stream().filter(column -\u003e column.isWithin(calendarStartTime, calendarEndTime))","lastModifiedDate":"2023-10-27"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"                .map(EventSpaceBackgroundColumn::getRoot).forEach(region -\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"                    region.setVisible(true);","lastModifiedDate":"2023-10-27"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"                    region.setManaged(true);","lastModifiedDate":"2023-10-27"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"                });","lastModifiedDate":"2023-10-27"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"lihongguang00":114}},{"path":"src/main/java/seedu/address/ui/EventSpaceBackgroundColumn.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" * The UI component that represents a column in the event space background, displaying time intervals.","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"public class EventSpaceBackgroundColumn extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    private static final String FXML \u003d \"EventSpaceBackgroundColumn.fxml\";","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    private final LocalTime startTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    private Label startTimeLabel;","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * Constructs an EventSpaceBackgroundColumn with the specified start time.","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @param startTime The start time represented by this column.","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    public EventSpaceBackgroundColumn(LocalTime startTime) {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        super(FXML);","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        setLabel();","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * Checks if this column\u0027s time interval is within the specified time range.","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     * @param start The start time of the range (inclusive).","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     * @param end The end time of the range (exclusive).","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     * @return True if the column\u0027s time interval is within the specified range; otherwise, false.","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    public boolean isWithin(LocalTime start, LocalTime end) {","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        return (startTime.equals(start) || (startTime.isAfter(start) \u0026\u0026 startTime.isBefore(end)))","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"                \u0026\u0026 !startTime.equals(end);","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"     * Sets the label to display the start time formatted as \"HH:mm\".","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    private void setLabel() {","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        startTimeLabel.setText(startTime.format(TIME_FORMATTER));","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"lihongguang00":52}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"    private EventListPanel eventListPanel;","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"    @FXML","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"    private StackPane eventListPanelPlaceholder;","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    @FXML","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    private StackPane calendarPlaceholder;","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"junhonglow"},"content":"        eventListPanel \u003d new EventListPanel(logic.getEventList());","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"junhonglow"},"content":"        eventListPanelPlaceholder.getChildren().add(eventListPanel.getRoot());","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"        CalendarContainer calendarContainer \u003d new CalendarContainer(logic.getCalendar());","lastModifiedDate":"2023-10-26"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"        calendarPlaceholder.getChildren().add(calendarContainer.getRoot());","lastModifiedDate":"2023-10-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"    @FXML","lastModifiedDate":"2023-10-11"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"    private void handleComingSoon() {","lastModifiedDate":"2023-10-11"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);","lastModifiedDate":"2023-06-13"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"junhonglow":7,"lihongguang00":11,"-":196}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import javafx.event.EventHandler;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.input.MouseButton;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import javafx.scene.input.MouseEvent;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    private static final String TITLE_STRING_AFTER_NAME \u003d \"\u0027s Calendar\";","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    private static final int NUMBER_OF_CLICK_TO_SHOW_CALENDAR \u003d 2;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    private static final int POPUP_CALENDAR_HEIGHT \u003d 285;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    private static final int POPUP_CALENDAR_WIDTH \u003d 555;","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        setClickListener();","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     * Adds a listener to detect when the user double-clicks the PersonCard.","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    private void setClickListener() {","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        cardPane.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler\u003cMouseEvent\u003e() {","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"            @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"            public void handle(MouseEvent mouseEvent) {","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"                if (mouseEvent.getButton().equals(MouseButton.PRIMARY)","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"                        \u0026\u0026 mouseEvent.getClickCount() \u003d\u003d NUMBER_OF_CLICK_TO_SHOW_CALENDAR) {","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"                    showCalendar();","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"                }","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"            }","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"        });","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"     * Display this person\u0027s calendar","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"    private void showCalendar() {","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"        Stage calendarStage \u003d new Stage();","lastModifiedDate":"2023-10-30"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"        calendarStage.setResizable(false);","lastModifiedDate":"2023-10-30"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"        calendarStage.setTitle(person.getName().toString() + TITLE_STRING_AFTER_NAME);","lastModifiedDate":"2023-10-30"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"        calendarStage.setMinHeight(POPUP_CALENDAR_HEIGHT);","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        calendarStage.setMinWidth(POPUP_CALENDAR_WIDTH);","lastModifiedDate":"2023-10-30"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        CalendarContainer root \u003d new CalendarContainer(person.getCalendar());","lastModifiedDate":"2023-10-30"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"        calendarStage.setScene(new Scene(root.getRoot()));","lastModifiedDate":"2023-10-30"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"        calendarStage.show();","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"lihongguang00":39,"-":59}},{"path":"src/main/resources/view/CalendarContainer.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"\u003c?import java.lang.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"\u003c?import java.util.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"\u003cHBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" HBox.hgrow\u003d\"NEVER\" styleClass\u003d\"pane-without-border\"\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    \u003cScrollPane fitToHeight\u003d\"true\" prefWidth\u003d\"400\" minWidth\u003d\"250\" vbarPolicy\u003d\"NEVER\" hbarPolicy\u003d\"ALWAYS\"","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"              VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-without-border\"\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"        \u003cHBox styleClass\u003d\"pane-without-border\"\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"            \u003cStackPane fx:id\u003d\"calendarLabelPlaceholder\" minWidth\u003d\"50\" HBox.hgrow\u003d\"NEVER\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"            \u003cStackPane fx:id\u003d\"eventSpaceContainer\" minWidth\u003d\"300\" HBox.hgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-without-border\"\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"                \u003cGridPane fx:id\u003d\"eventSpaceBackground\" HBox.hgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"                \u003cGridPane fx:id\u003d\"eventSpace\" HBox.hgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"lihongguang00":20}},{"path":"src/main/resources/view/CalendarEventSpace.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"\u003c?import java.lang.*?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"\u003c?import java.util.*?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.*?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"\u003cGridPane fx:id\u003d\"eventSpace\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" HBox.hgrow\u003d\"SOMETIMES\" VBox.vgrow\u003d\"NEVER\"/\u003e","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"lihongguang00":9}},{"path":"src/main/resources/view/CalendarLabelColumn.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.shape.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"\u003cVBox minWidth\u003d\"50\" HBox.hgrow\u003d\"NEVER\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"salmon\" height\u003d\"30\" width\u003d\"50\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Time\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"darksalmon\" height\u003d\"30\" width\u003d\"50\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Mon\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"darksalmon\" height\u003d\"30\" width\u003d\"50\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Tue\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"darksalmon\" height\u003d\"30\" width\u003d\"50\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Wed\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"darksalmon\" height\u003d\"30\" width\u003d\"50\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Thu\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"darksalmon\" height\u003d\"30\" width\u003d\"50\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Fri\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"darksalmon\" height\u003d\"30\" width\u003d\"50\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Sat\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"darksalmon\" height\u003d\"30\" width\u003d\"50\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Sun\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"lihongguang00":63}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":".calendar_header_label {","lastModifiedDate":"2023-10-25"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"    -fx-text-fill: \"Segoe UI Semibold\";","lastModifiedDate":"2023-10-25"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2023-10-25"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"    -fx-text-fill: #c21c1c;","lastModifiedDate":"2023-10-25"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"    -fx-text-alignment: center;","lastModifiedDate":"2023-10-25"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-25"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":".calendar_cell_border {","lastModifiedDate":"2023-10-26"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"    -fx-border-color: #654f4fba;","lastModifiedDate":"2023-10-26"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2023-10-26"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":".pane-without-border {","lastModifiedDate":"2023-10-25"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2023-10-25"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-25"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":172,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":250,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":304,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":307,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":309,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":312,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":314,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":318,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":322,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":326,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":331,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":336,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":345,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":347,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":349,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":354,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":356,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":359,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":361,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":368,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"lihongguang00":16,"-":352}},{"path":"src/main/resources/view/EventListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"        \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"      \u003cLabel fx:id\u003d\"eventPeriod\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$eventPeriod\" /\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"junhonglow":32}},{"path":"src/main/resources/view/EventListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"  \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"junhonglow":8}},{"path":"src/main/resources/view/EventSpaceBackground.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"\u003cHBox xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"backgroundGrid\" HBox.hgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"lihongguang00":5}},{"path":"src/main/resources/view/EventSpaceBackgroundColumn.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.shape.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"\u003cVBox minWidth\u003d\"50\" HBox.hgrow\u003d\"NEVER\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\"","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"        \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"salmon\" height\u003d\"30\" width\u003d\"50\" stroke\u003d\"rosybrown\" strokeType\u003d\"INSIDE\"/\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"        \u003cLabel fx:id\u003d\"startTimeLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startTime\"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"               StackPane.alignment\u003d\"BOTTOM_LEFT\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" prefHeight\u003d\"30\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"        \u003cHBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"antiquewhite\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"bisque\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"        \u003cLine fill\u003d\"gainsboro\" opacity\u003d\"0.5\" stroke\u003d\"#86826a\" strokeWidth\u003d\"2\" endY\u003d\"30\"/\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" prefHeight\u003d\"30\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        \u003cHBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"antiquewhite\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"bisque\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        \u003cLine fill\u003d\"gainsboro\" opacity\u003d\"0.5\" stroke\u003d\"#86826a\" strokeWidth\u003d\"2\" endY\u003d\"30\"/\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" prefHeight\u003d\"30\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        \u003cHBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"antiquewhite\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"bisque\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        \u003cLine fill\u003d\"gainsboro\" opacity\u003d\"0.5\" stroke\u003d\"#86826a\" strokeWidth\u003d\"2\" endY\u003d\"30\"/\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" prefHeight\u003d\"30\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        \u003cHBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"antiquewhite\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"bisque\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        \u003cLine fill\u003d\"gainsboro\" opacity\u003d\"0.5\" stroke\u003d\"#86826a\" strokeWidth\u003d\"2\" endY\u003d\"30\"/\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" prefHeight\u003d\"30\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        \u003cHBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"antiquewhite\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"bisque\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        \u003cLine fill\u003d\"gainsboro\" opacity\u003d\"0.5\" stroke\u003d\"#86826a\" strokeWidth\u003d\"2\" endY\u003d\"30\"/\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" prefHeight\u003d\"30\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        \u003cHBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"antiquewhite\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"bisque\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"        \u003cLine fill\u003d\"gainsboro\" opacity\u003d\"0.5\" stroke\u003d\"#86826a\" strokeWidth\u003d\"2\" endY\u003d\"30\"/\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    \u003cStackPane minHeight\u003d\"30\" prefHeight\u003d\"30\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        \u003cHBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"antiquewhite\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\"","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"                       strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"            \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"bisque\" height\u003d\"30\" width\u003d\"25\" stroke\u003d\"#dbc3ae\" strokeType\u003d\"INSIDE\" /\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        \u003cLine fill\u003d\"gainsboro\" opacity\u003d\"0.5\" stroke\u003d\"#86826a\" strokeWidth\u003d\"2\" endY\u003d\"30\"/\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"lihongguang00":71}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"\u003c?import java.net.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.image.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"\u003c?import javafx.stage.*?\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"\u003cfx:root minHeight\u003d\"800\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        \u003cHBox minHeight\u003d\"400\" prefHeight\u003d\"400\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"          \u003cBorderPane minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"                      VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"            \u003ctop\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"              \u003cLabel alignment\u003d\"CENTER\" minHeight\u003d\"40\" minWidth\u003d\"340\" prefHeight\u003d\"40.0\" prefWidth\u003d\"340.0\"","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"                     styleClass\u003d\"calendar_header_label\" text\u003d\"Calendar\" textAlignment\u003d\"CENTER\"","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"                     BorderPane.alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"NEVER\"/\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"            \u003c/top\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"            \u003ccenter\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"              \u003cStackPane fx:id\u003d\"calendarPlaceholder\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-without-border\"","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"                         HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"NEVER\" minHeight\u003d\"240\" prefHeight\u003d\"240\"\u003e","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"                \u003cpadding\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"                  \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"                \u003c/padding\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"              \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"            \u003c/center\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"          \u003c/BorderPane\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        \u003cVBox fx:id\u003d\"eventList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"          \u003cStackPane fx:id\u003d\"eventListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"junhonglow":1,"lihongguang00":36,"-":45}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2023-10-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"import seedu.address.storage.JsonCalendarStorage;","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"        JsonCalendarStorage calendarStorage \u003d new JsonCalendarStorage(temporaryFolder.resolve(\"calendar.json\"));","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, calendarStorage, userPrefsStorage);","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-21"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"    public void getEventList() {","lastModifiedDate":"2023-10-21"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"        assertEquals(logic.getEventList(), FXCollections.observableArrayList());","lastModifiedDate":"2023-10-21"},{"lineNumber":76,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-21"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"    public void getAddressBook() {","lastModifiedDate":"2023-10-21"},{"lineNumber":80,"author":{"gitId":"junhonglow"},"content":"        assertEquals(logic.getAddressBook(), new AddressBook());","lastModifiedDate":"2023-10-21"},{"lineNumber":81,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":82,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-21"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"    public void getCalendar() {","lastModifiedDate":"2023-10-27"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(logic.getCalendar(), new Calendar());","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"    public void getCurrentWeekEventList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(logic.getCurrentWeekEventList(), FXCollections.observableArrayList());","lastModifiedDate":"2023-10-27"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"junhonglow"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2023-10-21"},{"lineNumber":93,"author":{"gitId":"junhonglow"},"content":"        assertNotNull(logic.getAddressBookFilePath());","lastModifiedDate":"2023-10-21"},{"lineNumber":94,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-21"},{"lineNumber":95,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":155,"author":{"gitId":"junhonglow"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":173,"author":{"gitId":"junhonglow"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component","lastModifiedDate":"2023-10-19"},{"lineNumber":174,"author":{"gitId":"junhonglow"},"content":"     * when saving an AddressBook.","lastModifiedDate":"2023-10-19"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // Inject LogicManager with an AddressBookStorage that throws the IOException e when saving","lastModifiedDate":"2023-06-13"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(prefPath) {","lastModifiedDate":"2023-06-13"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2023-06-13"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":191,"author":{"gitId":"junhonglow"},"content":"        JsonCalendarStorage calendarStorage \u003d","lastModifiedDate":"2023-10-19"},{"lineNumber":192,"author":{"gitId":"junhonglow"},"content":"                new JsonCalendarStorage(temporaryFolder.resolve(\"ExceptionCalendar.json\"));","lastModifiedDate":"2023-10-19"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":195,"author":{"gitId":"junhonglow"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, calendarStorage, userPrefsStorage);","lastModifiedDate":"2023-10-19"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        // Triggers the saveAddressBook method by executing an add command","lastModifiedDate":"2023-06-13"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2023-06-13"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;","lastModifiedDate":"2023-06-13"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2023-06-13"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2023-06-13"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"junhonglow":26,"lihongguang00":10,"-":171}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                expectedModel);","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model,","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"junhonglow":3,"-":46}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":129,"author":{"gitId":"junhonglow"},"content":"        public Path getCalendarFilePath() {","lastModifiedDate":"2023-10-19"},{"lineNumber":130,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":131,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":132,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":133,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":134,"author":{"gitId":"junhonglow"},"content":"        public void setCalendarFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-19"},{"lineNumber":135,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":136,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":137,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":154,"author":{"gitId":"junhonglow"},"content":"        public void setCalendar(ReadOnlyCalendar newData) {","lastModifiedDate":"2023-10-19"},{"lineNumber":155,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":156,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":157,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":158,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":159,"author":{"gitId":"junhonglow"},"content":"        public ReadOnlyCalendar getCalendar() {","lastModifiedDate":"2023-10-19"},{"lineNumber":160,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"        public ObservableList\u003cEvent\u003e getCurrentWeekEventList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-27"},{"lineNumber":166,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":167,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"        public boolean canAddEvent(Event event) {","lastModifiedDate":"2023-10-08"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-08"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2023-10-08"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-08"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":194,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-19"},{"lineNumber":195,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":198,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":199,"author":{"gitId":"Fallman2"},"content":"        public Event findEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-19"},{"lineNumber":200,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":201,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":202,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":203,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":204,"author":{"gitId":"Fallman2"},"content":"        public List\u003cEvent\u003e eventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":205,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":206,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":207,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":208,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":209,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":210,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":211,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":212,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":213,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":214,"author":{"gitId":"junhonglow"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-10-21"},{"lineNumber":215,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-21"},{"lineNumber":216,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":217,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"nicrandomlee"},"content":"        @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":228,"author":{"gitId":"nicrandomlee"},"content":"        public void sortPersonList(Comparator\u003cPerson\u003e personComparator) {","lastModifiedDate":"2023-10-18"},{"lineNumber":229,"author":{"gitId":"nicrandomlee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-18"},{"lineNumber":230,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":252,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":274,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"junhonglow":26,"Fallman2":24,"nicrandomlee":5,"lihongguang00":16,"-":203}},{"path":"src/test/java/seedu/address/logic/commands/AddContactEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.LAUNCH;","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.TRAINING;","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"public class AddContactEventCommandTest {","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"    public void execute_addEvent_success() {","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"        Person person \u003d ALICE;","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"        Event event \u003d TRAINING;","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"        AddContactEventCommand addContactEventCommand \u003d new AddContactEventCommand(INDEX_FIRST_PERSON, event);","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"        String expectedMessage \u003d String.format(AddContactEventCommand.MESSAGE_ADD_EVENT_TO_PERSON_SUCCESS,","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"                person.getName(), Messages.format(event));","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"                model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), person);","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"        assertCommandSuccess(addContactEventCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"        AddContactEventCommand addContactEventCommand \u003d new AddContactEventCommand(outOfBoundIndex, TRAINING);","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"        assertCommandFailure(addContactEventCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"     * Add event to filtered list where index is larger than size of filtered list,","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"     * but smaller than size of address book","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"        AddContactEventCommand addContactEventCommand \u003d new AddContactEventCommand(outOfBoundIndex, TRAINING);","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"        assertCommandFailure(addContactEventCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"junhonglow"},"content":"    public void equals() {","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"        final AddContactEventCommand standardCommand \u003d new AddContactEventCommand(INDEX_FIRST_PERSON, TRAINING);","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"junhonglow"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":81,"author":{"gitId":"junhonglow"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-29"},{"lineNumber":82,"author":{"gitId":"junhonglow"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2023-10-29"},{"lineNumber":83,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":84,"author":{"gitId":"junhonglow"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-10-29"},{"lineNumber":85,"author":{"gitId":"junhonglow"},"content":"        assertFalse(standardCommand.equals(new AddContactEventCommand(INDEX_SECOND_PERSON, TRAINING)));","lastModifiedDate":"2023-10-29"},{"lineNumber":86,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":87,"author":{"gitId":"junhonglow"},"content":"        // different event -\u003e returns false","lastModifiedDate":"2023-10-29"},{"lineNumber":88,"author":{"gitId":"junhonglow"},"content":"        assertFalse(standardCommand.equals(new AddContactEventCommand(INDEX_FIRST_PERSON, LAUNCH)));","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":92,"author":{"gitId":"junhonglow"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-29"},{"lineNumber":93,"author":{"gitId":"junhonglow"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-29"},{"lineNumber":94,"author":{"gitId":"junhonglow"},"content":"        Event event \u003d TRAINING;","lastModifiedDate":"2023-10-29"},{"lineNumber":95,"author":{"gitId":"junhonglow"},"content":"        AddContactEventCommand addContactEventCommand \u003d new AddContactEventCommand(index, event);","lastModifiedDate":"2023-10-29"},{"lineNumber":96,"author":{"gitId":"junhonglow"},"content":"        String expected \u003d AddContactEventCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", event\u003d\"","lastModifiedDate":"2023-10-29"},{"lineNumber":97,"author":{"gitId":"junhonglow"},"content":"                + event + \"}\";","lastModifiedDate":"2023-10-29"},{"lineNumber":98,"author":{"gitId":"junhonglow"},"content":"        assertEquals(expected, addContactEventCommand.toString());","lastModifiedDate":"2023-10-29"},{"lineNumber":99,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"junhonglow":100}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-09"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-09"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-09"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_LATER;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_LATER;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-09"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-09"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-09"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-09"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-09"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-09"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-09"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-09"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-09"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-09"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-09"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-10-09"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-09"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-09"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-09"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-09"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"public class AddEventCommandTest {","lastModifiedDate":"2023-10-09"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null));","lastModifiedDate":"2023-10-09"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    public void constructor_eventAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-10-09"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();","lastModifiedDate":"2023-10-09"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-09"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub);","lastModifiedDate":"2023-10-09"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, Messages.format(validEvent)),","lastModifiedDate":"2023-10-09"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-10-09"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);","lastModifiedDate":"2023-10-09"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    public void execute_conflictingEvent_throwsCommandException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-09"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);","lastModifiedDate":"2023-10-09"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);","lastModifiedDate":"2023-10-09"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(CommandException.class, AddEventCommand.MESSAGE_EVENT_CONFLICT, () -\u003e addEventCommand","lastModifiedDate":"2023-10-09"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"                .execute(modelStub));","lastModifiedDate":"2023-10-09"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    public void equalsTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        EventBuilder otherValidEventBuilder \u003d new EventBuilder();","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        otherValidEventBuilder.withStartEndDate(VALID_START_DATE_LATER, VALID_END_DATE_LATER);","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        Event otherEvent \u003d otherValidEventBuilder.build();","lastModifiedDate":"2023-10-27"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent);","lastModifiedDate":"2023-10-27"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        AddEventCommand notEqualAddEventCommand \u003d new AddEventCommand(otherEvent);","lastModifiedDate":"2023-10-27"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        Object nonAddEventCommandObject \u003d new Object();","lastModifiedDate":"2023-10-27"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(addEventCommand.equals(addEventCommand));","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(addEventCommand.equals(notEqualAddEventCommand));","lastModifiedDate":"2023-10-27"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(addEventCommand.equals(nonAddEventCommandObject));","lastModifiedDate":"2023-10-27"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"     * A default model stub that have all the methods failing.","lastModifiedDate":"2023-10-09"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-10-09"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-09"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-10-09"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-10-09"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-10-09"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2023-10-09"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-09"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":113,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":114,"author":{"gitId":"junhonglow"},"content":"        public Path getCalendarFilePath() {","lastModifiedDate":"2023-10-19"},{"lineNumber":115,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":116,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":117,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":118,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":119,"author":{"gitId":"junhonglow"},"content":"        public void setCalendarFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-19"},{"lineNumber":120,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":121,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":122,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-10-09"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-10-09"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-10-09"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":138,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":139,"author":{"gitId":"junhonglow"},"content":"        public void setCalendar(ReadOnlyCalendar newData) {","lastModifiedDate":"2023-10-19"},{"lineNumber":140,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":141,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":142,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":143,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":144,"author":{"gitId":"junhonglow"},"content":"        public ReadOnlyCalendar getCalendar() {","lastModifiedDate":"2023-10-19"},{"lineNumber":145,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":146,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":147,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"        public ObservableList\u003cEvent\u003e getCurrentWeekEventList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-27"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-10-09"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2023-10-09"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-10-09"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"        public boolean canAddEvent(Event event) {","lastModifiedDate":"2023-10-09"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2023-10-09"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-19"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-19"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"        public Event findEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-19"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-19"},{"lineNumber":186,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":188,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"        public List\u003cEvent\u003e eventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":192,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":194,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":195,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":198,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":199,"author":{"gitId":"junhonglow"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-10-21"},{"lineNumber":200,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-21"},{"lineNumber":201,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":202,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":203,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":204,"author":{"gitId":"lihongguang00"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-10-09"},{"lineNumber":205,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":206,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":207,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":208,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":209,"author":{"gitId":"lihongguang00"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-10-09"},{"lineNumber":210,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-09"},{"lineNumber":211,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":212,"author":{"gitId":"nicrandomlee"},"content":"        @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":213,"author":{"gitId":"nicrandomlee"},"content":"        public void sortPersonList(Comparator\u003cPerson\u003e personComparator) {","lastModifiedDate":"2023-10-18"},{"lineNumber":214,"author":{"gitId":"nicrandomlee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-18"},{"lineNumber":215,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":216,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":217,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":218,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":219,"author":{"gitId":"lihongguang00"},"content":"     * A Model stub that contains a single event.","lastModifiedDate":"2023-10-09"},{"lineNumber":220,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":221,"author":{"gitId":"lihongguang00"},"content":"    private class ModelStubWithEvent extends AddEventCommandTest.ModelStub {","lastModifiedDate":"2023-10-09"},{"lineNumber":222,"author":{"gitId":"lihongguang00"},"content":"        private final Event event;","lastModifiedDate":"2023-10-09"},{"lineNumber":223,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":224,"author":{"gitId":"lihongguang00"},"content":"        ModelStubWithEvent(Event event) {","lastModifiedDate":"2023-10-09"},{"lineNumber":225,"author":{"gitId":"lihongguang00"},"content":"            requireNonNull(event);","lastModifiedDate":"2023-10-09"},{"lineNumber":226,"author":{"gitId":"lihongguang00"},"content":"            this.event \u003d event;","lastModifiedDate":"2023-10-09"},{"lineNumber":227,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":228,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":229,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":230,"author":{"gitId":"lihongguang00"},"content":"        public boolean canAddEvent(Event other) {","lastModifiedDate":"2023-10-09"},{"lineNumber":231,"author":{"gitId":"lihongguang00"},"content":"            return !event.isConflicting(other);","lastModifiedDate":"2023-10-09"},{"lineNumber":232,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":233,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":234,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":235,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":236,"author":{"gitId":"lihongguang00"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2023-10-09"},{"lineNumber":237,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":238,"author":{"gitId":"lihongguang00"},"content":"    private class ModelStubAcceptingEventAdded extends AddEventCommandTest.ModelStub {","lastModifiedDate":"2023-10-09"},{"lineNumber":239,"author":{"gitId":"lihongguang00"},"content":"        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003cEvent\u003e();","lastModifiedDate":"2023-10-09"},{"lineNumber":240,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":241,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":242,"author":{"gitId":"lihongguang00"},"content":"        public boolean canAddEvent(Event event) {","lastModifiedDate":"2023-10-09"},{"lineNumber":243,"author":{"gitId":"lihongguang00"},"content":"            requireNonNull(event);","lastModifiedDate":"2023-10-09"},{"lineNumber":244,"author":{"gitId":"lihongguang00"},"content":"            return eventsAdded.stream().anyMatch(x -\u003e !x.isConflicting(event)) || eventsAdded.isEmpty();","lastModifiedDate":"2023-10-09"},{"lineNumber":245,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":246,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":247,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-09"},{"lineNumber":248,"author":{"gitId":"lihongguang00"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2023-10-09"},{"lineNumber":249,"author":{"gitId":"lihongguang00"},"content":"            requireNonNull(event);","lastModifiedDate":"2023-10-09"},{"lineNumber":250,"author":{"gitId":"lihongguang00"},"content":"            eventsAdded.add(event);","lastModifiedDate":"2023-10-09"},{"lineNumber":251,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-09"},{"lineNumber":252,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":253,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-09"}],"authorContributionMap":{"junhonglow":26,"lihongguang00":197,"Fallman2":25,"nicrandomlee":5}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"junhonglow":3,"-":30}},{"path":"src/test/java/seedu/address/logic/commands/ClearEventsCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.EventPeriodBuilder;","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"class ClearEventsCommandTest {","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    private static final EventPeriod defaultPeriod \u003d new EventPeriodBuilder().build();","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    private static final ClearEventsCommand defaultTrueCommand \u003d","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"            new ClearEventsCommand(defaultPeriod, true);","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    private static final ClearEventsCommand defaultFalseCommand \u003d","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"            new ClearEventsCommand(defaultPeriod, false);","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ClearEventsCommand(null, true));","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ClearEventsCommand(null, false));","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"    public void execute_noEvent_throwsCommandException() {","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        ClearEventsCommandTest.ModelStub modelStub \u003d new ClearEventsCommandTest.ModelStubWithNoEvent();","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        assertThrows(CommandException.class, ClearEventsCommand.MESSAGE_NO_EVENTS, () -\u003e defaultFalseCommand","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"                .execute(modelStub));","lastModifiedDate":"2023-10-28"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"        assertThrows(CommandException.class, ClearEventsCommand.MESSAGE_NO_EVENTS, () -\u003e defaultTrueCommand","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"                .execute(modelStub));","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    public void constructor_oneEventClearedFromModel_deleteSuccessful() throws Exception {","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        ClearEventsCommandTest.ModelStubWithOneEvent modelStub \u003d","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"                new ClearEventsCommandTest.ModelStubWithOneEvent(validEvent);","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        EventPeriodBuilder builder \u003d new EventPeriodBuilder();","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        builder.changeStartAndEnd(EventBuilder.DEFAULT_START_TIME_STRING, EventBuilder.DEFAULT_END_TIME_STRING);","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        EventPeriod eventPeriod \u003d builder.build();","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"        CommandResult commandResult \u003d new ClearEventsCommand(eventPeriod, true).execute(modelStub);","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"        CommandResult commandResult2 \u003d new ClearEventsCommand(eventPeriod, false).execute(modelStub);","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        assertEquals(ClearEventsCommand.MESSAGE_SUCCESS + \"1. \" + Messages.format(validEvent) + \"\\n\",","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        assertEquals(ClearEventsCommand.MESSAGE_WITHIN_RANGE","lastModifiedDate":"2023-10-28"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"                + \"1. \" + Messages.format(validEvent) + \"\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"                + ClearEventsCommand.MESSAGE_ADD_CONFIRMATION","lastModifiedDate":"2023-10-28"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"                + String.format(ClearEventsCommand.COMMAND_RESEND_FORMAT, EventBuilder.DEFAULT_START_TIME_STRING,","lastModifiedDate":"2023-10-28"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"                        EventBuilder.DEFAULT_END_TIME_STRING),","lastModifiedDate":"2023-10-28"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"                commandResult2.getFeedbackToUser());","lastModifiedDate":"2023-10-28"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"    public void equals() {","lastModifiedDate":"2023-10-28"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"        EventPeriodBuilder nonDefaultBuilder \u003d new EventPeriodBuilder();","lastModifiedDate":"2023-10-28"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        nonDefaultBuilder.changeStart(\"2023-01-02 08:00\");","lastModifiedDate":"2023-10-28"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        EventPeriod nonDefaultPeriod \u003d nonDefaultBuilder.build();","lastModifiedDate":"2023-10-28"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"        ClearEventsCommand nonDefaultTrueCommand \u003d new ClearEventsCommand(nonDefaultPeriod, true);","lastModifiedDate":"2023-10-28"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"        assertTrue(defaultTrueCommand.equals(defaultTrueCommand));","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"        ClearEventsCommand clearEventsTrueDefaultCopy \u003d new ClearEventsCommand(defaultPeriod, true);","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"        assertTrue(defaultTrueCommand.equals(clearEventsTrueDefaultCopy));","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"        assertFalse(defaultTrueCommand.equals(1));","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"        assertFalse(defaultTrueCommand.equals(null));","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"        // different timing -\u003e returns false","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"        assertFalse(defaultTrueCommand.equals(nonDefaultTrueCommand));","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"        // different confirmation -\u003e returns false","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"        assertFalse(defaultTrueCommand.equals(defaultFalseCommand));","lastModifiedDate":"2023-10-28"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"    void toStringMethod() {","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"        String expected \u003d ClearEventsCommand.class.getCanonicalName() + \"{toClearWithin\u003d\" + defaultPeriod","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"                + \", confirmed\u003dtrue}\";","lastModifiedDate":"2023-10-28"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"        assertEquals(expected, defaultTrueCommand.toString());","lastModifiedDate":"2023-10-28"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"     * A default model stub that have all the methods failing.","lastModifiedDate":"2023-10-28"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-10-28"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-28"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-10-28"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-10-28"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-10-28"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2023-10-28"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-28"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"        public Path getCalendarFilePath() {","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":150,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":151,"author":{"gitId":"Fallman2"},"content":"        public void setCalendarFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-28"},{"lineNumber":152,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":153,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":154,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":155,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":156,"author":{"gitId":"Fallman2"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-10-28"},{"lineNumber":157,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":158,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":159,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":160,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":161,"author":{"gitId":"Fallman2"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-10-28"},{"lineNumber":162,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":163,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":164,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":165,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":166,"author":{"gitId":"Fallman2"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-10-28"},{"lineNumber":167,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":168,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":169,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":170,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":171,"author":{"gitId":"Fallman2"},"content":"        public void setCalendar(ReadOnlyCalendar newData) {","lastModifiedDate":"2023-10-28"},{"lineNumber":172,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":173,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":174,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":175,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":176,"author":{"gitId":"Fallman2"},"content":"        public ReadOnlyCalendar getCalendar() {","lastModifiedDate":"2023-10-28"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"        public ObservableList\u003cEvent\u003e getCurrentWeekEventList() {","lastModifiedDate":"2023-10-28"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-10-28"},{"lineNumber":186,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":188,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2023-10-28"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":192,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":194,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":195,"author":{"gitId":"Fallman2"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-10-28"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":198,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":199,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":200,"author":{"gitId":"Fallman2"},"content":"        public boolean canAddEvent(Event event) {","lastModifiedDate":"2023-10-28"},{"lineNumber":201,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":202,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":203,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":204,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":205,"author":{"gitId":"Fallman2"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2023-10-28"},{"lineNumber":206,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":207,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":208,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":209,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":210,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-28"},{"lineNumber":211,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":212,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":213,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":214,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":215,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":216,"author":{"gitId":"Fallman2"},"content":"        public Event findEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-28"},{"lineNumber":217,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":218,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":219,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":220,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":221,"author":{"gitId":"Fallman2"},"content":"        public List\u003cEvent\u003e eventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":222,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":223,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":224,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":225,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":226,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":227,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":228,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":229,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":230,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":231,"author":{"gitId":"Fallman2"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-10-28"},{"lineNumber":232,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":233,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":234,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":235,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":236,"author":{"gitId":"Fallman2"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-10-28"},{"lineNumber":237,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":238,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":239,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":240,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":241,"author":{"gitId":"Fallman2"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-10-28"},{"lineNumber":242,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":243,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":244,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":245,"author":{"gitId":"Fallman2"},"content":"        public void sortPersonList(Comparator\u003cPerson\u003e personComparator) {","lastModifiedDate":"2023-10-28"},{"lineNumber":246,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":247,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":248,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":249,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":250,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":251,"author":{"gitId":"Fallman2"},"content":"     * A Model stub that contains a single event.","lastModifiedDate":"2023-10-28"},{"lineNumber":252,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":253,"author":{"gitId":"Fallman2"},"content":"    private class ModelStubWithNoEvent extends ClearEventsCommandTest.ModelStub {","lastModifiedDate":"2023-10-28"},{"lineNumber":254,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":255,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":256,"author":{"gitId":"Fallman2"},"content":"        public List\u003cEvent\u003e eventsInRange(EventPeriod eventPeriod) {","lastModifiedDate":"2023-10-28"},{"lineNumber":257,"author":{"gitId":"Fallman2"},"content":"            return List.of();","lastModifiedDate":"2023-10-28"},{"lineNumber":258,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":259,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":260,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":261,"author":{"gitId":"Fallman2"},"content":"    private class ModelStubWithOneEvent extends ClearEventsCommandTest.ModelStub {","lastModifiedDate":"2023-10-28"},{"lineNumber":262,"author":{"gitId":"Fallman2"},"content":"        private final Event event;","lastModifiedDate":"2023-10-28"},{"lineNumber":263,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":264,"author":{"gitId":"Fallman2"},"content":"        ModelStubWithOneEvent(Event event) {","lastModifiedDate":"2023-10-28"},{"lineNumber":265,"author":{"gitId":"Fallman2"},"content":"            requireNonNull(event);","lastModifiedDate":"2023-10-28"},{"lineNumber":266,"author":{"gitId":"Fallman2"},"content":"            this.event \u003d event;","lastModifiedDate":"2023-10-28"},{"lineNumber":267,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":268,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":269,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":270,"author":{"gitId":"Fallman2"},"content":"        public List\u003cEvent\u003e eventsInRange(EventPeriod eventPeriod) {","lastModifiedDate":"2023-10-28"},{"lineNumber":271,"author":{"gitId":"Fallman2"},"content":"            return List.of(event);","lastModifiedDate":"2023-10-28"},{"lineNumber":272,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":273,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":274,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":275,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventsInRange(EventPeriod eventPeriod) {","lastModifiedDate":"2023-10-28"},{"lineNumber":276,"author":{"gitId":"Fallman2"},"content":"            return;","lastModifiedDate":"2023-10-28"},{"lineNumber":277,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":278,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":279,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"Fallman2":279}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE_TIME;","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE_TIME;","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.PersonFilterBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"    public static final String VALID_NAME_CANDY \u003d \"Candy C\";","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"    public static final String VALID_NAME_DANIEL \u003d \"Daniel Mcadoo Dunbar\";","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"    public static final String VALID_ADDRESS_CANDY \u003d \"Block 133, Candy Street 6\";","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    public static final String VALID_DESCRIPTION \u003d \"sleep\";","lastModifiedDate":"2023-10-09"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    public static final String VALID_UNUSED_DESCRIPTION \u003d \"THIS IS A PLACEHOLDER\";","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    public static final String VALID_START_DATE_EARLIER \u003d \"2023-01-01 08:00\";","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    public static final String VALID_END_DATE_EARLIER \u003d \"2023-01-01 09:00\";","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    public static final String VALID_START_DATE_LATER \u003d \"2024-01-01 08:00\";","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    public static final String VALID_END_DATE_LATER \u003d \"2024-01-01 09:00\";","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"    public static final String EVENT_DESC_SLEEP \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION;","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"    public static final String START_DATE_DESC_EARLIER \u003d \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER;","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"    public static final String END_DATE_DESC_EARLIER \u003d \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    public static final String INVALID_DESCRIPTION \u003d \"\"; // empty string not allowed.","lastModifiedDate":"2023-10-09"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"    public static final String INVALID_DATE \u003d \"2023-13-35 16:80\"; // No such time and date exists","lastModifiedDate":"2023-10-09"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"    public static final String INVALID_EVENT \u003d \" \" + PREFIX_EVENT_DESCRIPTION + INVALID_DESCRIPTION","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"            + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"            + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    public static final FilterCommand.PersonFilter FILTER_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"    public static final FilterCommand.PersonFilter FILTER_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"        FILTER_AMY \u003d new PersonFilterBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"        FILTER_BOB \u003d new PersonFilterBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"junhonglow":9,"Fallman2":11,"nicrandomlee":3,"lihongguang00":8,"-":127}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(targetIndex);","lastModifiedDate":"2019-02-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String expected \u003d DeleteCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expected, deleteCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"junhonglow":4,"-":117}},{"path":"src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.model.event.EventPeriod.DATE_TIME_STRING_FORMATTER;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.EventBuilder.DEFAULT_END_TIME_STRING;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.EventBuilder.DEFAULT_START_TIME_STRING;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"class DeleteEventCommandTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    private static LocalDateTime firstTime \u003d LocalDateTime.parse(DEFAULT_START_TIME_STRING, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    private static LocalDateTime secondTime \u003d LocalDateTime.parse(DEFAULT_END_TIME_STRING, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DeleteEventCommand(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"    public void constructor_eventDeletedFromModel_deleteSuccessful() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        DeleteEventCommandTest.ModelStubWithEvent modelStub \u003d new DeleteEventCommandTest.ModelStubWithEvent(validEvent);","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        CommandResult commandResult \u003d new DeleteEventCommand(firstTime).execute(modelStub);","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        assertEquals(String.format(DeleteEventCommand.MESSAGE_SUCCESS, Messages.format(validEvent)),","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    public void execute_noEvent_throwsCommandException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(secondTime);","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        DeleteEventCommandTest.ModelStub modelStub \u003d new DeleteEventCommandTest.ModelStubWithNoEvent();","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        assertThrows(CommandException.class, DeleteEventCommand.MESSAGE_NO_EVENT, () -\u003e deleteEventCommand","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"                .execute(modelStub));","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    public void equals() {","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"        DeleteEventCommand deleteFirstEventCommand \u003d new DeleteEventCommand(firstTime);","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        DeleteEventCommand deleteSecondEventCommand \u003d new DeleteEventCommand(secondTime);","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        assertTrue(deleteFirstEventCommand.equals(deleteFirstEventCommand));","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"        DeleteEventCommand deleteFirstEventCommandCopy \u003d new DeleteEventCommand(firstTime);","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"        assertTrue(deleteFirstEventCommand.equals(deleteFirstEventCommandCopy));","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"        assertFalse(deleteFirstEventCommand.equals(1));","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"        assertFalse(deleteFirstEventCommand.equals(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"        // different time -\u003e returns false","lastModifiedDate":"2023-10-28"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        assertFalse(deleteFirstEventCommand.equals(deleteSecondEventCommand));","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"        DeleteEventCommand deleteFirstEventCommand \u003d new DeleteEventCommand(firstTime);","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"        String expected \u003d DeleteEventCommand.class.getCanonicalName() + \"{toDeleteAt\u003d\" + firstTime + \"}\";","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"        assertEquals(expected, deleteFirstEventCommand.toString());","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"     * A default model stub that have all the methods failing.","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"junhonglow"},"content":"        public Path getCalendarFilePath() {","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":130,"author":{"gitId":"junhonglow"},"content":"        public void setCalendarFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-20"},{"lineNumber":131,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":132,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":133,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-10-20"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-10-20"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":149,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":150,"author":{"gitId":"junhonglow"},"content":"        public void setCalendar(ReadOnlyCalendar newData) {","lastModifiedDate":"2023-10-20"},{"lineNumber":151,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":152,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":153,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":154,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":155,"author":{"gitId":"junhonglow"},"content":"        public ReadOnlyCalendar getCalendar() {","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":157,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":158,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"        @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"        public ObservableList\u003cEvent\u003e getCurrentWeekEventList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-27"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":163,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":164,"author":{"gitId":"Fallman2"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-10-20"},{"lineNumber":165,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":166,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":167,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":168,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":169,"author":{"gitId":"Fallman2"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2023-10-20"},{"lineNumber":170,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":171,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":172,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":173,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":174,"author":{"gitId":"Fallman2"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-10-20"},{"lineNumber":175,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":176,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":177,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":178,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":179,"author":{"gitId":"Fallman2"},"content":"        public boolean canAddEvent(Event event) {","lastModifiedDate":"2023-10-20"},{"lineNumber":180,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":181,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":182,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":183,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":184,"author":{"gitId":"Fallman2"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2023-10-20"},{"lineNumber":185,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":186,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":187,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":188,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":189,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-20"},{"lineNumber":190,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":191,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":192,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":193,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":194,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":195,"author":{"gitId":"Fallman2"},"content":"        public Event findEventAt(LocalDateTime dateTime) throws EventNotFoundException {","lastModifiedDate":"2023-10-20"},{"lineNumber":196,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":197,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":198,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":199,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":200,"author":{"gitId":"Fallman2"},"content":"        public List\u003cEvent\u003e eventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":201,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":202,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":203,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":204,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":205,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventsInRange(EventPeriod range) {","lastModifiedDate":"2023-10-28"},{"lineNumber":206,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":207,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":208,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":209,"author":{"gitId":"junhonglow"},"content":"        @Override","lastModifiedDate":"2023-10-21"},{"lineNumber":210,"author":{"gitId":"junhonglow"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-10-21"},{"lineNumber":211,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-21"},{"lineNumber":212,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-21"},{"lineNumber":213,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-21"},{"lineNumber":214,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":215,"author":{"gitId":"Fallman2"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":216,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":217,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":218,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":219,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":220,"author":{"gitId":"Fallman2"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-10-20"},{"lineNumber":221,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":222,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":223,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":224,"author":{"gitId":"Fallman2"},"content":"        public void sortPersonList(Comparator\u003cPerson\u003e personComparator) {","lastModifiedDate":"2023-10-20"},{"lineNumber":225,"author":{"gitId":"Fallman2"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":226,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":227,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":228,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":229,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":230,"author":{"gitId":"Fallman2"},"content":"     * A Model stub that contains a single event.","lastModifiedDate":"2023-10-20"},{"lineNumber":231,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":232,"author":{"gitId":"Fallman2"},"content":"    private class ModelStubWithNoEvent extends DeleteEventCommandTest.ModelStub {","lastModifiedDate":"2023-10-20"},{"lineNumber":233,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":234,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":235,"author":{"gitId":"Fallman2"},"content":"        public Event findEventAt(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-20"},{"lineNumber":236,"author":{"gitId":"Fallman2"},"content":"            throw new EventNotFoundException();","lastModifiedDate":"2023-10-20"},{"lineNumber":237,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":238,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":239,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":240,"author":{"gitId":"Fallman2"},"content":"    private class ModelStubWithEvent extends DeleteEventCommandTest.ModelStub {","lastModifiedDate":"2023-10-20"},{"lineNumber":241,"author":{"gitId":"Fallman2"},"content":"        private final Event event;","lastModifiedDate":"2023-10-20"},{"lineNumber":242,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":243,"author":{"gitId":"Fallman2"},"content":"        ModelStubWithEvent(Event event) {","lastModifiedDate":"2023-10-20"},{"lineNumber":244,"author":{"gitId":"Fallman2"},"content":"            requireNonNull(event);","lastModifiedDate":"2023-10-20"},{"lineNumber":245,"author":{"gitId":"Fallman2"},"content":"            this.event \u003d event;","lastModifiedDate":"2023-10-20"},{"lineNumber":246,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":247,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":248,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":249,"author":{"gitId":"Fallman2"},"content":"        public Event findEventAt(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-20"},{"lineNumber":250,"author":{"gitId":"Fallman2"},"content":"            return event;","lastModifiedDate":"2023-10-20"},{"lineNumber":251,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":252,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":253,"author":{"gitId":"Fallman2"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":254,"author":{"gitId":"Fallman2"},"content":"        public void deleteEventAt(LocalDateTime dateTime) {","lastModifiedDate":"2023-10-20"},{"lineNumber":255,"author":{"gitId":"Fallman2"},"content":"            return;","lastModifiedDate":"2023-10-20"},{"lineNumber":256,"author":{"gitId":"Fallman2"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":257,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":258,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":26,"Fallman2":228,"lihongguang00":4}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"                model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"junhonglow"},"content":"                model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"junhonglow"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"junhonglow"},"content":"                model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"junhonglow"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"junhonglow"},"content":"                model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2019-02-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPersonDescriptor\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                + editPersonDescriptor + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"junhonglow":10,"-":179}},{"path":"src/test/java/seedu/address/logic/commands/FilterCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FILTER_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FILTER_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.PersonFilterBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":" * Contains integration tests (interaction with the Model) for {@code FilterCommand}.","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"class FilterCommandTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    public void execute_oneField_multiplePersonsDisplayed() {","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        FilterCommand.PersonFilter filter \u003d new PersonFilterBuilder().withPhone(\"948\").build();","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        FilterCommand command \u003d new FilterCommand(filter);","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        expectedModel.updateFilteredPersonList(filter::matchesFilter);","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"        assertEquals(Arrays.asList(ELLE, FIONA, GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"    public void execute_multipleKeywords_onePersonFound() {","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        FilterCommand.PersonFilter filter \u003d new PersonFilterBuilder().withName(\"carl\").withEmail(\"heinz\").build();","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        FilterCommand command \u003d new FilterCommand(filter);","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        expectedModel.updateFilteredPersonList(filter::matchesFilter);","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        assertEquals(Arrays.asList(CARL), model.getFilteredPersonList());","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        FilterCommand.PersonFilter filter \u003d new PersonFilterBuilder().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        FilterCommand filterCommand \u003d new FilterCommand(filter);","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        String expected \u003d FilterCommand.class.getCanonicalName() + \"{personFilter\u003d\" + filter + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        assertEquals(expected, filterCommand.toString());","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"    public void equals() {","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        FilterCommand.PersonFilter firstFilter \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"                new FilterCommand.PersonFilter(FILTER_AMY);","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        FilterCommand.PersonFilter secondFilter \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"                new FilterCommand.PersonFilter(FILTER_BOB);","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        FilterCommand filterFirstCommand \u003d new FilterCommand(firstFilter);","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"        FilterCommand filterSecondCommand \u003d new FilterCommand(secondFilter);","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"        FilterCommand filterFirstCommandCopy \u003d new FilterCommand(firstFilter);","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"        assertFalse(filterFirstCommand.equals(1));","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        assertFalse(filterFirstCommand.equals(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"        assertFalse(filterFirstCommand.equals(filterSecondCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"junhonglow":3,"Fallman2":83}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"keyword\"));","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        FindCommand findCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expected \u003d FindCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expected, findCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"junhonglow":3,"-":89}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2018-01-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"junhonglow":3,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/PersonFilterTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FILTER_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FILTER_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.FilterCommand.PersonFilter;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.PersonFilterBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"class PersonFilterTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"    public void equals() {","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        assertTrue(FILTER_AMY.equals(FILTER_AMY));","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"        assertFalse(FILTER_AMY.equals(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        assertFalse(FILTER_AMY.equals(5));","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        assertFalse(FILTER_AMY.equals(FILTER_BOB));","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        PersonFilter editedAmy \u003d new PersonFilterBuilder(FILTER_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        assertFalse(FILTER_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        editedAmy \u003d new PersonFilterBuilder(FILTER_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"        assertFalse(FILTER_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        editedAmy \u003d new PersonFilterBuilder(FILTER_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        assertFalse(FILTER_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        editedAmy \u003d new PersonFilterBuilder(FILTER_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        assertFalse(FILTER_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"        editedAmy \u003d new PersonFilterBuilder(FILTER_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"        assertFalse(FILTER_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"        PersonFilter personFilter \u003d new PersonFilter();","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        String expected \u003d PersonFilter.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"                + personFilter.getName() + \", phone\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"                + personFilter.getPhone() + \", email\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"                + personFilter.getEmail() + \", address\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"                + personFilter.getAddress() + \", tags\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"                + personFilter.getTags() + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"        assertEquals(expected, personFilter.toString());","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Fallman2":66}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-18"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalUnsortedAddressBook;","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-18"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.comparer.SortComparator;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"/**","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SortCommand.","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":" */","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"public class SortCommandTest {","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"    private Model model;","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"    private Model expectedModel;","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"    private Model unsortedModel;","lastModifiedDate":"2023-10-18"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"    private Model expectedSortedModel;","lastModifiedDate":"2023-10-18"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"    private ArrayList\u003cSortComparator\u003e sortComparatorArrayList;","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"    private NameComparatorStub nameComparatorStub;","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-18"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"    public void setUp() {","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"        unsortedModel \u003d new ModelManager(getTypicalUnsortedAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"        expectedSortedModel \u003d new ModelManager(model.getAddressBook(), getTypicalCalendar(), new UserPrefs());","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"        sortComparatorArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"        nameComparatorStub \u003d new NameComparatorStub(true, false, 1);","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"        sortComparatorArrayList.add(nameComparatorStub);","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"    public void execute_sortByName_showsCorrectSortedList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"        assertCommandSuccess(new SortCommand(sortComparatorArrayList), unsortedModel,","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"nicrandomlee"},"content":"                SortCommand.MESSAGE_SUCCESS, expectedSortedModel);","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"nicrandomlee"},"content":"    public class NameComparatorStub extends SortComparator {","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"nicrandomlee"},"content":"        /**","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"nicrandomlee"},"content":"         * Creates a new SortComparator with the given parameters.","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"nicrandomlee"},"content":"         *","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"nicrandomlee"},"content":"         * @param isActive  Whether this comparator is currently active.","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"nicrandomlee"},"content":"         * @param isReverse Whether to sort in reverse order.","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"nicrandomlee"},"content":"         * @param priority  The priority of this comparator.","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"nicrandomlee"},"content":"         */","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"nicrandomlee"},"content":"        public NameComparatorStub(boolean isActive, boolean isReverse, int priority) {","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"nicrandomlee"},"content":"            super(isActive, isReverse, priority);","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"nicrandomlee"},"content":"        @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"nicrandomlee"},"content":"        public int compare(Person p1, Person p2) {","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"nicrandomlee"},"content":"            return p1.getName().fullName.compareTo(p2.getName().fullName);","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":68,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"junhonglow":5,"nicrandomlee":64}},{"path":"src/test/java/seedu/address/logic/parser/AddContactEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_EARLIER;","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESC_SLEEP;","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_EARLIER;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_EARLIER;","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"import seedu.address.logic.commands.AddContactEventCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"public class AddContactEventCommandParserTest {","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddContactEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"    private static final String VALID_EVENT \u003d EVENT_DESC_SLEEP + START_DATE_DESC_EARLIER + END_DATE_DESC_EARLIER;","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    private AddContactEventCommandParser parser \u003d new AddContactEventCommandParser();","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"        // no index specified","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"        assertParseFailure(parser, VALID_EVENT, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"        // no field specified","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"        // no index and no field specified","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"        // negative index","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"        assertParseFailure(parser, \"-5\" + VALID_EVENT, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"        // zero index","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"        assertParseFailure(parser, \"0\" + VALID_EVENT, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EVENT, MESSAGE_INVALID_FORMAT); // invalid event","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"    public void parse_validEvent_success() {","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"        String userInput \u003d targetIndex.getOneBased() + VALID_EVENT;","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"        Event event \u003d new EventBuilder()","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"                .withDescription(VALID_DESCRIPTION)","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"                .withStartEndDate(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER)","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"junhonglow"},"content":"                .build();","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"junhonglow"},"content":"        AddContactEventCommand expectedCommand \u003d new AddContactEventCommand(targetIndex, event);","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"junhonglow":75}},{"path":"src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-09"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-09"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE;","lastModifiedDate":"2023-10-09"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;","lastModifiedDate":"2023-10-09"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;","lastModifiedDate":"2023-10-09"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;","lastModifiedDate":"2023-10-09"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_END_DATE_TIME;","lastModifiedDate":"2023-10-09"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_START_DATE_TIME;","lastModifiedDate":"2023-10-09"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-09"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-09"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-09"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-09"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2023-10-09"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-09"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-09"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-09"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-09"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"public class AddEventCommandParserTest {","lastModifiedDate":"2023-10-09"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    private AddEventCommandParser parser \u003d new AddEventCommandParser();","lastModifiedDate":"2023-10-09"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-10-09"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        Event expectedEvent \u003d new EventBuilder().withDescription(VALID_DESCRIPTION)","lastModifiedDate":"2023-10-09"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        String validUserInput \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        assertParseSuccess(parser, validUserInput, new AddEventCommand(expectedEvent));","lastModifiedDate":"2023-10-09"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    public void parse_repeatedPrefix_failure() {","lastModifiedDate":"2023-10-09"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        String userInputRepeatDescriptionPrefix \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-09"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        assertParseFailure(parser, userInputRepeatDescriptionPrefix,","lastModifiedDate":"2023-10-09"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EVENT_DESCRIPTION));","lastModifiedDate":"2023-10-09"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        String userInputRepeatEventStartDateTimePrefix \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        assertParseFailure(parser, userInputRepeatEventStartDateTimePrefix,","lastModifiedDate":"2023-10-09"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EVENT_START_DATE_TIME));","lastModifiedDate":"2023-10-09"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        String userInputRepeatEventEndDateTimePrefix \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        assertParseFailure(parser, userInputRepeatEventEndDateTimePrefix,","lastModifiedDate":"2023-10-09"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EVENT_END_DATE_TIME));","lastModifiedDate":"2023-10-09"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        String userInputRepeatMultiplePrefix \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-09"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        assertParseFailure(parser, userInputRepeatMultiplePrefix,","lastModifiedDate":"2023-10-09"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EVENT_DESCRIPTION,","lastModifiedDate":"2023-10-09"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"                        PREFIX_EVENT_START_DATE_TIME, PREFIX_EVENT_END_DATE_TIME));","lastModifiedDate":"2023-10-09"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-10-09"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        String missingDescription \u003d \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"        assertParseFailure(parser, missingDescription, expectedMessage);","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"        String missingStartDate \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"        assertParseFailure(parser, missingStartDate, expectedMessage);","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"        String missingEndDate \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"        assertParseFailure(parser, missingEndDate, expectedMessage);","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-09"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"        String userInputInvalidDescription \u003d \" \" + PREFIX_EVENT_DESCRIPTION + INVALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"        assertParseFailure(parser, userInputInvalidDescription,","lastModifiedDate":"2023-10-09"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"                EventDescription.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-09"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"        String userInputInvalidStartDateTime \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + INVALID_DATE","lastModifiedDate":"2023-10-09"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"        assertParseFailure(parser, userInputInvalidStartDateTime,","lastModifiedDate":"2023-10-09"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"                EventPeriod.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-09"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"        String userInputInvalidEndDateTime \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_DESCRIPTION","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_START_DATE_TIME + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"                + \" \" + PREFIX_EVENT_END_DATE_TIME + INVALID_DATE;","lastModifiedDate":"2023-10-09"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"        assertParseFailure(parser, userInputInvalidEndDateTime,","lastModifiedDate":"2023-10-09"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"                EventPeriod.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-09"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-09"}],"authorContributionMap":{"lihongguang00":115,"Fallman2":4}},{"path":"src/test/java/seedu/address/logic/parser/ClearEventsCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.ClearEventsCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.EventPeriodBuilder;","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"class ClearEventsCommandParserTest {","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"    private static final ClearEventsCommandParser parser \u003d new ClearEventsCommandParser();","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    private static final String sampleString \u003d \"ts/2023-01-02 13:00 te/2023-01-02 15:00\";","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    private static final String sampleStringConfirmed \u003d \"ts/2023-01-02 13:00 te/2023-01-02 15:00 c/CONFIRMED\";","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    public void parse_success_unconfirmed() {","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        EventPeriod expectedPeriod \u003d new EventPeriodBuilder().build();","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        String validUserInput \u003d \" \" + sampleString;","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        assertParseSuccess(parser, validUserInput, new ClearEventsCommand(expectedPeriod, false));","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    public void parse_success_confirmed() {","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        EventPeriod expectedPeriod \u003d new EventPeriodBuilder().build();","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        String validUserInput \u003d \" \" + sampleStringConfirmed;","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"        assertParseSuccess(parser, validUserInput, new ClearEventsCommand(expectedPeriod, true));","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        String invalidUserInput \u003d \" 123\";","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        assertParseFailure(parser, invalidUserInput,","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearEventsCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        String halfValidInput \u003d \" ts/2023-01-02 13:00\";","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"        assertParseFailure(parser, halfValidInput,","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearEventsCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"Fallman2":41}},{"path":"src/test/java/seedu/address/logic/parser/DeleteEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.model.event.EventPeriod.DATE_TIME_STRING_FORMATTER;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.DeleteEventCommand;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"class DeleteEventCommandParserTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"    private static final DeleteEventCommandParser parser \u003d new DeleteEventCommandParser();","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    private static final String sampleString \u003d \"2024-01-01 12:00\";","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    public void parse_success() {","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(sampleString, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"        String validUserInput \u003d \" \" + sampleString;","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"        assertParseSuccess(parser, validUserInput, new DeleteEventCommand(expectedDateTime));","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        String invalidUserInput \u003d \" 123\";","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        assertParseFailure(parser, invalidUserInput,","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"Fallman2":31}},{"path":"src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.FilterCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.PersonFilterBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"public class FilterCommandParserTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    private FilterCommandParser parser \u003d new FilterCommandParser();","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    public void parse_noParameters_failure() {","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        // no field specified","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        assertParseFailure(parser, \"\", FilterCommand.CONTACTS_NOT_FILTERED);","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    public void parse_allFieldsSpecified_success() throws ParseException {","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"        String userInput \u003d PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        FilterCommand.PersonFilter filter \u003d new PersonFilterBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        FilterCommand expectedCommand \u003d new FilterCommand(filter);","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        FilterCommand actual \u003d parser.parse(userInput);","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"        assertTrue(actual.equals(expectedCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    public void parse_validArgs_returnsFilterCommand() throws ParseException {","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        FilterCommand expectedFilterCommand \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"                new FilterCommand(new PersonFilterBuilder().withName(\"A\").withEmail(\"@\").build());","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"        assertTrue(parser.parse(\" n/A e/@\").equals(expectedFilterCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"        assertTrue(parser.parse(\" \\n n/A \\n \\t e/@  \\t\").equals(expectedFilterCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Fallman2":61}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-09"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    private static final String INVALID_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-10-09"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    private static final String INVALID_DATE \u003d \"2023-13-35 16:80\";","lastModifiedDate":"2023-10-09"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"    private static final String VALID_DESCRIPTION \u003d \"sleep\";","lastModifiedDate":"2023-10-09"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"    private static final String VALID_START_DATE \u003d \"2023-01-01 08:00\";","lastModifiedDate":"2023-10-09"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    private static final String VALID_END_DATE \u003d \"2023-01-01 09:00\";","lastModifiedDate":"2023-10-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":205,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":206,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventDescription_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":207,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventDescription(null));","lastModifiedDate":"2023-10-09"},{"lineNumber":208,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":209,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":210,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":211,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventDescription_invalidDescription_throwsParseException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":212,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventDescription(INVALID_DESCRIPTION));","lastModifiedDate":"2023-10-09"},{"lineNumber":213,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":214,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":215,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":216,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventDescription_validDescription_returnsDescription() throws Exception {","lastModifiedDate":"2023-10-09"},{"lineNumber":217,"author":{"gitId":"lihongguang00"},"content":"        EventDescription actual \u003d ParserUtil.parseEventDescription(VALID_DESCRIPTION);","lastModifiedDate":"2023-10-09"},{"lineNumber":218,"author":{"gitId":"lihongguang00"},"content":"        EventDescription expected \u003d new EventDescription(VALID_DESCRIPTION);","lastModifiedDate":"2023-10-09"},{"lineNumber":219,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":220,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2023-10-09"},{"lineNumber":221,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":222,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":223,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":224,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventPeriod_nullStart_throwsNullPointerException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":225,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventPeriod(null, VALID_END_DATE));","lastModifiedDate":"2023-10-09"},{"lineNumber":226,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":227,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":228,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":229,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventPeriod_nullEnd_throwsNullPointerException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":230,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventPeriod(VALID_START_DATE, null));","lastModifiedDate":"2023-10-09"},{"lineNumber":231,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":232,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":233,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":234,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventPeriod_nullStartAndEnd_throwsNullPointerException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":235,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventPeriod(null, null));","lastModifiedDate":"2023-10-09"},{"lineNumber":236,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":237,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":238,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":239,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventPeriod_invalidStart_throwsParseException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":240,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventPeriod(INVALID_DATE, VALID_END_DATE));","lastModifiedDate":"2023-10-09"},{"lineNumber":241,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":242,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":243,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":244,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventPeriod_invalidEnd_throwsParseException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":245,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventPeriod(VALID_START_DATE, INVALID_DATE));","lastModifiedDate":"2023-10-09"},{"lineNumber":246,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":247,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":248,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":249,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventPeriod_invalidStartAndEnd_throwsParseException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":250,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventPeriod(INVALID_DATE, INVALID_DATE));","lastModifiedDate":"2023-10-09"},{"lineNumber":251,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":252,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":253,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":254,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventPeriod_endBeforeStart_throwsParseException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":255,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventPeriod(VALID_END_DATE, VALID_START_DATE));","lastModifiedDate":"2023-10-09"},{"lineNumber":256,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":257,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":258,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":259,"author":{"gitId":"lihongguang00"},"content":"    public void parseEventPeriod_validStartAndEnd_returnsValidEventPeriod() throws Exception {","lastModifiedDate":"2023-10-09"},{"lineNumber":260,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod actual \u003d ParserUtil.parseEventPeriod(VALID_START_DATE, VALID_END_DATE);","lastModifiedDate":"2023-10-09"},{"lineNumber":261,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod expected \u003d new EventPeriod(VALID_START_DATE, VALID_END_DATE);","lastModifiedDate":"2023-10-09"},{"lineNumber":262,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":263,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(actual, expected);","lastModifiedDate":"2023-10-09"},{"lineNumber":264,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"lihongguang00":69,"-":196}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.SortCommand.REVERSE_KEYWORD;","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.SortCommand.SORTBY_KEYWORD1;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.SortCommand.SORTBY_KEYWORD2;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.SortCommand.SORTBY_KEYWORD3;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.SortCommand.SORTBY_KEYWORD4;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.parser.SortCommandParser.PARSE_EXCEPTION_MESSAGE;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.logic.commands.SortCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"public class SortCommandParserTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_missingDelimiters_failure() {","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \" 2\", PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \" abc\", PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_emptyInput_failure() {","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_invalidDelimiters_failure() {","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \" -bydescription\", PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \" -byname\", PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_wrongSortComparator_failure() {","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \" /name\", PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \" /phone\", PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_tooManyArgs_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \" /byname /reverse /byphone\", PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \" /byname /byphone\", PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_firstArgIsReverse_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"nicrandomlee"},"content":"        assertParseFailure(parser, \" /reverse\", PARSE_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_sortComparator_success1() {","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"nicrandomlee"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"nicrandomlee"},"content":"            Command command \u003d parser.parse(\" \" + SORTBY_KEYWORD1);","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"nicrandomlee"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"nicrandomlee"},"content":"            fail(\"Fail\");","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(true);","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_sortComparator_success2() {","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"nicrandomlee"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"nicrandomlee"},"content":"            Command command \u003d parser.parse(\" \" + SORTBY_KEYWORD2);","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"nicrandomlee"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"nicrandomlee"},"content":"            fail(\"Fail\");","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(true);","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_sortComparator_success3() {","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"nicrandomlee"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"nicrandomlee"},"content":"            Command command \u003d parser.parse(\" \" + SORTBY_KEYWORD3);","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"nicrandomlee"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"nicrandomlee"},"content":"            fail(\"Fail\");","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(true);","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_sortComparator_success4() {","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"nicrandomlee"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"nicrandomlee"},"content":"            Command command \u003d parser.parse(\" \" + SORTBY_KEYWORD4);","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"nicrandomlee"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"nicrandomlee"},"content":"            fail(\"Fail\");","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(true);","lastModifiedDate":"2023-10-26"},{"lineNumber":102,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":104,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":105,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_sortComparator_success5() {","lastModifiedDate":"2023-10-29"},{"lineNumber":106,"author":{"gitId":"nicrandomlee"},"content":"        try {","lastModifiedDate":"2023-10-29"},{"lineNumber":107,"author":{"gitId":"nicrandomlee"},"content":"            Command command \u003d parser.parse(\" \" + SORTBY_KEYWORD2 + \" \" + REVERSE_KEYWORD);","lastModifiedDate":"2023-10-29"},{"lineNumber":108,"author":{"gitId":"nicrandomlee"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-29"},{"lineNumber":109,"author":{"gitId":"nicrandomlee"},"content":"            fail(\"Fail\");","lastModifiedDate":"2023-10-29"},{"lineNumber":110,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":111,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(true);","lastModifiedDate":"2023-10-29"},{"lineNumber":112,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":113,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":114,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":115,"author":{"gitId":"nicrandomlee"},"content":"    public void parse_sortComparator_success6() {","lastModifiedDate":"2023-10-29"},{"lineNumber":116,"author":{"gitId":"nicrandomlee"},"content":"        try {","lastModifiedDate":"2023-10-29"},{"lineNumber":117,"author":{"gitId":"nicrandomlee"},"content":"            Command command \u003d parser.parse(\" \" + SORTBY_KEYWORD4 + \" \" + REVERSE_KEYWORD);","lastModifiedDate":"2023-10-29"},{"lineNumber":118,"author":{"gitId":"nicrandomlee"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-10-29"},{"lineNumber":119,"author":{"gitId":"nicrandomlee"},"content":"            fail(\"Fail\");","lastModifiedDate":"2023-10-29"},{"lineNumber":120,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(true);","lastModifiedDate":"2023-10-29"},{"lineNumber":122,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":123,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"nicrandomlee":123}},{"path":"src/test/java/seedu/address/logic/parser/UniMateParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"import seedu.address.logic.commands.AddContactEventCommand;","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.logic.commands.SortCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"public class UniMateParserTest {","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    private final UniMateParser parser \u003d new UniMateParser();","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"    public void parseCommand_addEvent() throws Exception {","lastModifiedDate":"2023-10-27"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"        String description \u003d \"sleep\";","lastModifiedDate":"2023-10-27"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"        String startDateTime \u003d \"2023-10-10 10:00\";","lastModifiedDate":"2023-10-27"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"        String endDateTime \u003d \"2023-10-10 12:00\";","lastModifiedDate":"2023-10-27"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"        String validArg \u003d \"d/\" + description","lastModifiedDate":"2023-10-27"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"                + \" ts/\" + startDateTime","lastModifiedDate":"2023-10-27"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"                + \" te/\" + endDateTime;","lastModifiedDate":"2023-10-27"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        validArg \u003d AddEventCommand.COMMAND_WORD + \" \" + validArg;","lastModifiedDate":"2023-10-27"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"        EventBuilder eventBuilder \u003d new EventBuilder();","lastModifiedDate":"2023-10-27"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"        eventBuilder.withDescription(description);","lastModifiedDate":"2023-10-27"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"        eventBuilder.withStartEndDate(startDateTime, endDateTime);","lastModifiedDate":"2023-10-27"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"        AddEventCommand addEventCommand \u003d (AddEventCommand) parser.parseCommand(validArg);","lastModifiedDate":"2023-10-27"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(addEventCommand, new AddEventCommand(eventBuilder.build()));","lastModifiedDate":"2023-10-27"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":112,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":113,"author":{"gitId":"nicrandomlee"},"content":"    public void parseCommand_sort() throws Exception {","lastModifiedDate":"2023-10-18"},{"lineNumber":114,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"nicrandomlee"},"content":"                + SortCommand.SORTBY_KEYWORD1) instanceof SortCommand);","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"nicrandomlee"},"content":"                + SortCommand.SORTBY_KEYWORD2) instanceof SortCommand);","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"nicrandomlee"},"content":"                + SortCommand.SORTBY_KEYWORD3 + \" \" + SortCommand.REVERSE_KEYWORD) instanceof SortCommand);","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-26"},{"lineNumber":121,"author":{"gitId":"nicrandomlee"},"content":"                + SortCommand.SORTBY_KEYWORD4 + \" \" + SortCommand.REVERSE_KEYWORD) instanceof SortCommand);","lastModifiedDate":"2023-10-26"},{"lineNumber":122,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":123,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":124,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":125,"author":{"gitId":"junhonglow"},"content":"    public void parserCommand_addContactEvent() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":126,"author":{"gitId":"junhonglow"},"content":"        String description \u003d \"sleep\";","lastModifiedDate":"2023-10-29"},{"lineNumber":127,"author":{"gitId":"junhonglow"},"content":"        String startDateTime \u003d \"2023-10-10 10:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":128,"author":{"gitId":"junhonglow"},"content":"        String endDateTime \u003d \"2023-10-10 12:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":129,"author":{"gitId":"junhonglow"},"content":"        String validArg \u003d \"d/\" + description","lastModifiedDate":"2023-10-29"},{"lineNumber":130,"author":{"gitId":"junhonglow"},"content":"                + \" ts/\" + startDateTime","lastModifiedDate":"2023-10-29"},{"lineNumber":131,"author":{"gitId":"junhonglow"},"content":"                + \" te/\" + endDateTime;","lastModifiedDate":"2023-10-29"},{"lineNumber":132,"author":{"gitId":"junhonglow"},"content":"        EventBuilder eventBuilder \u003d new EventBuilder();","lastModifiedDate":"2023-10-29"},{"lineNumber":133,"author":{"gitId":"junhonglow"},"content":"        eventBuilder.withDescription(description);","lastModifiedDate":"2023-10-29"},{"lineNumber":134,"author":{"gitId":"junhonglow"},"content":"        eventBuilder.withStartEndDate(startDateTime, endDateTime);","lastModifiedDate":"2023-10-29"},{"lineNumber":135,"author":{"gitId":"junhonglow"},"content":"        AddContactEventCommand command \u003d","lastModifiedDate":"2023-10-29"},{"lineNumber":136,"author":{"gitId":"junhonglow"},"content":"                (AddContactEventCommand) parser.parseCommand(AddContactEventCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-29"},{"lineNumber":137,"author":{"gitId":"junhonglow"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + validArg);","lastModifiedDate":"2023-10-29"},{"lineNumber":138,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":139,"author":{"gitId":"junhonglow"},"content":"        assertEquals(command, new AddContactEventCommand(INDEX_FIRST_PERSON, eventBuilder.build()));","lastModifiedDate":"2023-10-29"},{"lineNumber":140,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":141,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"junhonglow":19,"lihongguang00":21,"nicrandomlee":13,"-":99}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.model.event.EventPeriod.DATE_TIME_STRING_FORMATTER;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.EventBuilder.DEFAULT_START_TIME_STRING;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.TypicalEvents.CONFERENCE;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.TEST_EVENT_A;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.TEST_EVENT_B;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"import seedu.address.testutil.CalendarBuilder;","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.EventPeriodBuilder;","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"junhonglow"},"content":"    public void setCalendarFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"junhonglow"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setCalendarFilePath(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"junhonglow"},"content":"    public void setCalendarFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"junhonglow"},"content":"        Path path \u003d Paths.get(\"calendar/file/path\");","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"junhonglow"},"content":"        modelManager.setCalendarFilePath(path);","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"junhonglow"},"content":"        assertEquals(path, modelManager.getCalendarFilePath());","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"    public void addEvent_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.addEvent(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"    public void deleteEvent_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteEventAt(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"    public void findEvent_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.findEventAt(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"    public void findEvent_throwsEventNotFoundException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"        LocalDateTime eventTime \u003d LocalDateTime.parse(DEFAULT_START_TIME_STRING, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-20"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"        assertThrows(EventNotFoundException.class, () -\u003e modelManager.findEventAt(eventTime));","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"    public void eventsInRange_throwsNullPointerException() {","lastModifiedDate":"2023-10-28"},{"lineNumber":142,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.eventsInRange(null));","lastModifiedDate":"2023-10-28"},{"lineNumber":143,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":144,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":145,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":146,"author":{"gitId":"Fallman2"},"content":"    public void eventsInRange_returnsSuccessful() {","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"Fallman2"},"content":"        modelManager.addEvent(CONFERENCE);","lastModifiedDate":"2023-10-28"},{"lineNumber":148,"author":{"gitId":"Fallman2"},"content":"        EventPeriodBuilder builder \u003d new EventPeriodBuilder();","lastModifiedDate":"2023-10-28"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"        builder.changeStartAndEnd(\"2023-11-15 08:30\", \"2023-11-15 17:00\");","lastModifiedDate":"2023-10-28"},{"lineNumber":150,"author":{"gitId":"Fallman2"},"content":"        assertEquals(List.of(CONFERENCE), modelManager.eventsInRange(builder.build()));","lastModifiedDate":"2023-10-28"},{"lineNumber":151,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":152,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":153,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":154,"author":{"gitId":"Fallman2"},"content":"    public void deleteEventsInRange_throwsNullPointerException() {","lastModifiedDate":"2023-10-28"},{"lineNumber":155,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteEventsInRange(null));","lastModifiedDate":"2023-10-28"},{"lineNumber":156,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":157,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":158,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":159,"author":{"gitId":"Fallman2"},"content":"    public void deleteEventsInRange_successful() {","lastModifiedDate":"2023-10-28"},{"lineNumber":160,"author":{"gitId":"Fallman2"},"content":"        EventPeriodBuilder builder \u003d new EventPeriodBuilder();","lastModifiedDate":"2023-10-28"},{"lineNumber":161,"author":{"gitId":"Fallman2"},"content":"        builder.changeStartAndEnd(\"2023-11-15 08:30\", \"2023-11-15 17:00\");","lastModifiedDate":"2023-10-28"},{"lineNumber":162,"author":{"gitId":"Fallman2"},"content":"        modelManager.deleteEventsInRange(builder.build());","lastModifiedDate":"2023-10-28"},{"lineNumber":163,"author":{"gitId":"Fallman2"},"content":"        LocalDateTime localDateTime \u003d LocalDateTime.parse(\"2023-11-15 08:30\", DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-28"},{"lineNumber":164,"author":{"gitId":"Fallman2"},"content":"        assertThrows(EventNotFoundException.class, () -\u003e modelManager.findEventAt(localDateTime));","lastModifiedDate":"2023-10-28"},{"lineNumber":165,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":166,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":171,"author":{"gitId":"junhonglow"},"content":"        Calendar calendar \u003d new CalendarBuilder().withEvent(TEST_EVENT_A).withEvent(TEST_EVENT_B).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":172,"author":{"gitId":"junhonglow"},"content":"        Calendar differentCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":176,"author":{"gitId":"junhonglow"},"content":"        modelManager \u003d new ModelManager(addressBook, calendar, userPrefs);","lastModifiedDate":"2023-10-19"},{"lineNumber":177,"author":{"gitId":"junhonglow"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, calendar, userPrefs);","lastModifiedDate":"2023-10-19"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":189,"author":{"gitId":"junhonglow"},"content":"        // different addressBook, same calendar -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":190,"author":{"gitId":"junhonglow"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, calendar, userPrefs)));","lastModifiedDate":"2023-10-19"},{"lineNumber":191,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":192,"author":{"gitId":"junhonglow"},"content":"        // same addressBook, different calendar -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":193,"author":{"gitId":"junhonglow"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentCalendar, userPrefs)));","lastModifiedDate":"2023-10-19"},{"lineNumber":194,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":195,"author":{"gitId":"junhonglow"},"content":"        // different addressBook, different calendar -\u003e returns false","lastModifiedDate":"2023-10-19"},{"lineNumber":196,"author":{"gitId":"junhonglow"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, differentCalendar, userPrefs)));","lastModifiedDate":"2023-10-19"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":201,"author":{"gitId":"junhonglow"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, calendar, userPrefs)));","lastModifiedDate":"2023-10-19"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":209,"author":{"gitId":"junhonglow"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, calendar, differentUserPrefs)));","lastModifiedDate":"2023-10-19"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"junhonglow":30,"Fallman2":55,"-":126}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    public void setCalendarFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCalendarFilePath(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"junhonglow":6,"-":21}},{"path":"src/test/java/seedu/address/model/calendar/CalendarTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.calendar;","lastModifiedDate":"2023-10-09"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-09"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-09"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-09"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.model.event.EventPeriod.DATE_TIME_STRING_FORMATTER;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-09"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.EventBuilder.DEFAULT_END_TIME_STRING;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.EventBuilder.DEFAULT_START_TIME_STRING;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.TypicalEvents.CONFERENCE;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.TypicalEvents.TRAINING;","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.TypicalEvents.WORKSHOP;","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-09"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.AllDaysEventListManager;","lastModifiedDate":"2023-10-11"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-09"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-09"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.EventPeriodBuilder;","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"public class CalendarTest {","lastModifiedDate":"2023-10-09"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    private final Calendar calendar \u003d new Calendar();","lastModifiedDate":"2023-10-09"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    public void constructor() {","lastModifiedDate":"2023-10-09"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(new AllDaysEventListManager(), calendar.getEventManager());","lastModifiedDate":"2023-10-11"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    public void isEmptyValid_emptyCalendar_returnsTrue() {","lastModifiedDate":"2023-10-10"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        Calendar emptyCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(emptyCalendar.isEmpty());","lastModifiedDate":"2023-10-10"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    public void isEmptyValid_nonEmptyCalendar_returnsFalse() {","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        calendar.addEvent(new EventBuilder().build());","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(calendar.isEmpty());","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    public void isClearValid_emptyCalendar_returnsEmptyCalendar() {","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        Calendar emptyCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        emptyCalendar.clear();","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(emptyCalendar.isEmpty());","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    public void isClearValid_nonEmptyCalendar_returnsEmptyCalendar() {","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        Calendar oneEventCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        oneEventCalendar.addEvent(new EventBuilder().build());","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(oneEventCalendar.isEmpty());","lastModifiedDate":"2023-10-10"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"        oneEventCalendar.clear();","lastModifiedDate":"2023-10-10"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(oneEventCalendar.isEmpty());","lastModifiedDate":"2023-10-10"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    public void addEvent_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2023-10-09"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e calendar.addEvent(null));","lastModifiedDate":"2023-10-09"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-09"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    public void addEvent_validEvent_successful() {","lastModifiedDate":"2023-10-09"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-09"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        calendar.addEvent(validEvent);","lastModifiedDate":"2023-10-27"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(calendar.contains(validEvent));","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"    public void deleteEvent_validEvent_successful() {","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"        Calendar oneEventCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"        oneEventCalendar.addEvent(new EventBuilder().build());","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(DEFAULT_START_TIME_STRING, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-19"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"        oneEventCalendar.deleteEventAt(expectedDateTime);","lastModifiedDate":"2023-10-19"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        assertFalse(oneEventCalendar.hasEvents());","lastModifiedDate":"2023-10-19"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"Fallman2"},"content":"    public void deleteEvent_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":86,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e calendar.deleteEventAt(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"Fallman2"},"content":"    public void findEventAt_validEvent_successful() {","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"Fallman2"},"content":"        Calendar oneEventCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"Fallman2"},"content":"        Event sample \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"Fallman2"},"content":"        oneEventCalendar.addEvent(sample);","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"Fallman2"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(DEFAULT_START_TIME_STRING, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"Fallman2"},"content":"        assertEquals(sample, oneEventCalendar.findEventAt(expectedDateTime).get());","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"Fallman2"},"content":"    public void findEvent_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e calendar.findEventAt(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":103,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"Fallman2"},"content":"    public void getEventsInRange_nullRange_throwsNullPointerException() {","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e calendar.getEventsInRange(null));","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":108,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":109,"author":{"gitId":"Fallman2"},"content":"    public void getEventsInRange_oneEvent_successful() {","lastModifiedDate":"2023-10-28"},{"lineNumber":110,"author":{"gitId":"Fallman2"},"content":"        Calendar oneEventCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-28"},{"lineNumber":111,"author":{"gitId":"Fallman2"},"content":"        Event sample \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-28"},{"lineNumber":112,"author":{"gitId":"Fallman2"},"content":"        oneEventCalendar.addEvent(sample);","lastModifiedDate":"2023-10-28"},{"lineNumber":113,"author":{"gitId":"Fallman2"},"content":"        EventPeriodBuilder builder \u003d new EventPeriodBuilder();","lastModifiedDate":"2023-10-28"},{"lineNumber":114,"author":{"gitId":"Fallman2"},"content":"        builder.changeStartAndEnd(DEFAULT_START_TIME_STRING, DEFAULT_END_TIME_STRING);","lastModifiedDate":"2023-10-28"},{"lineNumber":115,"author":{"gitId":"Fallman2"},"content":"        assertEquals(List.of(sample), oneEventCalendar.getEventsInRange(builder.build()));","lastModifiedDate":"2023-10-28"},{"lineNumber":116,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":117,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":118,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":119,"author":{"gitId":"Fallman2"},"content":"    public void deleteEventsInRange_nullRange_throwsNullPointerException() {","lastModifiedDate":"2023-10-28"},{"lineNumber":120,"author":{"gitId":"Fallman2"},"content":"        assertThrows(NullPointerException.class, () -\u003e calendar.deleteEventsInRange(null));","lastModifiedDate":"2023-10-28"},{"lineNumber":121,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":122,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":123,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":124,"author":{"gitId":"Fallman2"},"content":"    public void deleteEventsInRange_twoEvents_successful() {","lastModifiedDate":"2023-10-28"},{"lineNumber":125,"author":{"gitId":"Fallman2"},"content":"        Calendar eventCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-28"},{"lineNumber":126,"author":{"gitId":"Fallman2"},"content":"        eventCalendar.addEvent(WORKSHOP);","lastModifiedDate":"2023-10-28"},{"lineNumber":127,"author":{"gitId":"Fallman2"},"content":"        eventCalendar.addEvent(CONFERENCE);","lastModifiedDate":"2023-10-28"},{"lineNumber":128,"author":{"gitId":"Fallman2"},"content":"        eventCalendar.addEvent(TRAINING);","lastModifiedDate":"2023-10-28"},{"lineNumber":129,"author":{"gitId":"Fallman2"},"content":"        EventPeriodBuilder builder \u003d new EventPeriodBuilder();","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"Fallman2"},"content":"        builder.changeStartAndEnd(\"2023-11-10 14:00\", \"2023-11-15 17:00\");","lastModifiedDate":"2023-10-28"},{"lineNumber":131,"author":{"gitId":"Fallman2"},"content":"        assertTrue(eventCalendar.hasEvents());","lastModifiedDate":"2023-10-28"},{"lineNumber":132,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":133,"author":{"gitId":"Fallman2"},"content":"        eventCalendar.deleteEventsInRange(builder.build());","lastModifiedDate":"2023-10-28"},{"lineNumber":134,"author":{"gitId":"Fallman2"},"content":"        assertTrue(eventCalendar.hasEvents());","lastModifiedDate":"2023-10-28"},{"lineNumber":135,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":136,"author":{"gitId":"Fallman2"},"content":"        builder \u003d new EventPeriodBuilder();","lastModifiedDate":"2023-10-28"},{"lineNumber":137,"author":{"gitId":"Fallman2"},"content":"        builder.changeStartAndEnd(\"2023-11-15 14:00\", \"2023-11-20 14:01\");","lastModifiedDate":"2023-10-28"},{"lineNumber":138,"author":{"gitId":"Fallman2"},"content":"        eventCalendar.deleteEventsInRange(builder.build());","lastModifiedDate":"2023-10-28"},{"lineNumber":139,"author":{"gitId":"Fallman2"},"content":"        assertFalse(eventCalendar.hasEvents());","lastModifiedDate":"2023-10-28"},{"lineNumber":140,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":141,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"    public void isEqualsValid_nullValue_returnsFalse() {","lastModifiedDate":"2023-10-10"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(calendar.equals(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"    public void isEqualsValid_nonCalendarObject_returnFalse() {","lastModifiedDate":"2023-10-10"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(calendar.equals(new Object()));","lastModifiedDate":"2023-10-27"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"    public void isEqualsValid_equalCalendarDeclaredObject_returnTrue() {","lastModifiedDate":"2023-10-10"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"        Object equalCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-10"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(calendar.equals(equalCalendar));","lastModifiedDate":"2023-10-27"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"    public void isEqualsValid_notEqualCalendarDeclaredObject_returnFalse() {","lastModifiedDate":"2023-10-10"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"        calendar.addEvent(new EventBuilder().build());","lastModifiedDate":"2023-10-27"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"        Object nonEqualCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-10"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(calendar.equals(nonEqualCalendar));","lastModifiedDate":"2023-10-27"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"    public void isEqualsValid_equalCalendarDeclaredCalendar_returnTrue() {","lastModifiedDate":"2023-10-10"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"        Calendar equalCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-10"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(calendar.equals(equalCalendar));","lastModifiedDate":"2023-10-27"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"    public void isEqualsValid_notEqualCalendarDeclaredCalendar_returnFalse() {","lastModifiedDate":"2023-10-10"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"        calendar.addEvent(new EventBuilder().build());","lastModifiedDate":"2023-10-27"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"        Calendar nonEqualCalendar \u003d new Calendar();","lastModifiedDate":"2023-10-10"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(calendar.equals(nonEqualCalendar));","lastModifiedDate":"2023-10-27"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"    public void isEqualsValid_thisCalendar_returnTrue() {","lastModifiedDate":"2023-10-27"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(calendar.equals(calendar));","lastModifiedDate":"2023-10-27"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"    public void getEarliestEventStartTimeInCurrentWeekTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(calendar.getEarliestEventStartTimeInCurrentWeek().isEmpty());","lastModifiedDate":"2023-10-27"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":196,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":197,"author":{"gitId":"lihongguang00"},"content":"    public void getLatestEventEndTimeInCurrentWeek() {","lastModifiedDate":"2023-10-27"},{"lineNumber":198,"author":{"gitId":"lihongguang00"},"content":"        calendar.clear();","lastModifiedDate":"2023-10-27"},{"lineNumber":199,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":200,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(calendar.getLatestEventEndTimeInCurrentWeek().isEmpty());","lastModifiedDate":"2023-10-27"},{"lineNumber":201,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":202,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-09"}],"authorContributionMap":{"lihongguang00":126,"Fallman2":76}},{"path":"src/test/java/seedu/address/model/event/AllDaysEventListManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.model.event.EventPeriod.DATE_TIME_STRING_FORMATTER;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.EventBuilder.DEFAULT_START_TIME_STRING;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"public class AllDaysEventListManagerTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    private static Event sample \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"    private static LocalDateTime eventTime \u003d LocalDateTime.parse(DEFAULT_START_TIME_STRING, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"    private AllDaysEventListManager eventListManager \u003d new AllDaysEventListManager();","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"    public void constructorTest() {","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    public void canAddEventTest() {","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"        eventListManager.clear();","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"        assertTrue(eventListManager.canAddEvent(sample));","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"    public void clearTest() {","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        eventListManager.clear();","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        assertTrue(eventListManager.isEmpty());","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        eventListManager.addEvent(sample);","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"        eventListManager.clear();","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"        assertTrue(eventListManager.isEmpty());","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    public void hasEventTest() {","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        eventListManager.clear();","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        assertFalse(eventListManager.hasEvents());","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"        eventListManager.addEvent(sample);","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"        assertTrue(eventListManager.hasEvents());","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"        eventListManager.deleteEventAt(eventTime);","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"        assertFalse(eventListManager.hasEvents());","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"    public void eventAtTest() {","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"        eventListManager.clear();","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"        assertTrue(eventListManager.eventAt(eventTime).isEmpty());","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"        eventListManager.addEvent(sample);","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"        assertEquals(eventListManager.eventAt(eventTime).get(), sample);","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"    public void canAddEvent_eventOverlap_unsuccessful() {","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"        eventListManager.clear();","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"        eventListManager.addEvent(sample);","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"        assertFalse(eventListManager.canAddEvent(sample));","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"lihongguang00":10,"Fallman2":54}},{"path":"src/test/java/seedu/address/model/event/EventDescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UNUSED_DESCRIPTION;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.exceptions.InvalidDescriptionException;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventDescriptionBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"public class EventDescriptionTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    public void constructorTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e new EventDescription(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(InvalidDescriptionException.class, () -\u003e new EventDescription(INVALID_DESCRIPTION));","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    public void isValidTest() {","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e EventDescription.isValid(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(EventDescription.isValid(INVALID_DESCRIPTION));","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(EventDescription.isValid(VALID_DESCRIPTION));","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(EventDescription.isValid(VALID_UNUSED_DESCRIPTION));","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    public void createUnusedDescriptionTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(EventDescription.createUnusedDescription().getDescription(), VALID_UNUSED_DESCRIPTION);","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        assertNotEquals(new EventDescriptionBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"                        .changeDescription(VALID_UNUSED_DESCRIPTION).build().getDescription(),","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"                new EventDescriptionBuilder().build().getDescription());","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    public void getDescriptionTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(VALID_DESCRIPTION, new EventDescriptionBuilder().changeDescription(","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"                VALID_DESCRIPTION).build().getDescription());","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"    public void equalsTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        EventDescription validEventDescription \u003d new EventDescriptionBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"        EventDescription equivalentValidEventDescription \u003d new EventDescriptionBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        EventDescription nonEquivalentValidEventDescription \u003d new EventDescriptionBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"                .changeDescription(VALID_UNUSED_DESCRIPTION).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        Object nonEventDescriptionObject \u003d new Object();","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(validEventDescription.equals(validEventDescription));","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(validEventDescription.equals(equivalentValidEventDescription));","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validEventDescription.equals(nonEquivalentValidEventDescription));","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validEventDescription.equals(nonEventDescriptionObject));","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(new EventDescriptionBuilder().build().toString(),","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"                 VALID_DESCRIPTION);","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"        assertNotEquals(new EventDescriptionBuilder().build().toString(),","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"                 VALID_UNUSED_DESCRIPTION);","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"lihongguang00":76}},{"path":"src/test/java/seedu/address/model/event/EventPeriodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_LATER;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_LATER;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.model.event.EventPeriod.isValidPeriod;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import java.time.Duration;","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventPeriodBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"public class EventPeriodTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    private static final String VALID_END_DATE_ONE_MINUTE_BEFORE_MIDNIGHT \u003d \"2023-01-01 23:59\";","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    public void constructorTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"                new EventPeriod(INVALID_DATE, VALID_END_DATE_EARLIER));","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"                new EventPeriod(VALID_START_DATE_EARLIER, INVALID_DATE));","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(DateTimeParseException.class, () -\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"                new EventPeriod(INVALID_DATE, INVALID_DATE));","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"                new EventPeriod(null, VALID_END_DATE_EARLIER));","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"                new EventPeriod(VALID_START_DATE_EARLIER, null));","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"                new EventPeriod(null, null));","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    public void createNonConflictingPeriodTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod nonConflictingPeriod \u003d EventPeriod.createNonConflictingPeriod();","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod validPeriod \u003d new EventPeriodBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validPeriod.isOverlapping(nonConflictingPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"    public void isValidPeriodTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(isValidPeriod(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER));","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(isValidPeriod(VALID_END_DATE_EARLIER, VALID_START_DATE_EARLIER));","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(isValidPeriod(VALID_START_DATE_EARLIER, VALID_START_DATE_EARLIER));","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(isValidPeriod(INVALID_DATE, VALID_END_DATE_EARLIER));","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(isValidPeriod(VALID_START_DATE_EARLIER, INVALID_DATE));","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(isValidPeriod(INVALID_DATE, INVALID_DATE));","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"    public void isOverlappingTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod earlierNoOverlapEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod laterNoOverlapEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_LATER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod earlierOverlappingEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_EARLIER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod laterOverlappingEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_LATER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e earlierNoOverlapEventPeriod.isOverlapping(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(earlierOverlappingEventPeriod.isOverlapping(laterOverlappingEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(laterOverlappingEventPeriod.isOverlapping(earlierOverlappingEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(earlierNoOverlapEventPeriod.isOverlapping(laterNoOverlapEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(laterNoOverlapEventPeriod.isOverlapping(earlierNoOverlapEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"    public void compareToTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod earlierEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod laterEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_LATER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e earlierEventPeriod.compareTo(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(-1, earlierEventPeriod.compareTo(laterEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(0, earlierEventPeriod.compareTo(earlierEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(1, laterEventPeriod.compareTo(earlierEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"    public void getDatesTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod validEventPeriod \u003d new EventPeriodBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validEventPeriod.getDates().isEmpty());","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"    public void equalsTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod validEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_EARLIER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod equivalentEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_EARLIER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod laterStartEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_LATER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod earlierEndEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"        Object nonEventPeriodObject \u003d new Object();","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e validEventPeriod.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(validEventPeriod.equals(validEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(validEventPeriod.equals(equivalentEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validEventPeriod.equals(nonEventPeriodObject));","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validEventPeriod.equals(laterStartEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validEventPeriod.equals(earlierEndEventPeriod));","lastModifiedDate":"2023-10-13"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"    public void getDurationTest() {","lastModifiedDate":"2023-10-30"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod validEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-30"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod fullDayPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-30"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_EARLIER, VALID_END_DATE_ONE_MINUTE_BEFORE_MIDNIGHT).build();","lastModifiedDate":"2023-10-30"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(VALID_START_DATE_EARLIER, DATE_TIME_FORMATTER);","lastModifiedDate":"2023-10-30"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(VALID_END_DATE_EARLIER, DATE_TIME_FORMATTER);","lastModifiedDate":"2023-10-30"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"        LocalDateTime endOneMinuteBeforeMidnight \u003d LocalDateTime","lastModifiedDate":"2023-10-30"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"                .parse(VALID_END_DATE_ONE_MINUTE_BEFORE_MIDNIGHT, DATE_TIME_FORMATTER);","lastModifiedDate":"2023-10-30"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(validEventPeriod.getDuration(), Duration.between(start, end));","lastModifiedDate":"2023-10-30"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(fullDayPeriod.getDuration(),","lastModifiedDate":"2023-10-30"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"                Duration.between(start, endOneMinuteBeforeMidnight).plusMinutes(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod validEventPeriod \u003d new EventPeriodBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"                .changeStartAndEnd(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"        String expectedString \u003d \"start: \"","lastModifiedDate":"2023-10-13"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"                + VALID_START_DATE_EARLIER","lastModifiedDate":"2023-10-13"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"                + \"; end: \"","lastModifiedDate":"2023-10-13"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"                + VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(validEventPeriod.toString(), expectedString);","lastModifiedDate":"2023-10-13"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"lihongguang00":169}},{"path":"src/test/java/seedu/address/model/event/EventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static java.time.temporal.ChronoUnit.MINUTES;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_LATER;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_LATER;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UNUSED_DESCRIPTION;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventDescriptionBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventPeriodBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"public class EventTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    private static final EventDescription VALID_EVENT_DESCRIPTION \u003d new EventDescriptionBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    private static final EventPeriod VALID_EVENT_PERIOD \u003d new EventPeriodBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    public void constructorTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Event(null, null));","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Event(VALID_EVENT_DESCRIPTION, null));","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Event(null, VALID_EVENT_PERIOD));","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    public void createNonConflictingEventTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        Event nonConflictingEvent \u003d Event.createNonConflictingEvent();","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(nonConflictingEvent.getDescription().getDescription(),","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"                VALID_UNUSED_DESCRIPTION);","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    public void getDescriptionTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(new EventBuilder().withDescription(VALID_DESCRIPTION).build().getDescription(),","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"                new EventDescriptionBuilder().changeDescription(VALID_DESCRIPTION).build());","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"        assertNotEquals(new EventBuilder().withDescription(VALID_DESCRIPTION).build().getDescription(),","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"                new EventDescriptionBuilder().changeDescription(VALID_UNUSED_DESCRIPTION).build());","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"    public void getEventPeriodTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(new EventBuilder().withStartEndDate(VALID_START_DATE_EARLIER,","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"                        VALID_END_DATE_EARLIER).build().getEventPeriod(),","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"                new EventPeriodBuilder().changeStartAndEnd(VALID_START_DATE_EARLIER,","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"                        VALID_END_DATE_EARLIER).build());","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        assertNotEquals(new EventBuilder().withStartEndDate(VALID_START_DATE_EARLIER,","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"                        VALID_END_DATE_EARLIER).build().getEventPeriod(),","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"                new EventPeriodBuilder().changeStartAndEnd(VALID_START_DATE_LATER,","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"                        VALID_END_DATE_LATER).build());","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    public void isConflictingTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        Event validEvent \u003d new EventBuilder().withStartEndDate(VALID_START_DATE_EARLIER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"        Event conflictingEvent \u003d new EventBuilder().withStartEndDate(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER)","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"                .build();","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"        Event nonConflictingEvent \u003d new EventBuilder().withStartEndDate(VALID_START_DATE_EARLIER,","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"                VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"        Event nonConflictingEventOther \u003d new EventBuilder().withStartEndDate(VALID_START_DATE_LATER,","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"                VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e validEvent.isConflicting(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(validEvent.isConflicting(conflictingEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(validEvent.isConflicting(validEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(nonConflictingEvent.isConflicting(nonConflictingEventOther));","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"    public void changeDescriptionTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"        EventDescription changeTo \u003d new EventDescriptionBuilder().changeDescription(VALID_UNUSED_DESCRIPTION).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"        Event original \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e original.changeDescription(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"        original.changeDescription(changeTo);","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(original.getDescription(), changeTo);","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"    public void changeEventPeriodTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"        EventPeriod changeTo \u003d new EventPeriodBuilder().changeStartAndEnd(VALID_START_DATE_EARLIER,","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"                VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"        Event original \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e original.changeEventPeriod(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"        original.changeEventPeriod(changeTo);","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(original.getEventPeriod(), changeTo);","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"    public void getEventDaysTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(new EventBuilder().build().getEventDays().isEmpty());","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"    public void equalsTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"        Event equalEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"        Event differentDescriptionEvent \u003d new EventBuilder().withDescription(VALID_UNUSED_DESCRIPTION).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"        Event differentPeriodEvent \u003d new EventBuilder().withStartEndDate(VALID_START_DATE_LATER, VALID_END_DATE_LATER)","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"                .build();","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        Object nonEventObject \u003d new Object();","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(validEvent.equals(validEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(validEvent.equals(equalEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validEvent.equals(nonEventObject));","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validEvent.equals(differentDescriptionEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(validEvent.equals(differentPeriodEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"    public void compareStartTimeTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"        EventBuilder earlierEventBuilder \u003d new EventBuilder();","lastModifiedDate":"2023-10-27"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"        earlierEventBuilder.withStartEndDate(VALID_START_DATE_EARLIER, VALID_START_DATE_LATER);","lastModifiedDate":"2023-10-27"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"        EventBuilder laterEventBuilder \u003d new EventBuilder();","lastModifiedDate":"2023-10-27"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"        laterEventBuilder.withStartEndDate(VALID_END_DATE_EARLIER, VALID_END_DATE_LATER);","lastModifiedDate":"2023-10-27"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"        Event earlierEvent \u003d earlierEventBuilder.build();","lastModifiedDate":"2023-10-27"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"        Event laterEvent \u003d laterEventBuilder.build();","lastModifiedDate":"2023-10-27"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e earlierEvent.compareStartTime(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(earlierEvent.compareStartTime(laterEvent) \u003c 0);","lastModifiedDate":"2023-10-27"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(laterEvent.compareStartTime(earlierEvent) \u003e 0);","lastModifiedDate":"2023-10-27"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":149,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(0, earlierEvent.compareStartTime(earlierEvent));","lastModifiedDate":"2023-10-27"},{"lineNumber":150,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":151,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":152,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":153,"author":{"gitId":"lihongguang00"},"content":"    public void compareEndTimeTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":154,"author":{"gitId":"lihongguang00"},"content":"        EventBuilder earlierEventBuilder \u003d new EventBuilder();","lastModifiedDate":"2023-10-27"},{"lineNumber":155,"author":{"gitId":"lihongguang00"},"content":"        earlierEventBuilder.withStartEndDate(VALID_START_DATE_EARLIER, VALID_START_DATE_LATER);","lastModifiedDate":"2023-10-27"},{"lineNumber":156,"author":{"gitId":"lihongguang00"},"content":"        EventBuilder laterEventBuilder \u003d new EventBuilder();","lastModifiedDate":"2023-10-27"},{"lineNumber":157,"author":{"gitId":"lihongguang00"},"content":"        laterEventBuilder.withStartEndDate(VALID_END_DATE_EARLIER, VALID_END_DATE_LATER);","lastModifiedDate":"2023-10-27"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"        Event earlierEvent \u003d earlierEventBuilder.build();","lastModifiedDate":"2023-10-27"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"        Event laterEvent \u003d laterEventBuilder.build();","lastModifiedDate":"2023-10-27"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e earlierEvent.compareEndTime(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(earlierEvent.compareEndTime(laterEvent) \u003c 0);","lastModifiedDate":"2023-10-27"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(laterEvent.compareEndTime(earlierEvent) \u003e 0);","lastModifiedDate":"2023-10-27"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(0, earlierEvent.compareEndTime(earlierEvent));","lastModifiedDate":"2023-10-27"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"    public void getStartTimeTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"        Event event \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-27"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"        assertNotNull(event.getStartTime());","lastModifiedDate":"2023-10-27"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"    public void getEndTimeTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"        Event event \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-27"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"        assertNotNull(event.getEndTime());","lastModifiedDate":"2023-10-27"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"    public void getDurationOfEventTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"        Event event \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-27"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"        assertNotNull(event.getDurationOfEvent());","lastModifiedDate":"2023-10-27"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":188,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":189,"author":{"gitId":"lihongguang00"},"content":"    public void getDescriptionStringTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":190,"author":{"gitId":"lihongguang00"},"content":"        Event event \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-27"},{"lineNumber":191,"author":{"gitId":"lihongguang00"},"content":"        assertNotNull(event.getDescriptionString());","lastModifiedDate":"2023-10-27"},{"lineNumber":192,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":193,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":194,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":195,"author":{"gitId":"lihongguang00"},"content":"    public void getDayOfWeekTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":196,"author":{"gitId":"lihongguang00"},"content":"        EventBuilder nonSingleDayEventBuilder \u003d new EventBuilder();","lastModifiedDate":"2023-10-27"},{"lineNumber":197,"author":{"gitId":"lihongguang00"},"content":"        nonSingleDayEventBuilder.withStartEndDate(VALID_START_DATE_EARLIER, VALID_END_DATE_LATER);","lastModifiedDate":"2023-10-27"},{"lineNumber":198,"author":{"gitId":"lihongguang00"},"content":"        Event nonSingleDayEvent \u003d nonSingleDayEventBuilder.build();","lastModifiedDate":"2023-10-27"},{"lineNumber":199,"author":{"gitId":"lihongguang00"},"content":"        Event singleDayEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-27"},{"lineNumber":200,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":201,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(AssertionError.class, nonSingleDayEvent::getDayOfWeek);","lastModifiedDate":"2023-10-27"},{"lineNumber":202,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":203,"author":{"gitId":"lihongguang00"},"content":"        assertNotNull(singleDayEvent.getDayOfWeek());","lastModifiedDate":"2023-10-27"},{"lineNumber":204,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":205,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":206,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":207,"author":{"gitId":"lihongguang00"},"content":"    public void getMinutesFromTimeToStartTimeTest() {","lastModifiedDate":"2023-10-27"},{"lineNumber":208,"author":{"gitId":"lihongguang00"},"content":"        EventBuilder eventBuilder \u003d new EventBuilder();","lastModifiedDate":"2023-10-27"},{"lineNumber":209,"author":{"gitId":"lihongguang00"},"content":"        Event event \u003d eventBuilder.build();","lastModifiedDate":"2023-10-27"},{"lineNumber":210,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":211,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e event.getMinutesFromTimeToStartTime(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":212,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":213,"author":{"gitId":"lihongguang00"},"content":"        assertEquals(event.getMinutesFromTimeToStartTime(LocalTime.MIDNIGHT),","lastModifiedDate":"2023-10-27"},{"lineNumber":214,"author":{"gitId":"lihongguang00"},"content":"                MINUTES.between(LocalTime.MIDNIGHT, eventBuilder.getStartTime()));","lastModifiedDate":"2023-10-27"},{"lineNumber":215,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":216,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"lihongguang00":216}},{"path":"src/test/java/seedu/address/model/event/SingleDayEventListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_LATER;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_EARLIER;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_LATER;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UNUSED_DESCRIPTION;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.model.event.EventPeriod.DATE_TIME_STRING_FORMATTER;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"import static seedu.address.testutil.EventBuilder.DEFAULT_START_TIME_STRING;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.exceptions.ConflictingEventException;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.exceptions.EventNotFoundException;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.testutil.SingleDayEventListBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"public class SingleDayEventListTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    public void constructorTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e new SingleDayEventList(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"    public void isEventAddValidTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"        Event toBeAdded \u003d new EventBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_END_DATE_EARLIER, VALID_START_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        Event startAfterEndSame \u003d new EventBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_START_DATE_EARLIER, VALID_START_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        Event startSameEndBefore \u003d new EventBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_END_DATE_EARLIER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"        Event startImmediatelyAfter \u003d new EventBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_START_DATE_LATER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"        Event endImmediatelyBefore \u003d new EventBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        SingleDayEventList dayEventList \u003d new SingleDayEventListBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e dayEventList.isEventAddValid(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.isEventAddValid(toBeAdded));","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.addEvent(toBeAdded);","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.isEventAddValid(toBeAdded));","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.isEventAddValid(startAfterEndSame));","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.isEventAddValid(startSameEndBefore));","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.isEventAddValid(startImmediatelyAfter));","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.isEventAddValid(endImmediatelyBefore));","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    public void addEventTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        Event toBeAdded \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        Event duplicate \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"        SingleDayEventList dayEventList \u003d new SingleDayEventListBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.addEvent(toBeAdded);","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(ConflictingEventException.class, () -\u003e dayEventList.addEvent(toBeAdded));","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(ConflictingEventException.class, () -\u003e dayEventList.addEvent(duplicate));","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"    public void containsEventTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"        Event toBeAdded \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        Event duplicateEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"        Event differentDescriptionEvent \u003d new EventBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"                .withDescription(VALID_UNUSED_DESCRIPTION).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"        Event differentPeriodEvent \u003d new EventBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_START_DATE_LATER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"        SingleDayEventList dayEventList \u003d new SingleDayEventListBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e dayEventList.containsEvent(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.containsEvent(toBeAdded));","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.addEvent(toBeAdded);","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.containsEvent(toBeAdded));","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.containsEvent(duplicateEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.containsEvent(differentDescriptionEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.containsEvent(differentPeriodEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"lihongguang00"},"content":"    public void removeTest() {","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"lihongguang00"},"content":"        SingleDayEventList dayEventList \u003d new SingleDayEventListBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"lihongguang00"},"content":"        Event toBeRemoved \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"lihongguang00"},"content":"        Event duplicateEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"lihongguang00"},"content":"        Event differentDescriptionEvent \u003d new EventBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"lihongguang00"},"content":"                .withDescription(VALID_UNUSED_DESCRIPTION).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"lihongguang00"},"content":"        Event differentPeriodEvent \u003d new EventBuilder()","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_START_DATE_LATER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(NullPointerException.class, () -\u003e dayEventList.remove(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(EventNotFoundException.class, () -\u003e dayEventList.remove(toBeRemoved));","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.addEvent(toBeRemoved);","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(EventNotFoundException.class, () -\u003e dayEventList.remove(differentDescriptionEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(EventNotFoundException.class, () -\u003e dayEventList.remove(differentPeriodEvent));","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.getDayEventList().isEmpty());","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.remove(toBeRemoved);","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.getDayEventList().isEmpty());","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.addEvent(toBeRemoved);","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.getDayEventList().isEmpty());","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.remove(duplicateEvent);","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.getDayEventList().isEmpty());","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":136,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":137,"author":{"gitId":"lihongguang00"},"content":"    public void getDayEventListTest() {","lastModifiedDate":"2023-10-14"},{"lineNumber":138,"author":{"gitId":"lihongguang00"},"content":"        SingleDayEventList dayEventList \u003d new SingleDayEventListBuilder().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":139,"author":{"gitId":"lihongguang00"},"content":"        Event toBeAdded \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":140,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":141,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.getDayEventList().isEmpty());","lastModifiedDate":"2023-10-14"},{"lineNumber":142,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":143,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.addEvent(toBeAdded);","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":145,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.getDayEventList().isEmpty());","lastModifiedDate":"2023-10-14"},{"lineNumber":146,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.getDayEventList().contains(toBeAdded));","lastModifiedDate":"2023-10-14"},{"lineNumber":147,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":148,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":149,"author":{"gitId":"Fallman2"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":150,"author":{"gitId":"Fallman2"},"content":"    public void eventAtTimeTest() {","lastModifiedDate":"2023-10-19"},{"lineNumber":151,"author":{"gitId":"Fallman2"},"content":"        SingleDayEventList dayEventList \u003d new SingleDayEventListBuilder().build();","lastModifiedDate":"2023-10-19"},{"lineNumber":152,"author":{"gitId":"Fallman2"},"content":"        Event toBeAdded \u003d new EventBuilder().build();","lastModifiedDate":"2023-10-19"},{"lineNumber":153,"author":{"gitId":"Fallman2"},"content":"        dayEventList.addEvent(toBeAdded);","lastModifiedDate":"2023-10-19"},{"lineNumber":154,"author":{"gitId":"Fallman2"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(DEFAULT_START_TIME_STRING, DATE_TIME_STRING_FORMATTER);","lastModifiedDate":"2023-10-19"},{"lineNumber":155,"author":{"gitId":"Fallman2"},"content":"        assertEquals(dayEventList.eventAtTime(expectedDateTime).get(), toBeAdded);","lastModifiedDate":"2023-10-19"},{"lineNumber":156,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":157,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":158,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":159,"author":{"gitId":"lihongguang00"},"content":"    public void equalsTest() {","lastModifiedDate":"2023-10-14"},{"lineNumber":160,"author":{"gitId":"lihongguang00"},"content":"        SingleDayEventList dayEventList \u003d new SingleDayEventListBuilder().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":161,"author":{"gitId":"lihongguang00"},"content":"        SingleDayEventList comparisonList \u003d new SingleDayEventListBuilder().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":162,"author":{"gitId":"lihongguang00"},"content":"        Event validEvent \u003d new EventBuilder().withDescription(VALID_DESCRIPTION)","lastModifiedDate":"2023-10-14"},{"lineNumber":163,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":164,"author":{"gitId":"lihongguang00"},"content":"        Event nonConflictingEvent \u003d new EventBuilder().withDescription(VALID_UNUSED_DESCRIPTION)","lastModifiedDate":"2023-10-14"},{"lineNumber":165,"author":{"gitId":"lihongguang00"},"content":"                .withStartEndDate(VALID_START_DATE_LATER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":166,"author":{"gitId":"lihongguang00"},"content":"        Object notSingleDayEventList \u003d new Object();","lastModifiedDate":"2023-10-14"},{"lineNumber":167,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":168,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.equals(dayEventList));","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.equals(comparisonList));","lastModifiedDate":"2023-10-14"},{"lineNumber":171,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":172,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.equals(notSingleDayEventList));","lastModifiedDate":"2023-10-14"},{"lineNumber":173,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":174,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.addEvent(validEvent);","lastModifiedDate":"2023-10-14"},{"lineNumber":175,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":176,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.equals(comparisonList));","lastModifiedDate":"2023-10-14"},{"lineNumber":177,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":178,"author":{"gitId":"lihongguang00"},"content":"        comparisonList.addEvent(nonConflictingEvent);","lastModifiedDate":"2023-10-14"},{"lineNumber":179,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":180,"author":{"gitId":"lihongguang00"},"content":"        assertFalse(dayEventList.equals(comparisonList));","lastModifiedDate":"2023-10-14"},{"lineNumber":181,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":182,"author":{"gitId":"lihongguang00"},"content":"        dayEventList.addEvent(nonConflictingEvent);","lastModifiedDate":"2023-10-14"},{"lineNumber":183,"author":{"gitId":"lihongguang00"},"content":"        comparisonList.addEvent(validEvent);","lastModifiedDate":"2023-10-14"},{"lineNumber":184,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":185,"author":{"gitId":"lihongguang00"},"content":"        assertTrue(dayEventList.equals(comparisonList));","lastModifiedDate":"2023-10-14"},{"lineNumber":186,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":187,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"lihongguang00":171,"Fallman2":16}},{"path":"src/test/java/seedu/address/model/person/comparer/AddressComparatorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.model.person.comparer;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_CANDY;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"public class AddressComparatorTest {","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p1 \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p2 \u003d new PersonBuilder(BOB).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p3 \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_CANDY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p4 \u003d new PersonBuilder(BOB).withAddress(VALID_ADDRESS_CANDY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"    public void constructor_initialization_test1() {","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"        AddressComparator addressComparator \u003d new AddressComparator(true, true, 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(addressComparator instanceof AddressComparator);","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(addressComparator.getIsActive());","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(addressComparator.getIsReverse());","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(addressComparator.getPriority(), 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"    public void constructor_initialization_test2() {","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"        AddressComparator addressComparator \u003d new AddressComparator(false, true, 9999);","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(addressComparator instanceof AddressComparator);","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"        assertFalse(addressComparator.getIsActive());","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(addressComparator.getIsReverse());","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(addressComparator.getPriority(), -1);","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"    public void execute_compareSuccess() {","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"        AddressComparator addressComparator \u003d new AddressComparator(true, true, 1);","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"        int addressComparison1 \u003d addressComparator.compare(p1, p3);","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"        int addressComparison2 \u003d addressComparator.compare(p2, p4);","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(addressComparator.compare(p3, p4), 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(addressComparator.compare(p1, p1), 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(addressComparison1 \u003c 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(addressComparison2 \u003c 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"nicrandomlee":51}},{"path":"src/test/java/seedu/address/model/person/comparer/EmailComparatorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.model.person.comparer;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CANDY;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DANIEL;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"public class EmailComparatorTest {","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p1 \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p2 \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p3 \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p4 \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p5 \u003d new PersonBuilder(ALICE).withName(VALID_NAME_CANDY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p6 \u003d new PersonBuilder(BOB).withName(VALID_NAME_DANIEL).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"    public void constructor_initialization_test1() {","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"        EmailComparator emailComparator \u003d new EmailComparator(true, true, 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(emailComparator instanceof EmailComparator);","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(emailComparator.getIsActive());","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(emailComparator.getIsReverse());","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(emailComparator.getPriority(), 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"    public void constructor_initialization_test2() {","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"        EmailComparator emailComparator \u003d new EmailComparator(false, true, 1234);","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(emailComparator instanceof EmailComparator);","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"        assertFalse(emailComparator.getIsActive());","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(emailComparator.getIsReverse());","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(emailComparator.getPriority(), -1);","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"    public void execute_compareSuccess() {","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"nicrandomlee"},"content":"        EmailComparator emailComparator \u003d new EmailComparator(true, true, 1);","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"nicrandomlee"},"content":"        int emailComparison1 \u003d emailComparator.compare(p1, p2);","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"nicrandomlee"},"content":"        int emailComparison2 \u003d emailComparator.compare(p1, p3);","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"nicrandomlee"},"content":"        int emailComparison3 \u003d emailComparator.compare(p4, p6);","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"nicrandomlee"},"content":"        int emailComparison4 \u003d emailComparator.compare(p3, p5);","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"nicrandomlee"},"content":"        int emailComparison5 \u003d emailComparator.compare(p1, p4);","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"nicrandomlee"},"content":"        int emailComparison6 \u003d emailComparator.compare(p2, p6);","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(emailComparison1, 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(emailComparison2, 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(emailComparison3, 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(emailComparison4 \u003e 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(emailComparison5 \u003c 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(emailComparison6 \u003c 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"nicrandomlee":63}},{"path":"src/test/java/seedu/address/model/person/comparer/NameComparatorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.model.person.comparer;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CANDY;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DANIEL;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"public class NameComparatorTest {","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p1 \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p2 \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p3 \u003d new PersonBuilder(ALICE).withName(VALID_NAME_CANDY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p4 \u003d new PersonBuilder(BOB).withName(VALID_NAME_DANIEL).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"    public void constructor_initialization_test1() {","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"        NameComparator nameComparator \u003d new NameComparator(true, true, 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(nameComparator instanceof NameComparator);","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(nameComparator.getIsActive());","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(nameComparator.getIsReverse());","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(nameComparator.getPriority(), 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"    public void constructor_initialization_test2() {","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"        NameComparator nameComparator \u003d new NameComparator(false, true, 9999);","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(nameComparator instanceof NameComparator);","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"        assertFalse(nameComparator.getIsActive());","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(nameComparator.getIsReverse());","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(nameComparator.getPriority(), -1);","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"    public void execute_compareSuccess() {","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"        NameComparator nameComparator \u003d new NameComparator(true, true, 1);","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"        int nameComparison1 \u003d nameComparator.compare(p1, p3);","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"        int nameComparison2 \u003d nameComparator.compare(p2, p4);","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"        int nameComparison3 \u003d nameComparator.compare(p4, p1);","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(nameComparator.compare(p1, p2), 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(nameComparator.compare(p1, p1), 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(nameComparison1 \u003c 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(nameComparison2 \u003c 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(nameComparison3 \u003e 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"nicrandomlee":57}},{"path":"src/test/java/seedu/address/model/person/comparer/PhoneComparatorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nicrandomlee"},"content":"package seedu.address.model.person.comparer;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"nicrandomlee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"nicrandomlee"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"nicrandomlee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"nicrandomlee"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"nicrandomlee"},"content":"public class PhoneComparatorTest {","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p1 \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p2 \u003d new PersonBuilder(BOB).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p3 \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"nicrandomlee"},"content":"    private static Person p4 \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"nicrandomlee"},"content":"    public void constructor_initialization_test1() {","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"nicrandomlee"},"content":"        PhoneComparator phoneComparator \u003d new PhoneComparator(true, true, 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(phoneComparator instanceof PhoneComparator);","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(phoneComparator.getIsActive());","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(phoneComparator.getIsReverse());","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(phoneComparator.getPriority(), 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"nicrandomlee"},"content":"    public void constructor_initialization_test2() {","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"nicrandomlee"},"content":"        PhoneComparator phoneComparator \u003d new PhoneComparator(false, true, 9999);","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(phoneComparator instanceof PhoneComparator);","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"nicrandomlee"},"content":"        assertFalse(phoneComparator.getIsActive());","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(phoneComparator.getIsReverse());","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(phoneComparator.getPriority(), -1);","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"nicrandomlee"},"content":"    @Test","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"nicrandomlee"},"content":"    public void execute_compareSuccess() {","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"nicrandomlee"},"content":"        PhoneComparator phoneComparator \u003d new PhoneComparator(true, true, 1);","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"nicrandomlee"},"content":"        int phoneComparison1 \u003d phoneComparator.compare(p1, p2);","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"nicrandomlee"},"content":"        int phoneComparison2 \u003d phoneComparator.compare(p1, p3);","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"nicrandomlee"},"content":"        int phoneComparison3 \u003d phoneComparator.compare(p2, p3);","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"nicrandomlee"},"content":"        assertEquals(phoneComparator.compare(p3, p4), 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(phoneComparison1 \u003e 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(phoneComparison2 \u003e 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"nicrandomlee"},"content":"        assertTrue(phoneComparison3 \u003e 0);","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"nicrandomlee"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"nicrandomlee":52}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedEventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.storage.JsonAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.CONFERENCE;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"public class JsonAdaptedEventTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"    private static final String INVALID_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"    private static final String INVALID_EVENT_PERIOD \u003d \"2010-10-10 12:00 - 2010-10-10 10:00\";","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"    private static final String INVALID_EVENT_PERIOD_SYNTAX \u003d \"2010-10-10 10:00-2010-10-10 12:00\";","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"    private static final String VALID_DESCRIPTION \u003d CONFERENCE.getDescription().getDescription();","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"    private static final String VALID_EVENT_PERIOD \u003d CONFERENCE.getEventPeriod().getFormattedPeriod();","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_validEventDetails_returnsEvent() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(CONFERENCE);","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"        assertEquals(CONFERENCE, event.toModelType());","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_invalidDescription_throwsIllegalValueException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"        JsonAdaptedEvent event \u003d","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedEvent(INVALID_DESCRIPTION, VALID_EVENT_PERIOD);","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"        String expectedMessage \u003d EventDescription.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(null, VALID_EVENT_PERIOD);","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventDescription.class.getSimpleName());","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_invalidEventPeriodSyntax_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"        JsonAdaptedEvent event \u003d","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedEvent(VALID_DESCRIPTION, INVALID_EVENT_PERIOD_SYNTAX);","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"        String expectedMessage \u003d EventPeriod.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_nullEventPeriod_throwsIllegalValueException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, null);","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventPeriod.class.getSimpleName());","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"    public void toModelType_isInvalidEventPeriod_throwsIllegalValueException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_DESCRIPTION, INVALID_EVENT_PERIOD);","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"        String expectedMessage \u003d EventPeriod.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":59,"lihongguang00":6}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"    private static final String INVALID_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"    private static final String INVALID_EVENT_PERIOD \u003d \"2010-10-10 12:00 - 2010-10-10 10:00\";","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"    private static final List\u003cJsonAdaptedEvent\u003e VALID_EVENTS \u003d BENSON.getEventList().stream()","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"            .map(JsonAdaptedEvent::new)","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"nicrandomlee"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-09-30"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"nicrandomlee"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-09-30"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"nicrandomlee"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-09-30"},{"lineNumber":89,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS, VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"nicrandomlee"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-09-30"},{"lineNumber":105,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS, VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"junhonglow"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":118,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":119,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":120,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_invalidEvents_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"junhonglow"},"content":"        List\u003cJsonAdaptedEvent\u003e invalidEvents \u003d new ArrayList\u003c\u003e(VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":122,"author":{"gitId":"junhonglow"},"content":"        invalidEvents.add(new JsonAdaptedEvent(INVALID_DESCRIPTION, INVALID_EVENT_PERIOD));","lastModifiedDate":"2023-11-01"},{"lineNumber":123,"author":{"gitId":"junhonglow"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":124,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, invalidEvents);","lastModifiedDate":"2023-11-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":129,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_duplicateEvents_throwsIllegalValueException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":130,"author":{"gitId":"junhonglow"},"content":"        List\u003cJsonAdaptedEvent\u003e duplicateEvents \u003d new ArrayList\u003c\u003e(VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":131,"author":{"gitId":"junhonglow"},"content":"        duplicateEvents.addAll(VALID_EVENTS);","lastModifiedDate":"2023-11-01"},{"lineNumber":132,"author":{"gitId":"junhonglow"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-11-01"},{"lineNumber":133,"author":{"gitId":"junhonglow"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, duplicateEvents);","lastModifiedDate":"2023-11-01"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2023-11-01"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"junhonglow":29,"nicrandomlee":4,"-":104}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-06-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-06-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"    public void readAddressBook_duplicatePersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"duplicatePersonAddressBook.json\"));","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"junhonglow":5,"-":110}},{"path":"src/test/java/seedu/address/storage/JsonCalendarStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.REVIEW;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.TRAINING;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"public class JsonCalendarStorageTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCalendarStorageTest\");","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"    @TempDir","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"    public Path testFolder;","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"    public void readCalendar_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"        assertThrows(NullPointerException.class, () -\u003e readCalendar(null));","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    private java.util.Optional\u003cReadOnlyCalendar\u003e readCalendar(String filePath) throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"        return new JsonCalendarStorage(Paths.get(filePath)).readCalendar(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"                : null;","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"        assertFalse(readCalendar(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readCalendar(\"notJsonFormatCalendar.json\"));","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"    public void readCalendar_invalidEventCalendar_throwDataLoadingException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readCalendar(\"invalidEventCalendar.json\"));","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"    public void readAddressBook_invalidAndValidEventCalendar_throwDataLoadingException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readCalendar(\"invalidAndValidEventCalendar.json\"));","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"    public void readAndSaveCalendar_allInOrder_success() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"        Path filePath \u003d testFolder.resolve(\"TempCalendar.json\");","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"        Calendar original \u003d getTypicalCalendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"        JsonCalendarStorage jsonCalendarStorage \u003d new JsonCalendarStorage(filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"        // Save in new file and read back","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"        jsonCalendarStorage.saveCalendar(original, filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"junhonglow"},"content":"        ReadOnlyCalendar readBack \u003d jsonCalendarStorage.readCalendar(filePath).get();","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"junhonglow"},"content":"        assertEquals(original, new Calendar(readBack));","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"        original.addEvent(TRAINING);","lastModifiedDate":"2023-10-19"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"        jsonCalendarStorage.saveCalendar(original, filePath);","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"junhonglow"},"content":"        readBack \u003d jsonCalendarStorage.readCalendar(filePath).get();","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"        assertEquals(original, new Calendar(readBack));","lastModifiedDate":"2023-10-19"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2023-10-19"},{"lineNumber":80,"author":{"gitId":"junhonglow"},"content":"        original.addEvent(REVIEW);","lastModifiedDate":"2023-10-19"},{"lineNumber":81,"author":{"gitId":"junhonglow"},"content":"        jsonCalendarStorage.saveCalendar(original); // file path not specified","lastModifiedDate":"2023-10-19"},{"lineNumber":82,"author":{"gitId":"junhonglow"},"content":"        readBack \u003d jsonCalendarStorage.readCalendar().get(); // file path not specified","lastModifiedDate":"2023-10-19"},{"lineNumber":83,"author":{"gitId":"junhonglow"},"content":"        assertEquals(original, new Calendar(readBack));","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":86,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":87,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":88,"author":{"gitId":"junhonglow"},"content":"    public void saveCalendar_nullCalendar_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":89,"author":{"gitId":"junhonglow"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveCalendar(null, \"SomeFile.json\"));","lastModifiedDate":"2023-10-19"},{"lineNumber":90,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"junhonglow"},"content":"     * Saves {@code calendar} at the specified {@code filePath}.","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"junhonglow"},"content":"    private void saveCalendar(ReadOnlyCalendar calendar, String filePath) {","lastModifiedDate":"2023-10-19"},{"lineNumber":96,"author":{"gitId":"junhonglow"},"content":"        try {","lastModifiedDate":"2023-10-19"},{"lineNumber":97,"author":{"gitId":"junhonglow"},"content":"            new JsonCalendarStorage(Paths.get(filePath))","lastModifiedDate":"2023-10-19"},{"lineNumber":98,"author":{"gitId":"junhonglow"},"content":"                    .saveCalendar(calendar, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-10-19"},{"lineNumber":99,"author":{"gitId":"junhonglow"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2023-10-19"},{"lineNumber":100,"author":{"gitId":"junhonglow"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2023-10-19"},{"lineNumber":101,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":102,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":103,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":104,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":105,"author":{"gitId":"junhonglow"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-19"},{"lineNumber":106,"author":{"gitId":"junhonglow"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveCalendar(new Calendar(), null));","lastModifiedDate":"2023-10-19"},{"lineNumber":107,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":108,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":108}},{"path":"src/test/java/seedu/address/storage/JsonSerializableCalendarTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import seedu.address.testutil.TypicalEvents;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"public class JsonSerializableCalendarTest {","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableCalendarTest\");","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"    private static final Path TYPICAL_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEventsCalendar.json\");","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventCalendar.json\");","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventCalendar.json\");","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_typicalEventsFile_success() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"        JsonSerializableCalendar dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EVENTS_FILE,","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"                JsonSerializableCalendar.class).get();","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"        Calendar calendarFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"        Calendar typicalEventsCalendar \u003d TypicalEvents.getTypicalCalendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"        assertEquals(calendarFromFile, typicalEventsCalendar);","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"        JsonSerializableCalendar dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EVENT_FILE,","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"                JsonSerializableCalendar.class).get();","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"        JsonSerializableCalendar dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EVENT_FILE,","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"                JsonSerializableCalendar.class).get();","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableCalendar.MESSAGE_DUPLICATE_EVENT,","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":47}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.testutil.TypicalEvents.getTypicalCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.ReadOnlyCalendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"        JsonCalendarStorage calendarStorage \u003d new JsonCalendarStorage(getTempFilePath(\"calendar\"));","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, calendarStorage, userPrefsStorage);","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"    public void calendarReadSave() throws Exception {","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"        /*","lastModifiedDate":"2023-10-19"},{"lineNumber":70,"author":{"gitId":"junhonglow"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2023-10-19"},{"lineNumber":71,"author":{"gitId":"junhonglow"},"content":"         * {@link JsonCalendarStorage} class.","lastModifiedDate":"2023-10-19"},{"lineNumber":72,"author":{"gitId":"junhonglow"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonCalendarStorageTest} class.","lastModifiedDate":"2023-10-19"},{"lineNumber":73,"author":{"gitId":"junhonglow"},"content":"         */","lastModifiedDate":"2023-10-19"},{"lineNumber":74,"author":{"gitId":"junhonglow"},"content":"        Calendar original \u003d getTypicalCalendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":75,"author":{"gitId":"junhonglow"},"content":"        storageManager.saveCalendar(original);","lastModifiedDate":"2023-10-19"},{"lineNumber":76,"author":{"gitId":"junhonglow"},"content":"        ReadOnlyCalendar retrieved \u003d storageManager.readCalendar().get();","lastModifiedDate":"2023-10-19"},{"lineNumber":77,"author":{"gitId":"junhonglow"},"content":"        assertEquals(original, new Calendar(retrieved));","lastModifiedDate":"2023-10-19"},{"lineNumber":78,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":79,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":80,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":81,"author":{"gitId":"junhonglow"},"content":"    public void getUserPrefsFilePath() {","lastModifiedDate":"2023-10-19"},{"lineNumber":82,"author":{"gitId":"junhonglow"},"content":"        assertNotNull(storageManager.getUserPrefsFilePath());","lastModifiedDate":"2023-10-19"},{"lineNumber":83,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":84,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":90,"author":{"gitId":"junhonglow"},"content":"    @Test","lastModifiedDate":"2023-10-19"},{"lineNumber":91,"author":{"gitId":"junhonglow"},"content":"    public void getCalendarFilePath() {","lastModifiedDate":"2023-10-19"},{"lineNumber":92,"author":{"gitId":"junhonglow"},"content":"        assertNotNull(storageManager.getCalendarFilePath());","lastModifiedDate":"2023-10-19"},{"lineNumber":93,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":94,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"junhonglow":28,"-":67}},{"path":"src/test/java/seedu/address/testutil/CalendarBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":" * A utility class to help with building Calendar objects.","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":" *     {@code Calendar c \u003d new CalendarBuilder().withEvent(\"Description\", \"2000-01-01 00:00\", \"2000-01-01 12:00\")","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":" *     .build();}","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"public class CalendarBuilder {","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"    private Calendar calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"    public CalendarBuilder() {","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"        calendar \u003d new Calendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"    public CalendarBuilder(Calendar calendar) {","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"        this.calendar \u003d calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"     * Adds a new {@code Person} to the {@code Calendar} that we are building.","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"    public CalendarBuilder withEvent(Event event) {","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"        calendar.addEvent(event);","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"        return this;","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    public Calendar build() {","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"        return calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":35}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-09"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-09"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-09"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-09"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-09"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":" * A utility class to help with building event objects.","lastModifiedDate":"2023-10-09"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-09"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"public class EventBuilder {","lastModifiedDate":"2023-10-09"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    public static final String DEFAULT_DESCRIPTION_STRING \u003d \"Unused field\";","lastModifiedDate":"2023-10-09"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    public static final String DEFAULT_START_TIME_STRING \u003d \"2023-01-01 13:00\";","lastModifiedDate":"2023-10-09"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"    public static final String DEFAULT_END_TIME_STRING \u003d \"2023-01-01 15:00\";","lastModifiedDate":"2023-10-09"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    private EventDescription description;","lastModifiedDate":"2023-10-09"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    private EventPeriod eventPeriod;","lastModifiedDate":"2023-10-09"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     * Creates an EventBuilder with default description and event periods.","lastModifiedDate":"2023-10-09"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"    public EventBuilder() {","lastModifiedDate":"2023-10-09"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"        this.description \u003d new EventDescription(DEFAULT_DESCRIPTION_STRING);","lastModifiedDate":"2023-10-09"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d new EventPeriod(DEFAULT_START_TIME_STRING, DEFAULT_END_TIME_STRING);","lastModifiedDate":"2023-10-09"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"     * Creates an event with the given EventBuilder attributes.","lastModifiedDate":"2023-10-09"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-09"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * @return event corresponding to EventBuilder\u0027s attributes.","lastModifiedDate":"2023-10-09"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"    public Event build() {","lastModifiedDate":"2023-10-09"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"        return new Event(this.description, this.eventPeriod);","lastModifiedDate":"2023-10-09"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"     * Set the description to the user input.","lastModifiedDate":"2023-10-09"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-09"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"     * @param description user input.","lastModifiedDate":"2023-10-09"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     * @return EventBuilder object with description changed to user input.","lastModifiedDate":"2023-10-09"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"    public EventBuilder withDescription(String description) {","lastModifiedDate":"2023-10-09"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"        this.description \u003d new EventDescription(description);","lastModifiedDate":"2023-10-09"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"        return this;","lastModifiedDate":"2023-10-09"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"     * Set the start date to the user input while setting the end date to the default.","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-09"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"     * @param startDate user input in format \u0027yyyy-MM-dd HH:mm\u0027.","lastModifiedDate":"2023-10-09"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     * @return EventBuilder object with start date changed to user input.","lastModifiedDate":"2023-10-09"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"    public EventBuilder withStartDate(String startDate) {","lastModifiedDate":"2023-10-09"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d new EventPeriod(startDate, DEFAULT_END_TIME_STRING);","lastModifiedDate":"2023-10-09"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"        return this;","lastModifiedDate":"2023-10-09"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"     * Set the end date to the user input while setting the start date to the default.","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-09"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"     * @param endDate user input in format \u0027yyyy-MM-dd HH:mm\u0027.","lastModifiedDate":"2023-10-09"},{"lineNumber":63,"author":{"gitId":"lihongguang00"},"content":"     * @return EventBuilder object with the end date changed to user input.","lastModifiedDate":"2023-10-09"},{"lineNumber":64,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":65,"author":{"gitId":"lihongguang00"},"content":"    public EventBuilder withEndDate(String endDate) {","lastModifiedDate":"2023-10-09"},{"lineNumber":66,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d new EventPeriod(DEFAULT_START_TIME_STRING, endDate);","lastModifiedDate":"2023-10-09"},{"lineNumber":67,"author":{"gitId":"lihongguang00"},"content":"        return this;","lastModifiedDate":"2023-10-09"},{"lineNumber":68,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":69,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-09"},{"lineNumber":70,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-09"},{"lineNumber":71,"author":{"gitId":"lihongguang00"},"content":"     * Set the start and end date to the user input.","lastModifiedDate":"2023-10-09"},{"lineNumber":72,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-09"},{"lineNumber":73,"author":{"gitId":"lihongguang00"},"content":"     * @param start user input start date in format \u0027yyyy-MM-dd HH:mm\u0027.","lastModifiedDate":"2023-10-09"},{"lineNumber":74,"author":{"gitId":"lihongguang00"},"content":"     * @param end user input end date in format \u0027yyyy-MM-dd HH:mm\u0027.","lastModifiedDate":"2023-10-09"},{"lineNumber":75,"author":{"gitId":"lihongguang00"},"content":"     * @return EventBuilder object with the start and end date changed to respective user inputs.","lastModifiedDate":"2023-10-09"},{"lineNumber":76,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-09"},{"lineNumber":77,"author":{"gitId":"lihongguang00"},"content":"    public EventBuilder withStartEndDate(String start, String end) {","lastModifiedDate":"2023-10-09"},{"lineNumber":78,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d new EventPeriod(start, end);","lastModifiedDate":"2023-10-09"},{"lineNumber":79,"author":{"gitId":"lihongguang00"},"content":"        return this;","lastModifiedDate":"2023-10-09"},{"lineNumber":80,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-09"},{"lineNumber":81,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":83,"author":{"gitId":"lihongguang00"},"content":"     * Get the start time of the EventBuilder, regardless of date.","lastModifiedDate":"2023-10-27"},{"lineNumber":84,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"lihongguang00"},"content":"     * @return start time of the EventBuilder, regardless of date.","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"lihongguang00"},"content":"    public LocalTime getStartTime() {","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"lihongguang00"},"content":"        return eventPeriod.getStartTime();","lastModifiedDate":"2023-10-27"},{"lineNumber":89,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":90,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-09"}],"authorContributionMap":{"lihongguang00":90}},{"path":"src/test/java/seedu/address/testutil/EventDescriptionBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventDescription;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":" * Creates an EventDescriptionBuilder with default description.","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"public class EventDescriptionBuilder {","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    private static final String DEFAULT_DESCRIPTION \u003d VALID_DESCRIPTION;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    private EventDescription eventDescription;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     * Creates an EventPeriodBuilder object with default description;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    public EventDescriptionBuilder() {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"        this.eventDescription \u003d new EventDescription(DEFAULT_DESCRIPTION);","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * Creates a EventDescription with given EventDescriptionBuilder attributes.","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * @return EventDescription corresponding to the EventDescriptionBuilder attributes.","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"    public EventDescription build() {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"        return this.eventDescription;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     * Change the description.","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     * @param newDescription String representing the description to be changed to.","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     * @return EventDescriptionBuilder object with new description.","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"    public EventDescriptionBuilder changeDescription(String newDescription) {","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        this.eventDescription \u003d new EventDescription(newDescription);","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"        return this;","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"lihongguang00":40}},{"path":"src/test/java/seedu/address/testutil/EventPeriodBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-10"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.EventPeriod;","lastModifiedDate":"2023-10-10"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-10"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":" * Creates an EventPeriodBuilder with default event period.","lastModifiedDate":"2023-10-10"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-10"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":"public class EventPeriodBuilder {","lastModifiedDate":"2023-10-10"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":"    private static final String DEFAULT_START_DATE_TIME_STRING \u003d \"2023-01-02 13:00\";","lastModifiedDate":"2023-10-10"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"    private static final String DEFAULT_END_DATE_TIME_STRING \u003d \"2023-01-02 15:00\";","lastModifiedDate":"2023-10-10"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    private EventPeriod eventPeriod;","lastModifiedDate":"2023-10-10"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"     * Creates an EventPeriodBuilder object with default event period.","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"    public EventPeriodBuilder() {","lastModifiedDate":"2023-10-10"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d new EventPeriod(DEFAULT_START_DATE_TIME_STRING, DEFAULT_END_DATE_TIME_STRING);","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"     * Creates an EventPeriod with given EventPeriodBuilder attributes.","lastModifiedDate":"2023-10-10"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     * @return EventPeriod corresponding to the EventPeriodBuilder attributes.","lastModifiedDate":"2023-10-10"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"    public EventPeriod build() {","lastModifiedDate":"2023-10-10"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"        return this.eventPeriod;","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"     * Change the start date and time to the user input while setting the end date and time to default.","lastModifiedDate":"2023-10-10"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-10"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"     * @param newStart user input in format \u0027yyyy-MM-dd HH:mm\u0027.","lastModifiedDate":"2023-10-10"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     * @return EventPeriodBuilder object with start date and time set to user input.","lastModifiedDate":"2023-10-10"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"    public EventPeriodBuilder changeStart(String newStart) {","lastModifiedDate":"2023-10-10"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d new EventPeriod(newStart, DEFAULT_END_DATE_TIME_STRING);","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"        return this;","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"     * Change the end date and time to the user input while setting the start date and time to default.","lastModifiedDate":"2023-10-10"},{"lineNumber":42,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-10"},{"lineNumber":43,"author":{"gitId":"lihongguang00"},"content":"     * @param newEnd user input in format \u0027yyyy-MM-dd HH:mm\u0027.","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"lihongguang00"},"content":"     * @return EventPeriodBuilder object with end date and time set to user input.","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"lihongguang00"},"content":"    public EventPeriodBuilder changeEnd(String newEnd) {","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d new EventPeriod(DEFAULT_START_DATE_TIME_STRING, newEnd);","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"lihongguang00"},"content":"        return this;","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"lihongguang00"},"content":"     * Change the start date and time and end date and time to the user input.","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"lihongguang00"},"content":"     * @param newStart start date and time user input in format \u0027yyyy-MM-dd HH:mm\u0027","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"lihongguang00"},"content":"     * @param newEnd end date and time user input in format \u0027yyyy-MM-dd HH:mm\u0027","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"lihongguang00"},"content":"     * @return EventPeriodBuilder object with start and end date and time set to user input.","lastModifiedDate":"2023-10-10"},{"lineNumber":57,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":58,"author":{"gitId":"lihongguang00"},"content":"    public EventPeriodBuilder changeStartAndEnd(String newStart, String newEnd) {","lastModifiedDate":"2023-10-10"},{"lineNumber":59,"author":{"gitId":"lihongguang00"},"content":"        this.eventPeriod \u003d new EventPeriod(newStart, newEnd);","lastModifiedDate":"2023-10-10"},{"lineNumber":60,"author":{"gitId":"lihongguang00"},"content":"        return this;","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":62,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-10"}],"authorContributionMap":{"lihongguang00":62}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import java.util.Optional;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"    private Optional\u003cCalendar\u003e calendar \u003d Optional.empty();","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"        calendar \u003d Optional.of(personToCopy.getCalendar());","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"junhonglow"},"content":"     * Sets the {@code Calendar} of the {@code Person} that we are building.","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"junhonglow"},"content":"    public PersonBuilder withCalendar() {","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"junhonglow"},"content":"        this.calendar \u003d Optional.of(TypicalEvents.getTypicalCalendar());","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"junhonglow"},"content":"        return this;","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":104,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-11-01"},{"lineNumber":105,"author":{"gitId":"junhonglow"},"content":"     * Creates a new Person object using the specified attributes.","lastModifiedDate":"2023-11-01"},{"lineNumber":106,"author":{"gitId":"junhonglow"},"content":"     * If a calendar is present, it is included in the Person object;","lastModifiedDate":"2023-11-01"},{"lineNumber":107,"author":{"gitId":"junhonglow"},"content":"     * otherwise, a Person object is created without a calendar.","lastModifiedDate":"2023-11-01"},{"lineNumber":108,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-11-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":110,"author":{"gitId":"junhonglow"},"content":"        return this.calendar.map(calendar -\u003e new Person(name, phone, email, address, tags, calendar))","lastModifiedDate":"2023-11-01"},{"lineNumber":111,"author":{"gitId":"junhonglow"},"content":"                .orElseGet(() -\u003e new Person(name, phone, email, address, tags));","lastModifiedDate":"2023-11-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"junhonglow":19,"-":95}},{"path":"src/test/java/seedu/address/testutil/PersonFilterBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Fallman2"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Fallman2"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Fallman2"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Fallman2"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Fallman2"},"content":"import seedu.address.logic.commands.FilterCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Fallman2"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Fallman2"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Fallman2"},"content":" * A utility class to help with building PersonFilter objects.","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Fallman2"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Fallman2"},"content":"public class PersonFilterBuilder {","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Fallman2"},"content":"    private FilterCommand.PersonFilter filter;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Fallman2"},"content":"    public PersonFilterBuilder() {","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Fallman2"},"content":"        filter \u003d new FilterCommand.PersonFilter();","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Fallman2"},"content":"    public PersonFilterBuilder(FilterCommand.PersonFilter filter) {","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Fallman2"},"content":"        this.filter \u003d new FilterCommand.PersonFilter(filter);","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Fallman2"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Fallman2"},"content":"    public PersonFilterBuilder(Person person) {","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Fallman2"},"content":"        filter \u003d new FilterCommand.PersonFilter();","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Fallman2"},"content":"        filter.setName(person.getName().fullName);","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Fallman2"},"content":"        filter.setPhone(person.getPhone().value);","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Fallman2"},"content":"        filter.setEmail(person.getEmail().value);","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Fallman2"},"content":"        filter.setAddress(person.getAddress().value);","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Fallman2"},"content":"        filter.setTags(person.getTags());","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Fallman2"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Fallman2"},"content":"    public PersonFilterBuilder withName(String name) {","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Fallman2"},"content":"        filter.setName(name);","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Fallman2"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Fallman2"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Fallman2"},"content":"    public PersonFilterBuilder withPhone(String phone) {","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Fallman2"},"content":"        filter.setPhone(phone);","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"Fallman2"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"Fallman2"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Fallman2"},"content":"    public PersonFilterBuilder withEmail(String email) {","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Fallman2"},"content":"        filter.setEmail(email);","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Fallman2"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"Fallman2"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"Fallman2"},"content":"    public PersonFilterBuilder withAddress(String address) {","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"Fallman2"},"content":"        filter.setAddress(address);","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"Fallman2"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"Fallman2"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"Fallman2"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"Fallman2"},"content":"     * that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"Fallman2"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"Fallman2"},"content":"    public PersonFilterBuilder withTags(String... tags) {","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"Fallman2"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"Fallman2"},"content":"        filter.setTags(tagSet);","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"Fallman2"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"Fallman2"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"Fallman2"},"content":"    public FilterCommand.PersonFilter build() {","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"Fallman2"},"content":"        return filter;","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"Fallman2"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"Fallman2"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Fallman2":83}},{"path":"src/test/java/seedu/address/testutil/SingleDayEventListBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lihongguang00"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"lihongguang00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"lihongguang00"},"content":"import seedu.address.model.event.SingleDayEventList;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"lihongguang00"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"lihongguang00"},"content":" * A utility class to help with building SingleDayEventList objects.","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"lihongguang00"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"lihongguang00"},"content":"public class SingleDayEventListBuilder {","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"lihongguang00"},"content":"    private static final LocalDate validDate \u003d LocalDate.of(2023, 1, 1);","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"lihongguang00"},"content":"    private LocalDate date;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"lihongguang00"},"content":"     * Construct a SingleDayEventListBuilder object with default attributes.","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"lihongguang00"},"content":"    public SingleDayEventListBuilder() {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"lihongguang00"},"content":"        this.date \u003d validDate;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"lihongguang00"},"content":"     * Change the date of the SingleDayEventListBuilder object.","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"lihongguang00"},"content":"     * @param newDate date to be changed to.","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"lihongguang00"},"content":"     * @return SingleDayEventListBuilder object with updated date.","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"lihongguang00"},"content":"    public SingleDayEventListBuilder withDate(LocalDate newDate) {","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"lihongguang00"},"content":"        this.date \u003d newDate;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"lihongguang00"},"content":"        return this;","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"lihongguang00"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"lihongguang00"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"lihongguang00"},"content":"     * Create the SingleDayEventList object with the attributes of this SingleDayEventListBuilder object.","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"lihongguang00"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"lihongguang00"},"content":"     * @return SingleDayEventList object with date corresponding to the SingleDayEventListBuilder object\u0027s date","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"lihongguang00"},"content":"     *     attribute.","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"lihongguang00"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"lihongguang00"},"content":"    public SingleDayEventList build() {","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"lihongguang00"},"content":"        return new SingleDayEventList(date);","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"lihongguang00"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"lihongguang00"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"lihongguang00":41}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"junhonglow"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-19"},{"lineNumber":2,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":3,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION;","lastModifiedDate":"2023-10-19"},{"lineNumber":4,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_EARLIER;","lastModifiedDate":"2023-10-19"},{"lineNumber":5,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_LATER;","lastModifiedDate":"2023-10-19"},{"lineNumber":6,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_EARLIER;","lastModifiedDate":"2023-10-19"},{"lineNumber":7,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_LATER;","lastModifiedDate":"2023-10-19"},{"lineNumber":8,"author":{"gitId":"junhonglow"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UNUSED_DESCRIPTION;","lastModifiedDate":"2023-10-19"},{"lineNumber":9,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":10,"author":{"gitId":"junhonglow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-19"},{"lineNumber":11,"author":{"gitId":"junhonglow"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-19"},{"lineNumber":12,"author":{"gitId":"junhonglow"},"content":"import java.util.List;","lastModifiedDate":"2023-10-19"},{"lineNumber":13,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":14,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.calendar.Calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":15,"author":{"gitId":"junhonglow"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-10-19"},{"lineNumber":16,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":17,"author":{"gitId":"junhonglow"},"content":"/**","lastModifiedDate":"2023-10-19"},{"lineNumber":18,"author":{"gitId":"junhonglow"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests.","lastModifiedDate":"2023-10-19"},{"lineNumber":19,"author":{"gitId":"junhonglow"},"content":" */","lastModifiedDate":"2023-10-19"},{"lineNumber":20,"author":{"gitId":"junhonglow"},"content":"public class TypicalEvents {","lastModifiedDate":"2023-10-19"},{"lineNumber":21,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":22,"author":{"gitId":"junhonglow"},"content":"    public static final Event CONFERENCE \u003d new EventBuilder().withDescription(\"Conference\")","lastModifiedDate":"2023-10-19"},{"lineNumber":23,"author":{"gitId":"junhonglow"},"content":"            .withStartEndDate(\"2023-11-15 08:30\", \"2023-11-15 17:00\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":24,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":25,"author":{"gitId":"junhonglow"},"content":"    public static final Event LAUNCH \u003d new EventBuilder()","lastModifiedDate":"2023-10-19"},{"lineNumber":26,"author":{"gitId":"junhonglow"},"content":"            .withDescription(\"Launch and Marketing Strategy Discussion\")","lastModifiedDate":"2023-10-19"},{"lineNumber":27,"author":{"gitId":"junhonglow"},"content":"            .withStartEndDate(\"2023-12-05 10:00\", \"2023-12-05 12:00\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":28,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":29,"author":{"gitId":"junhonglow"},"content":"    public static final Event MEETING \u003d new EventBuilder().withDescription(\"Team Meeting\")","lastModifiedDate":"2023-10-19"},{"lineNumber":30,"author":{"gitId":"junhonglow"},"content":"            .withStartEndDate(\"2023-10-25 09:00\", \"2023-10-25 10:30\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":31,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":32,"author":{"gitId":"junhonglow"},"content":"    public static final Event WEBINAR \u003d new EventBuilder()","lastModifiedDate":"2023-10-19"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"            .withDescription(\"Webinar\")","lastModifiedDate":"2023-10-19"},{"lineNumber":34,"author":{"gitId":"junhonglow"},"content":"            .withStartEndDate(\"2023-10-30 15:00\", \"2023-10-30 16:30\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":35,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":36,"author":{"gitId":"junhonglow"},"content":"    public static final Event WORKSHOP \u003d new EventBuilder()","lastModifiedDate":"2023-10-19"},{"lineNumber":37,"author":{"gitId":"junhonglow"},"content":"            .withDescription(\"Workshop\")","lastModifiedDate":"2023-10-19"},{"lineNumber":38,"author":{"gitId":"junhonglow"},"content":"            .withStartEndDate(\"2023-11-10 14:00\", \"2023-11-10 16:30\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":39,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":40,"author":{"gitId":"junhonglow"},"content":"    // Manually added","lastModifiedDate":"2023-10-19"},{"lineNumber":41,"author":{"gitId":"junhonglow"},"content":"    public static final Event TRAINING \u003d new EventBuilder().withDescription(\"Customer Support Training\")","lastModifiedDate":"2023-10-19"},{"lineNumber":42,"author":{"gitId":"junhonglow"},"content":"            .withStartEndDate(\"2023-11-20 09:00\", \"2023-11-20 12:00\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":43,"author":{"gitId":"junhonglow"},"content":"    public static final Event REVIEW \u003d new EventBuilder().withDescription(\"Project Review\")","lastModifiedDate":"2023-10-19"},{"lineNumber":44,"author":{"gitId":"junhonglow"},"content":"            .withStartEndDate(\"2023-10-29 15:00\", \"2023-10-29 16:30\").build();","lastModifiedDate":"2023-10-19"},{"lineNumber":45,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":46,"author":{"gitId":"junhonglow"},"content":"    // Manually added - Event\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-10-19"},{"lineNumber":47,"author":{"gitId":"junhonglow"},"content":"    public static final Event TEST_EVENT_A \u003d new EventBuilder().withDescription(VALID_DESCRIPTION)","lastModifiedDate":"2023-10-19"},{"lineNumber":48,"author":{"gitId":"junhonglow"},"content":"            .withStartEndDate(VALID_START_DATE_EARLIER, VALID_END_DATE_EARLIER).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":49,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":50,"author":{"gitId":"junhonglow"},"content":"    public static final Event TEST_EVENT_B \u003d new EventBuilder().withDescription(VALID_UNUSED_DESCRIPTION)","lastModifiedDate":"2023-10-19"},{"lineNumber":51,"author":{"gitId":"junhonglow"},"content":"            .withStartEndDate(VALID_START_DATE_LATER, VALID_END_DATE_LATER).build();","lastModifiedDate":"2023-10-19"},{"lineNumber":52,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":53,"author":{"gitId":"junhonglow"},"content":"    private TypicalEvents() {} // prevents instantiation","lastModifiedDate":"2023-10-19"},{"lineNumber":54,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":55,"author":{"gitId":"junhonglow"},"content":"    /**","lastModifiedDate":"2023-10-19"},{"lineNumber":56,"author":{"gitId":"junhonglow"},"content":"     * Returns an {@code Calendar} with all the typical events.","lastModifiedDate":"2023-10-19"},{"lineNumber":57,"author":{"gitId":"junhonglow"},"content":"     */","lastModifiedDate":"2023-10-19"},{"lineNumber":58,"author":{"gitId":"junhonglow"},"content":"    public static Calendar getTypicalCalendar() {","lastModifiedDate":"2023-10-19"},{"lineNumber":59,"author":{"gitId":"junhonglow"},"content":"        Calendar calendar \u003d new Calendar();","lastModifiedDate":"2023-10-19"},{"lineNumber":60,"author":{"gitId":"junhonglow"},"content":"        for (Event event : getTypicalEvents()) {","lastModifiedDate":"2023-10-19"},{"lineNumber":61,"author":{"gitId":"junhonglow"},"content":"            calendar.addEvent(event);","lastModifiedDate":"2023-10-19"},{"lineNumber":62,"author":{"gitId":"junhonglow"},"content":"        }","lastModifiedDate":"2023-10-19"},{"lineNumber":63,"author":{"gitId":"junhonglow"},"content":"        return calendar;","lastModifiedDate":"2023-10-19"},{"lineNumber":64,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":65,"author":{"gitId":"junhonglow"},"content":"","lastModifiedDate":"2023-10-19"},{"lineNumber":66,"author":{"gitId":"junhonglow"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {","lastModifiedDate":"2023-10-19"},{"lineNumber":67,"author":{"gitId":"junhonglow"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CONFERENCE, LAUNCH, MEETING, WEBINAR, WORKSHOP));","lastModifiedDate":"2023-10-19"},{"lineNumber":68,"author":{"gitId":"junhonglow"},"content":"    }","lastModifiedDate":"2023-10-19"},{"lineNumber":69,"author":{"gitId":"junhonglow"},"content":"}","lastModifiedDate":"2023-10-19"}],"authorContributionMap":{"junhonglow":69}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2023-10-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"junhonglow"},"content":"            .withTags(\"owesMoney\", \"friends\").withCalendar().build();","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":73,"author":{"gitId":"nicrandomlee"},"content":"    public static AddressBook getTypicalUnsortedAddressBook() {","lastModifiedDate":"2023-10-18"},{"lineNumber":74,"author":{"gitId":"nicrandomlee"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"nicrandomlee"},"content":"        for (Person person : getTypicalUnsortedPersons()) {","lastModifiedDate":"2023-10-18"},{"lineNumber":76,"author":{"gitId":"nicrandomlee"},"content":"            ab.addPerson(person);","lastModifiedDate":"2023-10-18"},{"lineNumber":77,"author":{"gitId":"nicrandomlee"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":78,"author":{"gitId":"nicrandomlee"},"content":"        return ab;","lastModifiedDate":"2023-10-18"},{"lineNumber":79,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":80,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":84,"author":{"gitId":"nicrandomlee"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":85,"author":{"gitId":"nicrandomlee"},"content":"    public static List\u003cPerson\u003e getTypicalUnsortedPersons() {","lastModifiedDate":"2023-10-18"},{"lineNumber":86,"author":{"gitId":"nicrandomlee"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(CARL, GEORGE, ALICE, FIONA, DANIEL, ELLE, BENSON));","lastModifiedDate":"2023-10-18"},{"lineNumber":87,"author":{"gitId":"nicrandomlee"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"junhonglow":1,"nicrandomlee":12,"-":75}}]
