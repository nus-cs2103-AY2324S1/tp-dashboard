[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"[![Java CI](https://github.com/AY2324S1-CS2103T-T14-3/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2324S1-CS2103T-T14-3/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"![Ui](docs/images/HealthSyncGUI_v1.4.png)","lastModifiedDate":"2023-11-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"# HealthSync","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"HealthSync is a desktop app for managing patient details, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, HealthSync can help you organize and manage patient details faster than traditional GUI apps.","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"## Features","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"1. **Auto-Save Feature** - Saves data in the hard disk automatically after any changes have been made. There is no need to save manually.","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"2. **Data Creation (Add Function)** - Enables front desk workers to create a new patient object and new fields to store patient information. Adding patient information can be done using the `add` command after providing one of the patient’s identification (either name or id).","lastModifiedDate":"2023-10-01"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"- Patient information includes:","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"    - Patient\u0027s Contacts","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"    - Patient\u0027s Medical History","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"    - Patient\u0027s Ward Information","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"    - Patient\u0027s Upcoming Appointment Time(s)","lastModifiedDate":"2023-10-01"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"3. **Data Retrieval (Find Function)** - Enables front desk workers to quickly retrieve patient information based on command executed. If no fields are provided, the function returns all the patient’s related information. Else, only the details relating to the field are provided.","lastModifiedDate":"2023-10-01"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"4. **Data Deletion (Delete Function)** - Enables front desk workers to remove certain patient information / all patient information when they are no longer needed. If no fields are provided, the function deletes the patient. Else, only the patient information within the specified field is deleted.","lastModifiedDate":"2023-10-01"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"5. **Edit Data (Edit Function)** - Enables front desk workers to update patient information fields as necessary. Editing patient information can be done using the `edit` command after providing one of the patient\u0027s identification (either name or id).","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"6. **User-Friendly CLI Interface** - CLI interface that is easy to navigate for users.","lastModifiedDate":"2023-10-01"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"For in-depth usage and a full list of commands, refer to the [User Guide](https://ay2324s1-cs2103t-t14-3.github.io/tp/UserGuide.html#quick-start).","lastModifiedDate":"2023-10-01"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"## Acknowledgments","lastModifiedDate":"2023-10-01"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-10-01"}],"authorContributionMap":{"hyc17003":37,"-":1,"WeeeHung":1}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"run {","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"WZWren"},"content":"    archiveFileName \u003d \u0027healthsync.jar\u0027","lastModifiedDate":"2023-10-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"WZWren":5,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"### Wee Hung","lastModifiedDate":"2023-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"\u003cimg src\u003d\"images/weeehung.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"[[homepage](https://github.com/WeeeHung)]","lastModifiedDate":"2023-09-28"},{"lineNumber":19,"author":{"gitId":"WeeeHung"},"content":"[[github](https://github.com/WeeeHung)]","lastModifiedDate":"2023-09-28"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"[[portfolio](team/weeehung.md)]","lastModifiedDate":"2023-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"* Role: Developer","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"* Responsibilities: Deliverables and deadlines","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"nubnubyas"},"content":"### Zhang Yiheng","lastModifiedDate":"2023-10-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"nubnubyas"},"content":"\u003cimg src\u003d\"images/nubnubyas.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"nubnubyas"},"content":"[[github](http://github.com/nubnubyas)]","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"nubnubyas"},"content":"[[portfolio](team/nubnubyas.md)]","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"### Janssen Lau","lastModifiedDate":"2023-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"\u003cimg src\u003d\"images/kanna-1.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"[[github](http://github.com/kanna-1)] [[portfolio](team/kanna-1.md)]","lastModifiedDate":"2023-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"* Responsibilities: Documentation + Code Quality","lastModifiedDate":"2023-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"### Huang Yi Chee","lastModifiedDate":"2023-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"\u003cimg src\u003d\"images/hyc17003.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"[[github](http://github.com/hyc17003)]","lastModifiedDate":"2023-10-01"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"[[portfolio](team/hyc17003.md)]","lastModifiedDate":"2023-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"### Wang Zhi, Wren","lastModifiedDate":"2023-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"\u003cimg src\u003d\"images/wzwren.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"[[github](http://github.com/wzwren)]","lastModifiedDate":"2023-10-01"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"[[portfolio](team/wzwren.md)]","lastModifiedDate":"2023-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"* Responsibilities: Scheduling and Tracking","lastModifiedDate":"2023-10-01"}],"authorContributionMap":{"nubnubyas":4,"hyc17003":4,"WZWren":5,"-":38,"kanna-1":4,"WeeeHung":7}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"# HealthSync Developer Guide","lastModifiedDate":"2023-09-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"_{ list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well }_","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point).","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"**Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/BetterModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram.puml\" alt\u003d\"UndoSequenceDiagram\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"WZWren"},"content":"### Implementation of Single, optional Appointment Field","lastModifiedDate":"2023-10-26"},{"lineNumber":250,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":251,"author":{"gitId":"WZWren"},"content":"#### Proposed Implementation","lastModifiedDate":"2023-10-26"},{"lineNumber":252,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":253,"author":{"gitId":"WZWren"},"content":"_{Explain how `Appointment` as an optional field is implemented}_","lastModifiedDate":"2023-10-26"},{"lineNumber":254,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":255,"author":{"gitId":"WZWren"},"content":"_{Explain how `Appointment` is stored inside each `Person`}_","lastModifiedDate":"2023-10-26"},{"lineNumber":256,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":257,"author":{"gitId":"WZWren"},"content":"#### Design Considerations:","lastModifiedDate":"2023-10-26"},{"lineNumber":258,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":259,"author":{"gitId":"WZWren"},"content":"**Aspect: Parsing of `Appointment` Field**","lastModifiedDate":"2023-10-26"},{"lineNumber":260,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":261,"author":{"gitId":"WZWren"},"content":"* **Alternative 1 (current choice):** Use of the single `ap/` flag.","lastModifiedDate":"2023-10-26"},{"lineNumber":262,"author":{"gitId":"WZWren"},"content":"  * Pros: Easy to input on the user-end.","lastModifiedDate":"2023-10-26"},{"lineNumber":263,"author":{"gitId":"WZWren"},"content":"  * Cons: Hard to separate time fields, could be troublesome to implement a parse format string.","lastModifiedDate":"2023-10-26"},{"lineNumber":264,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":265,"author":{"gitId":"WZWren"},"content":"* **Alternative 2:** Use of 2 flags to denote start and end time for appointment.","lastModifiedDate":"2023-10-26"},{"lineNumber":266,"author":{"gitId":"WZWren"},"content":"  * Pros: Immediate clarity on what fields to implement, and how to parse input string.","lastModifiedDate":"2023-10-26"},{"lineNumber":267,"author":{"gitId":"WZWren"},"content":"  * Cons: Strong dependence between 2 flags requires more fail-state management.","lastModifiedDate":"2023-10-26"},{"lineNumber":268,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":269,"author":{"gitId":"WZWren"},"content":"**Aspect: Value to store `Appointment` as**","lastModifiedDate":"2023-10-26"},{"lineNumber":270,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":271,"author":{"gitId":"WZWren"},"content":"* **Alternative 1 (current choice):** Use of raw `String` format for Appointment","lastModifiedDate":"2023-10-26"},{"lineNumber":272,"author":{"gitId":"WZWren"},"content":"  * Pros: Far easier to parse and store as an object.","lastModifiedDate":"2023-10-26"},{"lineNumber":273,"author":{"gitId":"WZWren"},"content":"  * Cons: Hard to extend upon in future use-cases, such as reminders, etc.","lastModifiedDate":"2023-10-26"},{"lineNumber":274,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":275,"author":{"gitId":"WZWren"},"content":"* **Alternative 2:** Use of `DateTime`-related objects for Appointment","lastModifiedDate":"2023-10-26"},{"lineNumber":276,"author":{"gitId":"WZWren"},"content":"  * Pros: More direct paths of feature extension in the long run.","lastModifiedDate":"2023-10-26"},{"lineNumber":277,"author":{"gitId":"WZWren"},"content":"  * Cons: Translation to and from `DateTime` objects can be non-trivial.","lastModifiedDate":"2023-10-26"},{"lineNumber":278,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":279,"author":{"gitId":"WZWren"},"content":"We are currently in the process of switching to Alternative 2, as Alternative 1 was chosen primarily for its","lastModifiedDate":"2023-10-26"},{"lineNumber":280,"author":{"gitId":"WZWren"},"content":"fast implementation for the MVP.","lastModifiedDate":"2023-10-26"},{"lineNumber":281,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":282,"author":{"gitId":"nubnubyas"},"content":"### Delete Feature","lastModifiedDate":"2023-10-26"},{"lineNumber":283,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":284,"author":{"gitId":"nubnubyas"},"content":"#### Description","lastModifiedDate":"2023-10-26"},{"lineNumber":285,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":286,"author":{"gitId":"nubnubyas"},"content":"The `DeleteCommand` allows users to delete a patient\u0027s profile or a specified field from the patient\u0027s profile.","lastModifiedDate":"2023-10-26"},{"lineNumber":287,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":288,"author":{"gitId":"nubnubyas"},"content":"#### Implementation Details","lastModifiedDate":"2023-10-26"},{"lineNumber":289,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":290,"author":{"gitId":"nubnubyas"},"content":"The `DeleteCommand` is implemented as follows:","lastModifiedDate":"2023-10-26"},{"lineNumber":291,"author":{"gitId":"nubnubyas"},"content":"- **Command Word**: The command word for this feature is `delete`","lastModifiedDate":"2023-10-26"},{"lineNumber":292,"author":{"gitId":"nubnubyas"},"content":"- **Usage**: Users invoke the `DeleteCommand` by specifying the command word, followed by the name or IC of the person they wish to delete and any fields they wish to delete.","lastModifiedDate":"2023-10-26"},{"lineNumber":293,"author":{"gitId":"nubnubyas"},"content":"- **Command Format**: `delete n/Name or id/IC_Number[Fields] ...`","lastModifiedDate":"2023-10-26"},{"lineNumber":294,"author":{"gitId":"nubnubyas"},"content":"- **DeletePersonDescriptor**: The `DeleteCommand` relies on an `DeletePersonDescriptor` to capture which fields the user wishes to delete from the patient\u0027s profile. The descriptor will be passed to the `DeleteCommand` to execute the deletion.","lastModifiedDate":"2023-10-26"},{"lineNumber":295,"author":{"gitId":"nubnubyas"},"content":"- **Validation**: The `DeleteCommand` performs validation to ensure that the IC or Name provided is valid.","lastModifiedDate":"2023-10-26"},{"lineNumber":296,"author":{"gitId":"nubnubyas"},"content":"- **Execution**: When executed, the `DeleteCommand` identifies the patient to be deleted based on the provided name or IC. When the patient is found, if no there are no specified fields to delete, the entire patient profile will be deleted from the database. Otherwise, the specified fields will be deleted from the patient\u0027s profile.","lastModifiedDate":"2023-10-26"},{"lineNumber":297,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":298,"author":{"gitId":"nubnubyas"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2023-10-26"},{"lineNumber":299,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":300,"author":{"gitId":"nubnubyas"},"content":"\u003cpuml src\u003ddiagrams/DeleteActivityDiagram.puml width\u003d\"250\"/\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":301,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":302,"author":{"gitId":"nubnubyas"},"content":"#### Rationale","lastModifiedDate":"2023-10-26"},{"lineNumber":303,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":304,"author":{"gitId":"nubnubyas"},"content":"- **Flexibility**: The `DeleteCommand` provides flexibility to users, allowing them to choose what to be deleted from the patient\u0027s profile, instead of an \"all-or-nothing\" approach.","lastModifiedDate":"2023-10-26"},{"lineNumber":305,"author":{"gitId":"nubnubyas"},"content":"- **Data Accuracy**: The `DeleteCommand` allows users to delete outdated or incorrect information from the patient\u0027s profile, ensuring that the database is up-to-date and accurate.","lastModifiedDate":"2023-10-26"},{"lineNumber":306,"author":{"gitId":"nubnubyas"},"content":"- **Privacy and Compliance**: The `DeleteCommand` supports \"right to erasure\" under the PDPA, allowing users to delete patient\u0027s information from the database when requested.","lastModifiedDate":"2023-10-26"},{"lineNumber":307,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":308,"author":{"gitId":"nubnubyas"},"content":"#### Alternative Implementation","lastModifiedDate":"2023-10-26"},{"lineNumber":309,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":310,"author":{"gitId":"nubnubyas"},"content":"- **Alternative 1**: The `DeleteCommand` could be implemented as a `DeleteFieldCommand` and a `DeletePersonCommand`. The `DeleteFieldCommand` will delete the specified fields from the patient\u0027s profile, while the `DeletePersonCommand` will delete the entire patient profile from the database. This approach will require the user to invoke two commands to delete a patient\u0027s profile and the specified fields from the patient\u0027s profile. This approach is not chosen as it is less intuitive and requires more effort from the user.","lastModifiedDate":"2023-10-26"},{"lineNumber":311,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":312,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":313,"author":{"gitId":"WZWren"},"content":"### Addition of Interface for Find-type commands","lastModifiedDate":"2023-10-26"},{"lineNumber":314,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":315,"author":{"gitId":"WZWren"},"content":"#### Proposed Implementation","lastModifiedDate":"2023-10-26"},{"lineNumber":316,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":317,"author":{"gitId":"WZWren"},"content":"_{Explain how there is overlap in function for `find`, `delete`, `edit`}_","lastModifiedDate":"2023-10-26"},{"lineNumber":318,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":319,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"WeeeHung"},"content":"### Improved GUI","lastModifiedDate":"2023-10-27"},{"lineNumber":324,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":325,"author":{"gitId":"WeeeHung"},"content":"_The Graphical User Interface (GUI) is designed using JavaFX and employs a combination of HBox, VBox, and StackPane layouts. It also utilizes specific color choices to create an appealing and user-friendly interface._","lastModifiedDate":"2023-10-27"},{"lineNumber":326,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":327,"author":{"gitId":"WeeeHung"},"content":"_Developers can use this information as a reference when working with the HealthSync GUI code._","lastModifiedDate":"2023-10-27"},{"lineNumber":328,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":329,"author":{"gitId":"WeeeHung"},"content":"#### Layout Structure:","lastModifiedDate":"2023-10-27"},{"lineNumber":330,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":331,"author":{"gitId":"WeeeHung"},"content":"The primary layout structure for the HealthSync GUI is based on HBox and VBox containers, which allow for a flexible arrangement of UI elements.","lastModifiedDate":"2023-10-27"},{"lineNumber":332,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":333,"author":{"gitId":"WeeeHung"},"content":"1. HBox","lastModifiedDate":"2023-10-27"},{"lineNumber":334,"author":{"gitId":"WeeeHung"},"content":"   Location: The HBox is the top-level container in the GUI and spans the entire application window.","lastModifiedDate":"2023-10-27"},{"lineNumber":335,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":336,"author":{"gitId":"WeeeHung"},"content":"2. VBox","lastModifiedDate":"2023-10-27"},{"lineNumber":337,"author":{"gitId":"WeeeHung"},"content":"   Location: There are two VBox containers within the HBox, which are responsible for organizing various elements of the GUI.","lastModifiedDate":"2023-10-27"},{"lineNumber":338,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":339,"author":{"gitId":"WeeeHung"},"content":"StackPane","lastModifiedDate":"2023-10-27"},{"lineNumber":340,"author":{"gitId":"WeeeHung"},"content":"The StackPane is used to organize specific UI elements within the VBox containers. It allows for the layering of elements and effective management of screen real estate.","lastModifiedDate":"2023-10-27"},{"lineNumber":341,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":342,"author":{"gitId":"WeeeHung"},"content":"1. StackPane (Person List)","lastModifiedDate":"2023-10-27"},{"lineNumber":343,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":344,"author":{"gitId":"WeeeHung"},"content":"   Location: Inside the first VBox (fx:id\u003d\"personList\").","lastModifiedDate":"2023-10-27"},{"lineNumber":345,"author":{"gitId":"WeeeHung"},"content":"2. StackPane (Logger Panel)","lastModifiedDate":"2023-10-27"},{"lineNumber":346,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":347,"author":{"gitId":"WeeeHung"},"content":"    Location: Also inside the first VBox (fx:id\u003d\"personList\").","lastModifiedDate":"2023-10-27"},{"lineNumber":348,"author":{"gitId":"WeeeHung"},"content":"3. StackPane (Result Display, Command Box, and Status Bar)","lastModifiedDate":"2023-10-27"},{"lineNumber":349,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":350,"author":{"gitId":"WeeeHung"},"content":"    Location: These StackPanes are located inside the second VBox","lastModifiedDate":"2023-10-27"},{"lineNumber":351,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":352,"author":{"gitId":"WeeeHung"},"content":"#### Color Choice:","lastModifiedDate":"2023-10-27"},{"lineNumber":353,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":354,"author":{"gitId":"WeeeHung"},"content":"The HealthSync GUI utilizes specific color choices to create a visually pleasing and organized interface, while still maintaining the original Dark Theme.","lastModifiedDate":"2023-10-27"},{"lineNumber":355,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":356,"author":{"gitId":"WeeeHung"},"content":"1. Primary Colour: #43314E","lastModifiedDate":"2023-10-27"},{"lineNumber":357,"author":{"gitId":"WeeeHung"},"content":"2. Secondary Colour: #231335","lastModifiedDate":"2023-10-27"},{"lineNumber":358,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"kanna-1"},"content":"### Edit Feature","lastModifiedDate":"2023-10-25"},{"lineNumber":361,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":362,"author":{"gitId":"kanna-1"},"content":"#### Description","lastModifiedDate":"2023-10-25"},{"lineNumber":363,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":364,"author":{"gitId":"kanna-1"},"content":"The `EditCommand` allows users to modify the details of an existing person within the address book.","lastModifiedDate":"2023-10-25"},{"lineNumber":365,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":366,"author":{"gitId":"kanna-1"},"content":"#### Implementation Details","lastModifiedDate":"2023-10-25"},{"lineNumber":367,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":368,"author":{"gitId":"kanna-1"},"content":"The `EditCommand` is implemented as follows:","lastModifiedDate":"2023-10-25"},{"lineNumber":369,"author":{"gitId":"kanna-1"},"content":"- **Command Word**: The command word for this feature is `edit`.","lastModifiedDate":"2023-10-25"},{"lineNumber":370,"author":{"gitId":"kanna-1"},"content":"- **Usage**: Users invoke the `EditCommand` by specifying the command word, followed by the name or IC of the person they wish to edit and the fields they wish to modify.","lastModifiedDate":"2023-10-25"},{"lineNumber":371,"author":{"gitId":"kanna-1"},"content":"    - The command format is: `edit n/NAME or id/IC_NUMBER [Fields] ...`.","lastModifiedDate":"2023-10-25"},{"lineNumber":372,"author":{"gitId":"kanna-1"},"content":"- **EditPersonDescriptor**: The `EditCommand` relies on an `EditPersonDescriptor` to capture the details to edit the person with. This descriptor allows for updating various attributes of the person, such as phone, email, address, appointment, and medical histories.","lastModifiedDate":"2023-10-25"},{"lineNumber":373,"author":{"gitId":"kanna-1"},"content":"- **Validation**: The `EditCommand` performs validation to ensure at least one field to edit is provided. It also checks for consistency when both a name and IC are provided.","lastModifiedDate":"2023-10-25"},{"lineNumber":374,"author":{"gitId":"kanna-1"},"content":"- **Execution**: When executed, the `EditCommand` identifies the person to edit based on the provided name and/or IC. If the person is found, it creates an `editedPerson` with the desired changes. The person is then updated with the new details.","lastModifiedDate":"2023-10-25"},{"lineNumber":375,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":376,"author":{"gitId":"kanna-1"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2023-10-26"},{"lineNumber":377,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":378,"author":{"gitId":"kanna-1"},"content":"\u003cpuml src\u003d\"diagrams/EditActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":379,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":380,"author":{"gitId":"kanna-1"},"content":"#### Rationale","lastModifiedDate":"2023-10-25"},{"lineNumber":381,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":382,"author":{"gitId":"kanna-1"},"content":"- **Flexibility**: The `EditCommand` provides flexibility to users by allowing them to choose whether to edit a person by name or IC, as per their convenience.","lastModifiedDate":"2023-10-25"},{"lineNumber":383,"author":{"gitId":"kanna-1"},"content":"- **Maintaining Data Integrity**: The feature is designed to maintain the integrity of the address book by updating existing entries rather than creating new ones.","lastModifiedDate":"2023-10-25"},{"lineNumber":384,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":385,"author":{"gitId":"kanna-1"},"content":"#### Alternatives Considered","lastModifiedDate":"2023-10-25"},{"lineNumber":386,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":387,"author":{"gitId":"kanna-1"},"content":"- **Alternative 1**: Using Numbering Index to specify the person to edit. In this approach, users would provide the index of the person based on the list instead of specifying a name or IC. For example, they could use a command like `edit 1 p/93029393` to edit the first person of the list with the phone number.","lastModifiedDate":"2023-10-25"},{"lineNumber":388,"author":{"gitId":"kanna-1"},"content":"    - **Pros**:","lastModifiedDate":"2023-10-25"},{"lineNumber":389,"author":{"gitId":"kanna-1"},"content":"        - **Simplicity**: Using an index is straightforward and doesn\u0027t require specifying a name or IC.","lastModifiedDate":"2023-10-25"},{"lineNumber":390,"author":{"gitId":"kanna-1"},"content":"        - **Reduced Ambiguity**: Using an index avoids potential ambiguity when multiple individuals have the same name.","lastModifiedDate":"2023-10-25"},{"lineNumber":391,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":392,"author":{"gitId":"kanna-1"},"content":"    - **Cons**:","lastModifiedDate":"2023-10-25"},{"lineNumber":393,"author":{"gitId":"kanna-1"},"content":"         - **Lack of Context**: Users might find it challenging to remember the index of a particular person, especially in a large address book.","lastModifiedDate":"2023-10-25"},{"lineNumber":394,"author":{"gitId":"kanna-1"},"content":"         - **Potential Errors**: If the list of persons changes (e.g., due to deletions or additions), the numbering index could become outdated, leading to errors.","lastModifiedDate":"2023-10-25"},{"lineNumber":395,"author":{"gitId":"kanna-1"},"content":"         - **Limited Identifiability**: Index numbers do not provide any context about the person, which may be confusing when there are multiple people with the same name or similar information.","lastModifiedDate":"2023-10-25"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"hyc17003"},"content":"### Find Feature","lastModifiedDate":"2023-10-27"},{"lineNumber":398,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":399,"author":{"gitId":"hyc17003"},"content":"#### Description","lastModifiedDate":"2023-10-27"},{"lineNumber":400,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":401,"author":{"gitId":"hyc17003"},"content":"The `FindCommand` allows users to find existing person(s) within the patient list, using their name or NRIC, and view their field data.","lastModifiedDate":"2023-10-27"},{"lineNumber":402,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":403,"author":{"gitId":"hyc17003"},"content":"#### Implementation Details","lastModifiedDate":"2023-10-27"},{"lineNumber":404,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":405,"author":{"gitId":"hyc17003"},"content":"The `FindCommand` is implemented as follows:","lastModifiedDate":"2023-10-27"},{"lineNumber":406,"author":{"gitId":"hyc17003"},"content":"- **Command Word**: The command word for this feature is `find`.","lastModifiedDate":"2023-10-27"},{"lineNumber":407,"author":{"gitId":"hyc17003"},"content":"- **Usage**: Users invoke the `FindCommand` by specifying the command word, followed by the name or NRIC of the person(s) they wish to find.","lastModifiedDate":"2023-10-27"},{"lineNumber":408,"author":{"gitId":"hyc17003"},"content":"    - The command format is: `find n/NAME` or `find id/IC_NUMBER`.","lastModifiedDate":"2023-10-27"},{"lineNumber":409,"author":{"gitId":"hyc17003"},"content":"- **`execute` method**: The `FindCommand` executes the search by using the specified predicates (`NameContainsKeywordsPredicate` or `IdContainsKeywordsPredicate`) to filter and list all persons matching the search criteria.","lastModifiedDate":"2023-10-27"},{"lineNumber":410,"author":{"gitId":"hyc17003"},"content":"- **Validation**: The `FindCommand` performs validation to ensure at least one keyword is provided. It searches based on either name or NRIC, to speed up the search and prevent possible conflicts if name and NRIC do not match each other.","lastModifiedDate":"2023-10-27"},{"lineNumber":411,"author":{"gitId":"hyc17003"},"content":"- **Execution**: When executed, the `FindCommand` identifies the person(s) being searched for based on the provided name or NRIC. If a name is provided as keyword, a `FindCommand(NameContainsKeywordsPredicate)` is created, and if an NRIC is provided as keyword, a `FindCommand(IdContainsKeywordsPredicate)` is created. `updateFilteredPersonList` will then update the filter of the filtered person list to filter by the given name or NRIC predicate (keyword).","lastModifiedDate":"2023-10-27"},{"lineNumber":412,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":413,"author":{"gitId":"hyc17003"},"content":"The following sequence diagram shows how the find operation works:","lastModifiedDate":"2023-10-27"},{"lineNumber":414,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":415,"author":{"gitId":"hyc17003"},"content":"\u003cpuml src\u003d\"diagrams/FindSequenceDiagram.puml\" width\u003d\"400\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":416,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":417,"author":{"gitId":"hyc17003"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2023-10-27"},{"lineNumber":418,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":419,"author":{"gitId":"hyc17003"},"content":"\u003cpuml src\u003d\"diagrams/FindActivityDiagram.puml\" width\u003d\"500\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":420,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":421,"author":{"gitId":"hyc17003"},"content":"#### Rationale","lastModifiedDate":"2023-10-27"},{"lineNumber":422,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":423,"author":{"gitId":"hyc17003"},"content":"- **Flexibility**: The `FindCommand` provides flexibility to users by allowing them to choose whether to find a person by name or NRIC, whichever is faster or available.","lastModifiedDate":"2023-10-27"},{"lineNumber":424,"author":{"gitId":"hyc17003"},"content":"- **User Experience**: The keyword matching is case-insensitive, making the search faster and more user-friendly.","lastModifiedDate":"2023-10-27"},{"lineNumber":425,"author":{"gitId":"hyc17003"},"content":"- **Data Integrity**: The feature is designed to maintain the integrity of the patient list by not changing any of the patient data.","lastModifiedDate":"2023-10-27"},{"lineNumber":426,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":427,"author":{"gitId":"hyc17003"},"content":"#### Alternatives Considered","lastModifiedDate":"2023-10-27"},{"lineNumber":428,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":429,"author":{"gitId":"hyc17003"},"content":"- **Alternative 1**: Using only name to find patients.","lastModifiedDate":"2023-10-27"},{"lineNumber":430,"author":{"gitId":"hyc17003"},"content":"    - **Pros**:","lastModifiedDate":"2023-10-27"},{"lineNumber":431,"author":{"gitId":"hyc17003"},"content":"        - **Standardisation**: The command format is fixed and will always only be `find n/NAME`, which may be easier to remember.","lastModifiedDate":"2023-10-27"},{"lineNumber":432,"author":{"gitId":"hyc17003"},"content":"        - **User Convenience**: Searching primarily by name is a common way to look up a patient in a healthcare system and users may be more familiar with this method.","lastModifiedDate":"2023-10-27"},{"lineNumber":433,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":434,"author":{"gitId":"hyc17003"},"content":"    - **Cons**:","lastModifiedDate":"2023-10-27"},{"lineNumber":435,"author":{"gitId":"hyc17003"},"content":"        - **Potential Errors**: If patients\u0027 names change over time, there may be failed searches and other identifiers, like NRIC, may be needed.","lastModifiedDate":"2023-10-27"},{"lineNumber":436,"author":{"gitId":"hyc17003"},"content":"        - **Limited Identifiability**: If multiple patients share the same name, they will be indistinguishable name-wise and other identifiers, like NRIC, may be needed.","lastModifiedDate":"2023-10-27"},{"lineNumber":437,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":438,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":439,"author":{"gitId":"hyc17003"},"content":"- **Alternative 2**: Requiring both name and NRIC keywords to find patients within a single find command.","lastModifiedDate":"2023-10-27"},{"lineNumber":440,"author":{"gitId":"hyc17003"},"content":"  - **Pros**:","lastModifiedDate":"2023-10-27"},{"lineNumber":441,"author":{"gitId":"hyc17003"},"content":"    - **Enhanced Precision**: Combining both name and NRIC is a more unique identification method, making it easier to find a patient sharing a name with other patients.","lastModifiedDate":"2023-10-27"},{"lineNumber":442,"author":{"gitId":"hyc17003"},"content":"    - **Patient Verification**: Searching by both criteria adds a layer of verification, ensuring the correct patient is selected.","lastModifiedDate":"2023-10-27"},{"lineNumber":443,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":444,"author":{"gitId":"hyc17003"},"content":"  - **Cons**:","lastModifiedDate":"2023-10-27"},{"lineNumber":445,"author":{"gitId":"hyc17003"},"content":"    - **Additional User Effort**: Users need to provide both name and NRIC, which may take longer or require extra effort, especially if they only have one piece of information readily available.","lastModifiedDate":"2023-10-27"},{"lineNumber":446,"author":{"gitId":"hyc17003"},"content":"    - **Increased Ambiguity**: If the name keyword does not match the NRIC keyword, this may lead to potential confusion in which patient is being searched for.","lastModifiedDate":"2023-10-27"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":448,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":451,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":453,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":454,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":455,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":456,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"WeeeHung"},"content":"* has a need to manage a large database of patient details, which includes health records, contact details, and appointment schedules","lastModifiedDate":"2023-09-28"},{"lineNumber":467,"author":{"gitId":"WeeeHung"},"content":"* cannot spend more than 2-3 minutes registering/accessing a database system","lastModifiedDate":"2023-09-28"},{"lineNumber":468,"author":{"gitId":"WeeeHung"},"content":"* work is fast-paced and requires quick access to patient details","lastModifiedDate":"2023-09-28"},{"lineNumber":469,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":472,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"WeeeHung"},"content":"**Value proposition**:","lastModifiedDate":"2023-09-28"},{"lineNumber":475,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":476,"author":{"gitId":"WeeeHung"},"content":"HealthSync caters to counter staff, enabling them to register and access patient information within 2-3 minutes. It offers a user-friendly platform, optimizing contact management, patient tracking, department coordination, and health record access, ensuring efficient patient management, appointment scheduling, and comprehensive health record retrieval, enhancing care delivery and saving time.","lastModifiedDate":"2023-09-28"},{"lineNumber":477,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"| Priority | As a …​                                         | I want to …​                                        | So that I can…​                                                           |","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"WeeeHung"},"content":"|----------|------------------------------------------------|----------------------------------------------------|--------------------------------------------------------------------------|","lastModifiedDate":"2023-09-28"},{"lineNumber":485,"author":{"gitId":"WeeeHung"},"content":"| `* * *`  | beginner of the app for an important operation | auto-save all my data                              | not lose my data when something goes wrong                               |","lastModifiedDate":"2023-09-28"},{"lineNumber":486,"author":{"gitId":"WeeeHung"},"content":"| `* * *`  | busy frontdesk worker                          | retrieve patient information                       | answer their queries                                                     |","lastModifiedDate":"2023-09-28"},{"lineNumber":487,"author":{"gitId":"WeeeHung"},"content":"| `* * *`  | frontdesk worker                               | create patient entries                             | add entries when new patients visit                                      |","lastModifiedDate":"2023-09-28"},{"lineNumber":488,"author":{"gitId":"WeeeHung"},"content":"| `* * *`  | frontdesk worker                               | find a patient by name                             | locate details of persons without having to go through the entire list   |","lastModifiedDate":"2023-09-28"},{"lineNumber":489,"author":{"gitId":"WeeeHung"},"content":"| `* * *`  | frontdesk worker                               | delete a patient entry                             | clean and update the database when patient no longer exist               |","lastModifiedDate":"2023-09-28"},{"lineNumber":490,"author":{"gitId":"WeeeHung"},"content":"| `* * *`  | frontdesk worker                               | edit patient entries                               | update their details, especially for upcoming appointment dates          |","lastModifiedDate":"2023-09-28"},{"lineNumber":491,"author":{"gitId":"WeeeHung"},"content":"| `* * `   | a new user of the app                          | view hints on commonly used commands               | be familiar with the app as soon as possible                             |","lastModifiedDate":"2023-09-28"},{"lineNumber":492,"author":{"gitId":"WeeeHung"},"content":"| `* * `   | a new user of the app                          | view preloaded sample data                         | know how the basic UI look like when it is populated                     |","lastModifiedDate":"2023-09-28"},{"lineNumber":493,"author":{"gitId":"WeeeHung"},"content":"| `* * `   | frontdesk worker                               | use app with shortcuts                             | get my task done very quickly                                            |","lastModifiedDate":"2023-09-28"},{"lineNumber":494,"author":{"gitId":"WeeeHung"},"content":"| `* * `   | frontdesk worker                               | have calendar-like UI to create appointments       | show calendar to patients and allow smoother appointment booking process |","lastModifiedDate":"2023-09-28"},{"lineNumber":495,"author":{"gitId":"WeeeHung"},"content":"| `* * `   | frontdesk worker                               | see conflicts in appointment schedules             | seamlessly schedule appointments for patients                            |","lastModifiedDate":"2023-09-28"},{"lineNumber":496,"author":{"gitId":"WeeeHung"},"content":"| `* * `   | frontdesk worker                               | reminder when patient\u0027s appointment is coming soon | call and remind patients accordingly                                     |","lastModifiedDate":"2023-09-28"},{"lineNumber":497,"author":{"gitId":"WeeeHung"},"content":"| `* * `   | healthcare provider                            | document patient encounters(ie. exam notes)        | maintain up-to-date records of patient information                       |","lastModifiedDate":"2023-09-28"},{"lineNumber":498,"author":{"gitId":"WeeeHung"},"content":"| `* `     | a new user of the app                          | have physical UI Buttons                           | use to execute tasks before I\u0027m familiar with shortcuts                  |","lastModifiedDate":"2023-09-28"},{"lineNumber":499,"author":{"gitId":"WeeeHung"},"content":"| `* `     | frontdesk worker                               | have a very optimised app                          | do my task and have data reading almost instantly (O(1))                 |","lastModifiedDate":"2023-09-28"},{"lineNumber":500,"author":{"gitId":"WeeeHung"},"content":"| `* `     | frontdesk worker                               | add tags to patients                               | view and filter patients accordingly                                     |","lastModifiedDate":"2023-09-28"},{"lineNumber":501,"author":{"gitId":"WeeeHung"},"content":"| `* `     | frontdesk worker                               | leverage on database statistics                    | analyse data (ie. how many appointments booked/ month for doctors)        |","lastModifiedDate":"2023-09-28"},{"lineNumber":502,"author":{"gitId":"WeeeHung"},"content":"| `* `     | frontdesk worker                               | save back-up or archive patient details somewhere  | maintain a fast application while still having data securely stored      |","lastModifiedDate":"2023-09-28"},{"lineNumber":503,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"WZWren"},"content":"(For all use cases below, the **System** is the `HealthSync` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2023-10-02"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"WZWren"},"content":"**Use case: UC1 - Add a patient**","lastModifiedDate":"2023-10-02"},{"lineNumber":512,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"WZWren"},"content":"1.  User requests to add a patient into the list.","lastModifiedDate":"2023-10-02"},{"lineNumber":516,"author":{"gitId":"WZWren"},"content":"2.  HealthSync adds the target patient into the list","lastModifiedDate":"2023-10-02"},{"lineNumber":517,"author":{"gitId":"WZWren"},"content":"    and displays the patient inside the updated list.","lastModifiedDate":"2023-10-02"},{"lineNumber":518,"author":{"gitId":"WZWren"},"content":"3.  HealthSync \u003cu\u003eperforms an auto-save (UC0A)\u003c/u\u003e.","lastModifiedDate":"2023-10-02"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"WZWren"},"content":"* 1a. The user does not specify one or more of the compulsory fields.","lastModifiedDate":"2023-10-02"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":526,"author":{"gitId":"WZWren"},"content":"  * 1a1. HealthSync shows an error message.","lastModifiedDate":"2023-10-02"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":528,"author":{"gitId":"WZWren"},"content":"    Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":529,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":530,"author":{"gitId":"WZWren"},"content":"  * 1b. The user specifies an IC that is already exists in the current list.","lastModifiedDate":"2023-10-03"},{"lineNumber":531,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":532,"author":{"gitId":"WZWren"},"content":"    * 1b1. HealthSync shows an error message.","lastModifiedDate":"2023-10-02"},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":534,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":536,"author":{"gitId":"WZWren"},"content":"**Use case: UC2 - Delete a patient**","lastModifiedDate":"2023-10-02"},{"lineNumber":537,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":538,"author":{"gitId":"WZWren"},"content":"**MSS**","lastModifiedDate":"2023-10-02"},{"lineNumber":539,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":540,"author":{"gitId":"WZWren"},"content":"1.  User requests to delete a specific patient based on an identifier from the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":541,"author":{"gitId":"WZWren"},"content":"2.  HealthSync searches for the patient in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":542,"author":{"gitId":"WZWren"},"content":"3.  HealthSync deletes the specified patient from the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":543,"author":{"gitId":"WZWren"},"content":"4.  HealthSync \u003cu\u003eperforms an auto-save (UC0A)\u003c/u\u003e.","lastModifiedDate":"2023-10-03"},{"lineNumber":544,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"WZWren"},"content":"* 2a. The user does not exist in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":550,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":551,"author":{"gitId":"WZWren"},"content":"    * 2a1. HealthSync shows an error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":552,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"      Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"WZWren"},"content":"* 2b. HealthSync finds more than 1 patient for the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":556,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":557,"author":{"gitId":"WZWren"},"content":"    * 2b1. HealthSync shows a list of patients matching the identifier in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":558,"author":{"gitId":"WZWren"},"content":"    * 2b2. User indicates the patient to delete in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":559,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":560,"author":{"gitId":"WZWren"},"content":"      Use case continues from step 3.","lastModifiedDate":"2023-10-03"},{"lineNumber":561,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":562,"author":{"gitId":"WZWren"},"content":"**Use case: UC3 - Delete fields from a patient**","lastModifiedDate":"2023-10-03"},{"lineNumber":563,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":564,"author":{"gitId":"WZWren"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":565,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":566,"author":{"gitId":"WZWren"},"content":"1.  User requests to delete fields from a specific patient based","lastModifiedDate":"2023-10-03"},{"lineNumber":567,"author":{"gitId":"WZWren"},"content":"    on an identifier from the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":568,"author":{"gitId":"WZWren"},"content":"2.  HealthSync searches for the patient in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":569,"author":{"gitId":"WZWren"},"content":"3.  HealthSync deletes the fields of a specified patient from the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":570,"author":{"gitId":"WZWren"},"content":"4.  HealthSync \u003cu\u003eperforms an auto-save (UC0A)\u003c/u\u003e.","lastModifiedDate":"2023-10-03"},{"lineNumber":571,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":572,"author":{"gitId":"WZWren"},"content":"    Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":573,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":574,"author":{"gitId":"WZWren"},"content":"**Extensions**","lastModifiedDate":"2023-10-03"},{"lineNumber":575,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":576,"author":{"gitId":"WZWren"},"content":"* 1a. The user does not specify any fields they want to delete.","lastModifiedDate":"2023-10-03"},{"lineNumber":577,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":578,"author":{"gitId":"WZWren"},"content":"    * 1a1. HealthSync \u003cu\u003edeletes the patient from the list instead (UC2).\u003c/u\u003e","lastModifiedDate":"2023-10-03"},{"lineNumber":579,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":580,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":581,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":582,"author":{"gitId":"WZWren"},"content":"* 1b. The user attempts to delete a name/IC field.","lastModifiedDate":"2023-10-03"},{"lineNumber":583,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":584,"author":{"gitId":"WZWren"},"content":"    * 1b1. HealthSync shows an error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":585,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":586,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":587,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":588,"author":{"gitId":"WZWren"},"content":"* 2a. The user does not exist in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":589,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":590,"author":{"gitId":"WZWren"},"content":"    * 2a1. HealthSync shows an error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":591,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":592,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-03"},{"lineNumber":593,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":594,"author":{"gitId":"WZWren"},"content":"* 2b. HealthSync finds more than 1 patient for the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":595,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":596,"author":{"gitId":"WZWren"},"content":"    * 2b1. HealthSync shows a list of patients matching the identifier in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":597,"author":{"gitId":"WZWren"},"content":"    * 2b2. User indicates the patient to delete from in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":598,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":599,"author":{"gitId":"WZWren"},"content":"      Use case continues from step 3.","lastModifiedDate":"2023-10-03"},{"lineNumber":600,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":601,"author":{"gitId":"WZWren"},"content":"**Use case: UC4 - Edit a patient**","lastModifiedDate":"2023-10-03"},{"lineNumber":602,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":603,"author":{"gitId":"WZWren"},"content":"**MSS**","lastModifiedDate":"2023-10-02"},{"lineNumber":604,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":605,"author":{"gitId":"nubnubyas"},"content":"1.  User requests to change a specific user\u0027s fields","lastModifiedDate":"2023-10-05"},{"lineNumber":606,"author":{"gitId":"nubnubyas"},"content":"based on an identifier","lastModifiedDate":"2023-10-05"},{"lineNumber":607,"author":{"gitId":"WZWren"},"content":"    with a new value in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":608,"author":{"gitId":"WZWren"},"content":"2.  HealthSync searches for the patient in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":609,"author":{"gitId":"WZWren"},"content":"3.  HealthSync edits the specified patient\u0027s fields in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":610,"author":{"gitId":"WZWren"},"content":"4.  HealthSync \u003cu\u003eperforms an auto-save (UC0A)\u003c/u\u003e.","lastModifiedDate":"2023-10-03"},{"lineNumber":611,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":612,"author":{"gitId":"WZWren"},"content":"    Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":613,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":614,"author":{"gitId":"WZWren"},"content":"**Extensions**","lastModifiedDate":"2023-10-02"},{"lineNumber":615,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":616,"author":{"gitId":"WZWren"},"content":"* 1a. The user does not specify any fields they want to edit.","lastModifiedDate":"2023-10-03"},{"lineNumber":617,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":618,"author":{"gitId":"WZWren"},"content":"    * 1a1. HealthSync shows an error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":619,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":620,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":621,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":622,"author":{"gitId":"WZWren"},"content":"* 1b. The user specifies duplicate fields they want to edit.","lastModifiedDate":"2023-10-03"},{"lineNumber":623,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":624,"author":{"gitId":"WZWren"},"content":"    * 1b1. HealthSync shows an error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":625,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":626,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":627,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":628,"author":{"gitId":"WZWren"},"content":"* 1c. The user specifies no value in a name/IC field that they wish to edit.","lastModifiedDate":"2023-10-03"},{"lineNumber":629,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":630,"author":{"gitId":"WZWren"},"content":"    * 1c1. HealthSync shows an error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":631,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":632,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":633,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":634,"author":{"gitId":"WZWren"},"content":"* 1d. The user attempts to change the IC of the patient to one that already","lastModifiedDate":"2023-10-03"},{"lineNumber":635,"author":{"gitId":"WZWren"},"content":"      exists in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":636,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":637,"author":{"gitId":"WZWren"},"content":"    * 1d1. HealthSync shows an error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":638,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":639,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":640,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":641,"author":{"gitId":"WZWren"},"content":"* 2a. The user does not exist in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":642,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":643,"author":{"gitId":"WZWren"},"content":"    * 2a1. HealthSync shows an error message.","lastModifiedDate":"2023-10-03"},{"lineNumber":644,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":645,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":646,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":647,"author":{"gitId":"WZWren"},"content":"* 2b. HealthSync finds more than 1 patient for the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":648,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":649,"author":{"gitId":"WZWren"},"content":"    * 2b1. HealthSync shows a list of patients matching the identifier in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":650,"author":{"gitId":"WZWren"},"content":"    * 2b2. User indicates the patient to edit in the list.","lastModifiedDate":"2023-10-03"},{"lineNumber":651,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":652,"author":{"gitId":"WZWren"},"content":"      Use case continues from step 3.","lastModifiedDate":"2023-10-03"},{"lineNumber":653,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":654,"author":{"gitId":"WZWren"},"content":"**Use case: UC5 - Find a patient**","lastModifiedDate":"2023-10-03"},{"lineNumber":655,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":656,"author":{"gitId":"WZWren"},"content":"**MSS**","lastModifiedDate":"2023-10-02"},{"lineNumber":657,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":658,"author":{"gitId":"WZWren"},"content":"1.  User requests for matches to the given query.","lastModifiedDate":"2023-10-02"},{"lineNumber":659,"author":{"gitId":"WZWren"},"content":"2.  HealthSync displays the list of patients matching the query.","lastModifiedDate":"2023-10-02"},{"lineNumber":660,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":661,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":662,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":663,"author":{"gitId":"WZWren"},"content":"**Extensions**","lastModifiedDate":"2023-10-02"},{"lineNumber":664,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":665,"author":{"gitId":"WZWren"},"content":"* 1a. No matches exist in the list.","lastModifiedDate":"2023-10-02"},{"lineNumber":666,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":667,"author":{"gitId":"WZWren"},"content":"    * 1a1. HealthSync displays a \"no matches found\" message.","lastModifiedDate":"2023-10-02"},{"lineNumber":668,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":669,"author":{"gitId":"WZWren"},"content":"      Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":670,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":671,"author":{"gitId":"WZWren"},"content":"**Use case: UC0A - Auto-save**","lastModifiedDate":"2023-10-02"},{"lineNumber":672,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":673,"author":{"gitId":"WZWren"},"content":"**Actors:** Operating System (OS)","lastModifiedDate":"2023-10-02"},{"lineNumber":674,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":675,"author":{"gitId":"WZWren"},"content":"**MSS**","lastModifiedDate":"2023-10-02"},{"lineNumber":676,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":677,"author":{"gitId":"WZWren"},"content":"1.  HealthSync requests for permissions from the OS to access its save location.","lastModifiedDate":"2023-10-02"},{"lineNumber":678,"author":{"gitId":"WZWren"},"content":"2.  OS grants HealthSync permission to access its save location.","lastModifiedDate":"2023-10-02"},{"lineNumber":679,"author":{"gitId":"WZWren"},"content":"3.  HealthSync saves the session data into the save location.","lastModifiedDate":"2023-10-02"},{"lineNumber":680,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":681,"author":{"gitId":"WZWren"},"content":"    Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":682,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":683,"author":{"gitId":"WZWren"},"content":"**Extensions**","lastModifiedDate":"2023-10-02"},{"lineNumber":684,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":685,"author":{"gitId":"WZWren"},"content":"* 1a. OS does not grant HealthSync save location permissions.","lastModifiedDate":"2023-10-02"},{"lineNumber":686,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":687,"author":{"gitId":"WZWren"},"content":"    * 1a1. HealthSync shows an error message.","lastModifiedDate":"2023-10-02"},{"lineNumber":688,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":689,"author":{"gitId":"WZWren"},"content":"    Use case ends.","lastModifiedDate":"2023-10-02"},{"lineNumber":690,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":691,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":692,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":693,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":694,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":695,"author":{"gitId":"kanna-1"},"content":"1. The application should be compatible with the designated operating systems and hardware configurations, as specified in the system requirements.","lastModifiedDate":"2023-10-01"},{"lineNumber":696,"author":{"gitId":"kanna-1"},"content":"2. The application should respond promptly to user inputs, with minimal latency and loading times for data retrieval and processing.","lastModifiedDate":"2023-10-01"},{"lineNumber":697,"author":{"gitId":"kanna-1"},"content":"3. The user interface should be user-friendly and intuitive, designed to optimize the workflow of frontdesk staff who need to complete tasks within 2-3 minutes.","lastModifiedDate":"2023-10-01"},{"lineNumber":698,"author":{"gitId":"kanna-1"},"content":"4. The application should be designed to handle an increasing volume of patient records efficiently without noticeable performance degradation.","lastModifiedDate":"2023-10-01"},{"lineNumber":699,"author":{"gitId":"kanna-1"},"content":"5. Ensure that the application complies with PDPA and healthcare regulations.","lastModifiedDate":"2023-10-01"},{"lineNumber":700,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":701,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":702,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":703,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":704,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":705,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":706,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":707,"author":{"gitId":"nubnubyas"},"content":"* **Architecture Diagram**: A visual representation that illustrates the high-level design of the application","lastModifiedDate":"2023-10-06"},{"lineNumber":708,"author":{"gitId":"nubnubyas"},"content":"* **Main**: The function responsible for launching the application","lastModifiedDate":"2023-10-06"},{"lineNumber":709,"author":{"gitId":"nubnubyas"},"content":"* **UI**: Stands for User Interface","lastModifiedDate":"2023-10-06"},{"lineNumber":710,"author":{"gitId":"nubnubyas"},"content":"* **API**: Stands for Application Programming Interface, it defines the methods and protocols of the application","lastModifiedDate":"2023-10-06"},{"lineNumber":711,"author":{"gitId":"nubnubyas"},"content":"* **ObservableList**: A list implementation that allows other objects to observe and be notified when there is changes","lastModifiedDate":"2023-10-06"},{"lineNumber":712,"author":{"gitId":"nubnubyas"},"content":"* **JSON**: Stands for JavaScript Object Notation, it is a lightweight data interchange format","lastModifiedDate":"2023-10-06"},{"lineNumber":713,"author":{"gitId":"nubnubyas"},"content":"* **Classes**: Defines an object in the application","lastModifiedDate":"2023-10-06"},{"lineNumber":714,"author":{"gitId":"nubnubyas"},"content":"* **CLI**: Stands for Command-Line Interface, it is a text-based interface for interaction with computer system or software applications through use of commands","lastModifiedDate":"2023-10-06"},{"lineNumber":715,"author":{"gitId":"nubnubyas"},"content":"* **IC**: Stands for Identity Card","lastModifiedDate":"2023-10-06"},{"lineNumber":716,"author":{"gitId":"nubnubyas"},"content":"* **Database**: A structured collection of data organized and stored in computer system","lastModifiedDate":"2023-10-06"},{"lineNumber":717,"author":{"gitId":"nubnubyas"},"content":"* **Latency**: The time delay between user\u0027s action or request and the system\u0027s response","lastModifiedDate":"2023-10-06"},{"lineNumber":718,"author":{"gitId":"nubnubyas"},"content":"* **PDPA**: Stands for Personal Data Protection Act, it is the legislation related to the protection of personal data and privacy","lastModifiedDate":"2023-10-06"},{"lineNumber":719,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":720,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":721,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":722,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":723,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":724,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":725,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":726,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":727,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":728,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":729,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":730,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":731,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":732,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":733,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":734,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":735,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":736,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":737,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":738,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":739,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":740,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":741,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":742,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":743,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":744,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":745,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":746,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":747,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":748,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":749,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":750,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":751,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":752,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":753,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":754,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":755,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":756,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":757,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":758,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":759,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":760,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":761,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":762,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":763,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":764,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":765,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":766,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":767,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":768,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":769,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":770,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":771,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":772,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":773,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":774,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"hyc17003":51,"nubnubyas":46,"WZWren":191,"-":382,"kanna-1":41,"WeeeHung":63}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"nubnubyas"},"content":"# HealthSync User Guide","lastModifiedDate":"2023-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"nubnubyas"},"content":"\u003e \"HealthSync will be your patient’s best friend, the frontdesk’s right hand, and time’s biggest foe.\" - Yi Chee, Developer, HealthSync","lastModifiedDate":"2023-11-03"},{"lineNumber":10,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-03"},{"lineNumber":11,"author":{"gitId":"nubnubyas"},"content":"HealthSync is a **powerful desktop application designed specifically for clinic assistants in small private clinics.** It offers a unique combination of a Command Line Interface (CLI) and a Graphical User Interface (GUI) to efficiently manage and organize patient details. If you\u0027re a fast typist, HealthSync can streamline your workflow and help you handle patient information more effectively than traditional GUI apps.","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"nubnubyas"},"content":"## Why HealthSync?","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"nubnubyas"},"content":"1. **Tailored for Front Desk Workers**: HealthSync is built with the needs of front desk workers in mind. It provides a user-friendly interface that simplifies patient management tasks, allowing you to focus on providing excellent service to patients.","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":"2. **Fast and Efficient**: With HealthSync\u0027s CLI, you can quickly navigate through commands and perform actions without the need to rely solely on a mouse. This saves you valuable time and makes patient data management faster and more efficient.","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"nubnubyas"},"content":"3. **Comprehensive Patient Details**: HealthSync enables you to store and access comprehensive patient details, including personal information, medical history, appointments, and more. All the essential information you need is organized in one centralized location.","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"nubnubyas"},"content":"4. **Intuitive GUI Experience**: HealthSync\u0027s GUI complements the CLI by providing a visual representation of patient data. The GUI is intuitive and user-friendly, making it easy to view and update patient information with just a few keys.","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"## [Quick start](#quick-start)","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"1. Ensure you have [Java](#java) `11` or above installed in your Computer.","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"2. Download the latest `healthsync.jar` from [here](https://github.com/AY2324S1-CS2103T-T14-3/tp/releases).","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your HealthSync.","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"4. Open a command terminal, `cd` into the folder you put the JAR file in, and use the `java -jar healthsync.jar`","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"   command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"   ![Ui](images/quickstartGUI.png)","lastModifiedDate":"2023-11-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"Here are the icons you will see throughout this User Guide and what they mean:","lastModifiedDate":"2023-11-06"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"- :bulb: Tips and tricks that will help you get the most out of HealthSync","lastModifiedDate":"2023-11-08"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"- :wrench: Example usages of the feature that will help you save time","lastModifiedDate":"2023-11-06"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"- :exclamation: Things to take note of while reading the User Guide","lastModifiedDate":"2023-11-08"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"- :warning: Things to take caution with, as they may affect your use of HealthSync","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":53,"author":{"gitId":"kanna-1"},"content":"\u003e :bulb: The main application consists of the:","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"\u003e 1. [Menu Sidebar](#menu-sidebar) `*`","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"WeeeHung"},"content":"\u003e 2. [Patient List View](#patient-list-view)","lastModifiedDate":"2023-11-07"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"\u003e 3. [Logger Tab](#logger-tab)","lastModifiedDate":"2023-11-07"},{"lineNumber":57,"author":{"gitId":"WeeeHung"},"content":"\u003e 4. [Output Box](#output-box)","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"WeeeHung"},"content":"\u003e 5. [Command Box](#command-box)","lastModifiedDate":"2023-11-07"},{"lineNumber":59,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"WeeeHung"},"content":"\u003e :bulb: Click on the component in the list above to learn more about it.","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"\u003e :warning: **`*`**: The buttons that are in grey and not pressable in the Menu Sidebar are currently not functional and will be implemented in a future version of HealthSync.","lastModifiedDate":"2023-11-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"nubnubyas"},"content":"\u003e:bulb: Longer outputs have to scrolled to be viewed.","lastModifiedDate":"2023-11-07"},{"lineNumber":65,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":66,"author":{"gitId":"kanna-1"},"content":"5. Type the command in the command box and press Enter to execute it.","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"WZWren"},"content":"   e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"WZWren"},"content":"   * `list` : Lists all patients.","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"nubnubyas"},"content":"   * `add n/John Doe id/S8765432A p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 ap/17-10-2023 11:00 13:00 m/hypochondriac` : Adds a patient named `John Doe` with the relevant field details to HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"hyc17003"},"content":"   * `delete n/Alex Yeoh` : Deletes Alex Yeoh\u0027s details from the current list.","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"WZWren"},"content":"   * `clear` : Deletes all patients.","lastModifiedDate":"2023-10-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"kanna-1"},"content":"   * `exit` : Exits HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"kanna-1"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"WeeeHung"},"content":"## [Features](#features)","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"WZWren"},"content":"    Confused by unfamiliar terms? There is a \u003ca href\u003d\"#glossary\"\u003eGlossary\u003c/a\u003e section below!\u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"WZWren"},"content":"    We will also be highlighting more technical terms throughout this User Guide, so do check out","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"WZWren"},"content":"    the Glossary if you are confused.\u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"WZWren"},"content":"    \u003ca href\u003d\"#glossary\" class\u003d\"badge bg-primary\"\u003eCheck it out here.\u003c/a\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"kanna-1"},"content":"\u003e:exclamation: To enhance the User Guide\u0027s clarity, command outputs have been simplified and are now presented with added information indicated by an ellipsis (...).","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"kanna-1"},"content":"### Viewing Help: `help`","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"kanna-1"},"content":"Shows a message explaining how to access the help page. The link will bring the user to the User Guide.","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":99,"author":{"gitId":"kanna-1"},"content":"Format: `help`","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use `h` as a shortcut to utilise the `help` command","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Click on `Copy URL` after entering the `help` command and paste the link in your preferred browser","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"kanna-1"},"content":"### Listing All Patients: `list`","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":107,"author":{"gitId":"kanna-1"},"content":"Shows a list of all patients in HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"kanna-1"},"content":"Format: `list`","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use `ls` as a shortcut for `list`","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"kanna-1"},"content":"![result for \u0027list\u0027](images/listResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":115,"author":{"gitId":"kanna-1"},"content":"### Adding a Patient: `add`","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":117,"author":{"gitId":"kanna-1"},"content":"Adds a patient into HealthSync, with the given patient information.","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":119,"author":{"gitId":"kanna-1"},"content":"* A patient\u0027s name and IC are required when creating a new entry into HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"kanna-1"},"content":"* All the compulsory fields must be provided.","lastModifiedDate":"2023-11-02"},{"lineNumber":121,"author":{"gitId":"kanna-1"},"content":"* Optional fields like appointment and medical history need not be provided.","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":123,"author":{"gitId":"hyc17003"},"content":"Format: `add n/NAME id/ID_NUMBER [field] ...`","lastModifiedDate":"2023-11-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":125,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use `a` as a shortcut for `add`","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":127,"author":{"gitId":"WZWren"},"content":"Example commands:","lastModifiedDate":"2023-10-01"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":129,"author":{"gitId":"kanna-1"},"content":"* `add n/Aaron Tan Jun Jie id/S8943782H p/98114839 e/example@mailhere a/Serangoon HDB 123`","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":131,"author":{"gitId":"hyc17003"},"content":"![result for \u0027add n/Aaron Tan Jun Jie id/S8943782H p/98114839 e/example@mailhere a/Serangoon HDB 123\u0027](images/addResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"WZWren"},"content":"Expected outputs when the command succeeds:","lastModifiedDate":"2023-10-01"},{"lineNumber":134,"author":{"gitId":"kanna-1"},"content":"* `New Patient added: ...`","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"WZWren"},"content":"Expected outputs when the command fails:","lastModifiedDate":"2023-10-01"},{"lineNumber":137,"author":{"gitId":"kanna-1"},"content":"* `Patient already exists in HealthSync.`","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"kanna-1"},"content":"* `Invalid command format! ...`","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"kanna-1"},"content":"### Editing a Patient\u0027s Details: `edit`","lastModifiedDate":"2023-11-03"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"kanna-1"},"content":"Edits an existing patient\u0027s details in HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"nubnubyas"},"content":" * Edits the patient with the specified name or id.","lastModifiedDate":"2023-11-06"},{"lineNumber":145,"author":{"gitId":"hyc17003"},"content":" * If an invalid name or IC Number is passed, an error message will be logged.","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"-"},"content":" * At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"kanna-1"},"content":" * Existing fields will be updated to the input values.","lastModifiedDate":"2023-10-01"},{"lineNumber":148,"author":{"gitId":"kanna-1"},"content":" * If the fields do not exist, the corresponding field with details will be added.","lastModifiedDate":"2023-10-01"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Update multiple fields in a single `edit` command to save time","lastModifiedDate":"2023-11-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"nubnubyas"},"content":"Formats:","lastModifiedDate":"2023-11-08"},{"lineNumber":153,"author":{"gitId":"nubnubyas"},"content":" * `edit n/NAME [field] ...`","lastModifiedDate":"2023-11-08"},{"lineNumber":154,"author":{"gitId":"nubnubyas"},"content":" * `edit id/ID_NUMBER [field] ...`","lastModifiedDate":"2023-11-09"},{"lineNumber":155,"author":{"gitId":"nubnubyas"},"content":" * `edit n/NAME id/ID_NUMBER [field] ...`","lastModifiedDate":"2023-11-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use `e` as a shortcut for `edit`","lastModifiedDate":"2023-11-02"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":159,"author":{"gitId":"WZWren"},"content":"Example commands:","lastModifiedDate":"2023-10-01"},{"lineNumber":160,"author":{"gitId":"hyc17003"},"content":" * `edit n/Alex Yeoh p/91234567 e/alexyeoh@example.com`","lastModifiedDate":"2023-11-02"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":162,"author":{"gitId":"hyc17003"},"content":"![result for \u0027edit n/Alex Yeoh p/91234567 e/alexyeoh@example.com\u0027](images/editResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"WZWren"},"content":"Expected outputs when the command succeeds:","lastModifiedDate":"2023-10-01"},{"lineNumber":165,"author":{"gitId":"kanna-1"},"content":"* `Edited patient: ...`","lastModifiedDate":"2023-11-02"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":167,"author":{"gitId":"kanna-1"},"content":"Expected outputs when command fails:","lastModifiedDate":"2023-10-13"},{"lineNumber":168,"author":{"gitId":"hyc17003"},"content":"* `INVALID name and/or ID! ...`","lastModifiedDate":"2023-11-07"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"kanna-1"},"content":"### Deleting a Patient or Field: `delete`","lastModifiedDate":"2023-11-03"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"kanna-1"},"content":"Deletes the specified patient or an optional fields of the patient from HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"hyc17003"},"content":"* Deletes the patient or an optional field of the patient with the specified `n/NAME or id/ID_NUMBER`.","lastModifiedDate":"2023-11-07"},{"lineNumber":175,"author":{"gitId":"nubnubyas"},"content":"* You can choose to delete using only name or ID.","lastModifiedDate":"2023-11-09"},{"lineNumber":176,"author":{"gitId":"nubnubyas"},"content":"* If both name and ID are used, both must be valid and belong to the same person.","lastModifiedDate":"2023-11-09"},{"lineNumber":177,"author":{"gitId":"nubnubyas"},"content":"* You can only delete one patient at a time.","lastModifiedDate":"2023-11-06"},{"lineNumber":178,"author":{"gitId":"kanna-1"},"content":"* To delete a specified field only instead of the entire patient, we indicate the field after the identification.","lastModifiedDate":"2023-11-03"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"nubnubyas"},"content":"Formats:","lastModifiedDate":"2023-11-08"},{"lineNumber":181,"author":{"gitId":"nubnubyas"},"content":" * `delete n/NAME [field] ...`","lastModifiedDate":"2023-11-08"},{"lineNumber":182,"author":{"gitId":"nubnubyas"},"content":" * `delete id/ID_NUMBER [field] ...`","lastModifiedDate":"2023-11-09"},{"lineNumber":183,"author":{"gitId":"nubnubyas"},"content":" * `delete n/NAME id/ID_NUMBER [field] ...`","lastModifiedDate":"2023-11-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use the shortcut `d` for faster patient-deleting","lastModifiedDate":"2023-11-02"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"kanna-1"},"content":"Example commands:","lastModifiedDate":"2023-10-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"kanna-1"},"content":"* `delete n/Alex Yeoh`","lastModifiedDate":"2023-11-02"},{"lineNumber":190,"author":{"gitId":"kanna-1"},"content":"* `delete n/John Doe m/`","lastModifiedDate":"2023-11-02"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Specify the medical history to be deleted using `m/` if it\u0027s only the medical history data that is to be deleted","lastModifiedDate":"2023-11-02"},{"lineNumber":193,"author":{"gitId":"nubnubyas"},"content":"e.g `delete n/John Doe m/Diabetes`","lastModifiedDate":"2023-11-06"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":195,"author":{"gitId":"kanna-1"},"content":"![result for \u0027delete n/Alex Yeoh\u0027](images/deleteResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":196,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":197,"author":{"gitId":"kanna-1"},"content":"Expected outputs when the command succeeds:","lastModifiedDate":"2023-10-13"},{"lineNumber":198,"author":{"gitId":"kanna-1"},"content":"* `Deleted Patient: ...`","lastModifiedDate":"2023-11-02"},{"lineNumber":199,"author":{"gitId":"kanna-1"},"content":"* `Deleted Patient\u0027s field: ...`","lastModifiedDate":"2023-11-02"},{"lineNumber":200,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":201,"author":{"gitId":"kanna-1"},"content":"Expected output when the command fails:","lastModifiedDate":"2023-11-02"},{"lineNumber":202,"author":{"gitId":"hyc17003"},"content":"* `The given combination of Name and ID does not match any patient in the Patients list`.","lastModifiedDate":"2023-11-07"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"kanna-1"},"content":"### Delete All Patients: `clear`","lastModifiedDate":"2023-11-02"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"kanna-1"},"content":"Deletes all patients from HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":208,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2023-11-02"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use `c` as a shortcut for `clear`","lastModifiedDate":"2023-11-02"},{"lineNumber":211,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":212,"author":{"gitId":"kanna-1"},"content":"![result for \u0027clear\u0027](images/clearResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":213,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":214,"author":{"gitId":"nubnubyas"},"content":"### Locating Patients by Name, ID or Appointment: `find`","lastModifiedDate":"2023-11-09"},{"lineNumber":215,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":216,"author":{"gitId":"nubnubyas"},"content":"Searches the patient list for all patients matching the name, IC Number or Appointment and returns their related information.","lastModifiedDate":"2023-11-06"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"nubnubyas"},"content":"* The search is case-insensitive.","lastModifiedDate":"2023-11-06"},{"lineNumber":219,"author":{"gitId":"nubnubyas"},"content":"e.g `hans` will match `Hans`, `08-Jan-2023 12 13` will match `08-jan-2023 12 13`.","lastModifiedDate":"2023-11-06"},{"lineNumber":220,"author":{"gitId":"kanna-1"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`.","lastModifiedDate":"2023-10-13"},{"lineNumber":221,"author":{"gitId":"nubnubyas"},"content":"* Name, IC Number and Appointment can be searched.","lastModifiedDate":"2023-11-06"},{"lineNumber":222,"author":{"gitId":"kanna-1"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`.","lastModifiedDate":"2023-10-13"},{"lineNumber":223,"author":{"gitId":"kanna-1"},"content":"* For the name, only patients matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2023-11-03"},{"lineNumber":224,"author":{"gitId":"kanna-1"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`.","lastModifiedDate":"2023-10-13"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"nubnubyas"},"content":"Formats:","lastModifiedDate":"2023-11-08"},{"lineNumber":227,"author":{"gitId":"nubnubyas"},"content":" * `find n/NAME`","lastModifiedDate":"2023-11-08"},{"lineNumber":228,"author":{"gitId":"nubnubyas"},"content":" * `find id/ID_NUMBER`","lastModifiedDate":"2023-11-09"},{"lineNumber":229,"author":{"gitId":"nubnubyas"},"content":" * `find ap/APPOINTMENT`","lastModifiedDate":"2023-11-08"},{"lineNumber":230,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":231,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use the shortcut `f` for faster patient-finding","lastModifiedDate":"2023-11-02"},{"lineNumber":232,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":233,"author":{"gitId":"kanna-1"},"content":"Example commands:","lastModifiedDate":"2023-10-13"},{"lineNumber":234,"author":{"gitId":"kanna-1"},"content":"* `find n/Alex Yeoh`","lastModifiedDate":"2023-11-02"},{"lineNumber":235,"author":{"gitId":"kanna-1"},"content":"* `find id/T0123436F`","lastModifiedDate":"2023-11-02"},{"lineNumber":236,"author":{"gitId":"nubnubyas"},"content":"* `find ap/08-Aug-2023 0000 2359`","lastModifiedDate":"2023-11-06"},{"lineNumber":237,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":238,"author":{"gitId":"hyc17003"},"content":"![result for \u0027find id/T0123456F\u0027](images/findidT0123456FResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":239,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":240,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: This list command can be used to show the original patient list after a find command is executed","lastModifiedDate":"2023-11-02"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"hyc17003"},"content":"### Preserving a `find` Command Result in the Log: `log`","lastModifiedDate":"2023-11-06"},{"lineNumber":243,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":244,"author":{"gitId":"hyc17003"},"content":"Logs the result of the find command to the logger tab, which can be viewed at all times.","lastModifiedDate":"2023-10-26"},{"lineNumber":245,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":246,"author":{"gitId":"hyc17003"},"content":"Upon app start, the logger tab is pre-populated with profiles of patients who have appointments on the day itself.","lastModifiedDate":"2023-11-08"},{"lineNumber":247,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":248,"author":{"gitId":"hyc17003"},"content":"This is how it looks like:","lastModifiedDate":"2023-11-08"},{"lineNumber":249,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":250,"author":{"gitId":"hyc17003"},"content":"![pre-populated log](images/originalLog.jpg)","lastModifiedDate":"2023-11-08"},{"lineNumber":251,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":252,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":253,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use `log` command to save data you want to continue referring to","lastModifiedDate":"2023-11-02"},{"lineNumber":254,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":255,"author":{"gitId":"hyc17003"},"content":"\u003e:wrench: If you want to access the patient list or look up a new patient but would still need to refer to the current patient\u0027s details, simply `log` so the profile stays on your screen while you carry out your other tasks!","lastModifiedDate":"2023-11-08"},{"lineNumber":256,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":257,"author":{"gitId":"hyc17003"},"content":"\u003e:warning: The logger tab does not update when logged patients\u0027 profiles are edited or deleted. The logger tab is intended to be a snapshot of the patients\u0027 details at the time that they were logged. To reflect the edited changes in the logger tab after a change has been made, do `log` after the change.","lastModifiedDate":"2023-11-09"},{"lineNumber":258,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":259,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":260,"author":{"gitId":"hyc17003"},"content":"* Saving to the logger tab only works for results of the `find` command.","lastModifiedDate":"2023-10-26"},{"lineNumber":261,"author":{"gitId":"hyc17003"},"content":"* The entire result will be saved.","lastModifiedDate":"2023-10-26"},{"lineNumber":262,"author":{"gitId":"hyc17003"},"content":"* The result will be saved in the same order and format.","lastModifiedDate":"2023-10-26"},{"lineNumber":263,"author":{"gitId":"hyc17003"},"content":"* Saving a new result completely clears the current saved result from the logger tab and replaces it.","lastModifiedDate":"2023-11-08"},{"lineNumber":264,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":265,"author":{"gitId":"hyc17003"},"content":"Format: `log`","lastModifiedDate":"2023-10-30"},{"lineNumber":266,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":267,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use the shortcut `lo` for faster patient-logging","lastModifiedDate":"2023-11-02"},{"lineNumber":268,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":269,"author":{"gitId":"kanna-1"},"content":"Example Command: `log` (after entering a FindCommand)","lastModifiedDate":"2023-11-02"},{"lineNumber":270,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":271,"author":{"gitId":"hyc17003"},"content":"![result for \u0027log\u0027](images/logResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":272,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":273,"author":{"gitId":"hyc17003"},"content":"Expected outputs when the command succeeds:","lastModifiedDate":"2023-10-01"},{"lineNumber":274,"author":{"gitId":"WZWren"},"content":"* `The last filtered values have overridden the logger tab.`","lastModifiedDate":"2023-11-03"},{"lineNumber":275,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":276,"author":{"gitId":"hyc17003"},"content":"Expected output when the command fails:","lastModifiedDate":"2023-10-01"},{"lineNumber":277,"author":{"gitId":"WZWren"},"content":"* `Cannot log an empty list.`","lastModifiedDate":"2023-11-03"},{"lineNumber":278,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":279,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: `log` overwrites the data currently in the logger tab, so you do not need to perform clearing prior","lastModifiedDate":"2023-11-02"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"hyc17003"},"content":"### Adding a New `find` Command Result to the current Log: `alog`","lastModifiedDate":"2023-11-06"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"hyc17003"},"content":"Appends the new results of the most recent find command to the current data in the logger tab, which can be viewed at all times.","lastModifiedDate":"2023-10-30"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"hyc17003"},"content":"\u003e:bulb: Use `alog` to save patient data you want to continue referring to, on top of the profiles you currently have logged","lastModifiedDate":"2023-11-06"},{"lineNumber":286,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":287,"author":{"gitId":"hyc17003"},"content":"\u003e:wrench: If you have multiple patients you need to toggle between, and do not want to keep doing `find` to retrieve their data, simply `alog` so their profiles stay on your screen for easy access!","lastModifiedDate":"2023-11-08"},{"lineNumber":288,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"hyc17003"},"content":"* Adding to the logger tab only works for results of the `find` command.","lastModifiedDate":"2023-10-30"},{"lineNumber":291,"author":{"gitId":"hyc17003"},"content":"* The previously-saved result will remain the same.","lastModifiedDate":"2023-10-30"},{"lineNumber":292,"author":{"gitId":"hyc17003"},"content":"* The entire new result will be saved below the previously-saved result.","lastModifiedDate":"2023-11-02"},{"lineNumber":293,"author":{"gitId":"hyc17003"},"content":"* The result will be saved in the same order and format.","lastModifiedDate":"2023-10-30"},{"lineNumber":294,"author":{"gitId":"hyc17003"},"content":"* Duplicate persons will not be appended to the log.","lastModifiedDate":"2023-11-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"hyc17003"},"content":"Format: `alog`","lastModifiedDate":"2023-10-30"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use the shortcut `al` for faster log-appending","lastModifiedDate":"2023-11-02"},{"lineNumber":299,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":300,"author":{"gitId":"kanna-1"},"content":"Example Command: `alog` (after entering a FindCommand)","lastModifiedDate":"2023-11-02"},{"lineNumber":301,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":302,"author":{"gitId":"hyc17003"},"content":"![result for \u0027alog\u0027](images/alogResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"nubnubyas"},"content":"Expected outputs when the command succeeds:","lastModifiedDate":"2023-10-05"},{"lineNumber":305,"author":{"gitId":"WZWren"},"content":"* `The last filtered values have been added onto the logger tab.`","lastModifiedDate":"2023-11-03"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"nubnubyas"},"content":"Expected output when the command fails:","lastModifiedDate":"2023-10-05"},{"lineNumber":308,"author":{"gitId":"WZWren"},"content":"* `Cannot log an empty list.`","lastModifiedDate":"2023-11-03"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: `alog` does not overwrite the data and instead adds on to it, so you do not have to keep performing `log` to save more data","lastModifiedDate":"2023-11-02"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"kanna-1"},"content":"### Clearing Data from the Log: `clog`","lastModifiedDate":"2023-11-03"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"hyc17003"},"content":"Clears all current data in the logger tab.","lastModifiedDate":"2023-10-30"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use `clog` command if you do not need the data in the current logger tab anymore","lastModifiedDate":"2023-11-02"},{"lineNumber":317,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":318,"author":{"gitId":"hyc17003"},"content":"Format: `clog`","lastModifiedDate":"2023-10-30"},{"lineNumber":319,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":320,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb:  Use the shortcut `cl` for faster log-clearing","lastModifiedDate":"2023-11-02"},{"lineNumber":321,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":322,"author":{"gitId":"kanna-1"},"content":"Example Command: `clog`","lastModifiedDate":"2023-11-02"},{"lineNumber":323,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":324,"author":{"gitId":"hyc17003"},"content":"![result for \u0027clog\u0027](images/clogResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":325,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":326,"author":{"gitId":"hyc17003"},"content":"Expected output:","lastModifiedDate":"2023-10-30"},{"lineNumber":327,"author":{"gitId":"hyc17003"},"content":"* `Logger tab has been cleared!`","lastModifiedDate":"2023-10-30"},{"lineNumber":328,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":329,"author":{"gitId":"kanna-1"},"content":"### Undoing a Command: `undo`","lastModifiedDate":"2023-11-02"},{"lineNumber":330,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":331,"author":{"gitId":"kanna-1"},"content":"Undoes an undo-able command within HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":332,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":333,"author":{"gitId":"kanna-1"},"content":"* An undo-able command include an add, clear, delete, edit, log, alog and clog command.","lastModifiedDate":"2023-11-02"},{"lineNumber":334,"author":{"gitId":"kanna-1"},"content":"* The command allows you to undo a specific number of previous commands.","lastModifiedDate":"2023-11-02"},{"lineNumber":335,"author":{"gitId":"kanna-1"},"content":"* The command can only undo a positive number of previous commands provided it does not exceed the size of the command history stack.","lastModifiedDate":"2023-11-02"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":337,"author":{"gitId":"kanna-1"},"content":"Format:","lastModifiedDate":"2023-11-02"},{"lineNumber":338,"author":{"gitId":"kanna-1"},"content":"* `undo [number]`","lastModifiedDate":"2023-11-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use `u` as a shortcut for `undo`","lastModifiedDate":"2023-11-02"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Simply entering `undo` will undo the last command","lastModifiedDate":"2023-11-02"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"nubnubyas"},"content":"Fields that can be deleted:","lastModifiedDate":"2023-11-02"},{"lineNumber":345,"author":{"gitId":"nubnubyas"},"content":"* Appointment: Include `ap/` behind delete command","lastModifiedDate":"2023-11-02"},{"lineNumber":346,"author":{"gitId":"nubnubyas"},"content":"* Medical History: Include `m/` behind delete command. Can delete specific Medical History. e.g `m/diabetes`","lastModifiedDate":"2023-11-02"},{"lineNumber":347,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":348,"author":{"gitId":"kanna-1"},"content":"Example commands:","lastModifiedDate":"2023-10-13"},{"lineNumber":349,"author":{"gitId":"kanna-1"},"content":"*  `undo 2`","lastModifiedDate":"2023-11-02"},{"lineNumber":350,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":351,"author":{"gitId":"kanna-1"},"content":"![result for \u0027undo\u0027](images/undoResult.jpg)","lastModifiedDate":"2023-11-02"},{"lineNumber":352,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":353,"author":{"gitId":"nubnubyas"},"content":"Expected outputs when the command succeeds:","lastModifiedDate":"2023-10-05"},{"lineNumber":354,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":355,"author":{"gitId":"kanna-1"},"content":"* `Undoing 2 command(s): ...`","lastModifiedDate":"2023-11-02"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"kanna-1"},"content":"Expected outputs when command fails:","lastModifiedDate":"2023-11-02"},{"lineNumber":358,"author":{"gitId":"kanna-1"},"content":"* `Please proved a valid number of steps to undo, not exceeding the available command history.`","lastModifiedDate":"2023-11-02"},{"lineNumber":359,"author":{"gitId":"kanna-1"},"content":"* `Undo step count cannot be a negative number or zero.`","lastModifiedDate":"2023-11-02"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"kanna-1"},"content":"### Exiting HealthSync: `exit`","lastModifiedDate":"2023-11-03"},{"lineNumber":363,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":364,"author":{"gitId":"kanna-1"},"content":"Exits HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"kanna-1"},"content":"\u003e:bulb: Use `ex` as a shortcut for `exit`","lastModifiedDate":"2023-11-02"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"kanna-1"},"content":"### Auto Save","lastModifiedDate":"2023-11-02"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"kanna-1"},"content":"HealthSync data are saved in the hard disk automatically after any command that changes the data is executed.","lastModifiedDate":"2023-11-02"},{"lineNumber":373,"author":{"gitId":"kanna-1"},"content":"There is no need to save manually.","lastModifiedDate":"2023-11-02"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":375,"author":{"gitId":"WeeeHung"},"content":"\u003e:bulb: Only patient details inside patient list view are saved. The logger tab and command history used for `undo` are not saved after the application is closed.","lastModifiedDate":"2023-11-07"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":377,"author":{"gitId":"kanna-1"},"content":"### Editing the Data File","lastModifiedDate":"2023-11-03"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":379,"author":{"gitId":"WZWren"},"content":"HealthSync data are saved automatically as a JSON file `[JAR file location]/data/healthsync.json`.","lastModifiedDate":"2023-10-07"},{"lineNumber":380,"author":{"gitId":"WZWren"},"content":"Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2023-10-07"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":383,"author":{"gitId":"kanna-1"},"content":"\u003e:warning: **Caution:**","lastModifiedDate":"2023-11-02"},{"lineNumber":384,"author":{"gitId":"kanna-1"},"content":"\u003eIf your changes to the data file makes its format invalid, HealthSync will discard all data and start with an empty","lastModifiedDate":"2023-11-02"},{"lineNumber":385,"author":{"gitId":"hyc17003"},"content":"\u003edata file at the next run.  Hence, it is recommended to make a backup of the file before editing it.","lastModifiedDate":"2023-11-08"},{"lineNumber":386,"author":{"gitId":"hyc17003"},"content":"\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":387,"author":{"gitId":"hyc17003"},"content":"\u003eTo make a backup of the file:","lastModifiedDate":"2023-11-08"},{"lineNumber":388,"author":{"gitId":"hyc17003"},"content":"\u003e1) Locate the `healthsync.json` data file on your computer. This file is located in the same directory as `healthsync.jar`. The path is `[JAR file location]/data/healthsync.json`.","lastModifiedDate":"2023-11-08"},{"lineNumber":389,"author":{"gitId":"hyc17003"},"content":"\u003e2) Right-click on the `healthsync.json` file, and select \u0027copy\u0027.","lastModifiedDate":"2023-11-08"},{"lineNumber":390,"author":{"gitId":"hyc17003"},"content":"\u003e3) Choose the location where you want to store the backup copy. You can create a separate folder for backups or choose any locations of your choice.","lastModifiedDate":"2023-11-08"},{"lineNumber":391,"author":{"gitId":"hyc17003"},"content":"\u003e4) Right-click in the chosen location and select \u0027paste\u0027. This creates a copy of the `healthsync.json` data file in the selected backup location.","lastModifiedDate":"2023-11-08"},{"lineNumber":392,"author":{"gitId":"hyc17003"},"content":"\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":393,"author":{"gitId":"hyc17003"},"content":"\u003eThat\u0027s it! You can now safely edit the original `healthsync.json` file.","lastModifiedDate":"2023-11-08"},{"lineNumber":394,"author":{"gitId":"hyc17003"},"content":"\u003e","lastModifiedDate":"2023-11-08"},{"lineNumber":395,"author":{"gitId":"hyc17003"},"content":"\u003eIf anything goes wrong during the editing process, you can restore your data by copying the backup file back to its original location.","lastModifiedDate":"2023-11-08"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":397,"author":{"gitId":"kanna-1"},"content":"### Archiving Data Files `[coming in v5.0]`","lastModifiedDate":"2023-11-03"},{"lineNumber":398,"author":{"gitId":"WeeeHung"},"content":"It allows you to efficiently store and organize patient records in HealthSync. With this feature, you can maintain a tidy and easily accessible archive of patient data, ensuring streamlined data management and quick retrieval when needed.","lastModifiedDate":"2023-11-07"},{"lineNumber":399,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"WeeeHung"},"content":"## [FAQ](#faq)","lastModifiedDate":"2023-11-01"},{"lineNumber":403,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":404,"author":{"gitId":"WeeeHung"},"content":"**Q**: What operating systems does HealthSync support?\u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":405,"author":{"gitId":"WeeeHung"},"content":"**A**: HealthSync is a cross-platform application and supports Windows, macOS, and Linux. Simply follow the","lastModifiedDate":"2023-11-01"},{"lineNumber":406,"author":{"gitId":"WeeeHung"},"content":"[installation guide](#quick-start) and download the jar file to use the application.","lastModifiedDate":"2023-11-01"},{"lineNumber":407,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":408,"author":{"gitId":"WeeeHung"},"content":"**Q**: What are the advantages of using a CLI interface in HealthSync over traditional GUI apps?\u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":409,"author":{"gitId":"WeeeHung"},"content":"**A**: HealthSync\u0027s CLI interface offers faster data entry and navigation for users who are comfortable with typing.","lastModifiedDate":"2023-11-01"},{"lineNumber":410,"author":{"gitId":"WeeeHung"},"content":"It streamlines tasks and provides a more efficient way to manage patient details.","lastModifiedDate":"2023-11-01"},{"lineNumber":411,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":412,"author":{"gitId":"WeeeHung"},"content":"**Q**: Can multiple users access HealthSync simultaneously, and how do I set up user accounts?\u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":413,"author":{"gitId":"WeeeHung"},"content":"**A**: HealthSync is currently an application for a single user. Hence, it cannot be accessed simultaneously","lastModifiedDate":"2023-11-02"},{"lineNumber":414,"author":{"gitId":"WeeeHung"},"content":"by different users.","lastModifiedDate":"2023-11-01"},{"lineNumber":415,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":416,"author":{"gitId":"WeeeHung"},"content":"**Q**: How do I import patient data from external sources into HealthSync?\u003cbr\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":417,"author":{"gitId":"WeeeHung"},"content":"**A**: The data file that is storing current patient data will be stored in `data/healthsync.json` by default under the same folder.","lastModifiedDate":"2023-11-07"},{"lineNumber":418,"author":{"gitId":"WeeeHung"},"content":"You may import patient data and store into that file. However, do adhere to the data format present in the current file.","lastModifiedDate":"2023-11-01"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"WZWren"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains","lastModifiedDate":"2023-10-07"},{"lineNumber":422,"author":{"gitId":"WZWren"},"content":"       the data of your previous HealthSync home folder.","lastModifiedDate":"2023-10-07"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"WeeeHung"},"content":"**Q**: Can I use HealthSync offline, or does it require an internet connection?\u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":425,"author":{"gitId":"WeeeHung"},"content":"**A**: HealthSync is designed to work offline, ensuring you can access and update patient data even when you don\u0027t have","lastModifiedDate":"2023-11-01"},{"lineNumber":426,"author":{"gitId":"WeeeHung"},"content":"an internet connection.","lastModifiedDate":"2023-11-01"},{"lineNumber":427,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":428,"author":{"gitId":"WeeeHung"},"content":"**Q**: What happens if there is a system crash or power outage while I\u0027m using HealthSync?\u003cbr\u003e","lastModifiedDate":"2023-11-01"},{"lineNumber":429,"author":{"gitId":"WeeeHung"},"content":"**A**: HealthSync includes auto-save functionality to minimize data loss in case of unexpected events.","lastModifiedDate":"2023-11-01"},{"lineNumber":430,"author":{"gitId":"WeeeHung"},"content":"The app will attempt to recover your work upon restart.","lastModifiedDate":"2023-11-01"},{"lineNumber":431,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":432,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":433,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"WeeeHung"},"content":"## [Known issues](#known-issues)","lastModifiedDate":"2023-11-01"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":437,"author":{"gitId":"WZWren"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only","lastModifiedDate":"2023-10-07"},{"lineNumber":438,"author":{"gitId":"WZWren"},"content":"   the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by","lastModifiedDate":"2023-10-07"},{"lineNumber":439,"author":{"gitId":"WZWren"},"content":"   the application before running the application again.","lastModifiedDate":"2023-10-07"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":441,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":443,"author":{"gitId":"kanna-1"},"content":"## Glossary","lastModifiedDate":"2023-11-02"},{"lineNumber":444,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":445,"author":{"gitId":"WZWren"},"content":"### Command Format","lastModifiedDate":"2023-11-02"},{"lineNumber":446,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":447,"author":{"gitId":"WZWren"},"content":"Refers to the standardized way you have to type in your instructions to HealthSync.","lastModifiedDate":"2023-11-02"},{"lineNumber":448,"author":{"gitId":"WZWren"},"content":"Currently, there are 2 main types of Command Formats.","lastModifiedDate":"2023-11-02"},{"lineNumber":449,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":450,"author":{"gitId":"WZWren"},"content":" * [Fielded](#fields) commands, which require you to add additional information behind the instruction.","lastModifiedDate":"2023-11-02"},{"lineNumber":451,"author":{"gitId":"WZWren"},"content":" * Field-less commands, which do not need you to specify any more information to function.","lastModifiedDate":"2023-11-02"},{"lineNumber":452,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":453,"author":{"gitId":"WZWren"},"content":"Fielded Command Formats will generally look like this:","lastModifiedDate":"2023-11-02"},{"lineNumber":454,"author":{"gitId":"WZWren"},"content":"```","lastModifiedDate":"2023-11-02"},{"lineNumber":455,"author":{"gitId":"WZWren"},"content":"\u003cKEYWORD\u003e \u003cwords/numbers\u003e identity [field]","lastModifiedDate":"2023-11-02"},{"lineNumber":456,"author":{"gitId":"WZWren"},"content":"```","lastModifiedDate":"2023-11-02"},{"lineNumber":457,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":458,"author":{"gitId":"WZWren"},"content":" * `\u003cKEYWORD\u003e` is the word used to tell HealthSync what to do.","lastModifiedDate":"2023-11-02"},{"lineNumber":459,"author":{"gitId":"WZWren"},"content":"   * Example: to tell HealthSync to add a patient, you would use `add` as the keyword.","lastModifiedDate":"2023-11-02"},{"lineNumber":460,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":461,"author":{"gitId":"WZWren"},"content":" * `\u003cwords/numbers\u003e` are special values specific to the instruction type. These are generally","lastModifiedDate":"2023-11-02"},{"lineNumber":462,"author":{"gitId":"WZWren"},"content":"   given after the keyword.","lastModifiedDate":"2023-11-02"},{"lineNumber":463,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":464,"author":{"gitId":"WZWren"},"content":" * `identity` represents compulsory identifying fields that need to be included with for that instruction type.","lastModifiedDate":"2023-11-02"},{"lineNumber":465,"author":{"gitId":"WZWren"},"content":"   * `or` can be specified between 2 identifying fields. This means that you may exclude one of the fields","lastModifiedDate":"2023-11-02"},{"lineNumber":466,"author":{"gitId":"WZWren"},"content":"     for that instruction type.","lastModifiedDate":"2023-11-02"},{"lineNumber":467,"author":{"gitId":"WZWren"},"content":"   * See [Fields](#fields) to understand how identifying fields are specified.","lastModifiedDate":"2023-11-02"},{"lineNumber":468,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":469,"author":{"gitId":"WZWren"},"content":" * `field` refer to the information fields that can be specified in each command.","lastModifiedDate":"2023-11-02"},{"lineNumber":470,"author":{"gitId":"WZWren"},"content":"   * Example: for `add`, you would specify additional information like phone number and address.","lastModifiedDate":"2023-11-02"},{"lineNumber":471,"author":{"gitId":"WZWren"},"content":"   * See [Fields](#fields) to understand how each entry is specified.","lastModifiedDate":"2023-11-02"},{"lineNumber":472,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":473,"author":{"gitId":"WZWren"},"content":" * Square brackets `[...]` indicate that the field is optional to include.","lastModifiedDate":"2023-11-02"},{"lineNumber":474,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":475,"author":{"gitId":"WZWren"},"content":" * `[field] ...` indicate that multiple different field types can be provided.","lastModifiedDate":"2023-11-02"},{"lineNumber":476,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":477,"author":{"gitId":"WZWren"},"content":" * `identity` and `field` can generally be specified in any order.","lastModifiedDate":"2023-11-02"},{"lineNumber":478,"author":{"gitId":"WZWren"},"content":"   * Example: if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2023-11-02"},{"lineNumber":479,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":480,"author":{"gitId":"WZWren"},"content":"Field-less Command Formats will generally look like this:","lastModifiedDate":"2023-11-02"},{"lineNumber":481,"author":{"gitId":"WZWren"},"content":"```","lastModifiedDate":"2023-11-02"},{"lineNumber":482,"author":{"gitId":"WZWren"},"content":"\u003cKEYWORD\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":483,"author":{"gitId":"WZWren"},"content":"```","lastModifiedDate":"2023-11-02"},{"lineNumber":484,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":485,"author":{"gitId":"WZWren"},"content":" * For field-less commands, only the `\u003cKEYWORD\u003e` will be read by HealthSync, and the rest of the data you give it","lastModifiedDate":"2023-11-02"},{"lineNumber":486,"author":{"gitId":"WZWren"},"content":"   will be ignored.","lastModifiedDate":"2023-11-02"},{"lineNumber":487,"author":{"gitId":"WZWren"},"content":"   * Example: if `help 123` was typed in, HealthSync will interpret it as `help`.","lastModifiedDate":"2023-11-02"},{"lineNumber":488,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":489,"author":{"gitId":"WZWren"},"content":"### Fields","lastModifiedDate":"2023-11-02"},{"lineNumber":490,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":491,"author":{"gitId":"WZWren"},"content":"Fields are the entries you have to input the patient\u0027s information for. These would","lastModifiedDate":"2023-11-02"},{"lineNumber":492,"author":{"gitId":"WZWren"},"content":"include names, phone numbers, appointment times, etc. Fields can be classified into","lastModifiedDate":"2023-11-02"},{"lineNumber":493,"author":{"gitId":"WZWren"},"content":"2 groups:","lastModifiedDate":"2023-11-02"},{"lineNumber":494,"author":{"gitId":"WZWren"},"content":"* Identifying fields, to let you know who the patient is. These are unique to the patient entry.","lastModifiedDate":"2023-11-02"},{"lineNumber":495,"author":{"gitId":"WZWren"},"content":"* Information fields, which gives you other information on the patient.","lastModifiedDate":"2023-11-02"},{"lineNumber":496,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":497,"author":{"gitId":"WZWren"},"content":"The 2 identifying fields of a patient are given below:","lastModifiedDate":"2023-11-02"},{"lineNumber":498,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":499,"author":{"gitId":"WZWren"},"content":"| Tag   | Representative Value  | Example Usage  | General Form in Commands |","lastModifiedDate":"2023-11-02"},{"lineNumber":500,"author":{"gitId":"WZWren"},"content":"|-------|-----------------------|----------------|--------------------------|","lastModifiedDate":"2023-11-02"},{"lineNumber":501,"author":{"gitId":"WZWren"},"content":"| `n/`  | Name                  | `n/Alex`       | `n/NAME`                 |","lastModifiedDate":"2023-11-02"},{"lineNumber":502,"author":{"gitId":"hyc17003"},"content":"| `id/` | Identification Number | `id/S2345678A` | `id/ID_NUMBER`           |","lastModifiedDate":"2023-11-07"},{"lineNumber":503,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":504,"author":{"gitId":"WZWren"},"content":"1 or more identifying fields must be specified in each command, unless stated otherwise.","lastModifiedDate":"2023-11-02"},{"lineNumber":505,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":506,"author":{"gitId":"WZWren"},"content":"In addition to the identifying fields, information fields can be specified behind commands.","lastModifiedDate":"2023-11-02"},{"lineNumber":507,"author":{"gitId":"WZWren"},"content":"The information fields are given below:","lastModifiedDate":"2023-11-02"},{"lineNumber":508,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":509,"author":{"gitId":"WZWren"},"content":"| Tag    | Representative Value | Example Usage              | General Form in Commands | Remarks                         |","lastModifiedDate":"2023-11-02"},{"lineNumber":510,"author":{"gitId":"WZWren"},"content":"|--------|----------------------|----------------------------|--------------------------|---------------------------------|","lastModifiedDate":"2023-11-02"},{"lineNumber":511,"author":{"gitId":"WZWren"},"content":"| `p/`   | Phone Number         | `p/91234567`               | `p/PHONE_NUMBER`         |                                 |","lastModifiedDate":"2023-11-02"},{"lineNumber":512,"author":{"gitId":"WZWren"},"content":"| `e/`   | Email Address        | `e/example@a.com`          | `e/EMAIL`                |                                 |","lastModifiedDate":"2023-11-02"},{"lineNumber":513,"author":{"gitId":"WZWren"},"content":"| `a/`   | Address              | `a/Location, Here Rd`      | `a/ADDRESS`              |                                 |","lastModifiedDate":"2023-11-02"},{"lineNumber":514,"author":{"gitId":"WZWren"},"content":"| `m/`   | Medical History      | `m/Asthmatic`              | `m/MEDICAL_HISTORY`      | Can have multiple of this field |","lastModifiedDate":"2023-11-02"},{"lineNumber":515,"author":{"gitId":"WZWren"},"content":"| `ap/`  | Appointment          | `ap/11-2-2023 11:00 12:00` | `ap/APPT `               |                                 |","lastModifiedDate":"2023-11-02"},{"lineNumber":516,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":517,"author":{"gitId":"WZWren"},"content":"Unless stated otherwise, these fields are optional.","lastModifiedDate":"2023-11-02"},{"lineNumber":518,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":519,"author":{"gitId":"WZWren"},"content":"#### Name","lastModifiedDate":"2023-11-02"},{"lineNumber":520,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":521,"author":{"gitId":"WZWren"},"content":"The standard unique identifier for your patient. Each patient should have a unique alphanumeric name assigned to them.","lastModifiedDate":"2023-11-02"},{"lineNumber":522,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":523,"author":{"gitId":"hyc17003"},"content":"#### ID","lastModifiedDate":"2023-11-07"},{"lineNumber":524,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":525,"author":{"gitId":"WZWren"},"content":"The ID-based unique identifier for your patient. Each patient should have a unique alphanumeric ID assigned to them.","lastModifiedDate":"2023-11-02"},{"lineNumber":526,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":527,"author":{"gitId":"hyc17003"},"content":"There is no verification system in place for ID. This allows you to use your custom identifier for your patients, if","lastModifiedDate":"2023-11-07"},{"lineNumber":528,"author":{"gitId":"WZWren"},"content":"you wish.","lastModifiedDate":"2023-11-02"},{"lineNumber":529,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":530,"author":{"gitId":"WZWren"},"content":"#### Phone Number","lastModifiedDate":"2023-11-02"},{"lineNumber":531,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":532,"author":{"gitId":"WZWren"},"content":"A phone number to contact your patients with. Each patient should be assigned to 1 phone number.","lastModifiedDate":"2023-11-02"},{"lineNumber":533,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":534,"author":{"gitId":"WZWren"},"content":"Phone numbers must be numeric, and it must be at least 3 digits long. It does not have to be unique.","lastModifiedDate":"2023-11-02"},{"lineNumber":535,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":536,"author":{"gitId":"WZWren"},"content":"#### Email Address","lastModifiedDate":"2023-11-02"},{"lineNumber":537,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":538,"author":{"gitId":"WZWren"},"content":"An email address to contact your patients with. Each patient should be assigned to 1 email address, which","lastModifiedDate":"2023-11-02"},{"lineNumber":539,"author":{"gitId":"WZWren"},"content":"doesn\u0027t need to be unique.","lastModifiedDate":"2023-11-02"},{"lineNumber":540,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":541,"author":{"gitId":"WZWren"},"content":"Emails should be in the format `local-part@domainname`.","lastModifiedDate":"2023-11-02"},{"lineNumber":542,"author":{"gitId":"WZWren"},"content":" * `local-part` is alphanumeric, and may also contain these symbols: `+``_``.``-`","lastModifiedDate":"2023-11-02"},{"lineNumber":543,"author":{"gitId":"WZWren"},"content":" * `domainname` should be the site that the email leads to, such as `gmail.com`.","lastModifiedDate":"2023-11-02"},{"lineNumber":544,"author":{"gitId":"WZWren"},"content":" * These must be separated by an `@` symbol.","lastModifiedDate":"2023-11-02"},{"lineNumber":545,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":546,"author":{"gitId":"WZWren"},"content":"#### Address","lastModifiedDate":"2023-11-02"},{"lineNumber":547,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":548,"author":{"gitId":"WZWren"},"content":"The address to contact your patients. Each patient should be assigned to 1 address that they live in,","lastModifiedDate":"2023-11-02"},{"lineNumber":549,"author":{"gitId":"WZWren"},"content":"and it does not have to be unique.","lastModifiedDate":"2023-11-02"},{"lineNumber":550,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":551,"author":{"gitId":"WZWren"},"content":"Addresses do not have a strict format to adhere to.","lastModifiedDate":"2023-11-02"},{"lineNumber":552,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":553,"author":{"gitId":"WZWren"},"content":"#### Medical History","lastModifiedDate":"2023-11-02"},{"lineNumber":554,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":555,"author":{"gitId":"WZWren"},"content":"The medical history of your patients. These are optional fields to assign to patients, and every","lastModifiedDate":"2023-11-02"},{"lineNumber":556,"author":{"gitId":"WZWren"},"content":"patient can have more than 1 medical history.","lastModifiedDate":"2023-11-02"},{"lineNumber":557,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":558,"author":{"gitId":"WZWren"},"content":"Individually, medical histories do not have a strict format to adhere to. However, every medical","lastModifiedDate":"2023-11-02"},{"lineNumber":559,"author":{"gitId":"WZWren"},"content":"history a patient has should be unique from one another.","lastModifiedDate":"2023-11-02"},{"lineNumber":560,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":561,"author":{"gitId":"WeeeHung"},"content":"Medical Conditions are restricted to 50 alphanumeric characters, and may also contain these symbols: `+``_``.``-`.","lastModifiedDate":"2023-11-09"},{"lineNumber":562,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":563,"author":{"gitId":"WeeeHung"},"content":"Some examples of valid Medical History formats are listed here:","lastModifiedDate":"2023-11-09"},{"lineNumber":564,"author":{"gitId":"WeeeHung"},"content":"```","lastModifiedDate":"2023-11-09"},{"lineNumber":565,"author":{"gitId":"WeeeHung"},"content":"Hypertension","lastModifiedDate":"2023-11-09"},{"lineNumber":566,"author":{"gitId":"WeeeHung"},"content":"Covid-19","lastModifiedDate":"2023-11-09"},{"lineNumber":567,"author":{"gitId":"WeeeHung"},"content":"Pneumonoultramicroscopicsilicovolcanoconiosis","lastModifiedDate":"2023-11-09"},{"lineNumber":568,"author":{"gitId":"WeeeHung"},"content":"```","lastModifiedDate":"2023-11-09"},{"lineNumber":569,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":570,"author":{"gitId":"WZWren"},"content":"#### Appointment","lastModifiedDate":"2023-11-02"},{"lineNumber":571,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":572,"author":{"gitId":"WZWren"},"content":"The appointment slot assigned to your patients. A patient may have no appointment assigned to them.","lastModifiedDate":"2023-11-02"},{"lineNumber":573,"author":{"gitId":"WZWren"},"content":"Currently, only 1 appointment may be assigned to a patient at a time.","lastModifiedDate":"2023-11-02"},{"lineNumber":574,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":575,"author":{"gitId":"WZWren"},"content":"Appointments should be given in this sequence: `Date, Start Time, End Time`. For example,","lastModifiedDate":"2023-11-02"},{"lineNumber":576,"author":{"gitId":"WZWren"},"content":"`1-Aug-2023, 11:00 13:00` is a valid appointment denoting an appointment on 1st August 2023, from 11am","lastModifiedDate":"2023-11-02"},{"lineNumber":577,"author":{"gitId":"WZWren"},"content":"to 1pm.","lastModifiedDate":"2023-11-02"},{"lineNumber":578,"author":{"gitId":"WZWren"},"content":" * The month and day of the appointment should always be included.","lastModifiedDate":"2023-11-02"},{"lineNumber":579,"author":{"gitId":"WZWren"},"content":" * Day can be given as a 1 to 2-digit number. It will only be accepted if the day can exist in that month or year.","lastModifiedDate":"2023-11-02"},{"lineNumber":580,"author":{"gitId":"WZWren"},"content":" * Month can be given as a 1 to 2-digit number or a 3-letter word. Example: `Jun` and `6` both represent June.","lastModifiedDate":"2023-11-02"},{"lineNumber":581,"author":{"gitId":"WZWren"},"content":" * The year is optional. If not included, HealthSync assumes it to be this year.","lastModifiedDate":"2023-11-02"},{"lineNumber":582,"author":{"gitId":"WZWren"},"content":" * The date should be hyphenated.","lastModifiedDate":"2023-11-02"},{"lineNumber":583,"author":{"gitId":"WZWren"},"content":" * The time should be given in 24-hour clock format, with 00:00 as 12am.","lastModifiedDate":"2023-11-02"},{"lineNumber":584,"author":{"gitId":"WZWren"},"content":" * Colons are optional when time is given with hours and minutes. If no colons are given, you need to pad the hour with","lastModifiedDate":"2023-11-02"},{"lineNumber":585,"author":{"gitId":"WZWren"},"content":"   a zero when necessary. Example: `1200` for 12 noon, `0900` for 9am.","lastModifiedDate":"2023-11-02"},{"lineNumber":586,"author":{"gitId":"WZWren"},"content":" * You may exclude minutes if you wish. Example: `15` will be interpreted as 3pm.","lastModifiedDate":"2023-11-02"},{"lineNumber":587,"author":{"gitId":"WZWren"},"content":" * Date and the 2 Times needs to be separated by a comma or a space.","lastModifiedDate":"2023-11-02"},{"lineNumber":588,"author":{"gitId":"WeeeHung"},"content":" * Appointment with the start and end time being the same is valid (ie. 0-minute appointment). HealthSync will register the start time as it is, and register end time as unconfirmed. This is useful for when you are unsure of the end time of an appointment.","lastModifiedDate":"2023-11-09"},{"lineNumber":589,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":590,"author":{"gitId":"WZWren"},"content":"Some examples of valid Appointment formats are listed here:","lastModifiedDate":"2023-11-02"},{"lineNumber":591,"author":{"gitId":"WZWren"},"content":"```","lastModifiedDate":"2023-11-02"},{"lineNumber":592,"author":{"gitId":"WZWren"},"content":"1-Nov 8 10","lastModifiedDate":"2023-11-02"},{"lineNumber":593,"author":{"gitId":"WZWren"},"content":"1-11-2023 10 12","lastModifiedDate":"2023-11-02"},{"lineNumber":594,"author":{"gitId":"WZWren"},"content":"03-03-23 0800 1400","lastModifiedDate":"2023-11-02"},{"lineNumber":595,"author":{"gitId":"WZWren"},"content":"4-Sep, 1800, 2000","lastModifiedDate":"2023-11-02"},{"lineNumber":596,"author":{"gitId":"WZWren"},"content":"```","lastModifiedDate":"2023-11-02"},{"lineNumber":597,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":598,"author":{"gitId":"WZWren"},"content":"### CLI","lastModifiedDate":"2023-11-02"},{"lineNumber":599,"author":{"gitId":"WZWren"},"content":"Command Line Interface. Refers to computer programs which require you to type to interact with it.","lastModifiedDate":"2023-11-02"},{"lineNumber":600,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":601,"author":{"gitId":"WZWren"},"content":"### GUI","lastModifiedDate":"2023-11-02"},{"lineNumber":602,"author":{"gitId":"WZWren"},"content":"Graphical User Interface. Refers to computer programs with a visual window you can interact with directly.","lastModifiedDate":"2023-11-02"},{"lineNumber":603,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":604,"author":{"gitId":"WeeeHung"},"content":"### [Menu Sidebar](#menu-sidebar)","lastModifiedDate":"2023-11-07"},{"lineNumber":605,"author":{"gitId":"WeeeHung"},"content":"The Menu Sidebar is the area on the left of the Patient List View. It contains buttons that allow you to perform actions on HealthSync. Currently, only the `User Guide` and `Exit` buttons are functional. The buttons that are in grey and not pressable in the Menu Sidebar are currently not functional and will be implemented in a future version of HealthSync.","lastModifiedDate":"2023-11-07"},{"lineNumber":606,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":607,"author":{"gitId":"WeeeHung"},"content":"### [Patient List View](#patient-list-view)","lastModifiedDate":"2023-11-07"},{"lineNumber":608,"author":{"gitId":"WeeeHung"},"content":"The main part of HealthSync where the list of all your patients are displayed. This is where you can view patient profiles in list form, and perform actions on them. When actions are performed, the Patient List View will be updated to reflect the changes/results.","lastModifiedDate":"2023-11-08"},{"lineNumber":609,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":610,"author":{"gitId":"WeeeHung"},"content":"### [Logger Tab](#logger-tab)","lastModifiedDate":"2023-11-07"},{"lineNumber":611,"author":{"gitId":"hyc17003"},"content":"A \u0027sticky-note\u0027-like area on the right of the Patient List View. Serves as a snapshot of the patient data at the time they were logged with the [`log` command](#preserving-a-find-command-result-in-the-log--log).","lastModifiedDate":"2023-11-09"},{"lineNumber":612,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":613,"author":{"gitId":"hyc17003"},"content":"This comes in handy when you want to refer to certain patient profiles at the side, while still being able to carry on with other tasks.","lastModifiedDate":"2023-11-09"},{"lineNumber":614,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":615,"author":{"gitId":"hyc17003"},"content":"To maximise utility, upon app start, the logger tab displays a list of profiles of patients who have appointments on the day itself. This can be overwritten by the `log` command for patient profiles thereafter.","lastModifiedDate":"2023-11-09"},{"lineNumber":616,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":617,"author":{"gitId":"WeeeHung"},"content":"### [Output Box](#output-box)","lastModifiedDate":"2023-11-07"},{"lineNumber":618,"author":{"gitId":"WeeeHung"},"content":"A small box right below the Patient List View where HealthSync will provide any feedback it has on the instructions","lastModifiedDate":"2023-11-07"},{"lineNumber":619,"author":{"gitId":"WeeeHung"},"content":"it has performed. This includes error messages, success messages, and other information like example commands.","lastModifiedDate":"2023-11-07"},{"lineNumber":620,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":621,"author":{"gitId":"WeeeHung"},"content":"### [Command Box](#command-box)","lastModifiedDate":"2023-11-07"},{"lineNumber":622,"author":{"gitId":"WeeeHung"},"content":"The area where you type your instructions for HealthSync to perform.\u003cbr\u003e","lastModifiedDate":"2023-11-07"},{"lineNumber":623,"author":{"gitId":"WeeeHung"},"content":"\u003e :bulb: You can use the `Spacebar` to focus on the Command Box. This allows you to type your instructions without using the mouse to click on the Command Box.","lastModifiedDate":"2023-11-07"},{"lineNumber":624,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":625,"author":{"gitId":"WZWren"},"content":"### Command History Stack","lastModifiedDate":"2023-11-02"},{"lineNumber":626,"author":{"gitId":"WZWren"},"content":"The group of instructions HealthSync remembers performing. This group allows HealthSync to undo the","lastModifiedDate":"2023-11-02"},{"lineNumber":627,"author":{"gitId":"WeeeHung"},"content":"instructions and return your list to an older state. This stack will be cleared when you exit HealthSync.","lastModifiedDate":"2023-11-07"},{"lineNumber":628,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":629,"author":{"gitId":"WZWren"},"content":"### Java","lastModifiedDate":"2023-11-02"},{"lineNumber":630,"author":{"gitId":"WZWren"},"content":"A piece of software that our program builds on. In order to use HealthSync, your computer must be running at least","lastModifiedDate":"2023-11-02"},{"lineNumber":631,"author":{"gitId":"WZWren"},"content":"version 11 of Java. [Get it here.](https://www.oracle.com/sg/java/technologies/javase/jdk11-archive-downloads.html)","lastModifiedDate":"2023-11-02"},{"lineNumber":632,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":633,"author":{"gitId":"WZWren"},"content":"### JSON","lastModifiedDate":"2023-11-02"},{"lineNumber":634,"author":{"gitId":"WZWren"},"content":"JavaScript Object Notation. This is the file format used by HealthSync to save and store information.","lastModifiedDate":"2023-11-02"},{"lineNumber":635,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":636,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-11-02"},{"lineNumber":637,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":638,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":639,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":640,"author":{"gitId":"nubnubyas"},"content":"| Action         | Shortcut | Format, Examples                                                                                                                               |","lastModifiedDate":"2023-10-27"},{"lineNumber":641,"author":{"gitId":"kanna-1"},"content":"|----------------|----------|------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-11-02"},{"lineNumber":642,"author":{"gitId":"nubnubyas"},"content":"| **Help**       | `h`      | `help`                                                                                                                                         |","lastModifiedDate":"2023-10-27"},{"lineNumber":643,"author":{"gitId":"kanna-1"},"content":"| **List**       | `ls`     | `list`                                                                                                                                         |","lastModifiedDate":"2023-11-02"},{"lineNumber":644,"author":{"gitId":"hyc17003"},"content":"| **Add**        | `a`      | `add n/NAME id/ID_NUMBER [field] ...` \u003cbr\u003e e.g., `add n/James Ho id/SXXXX123D p/91234567 a/A Estate, Clementi Rd, 1234665 e/james@example.com` |","lastModifiedDate":"2023-11-07"},{"lineNumber":645,"author":{"gitId":"nubnubyas"},"content":"| **Edit**       | `e`      | `edit n/NAME [field] ...` \u003cbr\u003e`edit id/ID_NUMBER [field] ... `\u003cbr\u003e e.g.,`edit n/James Lee e/jameslee@example.com`                                 |","lastModifiedDate":"2023-11-09"},{"lineNumber":646,"author":{"gitId":"nubnubyas"},"content":"| **Delete**     | `d`      | `delete n/NAME [field] ...`\u003cbr\u003e `delete id/ID_NUMBER [field] ...` \u003cbr\u003e e.g., `delete n/Alex Yeoh m/Diabetes`                                                                                                           |","lastModifiedDate":"2023-11-09"},{"lineNumber":647,"author":{"gitId":"kanna-1"},"content":"| **Clear**      | `c`      | `clear`                                                                                                                                        |","lastModifiedDate":"2023-11-02"},{"lineNumber":648,"author":{"gitId":"nubnubyas"},"content":"| **Find**       | `f`      | `find n/NAME` \u003cbr\u003e `find id/ID_NUMBER` \u003cbr\u003e `find ap/APPOINTMENT` \u003cbr\u003e e.g., `find n/James Jake` *or* `find id/T0123436F` *or* `find ap/08-aug-2023 0000 2359`                                  |","lastModifiedDate":"2023-11-09"},{"lineNumber":649,"author":{"gitId":"kanna-1"},"content":"| **Log**        | `l`      | `log`                                                                                                                                          |","lastModifiedDate":"2023-11-02"},{"lineNumber":650,"author":{"gitId":"hyc17003"},"content":"| **Append Log** | `al`     | `alog`                                                                                                                                         |","lastModifiedDate":"2023-11-02"},{"lineNumber":651,"author":{"gitId":"hyc17003"},"content":"| **Clear Log**  | `cl`     | `clog`                                                                                                                                         |","lastModifiedDate":"2023-11-02"},{"lineNumber":652,"author":{"gitId":"kanna-1"},"content":"| **Undo**       | `u`      | `undo`                                                                                                                                         |","lastModifiedDate":"2023-11-02"},{"lineNumber":653,"author":{"gitId":"kanna-1"},"content":"| **Exit**       | `e`      | `exit`                                                                                                                                         |","lastModifiedDate":"2023-11-02"}],"authorContributionMap":{"nubnubyas":53,"hyc17003":101,"WZWren":184,"-":134,"kanna-1":116,"WeeeHung":65}},{"path":"docs/diagrams/DeleteActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nubnubyas"},"content":"@startuml Delete Patient Data","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"nubnubyas"},"content":"start","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"nubnubyas"},"content":":Enter delete command;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"nubnubyas"},"content":":Parse arguments;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"nubnubyas"},"content":"if (arguments valid?) then (yes)","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"nubnubyas"},"content":":Execute delete command;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"nubnubyas"},"content":":Find Patient data;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"nubnubyas"},"content":"if (Patient data found?) then (yes)","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"nubnubyas"},"content":":Delete data;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"nubnubyas"},"content":":Notify user of success;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"nubnubyas"},"content":"else (no)","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":":Notify user of failure;","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"nubnubyas"},"content":"endif","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"nubnubyas"},"content":"else (no)","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"nubnubyas"},"content":":Notify user of failure;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"nubnubyas"},"content":"endif","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"nubnubyas"},"content":"stop","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"nubnubyas"},"content":"@enduml","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"nubnubyas":28}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam ArrowFontStyle plain","lastModifiedDate":"2023-07-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":"[-\u003e LogicManager : execute(\"delete n/John Doe\")","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"delete n/John Doe\")","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"activate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"nubnubyas"},"content":"AddressBookParser -\u003e DeleteCommandParser : parse(\"delete n/John Doe\")","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"nubnubyas"},"content":"Create DeleteCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"AddressBookParser --\u003e LogicManager : d","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"nubnubyas"},"content":"DeleteCommand -\u003e Model : getFilteredPersonList()","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"nubnubyas"},"content":"activate Model","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"nubnubyas"},"content":"Model --\u003e DeleteCommand : list","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"nubnubyas"},"content":"deactivate Model","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"nubnubyas"},"content":"DeleteCommand -\u003e Model : findPersonByName(\"John Doe\")","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"activate Model","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"nubnubyas"},"content":"Model --\u003e DeleteCommand : person","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"nubnubyas"},"content":"deactivate Model","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"nubnubyas"},"content":"DeleteCommand -\u003e Model : deletePerson(person)","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Model --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"nubnubyas"},"content":"DeleteCommand -\u003e CommandResult : success","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"nubnubyas"},"content":"\u003c-- LogicManager","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":71,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"nubnubyas":20,"-":52}},{"path":"docs/diagrams/EditActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kanna-1"},"content":"@startuml","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"kanna-1"},"content":"skin rose","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"skinparam ActivityFontSize 15","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"kanna-1"},"content":"skinparam ArrowFontSize 12","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"start","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":":User executes command;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"if () then ([Valid Details])","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"kanna-1"},"content":"  :Update Model with New Details;","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"else ([Else])","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":"endif","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"stop","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"@enduml","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"kanna-1":19}},{"path":"docs/diagrams/EditSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kanna-1"},"content":"@startuml","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"actor User","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"kanna-1"},"content":"participant \":EditCommand\" as EditCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"participant \":Model\" as Model","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"User -\u003e EditCommand: Execute Edit Command","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"kanna-1"},"content":"EditCommand -\u003e Model: Execute Edit","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"alt Person Found","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"kanna-1"},"content":"  Model -\u003e Model: Find Person to Edit","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"  Model --\u003e EditCommand: Person Found","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":"  EditCommand -\u003e EditCommand: Create Edited Person","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"  EditCommand -\u003e Model: Set Edited Person","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"  Model -\u003e Model: Update Filtered Person List","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"  Model --\u003e EditCommand: Update Complete","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"  EditCommand --\u003e User: Edit Successful","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"else Person Not Found","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"  Model -\u003e Model: Find Person to Edit","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"kanna-1"},"content":"  Model --\u003e EditCommand: Person Not Found","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"kanna-1"},"content":"  EditCommand --\u003e User: Person Not Found Error","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"kanna-1"},"content":"end","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"kanna-1"},"content":"User -\u003e EditCommand: (Additional Interactions)","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"kanna-1"},"content":"@enduml","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"kanna-1":24}},{"path":"docs/diagrams/FindActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"@startuml","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"\u0027https://plantuml.com/activity-diagram-beta","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"start","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":":Enter Find Command;","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"if () then (parameter is NRIC or name)","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"  if () then (parameter is NRIC)","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"    :NRIC is parsed;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"    if () then (a patient has a matching NRIC)","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"    :return patient details for matched patient;","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"    else (no patient has a matching NRIC)","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"    :notify the user that no patient was found;","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"    endif","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"  else (parameter is name)","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"    :name is parsed;","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"    if () then (patients have matching names)","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"    :return patient details for all matched patients;","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"    else (no patient has a matching name)","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"    :notify the user that no patient was found;","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"    endif","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"  endif","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"else (parameter is neither NRIC nor name)","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"  :Exception is thrown;","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"endif","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"stop","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"@enduml","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"hyc17003":31}},{"path":"docs/diagrams/FindSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"@startuml","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"title Find Sequence Diagram","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"actor User as U","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"participant \":FindCommandParser\" as Parser","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"participant \":FindCommand\" as Command","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"participant \":Model\" as Model","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"participant \":CommandResult\" as CommandResult","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"U -\u003e Parser: Enter Find Command","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"Parser -\u003e Parser: Parse command","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"Parser -\u003e Command: Create new FindCommand(predicate)","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"Command -\u003e Model: execute(model)","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"Model -\u003e Model: updateFilteredPersonList(predicate)","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"Command --\u003e CommandResult: Create new CommandResult()","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"CommandResult --\u003e U: Display Filtered List","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"@enduml","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"hyc17003":19}},{"path":"docs/team/hyc17003.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"---","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"  layout: default.md","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"  title: \"Yi Chee\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"---","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"### Project: HealthSync","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"HealthSync is a desktop app for managing patient details, optimised for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, HealthSync can help you organise and manage patient details faster than traditional GUI apps.","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"* **New Feature**: Added the ability to log new patient profiles into the logger tab.","lastModifiedDate":"2023-11-10"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"  * What it does: Allows the user to enter `log`, which transfers all patient profiles resulting from the previous `find` command to the logger tab.","lastModifiedDate":"2023-11-10"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"  * Justification: This feature improves the product significantly because a user can use the logger tab as a sort of split view. It allows them to continue referring to the patient details, while still being able to carry out their tasks on the main patient list, such as finding more patients, editing and deleting.","lastModifiedDate":"2023-11-10"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"  * Highlights: This enhancement should only work if there was a `find` command previously. It required an in-depth analysis of the differing edge cases and exceptions that could arise, and appropriate handling of them. ","lastModifiedDate":"2023-11-10"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"* **New Feature**: Added the ability to append new patient profiles to existing profiles in the logger tab.","lastModifiedDate":"2023-11-10"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"  * What it does: Allows the user to append the results of their latest `find` command to what is currently listed in the logger tab, using `alog`. Unlike `log`, `alog` does not overwrite what is currently in the logger tab, and instead adds on to it.","lastModifiedDate":"2023-11-10"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"  * Justification: This feature improves the product significantly because a user can add more profiles to the logger tab for easier referencing. It saves time and effort, as they can compile the results of many `find` commands together for continued referencing.","lastModifiedDate":"2023-11-10"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"  * Highlights: This enhancement, similarly, required an in-depth analysis of the differing cases, one of which is handling the case of duplicates. `alog` has been implemented such that it will add every patient in the `find` command except the duplicate(s) into the logger tab.","lastModifiedDate":"2023-11-10"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-10"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"* **New Feature**: Added the ability to clear all patient profiles in the logger tab.","lastModifiedDate":"2023-11-10"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"  * What it does: Allows the user to clear the logger tab of every patient they have added into the logger tab using either `log` or `alog`.","lastModifiedDate":"2023-11-10"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"  * Justification: This feature improves the product significantly because the logger tab can be reset and reused continuously as is fit for the user, serving as a handy tool akin to a low-effort whiteboard.","lastModifiedDate":"2023-11-10"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"  * Highlights: This enhancement works to remove only the patient profiles in the logger tab, without affecting those in the main patient list.","lastModifiedDate":"2023-11-10"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dhyc17003\u0026breakdown\u003dfalse\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2023-09-22\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos)","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"* **Project management**:","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"  * Set up the README page to match the project ([\\#39](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/39)) ","lastModifiedDate":"2023-11-10"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"  * Added bug tags and descriptions on GitHub to classify and tag bug severity types","lastModifiedDate":"2023-11-10"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-01"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"  * Added on to existing find feature so patients can be searched for by their IDs too","lastModifiedDate":"2023-11-10"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"  * Wrote additional tests for find feature to increase coverage from 75.57% 76.62% (Pull request [\\#78](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/78))","lastModifiedDate":"2023-11-10"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"  * Implemented undo for log, append log and clear log features","lastModifiedDate":"2023-11-10"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"  * Added aliases for log, append log and clear log features","lastModifiedDate":"2023-11-10"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"  * Added duplicate-handling for append log so patients are not added to the logger tab twice","lastModifiedDate":"2023-11-10"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"  * Wrote additional tests for log, alog and clog to increase coverage from 79.46% to 79.75% (Pull request [\\#117](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/117))","lastModifiedDate":"2023-11-10"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"  * Refactored all instances of NRIC and IC Number to ID throughout the entire codebase and User Guide to increase flexibility of the app in accepting identification fields.","lastModifiedDate":"2023-11-10"},{"lineNumber":41,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-01"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"  * User Guide:","lastModifiedDate":"2023-10-01"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"    * Added documentation for the feature find ([\\#46](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/46)).","lastModifiedDate":"2023-11-10"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"    * Added documentation for the features log, append log and clear log ([\\#91](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/91)).","lastModifiedDate":"2023-11-10"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"    * Updated existing documentation of all features to include tips ([\\#136](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/136)).","lastModifiedDate":"2023-11-10"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"    * Added glossary for icons used throughout ([\\#203](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/203)).","lastModifiedDate":"2023-11-10"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"    * Added instructions for making backup copies of the json file ([\\#203](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/203)).","lastModifiedDate":"2023-11-10"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"    * Added description and explanation for logger tab under glossary ([\\#203](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/203)).","lastModifiedDate":"2023-11-10"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"    * Added screenshots for all features ([\\#136](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/136), [\\#145](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/145)).","lastModifiedDate":"2023-11-10"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-01"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"    * Added implementation details of the `find` feature and added diagrams ([\\#105](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/105)).","lastModifiedDate":"2023-11-10"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"    * Updated DG use cases to reflect updates to the project","lastModifiedDate":"2023-11-10"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"* **Community**:","lastModifiedDate":"2023-10-01"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#95](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/95), [\\#130](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/130), [\\#217](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/217), [\\#211](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/211).","lastModifiedDate":"2023-11-10"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"  * Reported bugs and suggestions for other teams in the cohort (examples: [1](https://github.com/AY2324S1-CS2103T-W10-4/tp/issues/206), [2](https://github.com/AY2324S1-CS2103T-W10-4/tp/issues/184), [3](https://github.com/AY2324S1-CS2103T-W10-4/tp/issues/167)).","lastModifiedDate":"2023-11-10"}],"authorContributionMap":{"hyc17003":57}},{"path":"docs/team/kanna-1.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"kanna-1"},"content":"---","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"kanna-1"},"content":"Janssen Lau\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"---","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"### Project: HealthSync","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"HealthSync is an application designed to streamline the workflow of healthcare center frontdesk staff by allowing them to efficiently register and access patient information within 2-3 minutes. It offers a user-friendly platform that enhances patient management, appointment scheduling, and health record retrieval, ultimately improving care delivery and saving valuable time for healthcare professionals.","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"kanna-1"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":"* **New Feature**: Added the ability to undo a Command","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"  * What it does: allows the user to undo an edit, add and delete command","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"  * Justification: This feature allows users to be able to quickly recover from errors made without having to go through a series of other commands to achieve the same goal.","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dkanna-1\u0026breakdown\u003dfalse\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2023-09-22\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos)","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":20,"author":{"gitId":"kanna-1"},"content":"* **Project management**:","lastModifiedDate":"2023-10-01"},{"lineNumber":21,"author":{"gitId":"kanna-1"},"content":"    * `to be added soon `","lastModifiedDate":"2023-10-01"},{"lineNumber":22,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":23,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":24,"author":{"gitId":"kanna-1"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-01"},{"lineNumber":25,"author":{"gitId":"kanna-1"},"content":"  Added the ability to edit patient fields based on their name and/or ID","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"    * What it does: allows the user to edit existing patient fields with name and/or ID instead of index. If the fields do not exist, the field will be created automatically.","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"kanna-1"},"content":"    * Justification: This feature improves the product significantly because this feature allows the user to elegantly update patient details with unique identification","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":31,"author":{"gitId":"kanna-1"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-01"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"    * User Guide:","lastModifiedDate":"2023-10-01"},{"lineNumber":33,"author":{"gitId":"kanna-1"},"content":"        * Added documentation for the features `edit`","lastModifiedDate":"2023-10-01"},{"lineNumber":34,"author":{"gitId":"kanna-1"},"content":"        * Added dcoumentation for the features `undo`","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"    * Developer Guide:","lastModifiedDate":"2023-10-01"},{"lineNumber":36,"author":{"gitId":"kanna-1"},"content":"        * Added implementation details of the `edit` feature","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"        * Added implementation details of the `undo` feature","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"kanna-1"},"content":"        * Added non-functional requirements in the DG","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":40,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"* **Community**:","lastModifiedDate":"2023-10-01"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"  * `to be added soon`","lastModifiedDate":"2023-10-01"},{"lineNumber":43,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":44,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":45,"author":{"gitId":"kanna-1"},"content":"* **Tools**:","lastModifiedDate":"2023-10-01"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"    * `to be added soon `","lastModifiedDate":"2023-10-01"},{"lineNumber":47,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":48,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-01"}],"authorContributionMap":{"kanna-1":48}},{"path":"docs/team/nubnubyas.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nubnubyas"},"content":"---","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"nubnubyas"},"content":"  layout: default.md","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"nubnubyas"},"content":"  title: \"Zhang Yiheng\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"nubnubyas"},"content":"---","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"nubnubyas"},"content":"### Project: HealthSync","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"nubnubyas"},"content":"HealthSync is an application designed to streamline the workflow of healthcare center frontdesk staff by allowing them to efficiently register and access patient information within 2-3 minutes. It offers a user-friendly platform that enhances patient management, appointment scheduling, and health record retrieval, ultimately improving care delivery and saving valuable time for healthcare professionals.","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":9,"author":{"gitId":"nubnubyas"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-01"},{"lineNumber":10,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":11,"author":{"gitId":"nubnubyas"},"content":"* **New Feature**: Added shortcuts for commands.","lastModifiedDate":"2023-11-10"},{"lineNumber":12,"author":{"gitId":"nubnubyas"},"content":"  * What it does: Allows the user to use shortcuts for all the commands.","lastModifiedDate":"2023-11-10"},{"lineNumber":13,"author":{"gitId":"nubnubyas"},"content":"  * Justification: This feature improves the product significantly because this feature allows the user to use shortcuts for all the commands. This is useful for the user as they can use shortcuts to execute commands faster.","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"nubnubyas"},"content":"  * Note: Shortcuts for `log`, `clog` and `alog` was implemented by another team member.","lastModifiedDate":"2023-11-10"},{"lineNumber":15,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":16,"author":{"gitId":"nubnubyas"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dnubnubyas\u0026breakdown\u003dfalse\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2023-09-22\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos)","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":"* **Project management**:","lastModifiedDate":"2023-10-01"},{"lineNumber":19,"author":{"gitId":"nubnubyas"},"content":"  * Helped with assigning labels for issues from PE-D.","lastModifiedDate":"2023-11-10"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"  * Helped with renaming usage of `person` in code to `patient` as much as possible in comments and documentation to minimize confusion.","lastModifiedDate":"2023-11-10"},{"lineNumber":21,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":22,"author":{"gitId":"nubnubyas"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-01"},{"lineNumber":23,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"nubnubyas"},"content":"  * Enhance the `delete` feature to allow deletion of specified fields and deletion by name or IC","lastModifiedDate":"2023-11-10"},{"lineNumber":25,"author":{"gitId":"nubnubyas"},"content":"    * What it Does: Allows users to delete a patient by their IC or name instead of index. Allows the user to delete specified fields such as the appointment and medical history of a patient. Users can specify which medical history to delete.","lastModifiedDate":"2023-11-10"},{"lineNumber":26,"author":{"gitId":"nubnubyas"},"content":"    * Justification: This feature improves the product significantly because it allows the user to delete patients by their IC or name instead of index. This is more intuitive and convenient for the user. It also allows the user to delete specified fields. This is useful for the user as they can delete the specified details of a patient without deleting the patient\u0027s other details.","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"nubnubyas"},"content":"  * Enhance `delete` and `edit` feature to affect original list after `find` command.","lastModifiedDate":"2023-11-10"},{"lineNumber":28,"author":{"gitId":"nubnubyas"},"content":"    * What it Does: Allows users to edit or delete a patient without having to go back to the original list if they are currently in a filtered list after a find command.","lastModifiedDate":"2023-11-10"},{"lineNumber":29,"author":{"gitId":"nubnubyas"},"content":"    * Justification: This feature improves the efficiency of users as they will not have to return to the original list everytime. This enhancement works well with the logger tab since the logger tab can save records of find command, hence aidding the deletion of patients through already filtered list of patients.","lastModifiedDate":"2023-11-10"},{"lineNumber":30,"author":{"gitId":"nubnubyas"},"content":"  * Enhance `Appointment` to be case insensitive.","lastModifiedDate":"2023-11-10"},{"lineNumber":31,"author":{"gitId":"nubnubyas"},"content":"  * Enhance `Email` to have tighter restrictions on format.","lastModifiedDate":"2023-11-10"},{"lineNumber":32,"author":{"gitId":"nubnubyas"},"content":"  * Enhance `Id` to be capitalised regardless of input case.","lastModifiedDate":"2023-11-10"},{"lineNumber":33,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":35,"author":{"gitId":"nubnubyas"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-01"},{"lineNumber":36,"author":{"gitId":"nubnubyas"},"content":"  * User Guide:","lastModifiedDate":"2023-10-01"},{"lineNumber":37,"author":{"gitId":"nubnubyas"},"content":"    * Enhance introduction of the UG. [\\#140](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/140)","lastModifiedDate":"2023-11-10"},{"lineNumber":38,"author":{"gitId":"nubnubyas"},"content":"    * Added shortcut column to command summary. [\\#104](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/104)","lastModifiedDate":"2023-11-10"},{"lineNumber":39,"author":{"gitId":"nubnubyas"},"content":"    * Added documentation for the features `delete` [\\#72](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/72)","lastModifiedDate":"2023-11-10"},{"lineNumber":40,"author":{"gitId":"nubnubyas"},"content":"    * Update command formats of features to aid users and prevent confusion. [\\#204](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/204)","lastModifiedDate":"2023-11-10"},{"lineNumber":41,"author":{"gitId":"nubnubyas"},"content":"    * Update description of features to better match the actual functionality of HealthSync. [\\#204](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/204)","lastModifiedDate":"2023-11-10"},{"lineNumber":42,"author":{"gitId":"nubnubyas"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-01"},{"lineNumber":43,"author":{"gitId":"nubnubyas"},"content":"    * Updated Glossary. [\\#58](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/58)","lastModifiedDate":"2023-11-10"},{"lineNumber":44,"author":{"gitId":"nubnubyas"},"content":"    * Added implementation details of the `delete` feature. [\\#102](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/102)","lastModifiedDate":"2023-11-10"},{"lineNumber":45,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":46,"author":{"gitId":"nubnubyas"},"content":"* **Community**:","lastModifiedDate":"2023-10-01"},{"lineNumber":47,"author":{"gitId":"nubnubyas"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#62](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/62), [\\#105](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/105), [\\#109](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/109), [\\#117](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/117), [\\#198](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/198), [\\#209](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/209), [\\#211](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/211), [\\#217](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/217)","lastModifiedDate":"2023-11-10"}],"authorContributionMap":{"nubnubyas":47}},{"path":"docs/team/weeehung.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"---","lastModifiedDate":"2023-09-28"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"  layout: default.md","lastModifiedDate":"2023-09-28"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"  title: \"Wee Hung\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-09-28"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"---","lastModifiedDate":"2023-09-28"},{"lineNumber":5,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"## Project: HealthSync","lastModifiedDate":"2023-11-08"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"HealthSync is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-09-28"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-09-28"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":12,"author":{"gitId":"WeeeHung"},"content":"* **New Feature**:","lastModifiedDate":"2023-11-08"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"  1. Added fields like ID, Appointment and Medical Histories.","lastModifiedDate":"2023-11-08"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":"        * What it does: Allows for necessary fields to be included in the profile","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"        * Justification: This feature improves the product significantly because a user can now see the ID, appointment timings and medical history at one glance, since all information are bundled in a patient card. This caters to the needs of front desk staff who need to quickly identify patients, their medical histories and arrange appointments.","lastModifiedDate":"2023-11-09"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"        * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing models, commands and test cases.","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":19,"author":{"gitId":"WeeeHung"},"content":"  2. Added logger tab UI to show logged profiles","lastModifiedDate":"2023-11-08"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"      * What it does: Allows for logs to be pinned at the right panel of the application","lastModifiedDate":"2023-11-08"},{"lineNumber":21,"author":{"gitId":"WeeeHung"},"content":"      * Justification: This feature improves the product significantly because a user can now utilise the logger like a memo.","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"      * Highlights: This enhancement affects log commands. The Person Cards UI are consistent in both the Logger Tab and Patient List View.","lastModifiedDate":"2023-11-08"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"  3. Added Menu Sidebar UI","lastModifiedDate":"2023-11-09"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"      * What it does: It shows users miscellaneous actions that can be performed in the application (ie. Help, Settings, Exit).","lastModifiedDate":"2023-11-08"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":"      * Justification: This feature provides a more intuitive way for users to navigate the application. It also supports future integration of file settings and help features.","lastModifiedDate":"2023-11-08"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"      * Highlights: The buttons present in this sidebar have their corresponding shortcuts and can be executed through command text box.","lastModifiedDate":"2023-11-09"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"  4. Added `spacebar` key shortcut","lastModifiedDate":"2023-11-08"},{"lineNumber":30,"author":{"gitId":"WeeeHung"},"content":"      * What it does:  Allows users to jump to command text box without using mouse to click on command text box","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"      * Justification: This feature improves the product significantly as it caters to the habits and characteristics of fast typists.","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"WeeeHung"},"content":"      * Highlights: This enhancement does not affect other components and is standalone. For future implementations of settings, we can allow users to pick their preferred shortcuts.","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dweeehung\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code\u0026since\u003d2023-09-22)","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"* **Project management**:","lastModifiedDate":"2023-09-28"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"  * Managed releases [`v1.2.1`](https://github.com/AY2324S1-CS2103T-T14-3/tp/releases/tag/v1.2.1) (1 release) on GitHub","lastModifiedDate":"2023-11-08"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"  * Assisted in Jar Release [`v1.3`](https://github.com/AY2324S1-CS2103T-T14-3/tp/releases/tag/v1.3) (1 release) on GitHub","lastModifiedDate":"2023-11-08"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-09-28"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"  * Added new fields necessary for patient tracking.","lastModifiedDate":"2023-11-08"},{"lineNumber":42,"author":{"gitId":"WeeeHung"},"content":"  * Updated the GUI color scheme (Pull requests [\\#107](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/107))","lastModifiedDate":"2023-11-08"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"  * Updated the frontend design of application, including menu sidebar, medical history tags and logger tabs.","lastModifiedDate":"2023-11-09"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"  * Wrote additional tests for existing features to increase coverage from 75% to XX% (Pull requests [\\#63](), [\\#38]())","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"  * Refactor File Names to be more consistent (Pull requests [\\#209](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/209))","lastModifiedDate":"2023-11-08"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"* **Documentation**:","lastModifiedDate":"2023-09-28"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"  * User Guide:","lastModifiedDate":"2023-09-28"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"    * Added documentation for the features `autosave` [\\#30](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/30)","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"    * Annotated GUI screenshots with explanations to orientate users [\\#209](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/209)","lastModifiedDate":"2023-11-08"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"    * Added Autosave explanation to mention what is saved in the hard disk [\\#209](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/209)","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"    * Added explanation for edge case of appointment field (0-minute appointment) [\\#209](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/209)","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"    * Added description for archiving data files (Future implementation) [\\#209](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/209)","lastModifiedDate":"2023-11-08"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"  * Developer Guide:","lastModifiedDate":"2023-09-28"},{"lineNumber":55,"author":{"gitId":"WeeeHung"},"content":"    * Added Product Scope which includes target user profile and value proposition.","lastModifiedDate":"2023-10-25"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"    * Added user stories and sort them in terms of priority","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":58,"author":{"gitId":"WeeeHung"},"content":"* **Community**:","lastModifiedDate":"2023-09-28"},{"lineNumber":59,"author":{"gitId":"WeeeHung"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#74](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/74), [\\#82](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/82)","lastModifiedDate":"2023-10-25"},{"lineNumber":60,"author":{"gitId":"WeeeHung"},"content":"  * Contributed to forum discussions (examples: [#253](https://github.com/nus-cs2103-AY2324S1/forum/issues/253))","lastModifiedDate":"2023-11-08"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"  * Reported bugs and suggestions for other teams in the class (Issues examples: [#1](https://github.com/WeeeHung/ped/issues/1), [#2](https://github.com/WeeeHung/ped/issues/2), [#3](https://github.com/WeeeHung/ped/issues/3), [#4](https://github.com/WeeeHung/ped/issues/4),)","lastModifiedDate":"2023-11-08"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"  * New fields implemented by me are adopted by the team ([#63](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/63))","lastModifiedDate":"2023-10-25"},{"lineNumber":63,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":64,"author":{"gitId":"WeeeHung"},"content":"* **Tools**:","lastModifiedDate":"2023-09-28"},{"lineNumber":65,"author":{"gitId":"WeeeHung"},"content":"  * Utitlised JavaFx Scene Builder for building the frontend of the project ([\\#107](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/107))","lastModifiedDate":"2023-11-08"},{"lineNumber":66,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":67,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":68,"author":{"gitId":"WeeeHung"},"content":"### **References**:","lastModifiedDate":"2023-11-08"},{"lineNumber":69,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":70,"author":{"gitId":"WeeeHung"},"content":"#### _Usage of Javafx Scene Builder_","lastModifiedDate":"2023-11-08"},{"lineNumber":71,"author":{"gitId":"WeeeHung"},"content":"![Usage of JavaFx Scene Builder](../images/SceneBuilder.png)","lastModifiedDate":"2023-11-08"},{"lineNumber":72,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":73,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":74,"author":{"gitId":"WeeeHung"},"content":"#### _Changes to GUI_","lastModifiedDate":"2023-11-08"},{"lineNumber":75,"author":{"gitId":"WeeeHung"},"content":"![GUI Changes](../images/HealthSyncGUI_v1.4.png)","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"WeeeHung":75}},{"path":"docs/team/wzwren.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"---","lastModifiedDate":"2023-10-01"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"    layout: default.md","lastModifiedDate":"2023-10-01"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"    title: \"Wang Zhi Wren\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-01"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"---","lastModifiedDate":"2023-10-01"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"### Project: HealthSync","lastModifiedDate":"2023-10-01"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"HealthSync is an application designed to streamline the workflow of healthcare center frontdesk staff","lastModifiedDate":"2023-11-08"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"by allowing them to efficiently register and access patient information within 2-3 minutes.","lastModifiedDate":"2023-11-08"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"It offers a user-friendly platform that enhances patient management, appointment scheduling,","lastModifiedDate":"2023-11-08"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"and health record retrieval, ultimately improving care delivery and saving valuable time for healthcare professionals.","lastModifiedDate":"2023-11-08"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-01"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"* **New Feature**:","lastModifiedDate":"2023-11-08"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"  * `Appointment` field implementation, including the parsing and handling logic of","lastModifiedDate":"2023-11-08"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"    temporal data.","lastModifiedDate":"2023-11-08"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"    * What it does: allows the user to store appointment data directly in a verifiable way,","lastModifiedDate":"2023-11-09"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"      without needing them to verify their input themselves.","lastModifiedDate":"2023-11-09"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"    * Justification: Temporal data like appointments are very commonly handled by our target","lastModifiedDate":"2023-11-09"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"      audience. By allowing them to flexibly input their time, and storing it in a particular manner","lastModifiedDate":"2023-11-09"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"      that the engine can understand, we can more easily make use of this field to improve our user\u0027s","lastModifiedDate":"2023-11-09"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"      experience.","lastModifiedDate":"2023-11-09"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"    * Highlights: This feature required an understanding of how temporal data is parsed by the Java engine,","lastModifiedDate":"2023-11-09"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"      and how it can be made more flexible to parse and interpret on the backend.","lastModifiedDate":"2023-11-09"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dT14-3\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code\u0026since\u003d2023-09-22\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dWZWren\u0026tabRepo\u003dAY2324S1-CS2103T-T14-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026authorshipIsIgnoredFilesChecked\u003dfalse)","lastModifiedDate":"2023-10-01"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-01"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"  * Enhanced `add` feature to allow for addition of new fields added by the team.","lastModifiedDate":"2023-11-08"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"  * Expanded `find` feature to allow for search by name, IC and Appointment.","lastModifiedDate":"2023-11-08"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"  * Expanded `find` feature to compose multiple search fields through the use of","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"    the `Predicate` functional interface class.","lastModifiedDate":"2023-11-08"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"    * What it does: allows the user to customize their search terms when using the `find` command.","lastModifiedDate":"2023-11-09"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"    * Justification: `find` should generally be as flexible as possible to allow users to filter through their","lastModifiedDate":"2023-11-09"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"      search data easier. Implementing this feature in this way allows us to scale this feature up when we want to","lastModifiedDate":"2023-11-09"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"      expand our search terms.","lastModifiedDate":"2023-11-09"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"    * Highlights: Creating `Predicate` classes as concrete classes allow us to more accurately compare 2 differently","lastModifiedDate":"2023-11-09"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"      composed search terms and manage equalities easier. In particular, a `CompositePredicate` class was created","lastModifiedDate":"2023-11-09"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"      through the use of `Sets`, which required an understanding of how hashing works for a `Predicate` interface and","lastModifiedDate":"2023-11-09"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"      how it is interpreted for lambdas.","lastModifiedDate":"2023-11-09"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"* **Documentation for UG**:","lastModifiedDate":"2023-10-01"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"    * Added Glossary Section for UG.","lastModifiedDate":"2023-11-08"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"    * Hyperlinked relevant sections in UG to the Glossary.","lastModifiedDate":"2023-11-08"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"* **Documentation for DG**:","lastModifiedDate":"2023-10-01"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"    * Added implementation details for `Appointment`, `Predicate` and `Find` features.","lastModifiedDate":"2023-11-08"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"* **Project management**:","lastModifiedDate":"2023-10-01"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"  * Managed milestones `v1.2` and `v1.3` to keep it close to the deadline.","lastModifiedDate":"2023-11-09"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"  * Performed troubleshooting in workflow for projects. Examples include:","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"    * [Troubleshooting CodeCov](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/72)","lastModifiedDate":"2023-11-08"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"    * [Troubleshooting jackson json library with @WeeeHung](https://github.com/nus-cs2103-AY2324S1/forum/issues/253)","lastModifiedDate":"2023-11-08"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"  * Performed significant in-depth code review on PRs of my peers. Example PRs include:","lastModifiedDate":"2023-11-08"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"    * [Edit Command Enhancement by @kanna-1](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/77)","lastModifiedDate":"2023-11-08"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"    * [Delete Command Initial Enhancement by @nubnubyas](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/75)","lastModifiedDate":"2023-11-08"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"    * [Delete Command Refactoring by @nubnubyas](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/129)","lastModifiedDate":"2023-11-08"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"    * [Log Command Implementation by @hyc17003](https://github.com/AY2324S1-CS2103T-T14-3/tp/pull/117)","lastModifiedDate":"2023-11-08"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-01"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"* **Community**:","lastModifiedDate":"2023-11-08"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"    * Occasionally helped other members of the course in responding in the forum.","lastModifiedDate":"2023-11-08"},{"lineNumber":63,"author":{"gitId":"WZWren"},"content":"      Examples include:","lastModifiedDate":"2023-11-08"},{"lineNumber":64,"author":{"gitId":"WZWren"},"content":"      * [JavaFX Config Errors by @JasonRay168](https://github.com/nus-cs2103-AY2324S1/forum/issues/122)","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"      * [Relative Path Issues by @zacwong2151](https://github.com/nus-cs2103-AY2324S1/forum/issues/153)","lastModifiedDate":"2023-11-08"}],"authorContributionMap":{"WZWren":65}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"# Tutorial: Adding a command","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/add-remark/RemarkClass.puml\" alt\u003d\"The relationship between RemarkCommand and Command\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"../diagrams/add-remark/ParserClass.puml\" alt\u003d\"The relationship between Parser and RemarkCommandParser\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2023-09-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":236,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2022-01-02"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"tip\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2023-09-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"WeeeHung"},"content":"You must delete HealthSync\u0027s storage file located at `/data/healthsync.json` before running it! Not doing so will cause HealthSync to have an empty patient list!","lastModifiedDate":"2023-11-09"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":350,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":379,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":402,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"-":401,"WeeeHung":1}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);","lastModifiedDate":"2023-11-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2023-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logger.info(\"Using data file : \" + storage.getAddressBookFilePath());","lastModifiedDate":"2023-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                logger.info(\"Creating a new data file \" + storage.getAddressBookFilePath()","lastModifiedDate":"2023-05-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                        + \" populated with a sample AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file at \" + storage.getAddressBookFilePath() + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                    + \" Will be starting with an empty AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            if (!configOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new config file \" + configFilePathUsed);","lastModifiedDate":"2023-05-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                    + \" Using default config properties.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        logger.info(\"Using preference file : \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            if (!prefsOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new preference file \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            logger.warning(\"Preference file at \" + prefsFilePath + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                    + \" Using default preferences.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":185,"WeeeHung":1}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"    /** Returns an unmodifiable view of the logged list of persons after user use Log Command */","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"    ObservableList\u003cPerson\u003e getLoggedFilteredPersonList();","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"-":50,"WeeeHung":3}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-06-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        } catch (AccessDeniedException e) {","lastModifiedDate":"2023-06-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);","lastModifiedDate":"2023-06-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);","lastModifiedDate":"2023-06-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":74,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":75,"author":{"gitId":"WeeeHung"},"content":"    public ObservableList\u003cPerson\u003e getLoggedFilteredPersonList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":76,"author":{"gitId":"WeeeHung"},"content":"        return model.getLoggedFilteredPersonList();","lastModifiedDate":"2023-10-27"},{"lineNumber":77,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":78,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"-":88,"WeeeHung":5}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_INVALID_ID \u003d \"Please provide a valid ID\";","lastModifiedDate":"2023-11-07"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_INVALID_NAME \u003d \"Please provide a valid Name\";","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_INVALID_ID_AND_NAME \u003d \"Please provide either a valid ID or Name\";","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";","lastModifiedDate":"2023-11-06"},{"lineNumber":21,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";","lastModifiedDate":"2023-11-06"},{"lineNumber":22,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_NO_PATIENT_FOUND \u003d \"No such patient found!\";","lastModifiedDate":"2023-11-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_EMPTY_FIND_RESULT \u003d","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"            \"There are no FindCommand results. There is nothing to be saved to the logger tab.\";","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_EMPTY_LOG \u003d","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"            \"No previous log to undo.\";","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"nubnubyas"},"content":"        builder.append(\"\\nName: \")","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"                .append(person.getName())","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"                .append(\"; ID: \")","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"                .append(person.getId())","lastModifiedDate":"2023-11-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .append(person.getPhone())","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .append(person.getEmail())","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .append(person.getAddress())","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"nubnubyas"},"content":"                .append(\";\\n\")","lastModifiedDate":"2023-10-17"},{"lineNumber":59,"author":{"gitId":"nubnubyas"},"content":"                .append(\"Appointment: \")","lastModifiedDate":"2023-10-17"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"                .append(person.getAppointment().orElse(person.getAppointment().orElse(null)))","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"nubnubyas"},"content":"                .append(\"; Medical Histories: \");","lastModifiedDate":"2023-10-17"},{"lineNumber":62,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":63,"author":{"gitId":"nubnubyas"},"content":"        person.getMedicalHistories().forEach(builder::append);","lastModifiedDate":"2023-10-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hyc17003":8,"nubnubyas":11,"-":46,"kanna-1":1}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"nubnubyas"},"content":" * Adds a patient to the address book.","lastModifiedDate":"2023-11-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"kanna-1"},"content":"public class AddCommand extends UndoableCommand {","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"nubnubyas"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"a\";","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" or \" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"kanna-1"},"content":"            + \": Adds a Patient to the Patient list. \"","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"            + PREFIX_ID + \"ID \"","lastModifiedDate":"2023-11-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"            + \"[\" + PREFIX_APPOINTMENT + \"APPOINTMENT] \"","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"            + \"[\" + PREFIX_MEDICAL + \"MEDICAL_HISTORY]...\\n\"","lastModifiedDate":"2023-10-17"},{"lineNumber":37,"author":{"gitId":"nubnubyas"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"            + PREFIX_ID + \"S8765432A \"","lastModifiedDate":"2023-11-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_APPOINTMENT + \"17-10-2023 11:00 13:00 \"","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"            + PREFIX_MEDICAL + \"hypochondriac \"","lastModifiedDate":"2023-10-17"},{"lineNumber":45,"author":{"gitId":"kanna-1"},"content":"            + PREFIX_MEDICAL + \"on Medicine XYZ \\n\"","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"nubnubyas"},"content":"            + \"Example 2: \" + COMMAND_WORD_ALIAS + \" \"","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_NAME + \"Alex Yeoh \"","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"            + PREFIX_ID + \"S6742632F \"","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_PHONE + \"85743822 \"","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_EMAIL + \"alex@example.com \"","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_ADDRESS + \"420, Country Road, #02-25 \"","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_APPOINTMENT + \"10-11-2023 11:00 13:00 \"","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_MEDICAL + \"tachycardia \"","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_MEDICAL + \"on Medicine CHS \";","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"kanna-1"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New Patient added: %1$s\";","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This Patient already exists in HealthSync.\";","lastModifiedDate":"2023-11-06"},{"lineNumber":58,"author":{"gitId":"kanna-1"},"content":"    public static final String MESSAGE_UNDO_ADD_SUCCESS \u003d \"Undoing the adding of Patient:  %1$s\";","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"nubnubyas"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-11-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":79,"author":{"gitId":"kanna-1"},"content":"        model.addToHistory(this);","lastModifiedDate":"2023-10-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"kanna-1"},"content":"    public CommandResult undo(Model model) {","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"kanna-1"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"kanna-1"},"content":"        model.deletePerson(toAdd);","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"kanna-1"},"content":"        return new CommandResult(String.format(MESSAGE_UNDO_ADD_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-07-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hyc17003":4,"nubnubyas":16,"WZWren":5,"-":73,"kanna-1":13}},{"path":"src/main/java/seedu/address/logic/commands/AppendLogCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.LogBook;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"/**","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":" * Appends the results of a FindCommand to the logbook.","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":" */","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"public class AppendLogCommand extends UndoableCommand {","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"    public static final String COMMAND_WORD \u003d \"alog\";","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"al\";","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" or \" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"            + \": Appends the results of the most recent FindCommand to the logger tab.\\n\"","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"            + \"Example 1: \" + COMMAND_WORD + \"\\n\"","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"            + \"Example 2: \" + COMMAND_WORD_ALIAS;","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"The last filtered values have been added onto the logger tab.\";","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Cannot log an empty list.\";","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_UNDO_ALOG_SUCCESS \u003d \"Undoing the appending to log.\";","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"    private LogBook logBookBeforeAppend;","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"     * Executes the AppendLogCommand, appending the results of the most recent FindCommand to the logbook.","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"     * @param model The current model that contains the data.","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"     * @return A CommandResult indicating the success of the operation.","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"     * @throws CommandException If there are no results from the most recent FindCommand.","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"        // Ensure that there are results from the most recent FindCommand","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"        if (model.getFoundPersonsList().isEmpty()) {","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"            throw new CommandException(MESSAGE_FAILURE);","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        // Store a copy of the current logBook before updating it","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"        logBookBeforeAppend \u003d new LogBook(model.getLogBook());","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"        model.addToHistory(this);","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"        boolean hasDupes \u003d false; // tells the program if the execution encountered dupes","lastModifiedDate":"2023-11-08"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"        String duplicateClause \u003d \"\"; // string collection of all dupes encountered","lastModifiedDate":"2023-11-08"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"        for (Person person : model.getFoundPersonsList()) {","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"            if (model.getLogBook().hasPerson(person)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"                hasDupes \u003d true;","lastModifiedDate":"2023-11-08"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"                duplicateClause +\u003d \" \" + person.getName() + \", ID: \" + person.getId() + \".\";","lastModifiedDate":"2023-11-08"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"                continue; // skip over the addition of the current person","lastModifiedDate":"2023-11-08"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"            model.getLogBook().addPerson(person);","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"        return hasDupes","lastModifiedDate":"2023-11-08"},{"lineNumber":64,"author":{"gitId":"hyc17003"},"content":"                ? new CommandResult(\"Person(s) already in list:\" + duplicateClause","lastModifiedDate":"2023-11-08"},{"lineNumber":65,"author":{"gitId":"hyc17003"},"content":"                    + \" They were not appended to the log.\")","lastModifiedDate":"2023-11-08"},{"lineNumber":66,"author":{"gitId":"hyc17003"},"content":"                : new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-11-08"},{"lineNumber":67,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":68,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"hyc17003"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":71,"author":{"gitId":"hyc17003"},"content":"     * Undoes the AppendLogCommand, restoring the logbook to its state before the appending.","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"hyc17003"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":73,"author":{"gitId":"hyc17003"},"content":"     * @param model The current model that contains the data.","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"hyc17003"},"content":"     * @return A CommandResult indicating the success of the undo operation.","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"hyc17003"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"hyc17003"},"content":"    public CommandResult undo(Model model) {","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"hyc17003"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-31"},{"lineNumber":79,"author":{"gitId":"hyc17003"},"content":"        model.setLogBook(logBookBeforeAppend);","lastModifiedDate":"2023-10-31"},{"lineNumber":80,"author":{"gitId":"hyc17003"},"content":"        return new CommandResult(MESSAGE_UNDO_ALOG_SUCCESS);","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":82,"author":{"gitId":"hyc17003"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"hyc17003":74,"WZWren":8}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"public class ClearCommand extends UndoableCommand {","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"nubnubyas"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"c\";","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"HealthSync has been cleared!\";","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"kanna-1"},"content":"    public static final String MESSAGE_UNDO_CLEAR_SUCCESS \u003d \"Undoing the clearing of HealthSync data.\";","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"kanna-1"},"content":"    private AddressBook addressBookBeforeClear;","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"kanna-1"},"content":"        // Store a copy of the current address book before clearing","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"kanna-1"},"content":"        addressBookBeforeClear \u003d new AddressBook(model.getAddressBook());","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"kanna-1"},"content":"        model.addToHistory(this);","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"    public CommandResult undo(Model model) {","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"kanna-1"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"        model.setAddressBook(addressBookBeforeClear);","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"kanna-1"},"content":"        return new CommandResult(MESSAGE_UNDO_CLEAR_SUCCESS);","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nubnubyas":3,"-":22,"kanna-1":15}},{"path":"src/main/java/seedu/address/logic/commands/ClearLogCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.LogBook;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"/**","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":" * Clears the logger tab.","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":" */","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"public class ClearLogCommand extends UndoableCommand {","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"    public static final String COMMAND_WORD \u003d \"clog\";","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"cl\";","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" or \" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"            + \": Clears the entire logger tab.\\n\"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"            + \"Example 1: \" + COMMAND_WORD + \"\\n\"","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"            + \"Example 2: \" + COMMAND_WORD_ALIAS;","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Logger tab has been cleared!\";","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_UNDO_CLOG_SUCCESS \u003d \"Undoing clearing of the logging.\";","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"    private LogBook logBookBeforeClear;","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"     * Executes the ClearLogCommand, clearing the entire logger tab.","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"     * @param model The current model that contains the data.","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"     * @return A CommandResult indicating the success of the operation.","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"        // Store a copy of the current logBook before updating it","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"        logBookBeforeClear \u003d new LogBook(model.getLogBook());","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"        model.addToHistory(this);","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"        model.setLogBook(new LogBook());","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"     * Undoes the ClearLogCommand, restoring the logger tab to its state before clearing.","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"     * @param model The current model that contains the data.","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"     * @return A CommandResult indicating the success of the undo operation.","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"    public CommandResult undo(Model model) {","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"        model.setLogBook(logBookBeforeClear);","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"        return new CommandResult(MESSAGE_UNDO_CLOG_SUCCESS);","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"hyc17003":58}},{"path":"src/main/java/seedu/address/logic/commands/CommandUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import java.util.List;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":" * Contains shared utility methods used in the various *Command classes.","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"public class CommandUtil {","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"    public static final String MESSAGES_ALL_FIELDS_NULL \u003d \"At least one identifying field should be provided.\";","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"    private CommandUtil() {}","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"     * Finds a {@code Person} from {@code List\u003cPerson\u003e persons} using the given {@code Name name}","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"     * and {@code Id id}, if able.\u003cbr\u003e","lastModifiedDate":"2023-11-07"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"     * This method expects {@code id} and {@code name} to not be {@code null} simultaneously.","lastModifiedDate":"2023-11-07"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"     * @param name The {@code Name} identifier field to search with.","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"     * @param id The {@code Id} identifier field to search with.","lastModifiedDate":"2023-11-07"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"     * @param persons The collection of {@code Person} to search within.","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"     * @return A person that was found, wrapped as an {@code Optional\u003cPerson\u003e}.","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"    public static Optional\u003cPerson\u003e findPersonByIdentifier(Name name, Id id, List\u003cPerson\u003e persons)","lastModifiedDate":"2023-11-07"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"            throws CommandException {","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"        requireNonNull(persons);","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"        if (name \u003d\u003d null \u0026\u0026 id \u003d\u003d null) {","lastModifiedDate":"2023-11-07"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"            throw new CommandException(MESSAGES_ALL_FIELDS_NULL);","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"        Optional\u003cPerson\u003e fetchPerson \u003d persons.stream()","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"                .filter(p -\u003e name \u003d\u003d null || p.getName().equals(name))","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"                .filter(p -\u003e id \u003d\u003d null || p.getId().equals(id))","lastModifiedDate":"2023-11-07"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"                .findFirst();","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"        return fetchPerson;","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"hyc17003":7,"WZWren":38}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":6,"author":{"gitId":"nubnubyas"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"nubnubyas"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"nubnubyas"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"nubnubyas"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"kanna-1"},"content":"public class DeleteCommand extends UndoableCommand {","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"nubnubyas"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"d\";","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" or \" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"            + \": Delete the Patient identified by the full Name or ID of the patient.\\n\"","lastModifiedDate":"2023-11-07"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"            + \"Parameters: n/NAME or id/ID\\n\"","lastModifiedDate":"2023-11-07"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"            + \"Fields that can be deleted: ap/APPOINTMENT m/MEDICAL_HISTORY \\n\"","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"nubnubyas"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" n/John Doe or \" + COMMAND_WORD + \" id/S1234567A \" + \"ap/ m/\\n\"","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"            + \"Example 2: \" + COMMAND_WORD_ALIAS + \" n/Alex Yeoh or \" + COMMAND_WORD_ALIAS + \" id/T0123456F\";","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";","lastModifiedDate":"2023-11-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_DELETE_PATIENT_FIELD_SUCCESS \u003d \"Deleted Patient\u0027s field: %1$s\";","lastModifiedDate":"2023-11-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d","lastModifiedDate":"2023-11-09"},{"lineNumber":46,"author":{"gitId":"nubnubyas"},"content":"            \"The given combination of Name and ID does not match any patient in the Patient List.\";","lastModifiedDate":"2023-11-09"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_NO_APPOINTMENT_TO_DELETE \u003d \"Patient does not have an appointment to delete.\";","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_NO_MEDICAL_HISTORY_TO_DELETE \u003d","lastModifiedDate":"2023-11-09"},{"lineNumber":51,"author":{"gitId":"nubnubyas"},"content":"            \"Patient does not have any medical histories to delete.\";","lastModifiedDate":"2023-11-09"},{"lineNumber":52,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_INVALID_MEDICAL_HISTORY \u003d","lastModifiedDate":"2023-11-09"},{"lineNumber":54,"author":{"gitId":"nubnubyas"},"content":"            \"Patient does not have the medical histories specified.\";","lastModifiedDate":"2023-11-09"},{"lineNumber":55,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_UNDO_DELETE_PATIENT_SUCCESS \u003d \"Undoing the deletion of Patient:  %1$s\";","lastModifiedDate":"2023-11-06"},{"lineNumber":57,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"kanna-1"},"content":"    public static final String MESSAGE_UNDO_DELETE_FIELD_SUCCESS \u003d \"Undoing the deletion of a Patient\u0027s field:  %1$s\";","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"nubnubyas"},"content":"     * The original state of the patient.","lastModifiedDate":"2023-11-06"},{"lineNumber":62,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"kanna-1"},"content":"    private Person originalPerson;","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"nubnubyas"},"content":"     * The state of the patient after a field has been deleted.","lastModifiedDate":"2023-11-06"},{"lineNumber":67,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"kanna-1"},"content":"    private Person editedPerson;","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"nubnubyas"},"content":"    private final Name name;","lastModifiedDate":"2023-10-17"},{"lineNumber":70,"author":{"gitId":"hyc17003"},"content":"    private final Id id;","lastModifiedDate":"2023-11-07"},{"lineNumber":71,"author":{"gitId":"kanna-1"},"content":"    private final DeletePersonDescriptor deletePersonDescriptor;","lastModifiedDate":"2023-10-28"},{"lineNumber":72,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":73,"author":{"gitId":"nubnubyas"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":74,"author":{"gitId":"nubnubyas"},"content":"     * @param id                     of the patient in the filtered patient list to","lastModifiedDate":"2023-11-09"},{"lineNumber":75,"author":{"gitId":"nubnubyas"},"content":"     *                               edit","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"nubnubyas"},"content":"     * @param name                   of the patient in the filtered patient list to","lastModifiedDate":"2023-11-06"},{"lineNumber":77,"author":{"gitId":"nubnubyas"},"content":"     *                               edit","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"nubnubyas"},"content":"     * @param deletePersonDescriptor details to delete the patient with","lastModifiedDate":"2023-11-06"},{"lineNumber":79,"author":{"gitId":"nubnubyas"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":80,"author":{"gitId":"hyc17003"},"content":"    public DeleteCommand(Id id, Name name, DeletePersonDescriptor deletePersonDescriptor) {","lastModifiedDate":"2023-11-07"},{"lineNumber":81,"author":{"gitId":"hyc17003"},"content":"        this.id \u003d id;","lastModifiedDate":"2023-11-07"},{"lineNumber":82,"author":{"gitId":"nubnubyas"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-17"},{"lineNumber":83,"author":{"gitId":"nubnubyas"},"content":"        this.deletePersonDescriptor \u003d deletePersonDescriptor;","lastModifiedDate":"2023-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"nubnubyas"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getUnfilteredPersonList();","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"hyc17003"},"content":"        Optional\u003cPerson\u003e personOptional \u003d CommandUtil.findPersonByIdentifier(name, id, lastShownList);","lastModifiedDate":"2023-11-07"},{"lineNumber":92,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":93,"author":{"gitId":"WZWren"},"content":"        if (personOptional.isEmpty()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"nubnubyas"},"content":"            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);","lastModifiedDate":"2023-11-06"},{"lineNumber":95,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":96,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":97,"author":{"gitId":"WZWren"},"content":"        Person personToDelete \u003d personOptional.get();","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"kanna-1"},"content":"        originalPerson \u003d personToDelete;","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"nubnubyas"},"content":"        if (deletePersonDescriptor.isAllFalse()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":102,"author":{"gitId":"kanna-1"},"content":"            model.addToHistory(this);","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"nubnubyas"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"nubnubyas"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, Messages.format(personToDelete)));","lastModifiedDate":"2023-11-06"},{"lineNumber":105,"author":{"gitId":"nubnubyas"},"content":"        } else {","lastModifiedDate":"2023-10-17"},{"lineNumber":106,"author":{"gitId":"kanna-1"},"content":"            editedPerson \u003d createDeletePerson(personToDelete, deletePersonDescriptor);","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"nubnubyas"},"content":"            model.setPerson(personToDelete, editedPerson);","lastModifiedDate":"2023-10-17"},{"lineNumber":108,"author":{"gitId":"nubnubyas"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-17"},{"lineNumber":109,"author":{"gitId":"kanna-1"},"content":"            model.addToHistory(this);","lastModifiedDate":"2023-10-28"},{"lineNumber":110,"author":{"gitId":"nubnubyas"},"content":"            return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_FIELD_SUCCESS,","lastModifiedDate":"2023-11-06"},{"lineNumber":111,"author":{"gitId":"nubnubyas"},"content":"                    Messages.format(editedPerson)));","lastModifiedDate":"2023-11-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":115,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":116,"author":{"gitId":"kanna-1"},"content":"    public CommandResult undo(Model model) {","lastModifiedDate":"2023-10-28"},{"lineNumber":117,"author":{"gitId":"kanna-1"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":118,"author":{"gitId":"kanna-1"},"content":"        if (deletePersonDescriptor.isAllFalse()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":119,"author":{"gitId":"kanna-1"},"content":"            model.addPerson(originalPerson);","lastModifiedDate":"2023-10-28"},{"lineNumber":120,"author":{"gitId":"kanna-1"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-28"},{"lineNumber":121,"author":{"gitId":"nubnubyas"},"content":"            return new CommandResult(String.format(MESSAGE_UNDO_DELETE_PATIENT_SUCCESS,","lastModifiedDate":"2023-11-06"},{"lineNumber":122,"author":{"gitId":"kanna-1"},"content":"                    Messages.format(originalPerson)));","lastModifiedDate":"2023-10-28"},{"lineNumber":123,"author":{"gitId":"kanna-1"},"content":"        } else {","lastModifiedDate":"2023-10-28"},{"lineNumber":124,"author":{"gitId":"kanna-1"},"content":"            Person personToDelete \u003d editedPerson;","lastModifiedDate":"2023-10-28"},{"lineNumber":125,"author":{"gitId":"kanna-1"},"content":"            model.setPerson(personToDelete, originalPerson);","lastModifiedDate":"2023-10-28"},{"lineNumber":126,"author":{"gitId":"kanna-1"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-28"},{"lineNumber":127,"author":{"gitId":"kanna-1"},"content":"            return new CommandResult(String.format(MESSAGE_UNDO_DELETE_FIELD_SUCCESS,","lastModifiedDate":"2023-10-28"},{"lineNumber":128,"author":{"gitId":"kanna-1"},"content":"                    Messages.format(editedPerson)));","lastModifiedDate":"2023-10-28"},{"lineNumber":129,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (!(other instanceof DeleteCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":144,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":145,"author":{"gitId":"hyc17003"},"content":"        return Objects.equals(id, otherDeleteCommand.id)","lastModifiedDate":"2023-11-07"},{"lineNumber":146,"author":{"gitId":"nubnubyas"},"content":"                \u0026\u0026 Objects.equals(name, otherDeleteCommand.name)","lastModifiedDate":"2023-10-18"},{"lineNumber":147,"author":{"gitId":"nubnubyas"},"content":"                \u0026\u0026 Objects.equals(deletePersonDescriptor, otherDeleteCommand.deletePersonDescriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":153,"author":{"gitId":"hyc17003"},"content":"                .add(\"id\", id)","lastModifiedDate":"2023-11-07"},{"lineNumber":154,"author":{"gitId":"nubnubyas"},"content":"                .add(\"name\", name)","lastModifiedDate":"2023-10-18"},{"lineNumber":155,"author":{"gitId":"nubnubyas"},"content":"                .add(\"deletePersonDescriptor\", deletePersonDescriptor)","lastModifiedDate":"2023-10-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":158,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":159,"author":{"gitId":"nubnubyas"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":160,"author":{"gitId":"nubnubyas"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2023-10-17"},{"lineNumber":161,"author":{"gitId":"nubnubyas"},"content":"     * edited with {@code deletePersonDescriptor}.","lastModifiedDate":"2023-10-18"},{"lineNumber":162,"author":{"gitId":"nubnubyas"},"content":"     *","lastModifiedDate":"2023-11-01"},{"lineNumber":163,"author":{"gitId":"nubnubyas"},"content":"     * @throws CommandException","lastModifiedDate":"2023-11-01"},{"lineNumber":164,"author":{"gitId":"nubnubyas"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":165,"author":{"gitId":"nubnubyas"},"content":"    public static Person createDeletePerson(Person personToEdit, DeletePersonDescriptor deletePersonDescriptor)","lastModifiedDate":"2023-11-01"},{"lineNumber":166,"author":{"gitId":"nubnubyas"},"content":"            throws CommandException {","lastModifiedDate":"2023-11-01"},{"lineNumber":167,"author":{"gitId":"nubnubyas"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2023-10-17"},{"lineNumber":168,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":169,"author":{"gitId":"nubnubyas"},"content":"        Name updatedName \u003d personToEdit.getName();","lastModifiedDate":"2023-10-17"},{"lineNumber":170,"author":{"gitId":"hyc17003"},"content":"        Id updatedId \u003d personToEdit.getId();","lastModifiedDate":"2023-11-07"},{"lineNumber":171,"author":{"gitId":"nubnubyas"},"content":"        Phone updatedPhone \u003d personToEdit.getPhone();","lastModifiedDate":"2023-10-17"},{"lineNumber":172,"author":{"gitId":"nubnubyas"},"content":"        Email updatedEmail \u003d personToEdit.getEmail();","lastModifiedDate":"2023-10-17"},{"lineNumber":173,"author":{"gitId":"nubnubyas"},"content":"        Address updatedAddress \u003d personToEdit.getAddress();","lastModifiedDate":"2023-10-17"},{"lineNumber":174,"author":{"gitId":"nubnubyas"},"content":"        Set\u003cMedicalHistory\u003e updatedMedicalHistories \u003d personToEdit.getMedicalHistories();","lastModifiedDate":"2023-10-17"},{"lineNumber":175,"author":{"gitId":"nubnubyas"},"content":"        Appointment updatedAppointment \u003d personToEdit.getAppointment().isPresent() ? personToEdit.getAppointment().get()","lastModifiedDate":"2023-10-18"},{"lineNumber":176,"author":{"gitId":"nubnubyas"},"content":"                : null;","lastModifiedDate":"2023-10-18"},{"lineNumber":177,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":178,"author":{"gitId":"nubnubyas"},"content":"        if (deletePersonDescriptor.shouldDeleteAppointment()) {","lastModifiedDate":"2023-10-31"},{"lineNumber":179,"author":{"gitId":"nubnubyas"},"content":"            if (updatedAppointment \u003d\u003d null) {","lastModifiedDate":"2023-11-01"},{"lineNumber":180,"author":{"gitId":"nubnubyas"},"content":"                throw new CommandException(MESSAGE_NO_APPOINTMENT_TO_DELETE);","lastModifiedDate":"2023-11-02"},{"lineNumber":181,"author":{"gitId":"nubnubyas"},"content":"            } else {","lastModifiedDate":"2023-11-01"},{"lineNumber":182,"author":{"gitId":"nubnubyas"},"content":"                updatedAppointment \u003d null;","lastModifiedDate":"2023-10-18"},{"lineNumber":183,"author":{"gitId":"nubnubyas"},"content":"            }","lastModifiedDate":"2023-10-17"},{"lineNumber":184,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":185,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":186,"author":{"gitId":"nubnubyas"},"content":"        if (deletePersonDescriptor.shouldDeleteMedicalHistory()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":187,"author":{"gitId":"nubnubyas"},"content":"            if (updatedMedicalHistories.isEmpty()) {","lastModifiedDate":"2023-11-01"},{"lineNumber":188,"author":{"gitId":"nubnubyas"},"content":"                throw new CommandException(MESSAGE_NO_MEDICAL_HISTORY_TO_DELETE);","lastModifiedDate":"2023-11-02"},{"lineNumber":189,"author":{"gitId":"nubnubyas"},"content":"            }","lastModifiedDate":"2023-11-02"},{"lineNumber":190,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":191,"author":{"gitId":"nubnubyas"},"content":"            Set\u003cMedicalHistory\u003e medicalHistoriesToDelete \u003d deletePersonDescriptor.getMedicalHistories();","lastModifiedDate":"2023-11-02"},{"lineNumber":192,"author":{"gitId":"nubnubyas"},"content":"            Set\u003cMedicalHistory\u003e medicalHistoriesToKeep \u003d new HashSet\u003c\u003e(updatedMedicalHistories);","lastModifiedDate":"2023-11-02"},{"lineNumber":193,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":194,"author":{"gitId":"nubnubyas"},"content":"            if (medicalHistoriesToDelete.isEmpty()) {","lastModifiedDate":"2023-11-02"},{"lineNumber":195,"author":{"gitId":"nubnubyas"},"content":"                updatedMedicalHistories \u003d medicalHistoriesToDelete;","lastModifiedDate":"2023-11-02"},{"lineNumber":196,"author":{"gitId":"nubnubyas"},"content":"            } else {","lastModifiedDate":"2023-11-02"},{"lineNumber":197,"author":{"gitId":"nubnubyas"},"content":"                for (MedicalHistory medicalHistory : medicalHistoriesToDelete) {","lastModifiedDate":"2023-11-02"},{"lineNumber":198,"author":{"gitId":"nubnubyas"},"content":"                    if (updatedMedicalHistories.contains(medicalHistory)) {","lastModifiedDate":"2023-11-02"},{"lineNumber":199,"author":{"gitId":"nubnubyas"},"content":"                        medicalHistoriesToKeep.remove(medicalHistory);","lastModifiedDate":"2023-11-02"},{"lineNumber":200,"author":{"gitId":"nubnubyas"},"content":"                    } else {","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"nubnubyas"},"content":"                        throw new CommandException(MESSAGE_INVALID_MEDICAL_HISTORY);","lastModifiedDate":"2023-11-02"},{"lineNumber":202,"author":{"gitId":"nubnubyas"},"content":"                    }","lastModifiedDate":"2023-11-01"},{"lineNumber":203,"author":{"gitId":"nubnubyas"},"content":"                }","lastModifiedDate":"2023-11-01"},{"lineNumber":204,"author":{"gitId":"nubnubyas"},"content":"                updatedMedicalHistories \u003d medicalHistoriesToKeep;","lastModifiedDate":"2023-11-01"},{"lineNumber":205,"author":{"gitId":"nubnubyas"},"content":"            }","lastModifiedDate":"2023-11-01"},{"lineNumber":206,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":207,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":208,"author":{"gitId":"hyc17003"},"content":"        return new Person(updatedName, updatedId, updatedPhone, updatedEmail, updatedAddress, updatedAppointment,","lastModifiedDate":"2023-11-07"},{"lineNumber":209,"author":{"gitId":"kanna-1"},"content":"                updatedMedicalHistories);","lastModifiedDate":"2023-11-05"},{"lineNumber":210,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":211,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":212,"author":{"gitId":"nubnubyas"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":213,"author":{"gitId":"nubnubyas"},"content":"     * Stores the values of the fields that is to be deleted from a patient","lastModifiedDate":"2023-11-01"},{"lineNumber":214,"author":{"gitId":"nubnubyas"},"content":"     * in HealthSync.","lastModifiedDate":"2023-10-31"},{"lineNumber":215,"author":{"gitId":"nubnubyas"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":216,"author":{"gitId":"nubnubyas"},"content":"    public static class DeletePersonDescriptor {","lastModifiedDate":"2023-10-16"},{"lineNumber":217,"author":{"gitId":"nubnubyas"},"content":"        private boolean shouldDeleteAppointment;","lastModifiedDate":"2023-10-31"},{"lineNumber":218,"author":{"gitId":"nubnubyas"},"content":"        private boolean shouldDeleteMedicalHistory;","lastModifiedDate":"2023-10-31"},{"lineNumber":219,"author":{"gitId":"nubnubyas"},"content":"        private Set\u003cMedicalHistory\u003e medicalHistories;","lastModifiedDate":"2023-11-01"},{"lineNumber":220,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":221,"author":{"gitId":"nubnubyas"},"content":"        public DeletePersonDescriptor() {","lastModifiedDate":"2023-10-16"},{"lineNumber":222,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":223,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":224,"author":{"gitId":"nubnubyas"},"content":"        public void setDeleteMedicalHistory() {","lastModifiedDate":"2023-10-31"},{"lineNumber":225,"author":{"gitId":"nubnubyas"},"content":"            this.shouldDeleteMedicalHistory \u003d true;","lastModifiedDate":"2023-10-31"},{"lineNumber":226,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":227,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":228,"author":{"gitId":"nubnubyas"},"content":"        public boolean shouldDeleteMedicalHistory() {","lastModifiedDate":"2023-10-31"},{"lineNumber":229,"author":{"gitId":"nubnubyas"},"content":"            return this.shouldDeleteMedicalHistory;","lastModifiedDate":"2023-10-31"},{"lineNumber":230,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":231,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":232,"author":{"gitId":"nubnubyas"},"content":"        public void setMedicalHistory(Set\u003cMedicalHistory\u003e medicalHistories) {","lastModifiedDate":"2023-11-01"},{"lineNumber":233,"author":{"gitId":"nubnubyas"},"content":"            this.medicalHistories \u003d medicalHistories;","lastModifiedDate":"2023-11-01"},{"lineNumber":234,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":235,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":236,"author":{"gitId":"nubnubyas"},"content":"        public Set\u003cMedicalHistory\u003e getMedicalHistories() {","lastModifiedDate":"2023-11-01"},{"lineNumber":237,"author":{"gitId":"nubnubyas"},"content":"            return this.medicalHistories;","lastModifiedDate":"2023-11-01"},{"lineNumber":238,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":239,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":240,"author":{"gitId":"nubnubyas"},"content":"        public void setDeleteAppointment() {","lastModifiedDate":"2023-10-31"},{"lineNumber":241,"author":{"gitId":"nubnubyas"},"content":"            this.shouldDeleteAppointment \u003d true;","lastModifiedDate":"2023-10-31"},{"lineNumber":242,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":243,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":244,"author":{"gitId":"nubnubyas"},"content":"        public boolean shouldDeleteAppointment() {","lastModifiedDate":"2023-10-31"},{"lineNumber":245,"author":{"gitId":"nubnubyas"},"content":"            return this.shouldDeleteAppointment;","lastModifiedDate":"2023-10-31"},{"lineNumber":246,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":247,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":248,"author":{"gitId":"nubnubyas"},"content":"        /**","lastModifiedDate":"2023-10-18"},{"lineNumber":249,"author":{"gitId":"nubnubyas"},"content":"         * Returns true if all fields are false.","lastModifiedDate":"2023-10-18"},{"lineNumber":250,"author":{"gitId":"nubnubyas"},"content":"         */","lastModifiedDate":"2023-10-18"},{"lineNumber":251,"author":{"gitId":"nubnubyas"},"content":"        public boolean isAllFalse() {","lastModifiedDate":"2023-10-16"},{"lineNumber":252,"author":{"gitId":"nubnubyas"},"content":"            return !shouldDeleteAppointment \u0026\u0026 !shouldDeleteMedicalHistory;","lastModifiedDate":"2023-11-01"},{"lineNumber":253,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":254,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":255,"author":{"gitId":"nubnubyas"},"content":"        @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":256,"author":{"gitId":"nubnubyas"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2023-10-16"},{"lineNumber":257,"author":{"gitId":"nubnubyas"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-16"},{"lineNumber":258,"author":{"gitId":"nubnubyas"},"content":"                return true;","lastModifiedDate":"2023-10-16"},{"lineNumber":259,"author":{"gitId":"nubnubyas"},"content":"            }","lastModifiedDate":"2023-10-16"},{"lineNumber":260,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":261,"author":{"gitId":"nubnubyas"},"content":"            // instanceof handles nulls","lastModifiedDate":"2023-10-16"},{"lineNumber":262,"author":{"gitId":"nubnubyas"},"content":"            if (!(other instanceof DeletePersonDescriptor)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":263,"author":{"gitId":"nubnubyas"},"content":"                return false;","lastModifiedDate":"2023-10-16"},{"lineNumber":264,"author":{"gitId":"nubnubyas"},"content":"            }","lastModifiedDate":"2023-10-16"},{"lineNumber":265,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":266,"author":{"gitId":"nubnubyas"},"content":"            DeletePersonDescriptor otherDeletePersonDescriptor \u003d (DeletePersonDescriptor) other;","lastModifiedDate":"2023-10-16"},{"lineNumber":267,"author":{"gitId":"nubnubyas"},"content":"            return Objects.equals(medicalHistories, otherDeletePersonDescriptor.medicalHistories)","lastModifiedDate":"2023-11-01"},{"lineNumber":268,"author":{"gitId":"nubnubyas"},"content":"                    \u0026\u0026 Objects.equals(shouldDeleteMedicalHistory,","lastModifiedDate":"2023-11-01"},{"lineNumber":269,"author":{"gitId":"nubnubyas"},"content":"                            otherDeletePersonDescriptor.shouldDeleteMedicalHistory)","lastModifiedDate":"2023-11-01"},{"lineNumber":270,"author":{"gitId":"nubnubyas"},"content":"                    \u0026\u0026 Objects.equals(shouldDeleteAppointment, otherDeletePersonDescriptor.shouldDeleteAppointment);","lastModifiedDate":"2023-10-31"},{"lineNumber":271,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":272,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":273,"author":{"gitId":"nubnubyas"},"content":"        @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":274,"author":{"gitId":"nubnubyas"},"content":"        public String toString() {","lastModifiedDate":"2023-10-16"},{"lineNumber":275,"author":{"gitId":"nubnubyas"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2023-10-16"},{"lineNumber":276,"author":{"gitId":"nubnubyas"},"content":"                    .add(\"medicalHistories\", medicalHistories)","lastModifiedDate":"2023-11-01"},{"lineNumber":277,"author":{"gitId":"nubnubyas"},"content":"                    .add(\"shouldDeleteMedicalHistory\", shouldDeleteMedicalHistory)","lastModifiedDate":"2023-10-31"},{"lineNumber":278,"author":{"gitId":"nubnubyas"},"content":"                    .add(\"shouldDeleteAppointment\", shouldDeleteAppointment)","lastModifiedDate":"2023-10-31"},{"lineNumber":279,"author":{"gitId":"nubnubyas"},"content":"                    .toString();","lastModifiedDate":"2023-10-16"},{"lineNumber":280,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":281,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nubnubyas":181,"hyc17003":11,"WZWren":3,"-":55,"kanna-1":32}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"kanna-1"},"content":"public class EditCommand extends UndoableCommand {","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"nubnubyas"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"e\";","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" or \" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"            + \": Edits the details of the Patient identified \"","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"            + \"by the full Name or ID of the Patient.\\n\"","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"            + \"Format: edit n/NAME or id/ID [Fields] ...\\n\"","lastModifiedDate":"2023-11-07"},{"lineNumber":45,"author":{"gitId":"nubnubyas"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_PHONE + \"91234567 \\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"nubnubyas"},"content":"            + \"Example 2: \" + COMMAND_WORD_ALIAS + \" \"","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_NAME + \"Alex Yeoh \"","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"nubnubyas"},"content":"            + PREFIX_PHONE + \"82786151 \\n\";","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";","lastModifiedDate":"2023-11-06"},{"lineNumber":53,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_UNDO_EDIT_PATIENT_SUCCESS \u003d \"Undoing the Editing of Patient:  %1$s\";","lastModifiedDate":"2023-11-06"},{"lineNumber":54,"author":{"gitId":"kanna-1"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"kanna-1"},"content":"            + \"Fields include phone (p/), email (e/), \"","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"kanna-1"},"content":"            + \"address (a/), appointment (ap/) and medical history (m/)\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"            + \"Name and ID cannot be edited\\n\";","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_PATIENT_NOT_FOUND \u003d \"INVALID name and/or ID!\\n\"","lastModifiedDate":"2023-11-09"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"            + \"The given combination of Name and/or ID does not match any person in the Patient list.\";","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"kanna-1"},"content":"    public static final String MESSAGE_NO_CHANGE \u003d \"There are no changes in the editable fields provided.\\n\";","lastModifiedDate":"2023-11-05"},{"lineNumber":62,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"kanna-1"},"content":"    private static final Logger logger \u003d Logger.getLogger(EditCommand.class.getName());","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"nubnubyas"},"content":"     * The original state of the patient before it was edited by the command.","lastModifiedDate":"2023-11-06"},{"lineNumber":67,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"kanna-1"},"content":"    private Person originalPerson;","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":71,"author":{"gitId":"nubnubyas"},"content":"     * The edited state of the patient after it was modified by the command.","lastModifiedDate":"2023-11-06"},{"lineNumber":72,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":73,"author":{"gitId":"kanna-1"},"content":"    private Person editedPerson;","lastModifiedDate":"2023-10-28"},{"lineNumber":74,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":75,"author":{"gitId":"kanna-1"},"content":"    private final Name name;","lastModifiedDate":"2023-10-16"},{"lineNumber":76,"author":{"gitId":"hyc17003"},"content":"    private final Id id;","lastModifiedDate":"2023-11-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2023-10-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"nubnubyas"},"content":"     * @param name of the patient in the filtered patient list to edit","lastModifiedDate":"2023-11-06"},{"lineNumber":81,"author":{"gitId":"nubnubyas"},"content":"     * @param id of the patient in the filtered patient list to edit","lastModifiedDate":"2023-11-09"},{"lineNumber":82,"author":{"gitId":"nubnubyas"},"content":"     * @param editPersonDescriptor details to edit the patient with","lastModifiedDate":"2023-11-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":84,"author":{"gitId":"hyc17003"},"content":"    public EditCommand(Name name, Id id, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2023-11-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":86,"author":{"gitId":"kanna-1"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-16"},{"lineNumber":87,"author":{"gitId":"hyc17003"},"content":"        this.id \u003d id;","lastModifiedDate":"2023-11-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"nubnubyas"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getUnfilteredPersonList();","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"hyc17003"},"content":"        Optional\u003cPerson\u003e personOptional \u003d CommandUtil.findPersonByIdentifier(name, id, lastShownList);","lastModifiedDate":"2023-11-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":97,"author":{"gitId":"kanna-1"},"content":"        if (personOptional.isEmpty()) {","lastModifiedDate":"2023-10-18"},{"lineNumber":98,"author":{"gitId":"kanna-1"},"content":"            logger.log(Level.WARNING, \"Person not found for editing\");","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"nubnubyas"},"content":"            throw new CommandException(MESSAGE_PATIENT_NOT_FOUND);","lastModifiedDate":"2023-11-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":102,"author":{"gitId":"kanna-1"},"content":"        Person personToEdit \u003d personOptional.get();","lastModifiedDate":"2023-10-16"},{"lineNumber":103,"author":{"gitId":"kanna-1"},"content":"        logger.log(Level.INFO, \"Editing person: {0}\", personToEdit);","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"kanna-1"},"content":"        originalPerson \u003d personToEdit;","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"kanna-1"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"kanna-1"},"content":"        if (originalPerson.equals(editedPerson)) {","lastModifiedDate":"2023-11-05"},{"lineNumber":109,"author":{"gitId":"kanna-1"},"content":"            throw new CommandException(MESSAGE_NO_CHANGE);","lastModifiedDate":"2023-11-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-11-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":114,"author":{"gitId":"kanna-1"},"content":"        logger.log(Level.INFO, \"EditCommand executed successfully\");","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"kanna-1"},"content":"        model.addToHistory(this);","lastModifiedDate":"2023-10-28"},{"lineNumber":117,"author":{"gitId":"nubnubyas"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2023-11-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":120,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":121,"author":{"gitId":"kanna-1"},"content":"    public CommandResult undo(Model model) {","lastModifiedDate":"2023-10-28"},{"lineNumber":122,"author":{"gitId":"kanna-1"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":123,"author":{"gitId":"kanna-1"},"content":"        model.setPerson(editedPerson, originalPerson);","lastModifiedDate":"2023-10-28"},{"lineNumber":124,"author":{"gitId":"kanna-1"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-28"},{"lineNumber":125,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":126,"author":{"gitId":"nubnubyas"},"content":"        return new CommandResult(String.format(MESSAGE_UNDO_EDIT_PATIENT_SUCCESS, Messages.format(editedPerson)));","lastModifiedDate":"2023-11-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"kanna-1"},"content":"    public static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2023-10-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"kanna-1"},"content":"        Name name \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2023-10-26"},{"lineNumber":137,"author":{"gitId":"hyc17003"},"content":"        Id id \u003d editPersonDescriptor.getId().orElse(personToEdit.getId());","lastModifiedDate":"2023-11-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"kanna-1"},"content":"        Appointment updatedAppointment \u003d editPersonDescriptor.getAppointment()","lastModifiedDate":"2023-10-18"},{"lineNumber":142,"author":{"gitId":"kanna-1"},"content":"                .orElse(personToEdit.getAppointment().orElse(null));","lastModifiedDate":"2023-10-18"},{"lineNumber":143,"author":{"gitId":"kanna-1"},"content":"        Set\u003cMedicalHistory\u003e updatedMedicalHistories \u003d","lastModifiedDate":"2023-10-16"},{"lineNumber":144,"author":{"gitId":"kanna-1"},"content":"                editPersonDescriptor.getMedicalHistories().orElse((personToEdit.getMedicalHistories()));","lastModifiedDate":"2023-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"hyc17003"},"content":"        return new Person(name, id, updatedPhone, updatedEmail, updatedAddress,","lastModifiedDate":"2023-11-07"},{"lineNumber":147,"author":{"gitId":"kanna-1"},"content":"                updatedAppointment, updatedMedicalHistories);","lastModifiedDate":"2023-11-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":163,"author":{"gitId":"hyc17003"},"content":"        // Check if both the name and id are equal for equality check","lastModifiedDate":"2023-11-07"},{"lineNumber":164,"author":{"gitId":"kanna-1"},"content":"        boolean isNameEqual \u003d Objects.equals(name, otherEditCommand.name);","lastModifiedDate":"2023-10-18"},{"lineNumber":165,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":166,"author":{"gitId":"hyc17003"},"content":"        boolean isIdEqual \u003d Objects.equals(id, otherEditCommand.id);","lastModifiedDate":"2023-11-07"},{"lineNumber":167,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":168,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":169,"author":{"gitId":"hyc17003"},"content":"        return isNameEqual \u0026\u0026 isIdEqual;","lastModifiedDate":"2023-11-07"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":174,"author":{"gitId":"kanna-1"},"content":"                .add(\"name\", name)","lastModifiedDate":"2023-10-16"},{"lineNumber":175,"author":{"gitId":"hyc17003"},"content":"                .add(\"id\", id)","lastModifiedDate":"2023-11-07"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"nubnubyas"},"content":"     * Stores the details to edit the patient with. Each non-empty field value will replace the","lastModifiedDate":"2023-11-06"},{"lineNumber":182,"author":{"gitId":"nubnubyas"},"content":"     * corresponding field value of the patient.","lastModifiedDate":"2023-11-06"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":186,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":187,"author":{"gitId":"hyc17003"},"content":"        private Id id;","lastModifiedDate":"2023-11-07"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":192,"author":{"gitId":"kanna-1"},"content":"        private Appointment appointment;","lastModifiedDate":"2023-10-16"},{"lineNumber":193,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":194,"author":{"gitId":"kanna-1"},"content":"        private Set\u003cMedicalHistory\u003e medicalHistories;","lastModifiedDate":"2023-10-16"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2023-10-18"},{"lineNumber":203,"author":{"gitId":"hyc17003"},"content":"            setId(toCopy.id);","lastModifiedDate":"2023-11-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":207,"author":{"gitId":"kanna-1"},"content":"            setAppointment(toCopy.appointment);","lastModifiedDate":"2023-10-16"},{"lineNumber":208,"author":{"gitId":"kanna-1"},"content":"            setMedicalHistories(toCopy.medicalHistories);","lastModifiedDate":"2023-10-16"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2023-10-18"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2023-10-18"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":220,"author":{"gitId":"hyc17003"},"content":"        public Optional\u003cId\u003e getId() {","lastModifiedDate":"2023-11-07"},{"lineNumber":221,"author":{"gitId":"hyc17003"},"content":"            return Optional.ofNullable(id);","lastModifiedDate":"2023-11-07"},{"lineNumber":222,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":223,"author":{"gitId":"hyc17003"},"content":"        public void setId(Id id) {","lastModifiedDate":"2023-11-07"},{"lineNumber":224,"author":{"gitId":"hyc17003"},"content":"            this.id \u003d id;","lastModifiedDate":"2023-11-07"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":251,"author":{"gitId":"kanna-1"},"content":"        public void setAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-16"},{"lineNumber":252,"author":{"gitId":"kanna-1"},"content":"            this.appointment \u003d appointment;","lastModifiedDate":"2023-10-16"},{"lineNumber":253,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":254,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":255,"author":{"gitId":"kanna-1"},"content":"        public Optional\u003cAppointment\u003e getAppointment() {","lastModifiedDate":"2023-10-16"},{"lineNumber":256,"author":{"gitId":"kanna-1"},"content":"            return Optional.ofNullable(appointment);","lastModifiedDate":"2023-10-16"},{"lineNumber":257,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":258,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2023-10-16"},{"lineNumber":260,"author":{"gitId":"kanna-1"},"content":"         * Sets {@code medicalHistories} to this object\u0027s {@code medicalHistories}.","lastModifiedDate":"2023-10-16"},{"lineNumber":261,"author":{"gitId":"kanna-1"},"content":"         * A defensive copy of {@code medicalHistories} is used internally.","lastModifiedDate":"2023-10-16"},{"lineNumber":262,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2023-10-16"},{"lineNumber":263,"author":{"gitId":"kanna-1"},"content":"        public void setMedicalHistories(Set\u003cMedicalHistory\u003e medicalHistories) {","lastModifiedDate":"2023-10-16"},{"lineNumber":264,"author":{"gitId":"kanna-1"},"content":"            this.medicalHistories \u003d (medicalHistories !\u003d null) ? new HashSet\u003c\u003e(medicalHistories) : null;","lastModifiedDate":"2023-10-16"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2023-10-16"},{"lineNumber":268,"author":{"gitId":"kanna-1"},"content":"         * Returns an unmodifiable medicalHistories set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2023-10-16"},{"lineNumber":269,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2023-10-16"},{"lineNumber":270,"author":{"gitId":"kanna-1"},"content":"         * Returns {@code Optional#empty()} if {@code medicalHistories} is null.","lastModifiedDate":"2023-10-16"},{"lineNumber":271,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2023-10-16"},{"lineNumber":272,"author":{"gitId":"kanna-1"},"content":"        public Optional\u003cSet\u003cMedicalHistory\u003e\u003e getMedicalHistories() {","lastModifiedDate":"2023-10-16"},{"lineNumber":273,"author":{"gitId":"kanna-1"},"content":"            return (medicalHistories !\u003d null)","lastModifiedDate":"2023-10-16"},{"lineNumber":274,"author":{"gitId":"kanna-1"},"content":"                    ? Optional.of(Collections.unmodifiableSet(medicalHistories)) : Optional.empty();","lastModifiedDate":"2023-10-16"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":279,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":283,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":284,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":285,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":288,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":289,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":290,"author":{"gitId":"hyc17003"},"content":"                    \u0026\u0026 Objects.equals(id, otherEditPersonDescriptor.id)","lastModifiedDate":"2023-11-07"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":292,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":293,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(address, otherEditPersonDescriptor.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":294,"author":{"gitId":"kanna-1"},"content":"                    \u0026\u0026 Objects.equals(appointment, otherEditPersonDescriptor.appointment)","lastModifiedDate":"2023-10-16"},{"lineNumber":295,"author":{"gitId":"kanna-1"},"content":"                    \u0026\u0026 Objects.equals(medicalHistories, otherEditPersonDescriptor.medicalHistories);","lastModifiedDate":"2023-11-05"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":298,"author":{"gitId":"kanna-1"},"content":"        /**","lastModifiedDate":"2023-10-18"},{"lineNumber":299,"author":{"gitId":"kanna-1"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2023-10-18"},{"lineNumber":300,"author":{"gitId":"kanna-1"},"content":"         */","lastModifiedDate":"2023-10-18"},{"lineNumber":301,"author":{"gitId":"kanna-1"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2023-10-18"},{"lineNumber":302,"author":{"gitId":"kanna-1"},"content":"            return CollectionUtil.isAnyNonNull(phone, email, address, medicalHistories, appointment);","lastModifiedDate":"2023-11-05"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":305,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":309,"author":{"gitId":"hyc17003"},"content":"                    .add(\"id\", id)","lastModifiedDate":"2023-11-07"},{"lineNumber":310,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"                    .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":313,"author":{"gitId":"kanna-1"},"content":"                    .add(\"appointment\", appointment)","lastModifiedDate":"2023-10-16"},{"lineNumber":314,"author":{"gitId":"kanna-1"},"content":"                    .add(\"medicalHistories\", medicalHistories)","lastModifiedDate":"2023-10-16"},{"lineNumber":315,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"hyc17003":23,"nubnubyas":22,"-":185,"kanna-1":88}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"nubnubyas"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"ex\";","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting HealthSync as requested ...\";","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"nubnubyas":2,"-":18,"kanna-1":1}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.CompositePredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"f\";","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" or \" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"            + \": Finds all Patients by name, ID or Appointment period, and displays them as a list.\\n\"","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"            + \"Name and ID should contain any of the specified keywords (case-insensitive) input.\\n\"","lastModifiedDate":"2023-11-07"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"            + \"Patients whose Appointment overlaps with the given period will be displayed in the list.\\n\"","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"            + \"If multiple different search fields are specified, patients displayed will match all given fields.\\n\"","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"            + \"Parameters: n/KEYWORD... OR id/KEYWORD... OR ap/APPOINTMENT [any additional unused conditions]...\\n\"","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" n/alice bob charlie \\n\"","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"nubnubyas"},"content":"            + \"Example 2: \" + COMMAND_WORD + \" id/S872D \\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"            + \"Example 3: \" + COMMAND_WORD_ALIAS + \" ap/1-Aug 0900 1000\";","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"    private final CompositePredicate predicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"nubnubyas"},"content":"     * Creates a {@code FindCommand} to find patients by with the specified composite predicate.","lastModifiedDate":"2023-11-06"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"nubnubyas"},"content":"     * @param predicate The predicate to match patients by.","lastModifiedDate":"2023-11-06"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"    public FindCommand(CompositePredicate predicate) {","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"        model.updateFoundPersonsList(predicate);","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"nubnubyas"},"content":"        if (model.getFilteredPersonList().isEmpty()) {","lastModifiedDate":"2023-11-06"},{"lineNumber":48,"author":{"gitId":"nubnubyas"},"content":"            return new CommandResult(Messages.MESSAGE_NO_PATIENT_FOUND);","lastModifiedDate":"2023-11-06"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"        } else {","lastModifiedDate":"2023-11-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":51,"author":{"gitId":"nubnubyas"},"content":"                    String.format(Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2023-11-06"},{"lineNumber":52,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-11-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!(other instanceof FindCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return predicate.equals(otherFindCommand.predicate);","lastModifiedDate":"2023-07-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"hyc17003":8,"nubnubyas":10,"WZWren":8,"-":50}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"nubnubyas"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"h\";","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" or \" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"nubnubyas"},"content":"            + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"nubnubyas"},"content":"            + \"Example 1: \" + COMMAND_WORD","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":"            + \"Example 2: \" + COMMAND_WORD_ALIAS;","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nubnubyas":6,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"nubnubyas"},"content":" * Lists all patients in the address book to the user.","lastModifiedDate":"2023-11-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"ls\";","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all Patients\";","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nubnubyas":1,"-":22,"kanna-1":2}},{"path":"src/main/java/seedu/address/logic/commands/LogCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.LogBook;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"/**","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":" * Saves the results of a FindCommand to the logbook.","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":" */","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"public class LogCommand extends UndoableCommand {","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"    public static final String COMMAND_WORD \u003d \"log\";","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"lo\";","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" or \" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"            + \": Saves the results of the most recent FindCommand to the logger tab.\\n\"","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"            + \"Example 1: \" + COMMAND_WORD + \"\\n\"","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"            + \"Example 2: \" + COMMAND_WORD_ALIAS;","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"The last filtered values have overridden the logger tab.\";","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Cannot log an empty list.\";","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_UNDO_LOG_SUCCESS \u003d \"Undoing the logging.\";","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"    private LogBook logBookBeforeUpdate;","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"     * Executes the LogCommand, saving the results of the most recent FindCommand to the logger tab.","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"     * @param model The current model that contains the data.","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"     * @return A CommandResult indicating the success of the operation.","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"     * @throws CommandException If there are no results from the most recent FindCommand.","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"        // Ensure that there are results from the most recent FindCommand","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"        if (model.getFoundPersonsList().isEmpty()) {","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"            throw new CommandException(MESSAGE_FAILURE);","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"        // Store a copy of the current logBook before updating it","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        logBookBeforeUpdate \u003d new LogBook(model.getLogBook());","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"        model.addToHistory(this);","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"        model.getLogBook().setPersons(model.getFoundPersonsList());","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"     * Undoes the LogCommand, restoring the logger tab to its state before saving the results.","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"     * @param model The current model that contains the data.","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"     * @return A CommandResult indicating the success of the undo operation.","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"    public CommandResult undo(Model model) {","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"hyc17003"},"content":"        model.setLogBook(logBookBeforeUpdate);","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"hyc17003"},"content":"        return new CommandResult(MESSAGE_UNDO_LOG_SUCCESS);","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"hyc17003"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"hyc17003":59,"WZWren":8}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kanna-1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"kanna-1"},"content":"import java.util.List;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":" * Represents an undo command in the address book.","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":" * This undoes the last undo-able command, which includes add, clear, edit, delete, log, alog, and clog commands.","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":" * Optionally, you can specify the number of commands to undo.","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"public class UndoCommand extends Command {","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"nubnubyas"},"content":"    public static final String COMMAND_WORD_ALIAS \u003d \"u\";","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"nubnubyas"},"content":"    public static final String COMMAND_FORMAT \u003d \"Command Format: \" + COMMAND_WORD + \" or \" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"nubnubyas"},"content":"            + \" [number]\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"nubnubyas"},"content":"            + \"Examples 1:\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"kanna-1"},"content":"            + \" - \" + COMMAND_WORD + \" (undoes the last command)\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"nubnubyas"},"content":"            + \" - \" + COMMAND_WORD_ALIAS + \" 4 (undoes the last 4 commands)\";","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"nubnubyas"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"/\" + COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"nubnubyas"},"content":"            + \": Undoes the last undo-able command. \"","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"            + \"An undo-able command includes an add, clear, delete, edit, log, alog, and clog command.\\n\"","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"kanna-1"},"content":"            + \"Optionally, you can specify the number of commands to undo.\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"kanna-1"},"content":"            + COMMAND_FORMAT;","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"    public static final String INVALID_STEPS_TO_UNDO \u003d \"Undo count cannot be a negative number or zero.\\n\";","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"kanna-1"},"content":"    public static final String INVALID_NATURAL_NUMBER_TO_UNDO \u003d \"Please provide a valid number of commands to undo, \"","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"            + \"not exceeding the available command history size\";","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"    public static final String NO_HISTORY_EXISTS_FAILURE \u003d \"There is no history of un-doable commands to be undone.\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"kanna-1"},"content":"            + \"Please execute some undo-able commands first.\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"            + \"Undo-able commands include add, clear, delete, edit, log, alog, and clog commands.\";","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"    private static final Logger logger \u003d Logger.getLogger(UndoCommand.class.getName());","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"    private int stepsToUndo;","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"kanna-1"},"content":"     * Constructs an UndoCommand for the specified number of undo steps.","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"kanna-1"},"content":"     * @param stepsToUndo The number of steps to undo.","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":49,"author":{"gitId":"kanna-1"},"content":"    public UndoCommand(int stepsToUndo) {","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"kanna-1"},"content":"        assert stepsToUndo \u003e 0;","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"kanna-1"},"content":"        this.stepsToUndo \u003d stepsToUndo;","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"kanna-1"},"content":"     * Executes the undo command based on the number of steps provided.","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"kanna-1"},"content":"     * @param model The model where the undo operation will be applied.","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"kanna-1"},"content":"     * @return A CommandResult encapsulating the status of the undo operation.","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"kanna-1"},"content":"     * @throws CommandException If the number of steps to undo exceeds the available command history size.","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"kanna-1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"kanna-1"},"content":"        if (model.getCommandHistorySize() \u003d\u003d 0) {","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"kanna-1"},"content":"            logger.log(Level.WARNING, \"No command history to undo\");","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"            throw new CommandException(NO_HISTORY_EXISTS_FAILURE);","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"kanna-1"},"content":"        if (stepsToUndo \u003e model.getCommandHistorySize()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"kanna-1"},"content":"            logger.log(Level.WARNING, \"Invalid steps to undo\");","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"kanna-1"},"content":"            throw new CommandException(INVALID_NATURAL_NUMBER_TO_UNDO","lastModifiedDate":"2023-10-28"},{"lineNumber":70,"author":{"gitId":"kanna-1"},"content":"                    + \" (Currently max is: \" + model.getCommandHistorySize() + \").\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":71,"author":{"gitId":"kanna-1"},"content":"                    + MESSAGE_USAGE);","lastModifiedDate":"2023-10-28"},{"lineNumber":72,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":73,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":74,"author":{"gitId":"kanna-1"},"content":"        assert stepsToUndo \u003c\u003d model.getCommandHistorySize();","lastModifiedDate":"2023-10-28"},{"lineNumber":75,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":76,"author":{"gitId":"kanna-1"},"content":"        List\u003cString\u003e undoStatus \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-28"},{"lineNumber":77,"author":{"gitId":"kanna-1"},"content":"        int counter \u003d 1;","lastModifiedDate":"2023-10-28"},{"lineNumber":78,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":79,"author":{"gitId":"kanna-1"},"content":"        while (stepsToUndo !\u003d 0) {","lastModifiedDate":"2023-10-28"},{"lineNumber":80,"author":{"gitId":"kanna-1"},"content":"            UndoableCommand undoableCommand \u003d model.popCommandFromHistory();","lastModifiedDate":"2023-10-28"},{"lineNumber":81,"author":{"gitId":"kanna-1"},"content":"            CommandResult result \u003d undoableCommand.undo(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":82,"author":{"gitId":"kanna-1"},"content":"            undoStatus.add(counter + \". \" + result.getFeedbackToUser());","lastModifiedDate":"2023-10-28"},{"lineNumber":83,"author":{"gitId":"kanna-1"},"content":"            stepsToUndo--;","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"kanna-1"},"content":"            counter++;","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"kanna-1"},"content":"        String combinedStatus \u003d String.join(\"\\n\", undoStatus);","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"kanna-1"},"content":"        return new CommandResult(\"Undoing \" + (counter - 1) + \" command(s):\\n\" + combinedStatus);","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"kanna-1"},"content":"    public boolean equals(Object object) {","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"kanna-1"},"content":"        if (this \u003d\u003d object) {","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"kanna-1"},"content":"            return true;","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"kanna-1"},"content":"        if (!(object instanceof UndoCommand)) {","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"kanna-1"},"content":"            return false;","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"kanna-1"},"content":"        UndoCommand that \u003d (UndoCommand) object;","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"kanna-1"},"content":"        return stepsToUndo \u003d\u003d that.stepsToUndo;","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"kanna-1"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"hyc17003":3,"nubnubyas":8,"kanna-1":90}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kanna-1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":" * Represents a command that can be undone. Subclasses of this abstract class","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"kanna-1"},"content":" * must provide an implementation for the undo operation.","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"kanna-1"},"content":"public abstract class UndoableCommand extends Command {","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":"     * Reverts the effects of the command.","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"     * @param model {@code Model} which the undo command should operate on.","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"     * @return feedback message of the undo result for display","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"     * @throws CommandException If an error occurs during the undo operation.","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"    public abstract CommandResult undo(Model model) throws CommandException;","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"kanna-1"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"kanna-1":20}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-10"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID,","lastModifiedDate":"2023-11-07"},{"lineNumber":38,"author":{"gitId":"kanna-1"},"content":"                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_APPOINTMENT, PREFIX_MEDICAL);","lastModifiedDate":"2023-11-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ID, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2023-11-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"                PREFIX_NAME, PREFIX_ID, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_APPOINTMENT);","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"        Id id \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_ID).get());","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"        Set\u003cMedicalHistory\u003e medHistory \u003d ParserUtil.parseMedicals(argMultimap.getAllValues(PREFIX_MEDICAL));","lastModifiedDate":"2023-10-17"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"        Appointment appointment \u003d ParserUtil.parseAppointmentIfExists(argMultimap.getValue(PREFIX_APPOINTMENT));","lastModifiedDate":"2023-10-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"        Person person \u003d new Person(name, id, phone, email, address, appointment, medHistory);","lastModifiedDate":"2023-11-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"hyc17003":7,"WZWren":7,"-":53,"kanna-1":1}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.AppendLogCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.ClearLogCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.LogCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"nubnubyas"},"content":"        case AddCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"nubnubyas"},"content":"        case EditCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"nubnubyas"},"content":"        case DeleteCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"kanna-1"},"content":"        case UndoCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-28"},{"lineNumber":76,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"nubnubyas"},"content":"        case UndoCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"nubnubyas"},"content":"            return new UndoCommandParser().parse(arguments);","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"nubnubyas"},"content":"        case ClearCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2023-10-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"nubnubyas"},"content":"        case FindCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"nubnubyas"},"content":"        case ListCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2023-10-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"nubnubyas"},"content":"        case ExitCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-10-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":101,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"hyc17003"},"content":"        case HelpCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-10-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"hyc17003"},"content":"        case LogCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-30"},{"lineNumber":106,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"hyc17003"},"content":"        case LogCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-30"},{"lineNumber":108,"author":{"gitId":"hyc17003"},"content":"            return new LogCommand();","lastModifiedDate":"2023-10-30"},{"lineNumber":109,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":110,"author":{"gitId":"hyc17003"},"content":"        case AppendLogCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-30"},{"lineNumber":111,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"hyc17003"},"content":"        case AppendLogCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-30"},{"lineNumber":113,"author":{"gitId":"hyc17003"},"content":"            return new AppendLogCommand();","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":115,"author":{"gitId":"hyc17003"},"content":"        case ClearLogCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-30"},{"lineNumber":116,"author":{"gitId":"WZWren"},"content":"            //Fallthrough","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"hyc17003"},"content":"        case ClearLogCommand.COMMAND_WORD_ALIAS:","lastModifiedDate":"2023-10-30"},{"lineNumber":118,"author":{"gitId":"hyc17003"},"content":"            return new ClearLogCommand();","lastModifiedDate":"2023-10-30"},{"lineNumber":119,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":120,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hyc17003":16,"nubnubyas":11,"WZWren":12,"-":85,"kanna-1":2}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-07-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"nubnubyas"},"content":" * Values for a given key are stored in a list, and the insertion ordering is","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":" * maintained.","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":" * Keys are unique, but the list of argument values may contain duplicate","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"nubnubyas"},"content":" * argument values, i.e. the same argument value","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments **/","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"nubnubyas"},"content":"     * If the map previously contained a mapping for the key, the new value is","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"nubnubyas"},"content":"     * appended to the list of existing values.","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"nubnubyas"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"nubnubyas"},"content":"     *                 associated","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"nubnubyas"},"content":"     * If the prefix does not exist or has no values, this will return an empty","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"nubnubyas"},"content":"     * list.","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"nubnubyas"},"content":"     * Modifying the returned list will not affect the underlying data structure of","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"nubnubyas"},"content":"     * the ArgumentMultimap.","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"nubnubyas"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"nubnubyas"},"content":"     * leading/trailing spaces.","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"nubnubyas"},"content":"     * Throws a {@code ParseException} if any of the prefixes given in","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"nubnubyas"},"content":"     * {@code prefixes} appeared more than","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * once among the arguments.","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void verifyNoDuplicatePrefixesFor(Prefix... prefixes) throws ParseException {","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Prefix[] duplicatedPrefixes \u003d Stream.of(prefixes).distinct()","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .filter(prefix -\u003e argMultimap.containsKey(prefix) \u0026\u0026 argMultimap.get(prefix).size() \u003e 1)","lastModifiedDate":"2023-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .toArray(Prefix[]::new);","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (duplicatedPrefixes.length \u003e 0) {","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(Messages.getErrorMessageForDuplicatePrefixes(duplicatedPrefixes));","lastModifiedDate":"2023-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":86,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":87,"author":{"gitId":"nubnubyas"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":88,"author":{"gitId":"nubnubyas"},"content":"     * Returns true if the {@code prefix} exists in this ArgumentMultimap.","lastModifiedDate":"2023-10-17"},{"lineNumber":89,"author":{"gitId":"nubnubyas"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":90,"author":{"gitId":"nubnubyas"},"content":"    public boolean prefixExist(Prefix prefix) {","lastModifiedDate":"2023-10-17"},{"lineNumber":91,"author":{"gitId":"nubnubyas"},"content":"        return argMultimap.containsKey(prefix);","lastModifiedDate":"2023-10-17"},{"lineNumber":92,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":93,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":94,"author":{"gitId":"nubnubyas"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":95,"author":{"gitId":"nubnubyas"},"content":"     * Returns true if at least 1 of the prefixes isn\u0027t the empty {@code Optional}","lastModifiedDate":"2023-10-31"},{"lineNumber":96,"author":{"gitId":"nubnubyas"},"content":"     * values in the given {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-31"},{"lineNumber":97,"author":{"gitId":"nubnubyas"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":98,"author":{"gitId":"nubnubyas"},"content":"    public static boolean isAnyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-31"},{"lineNumber":99,"author":{"gitId":"nubnubyas"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-31"},{"lineNumber":100,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"nubnubyas":31,"-":70}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"    public static final Prefix PREFIX_ID \u003d new Prefix(\"id/\");","lastModifiedDate":"2023-11-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"    public static final Prefix PREFIX_MEDICAL \u003d new Prefix(\"m/\");","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"    public static final Prefix PREFIX_APPOINTMENT \u003d new Prefix(\"ap/\");","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hyc17003":1,"-":13,"kanna-1":2}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"nubnubyas"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"nubnubyas"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"nubnubyas"},"content":"import java.util.Set;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.logic.commands.DeleteCommand.DeletePersonDescriptor;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"nubnubyas"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"nubnubyas"},"content":"     * DeleteCommand","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":32,"author":{"gitId":"nubnubyas"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"nubnubyas"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID,","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_APPOINTMENT, PREFIX_MEDICAL);","lastModifiedDate":"2023-11-05"},{"lineNumber":40,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"        if (ArgumentMultimap.isAnyPrefixPresent(argMultimap, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS)","lastModifiedDate":"2023-11-05"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"                || !ArgumentMultimap.isAnyPrefixPresent(argMultimap, PREFIX_NAME, PREFIX_ID, PREFIX_APPOINTMENT,","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"nubnubyas"},"content":"                        PREFIX_MEDICAL)) {","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"nubnubyas"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_ID, PREFIX_APPOINTMENT);","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"        boolean hasNamePrefix \u003d argMultimap.getValue(PREFIX_NAME).isPresent();","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"        boolean hasIdPrefix \u003d argMultimap.getValue(PREFIX_ID).isPresent();","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"        if (!hasNamePrefix \u0026\u0026 !hasIdPrefix) {","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"nubnubyas"},"content":"        Name name \u003d null;","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"        Id id \u003d null;","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":59,"author":{"gitId":"nubnubyas"},"content":"        if (hasNamePrefix) {","lastModifiedDate":"2023-10-16"},{"lineNumber":60,"author":{"gitId":"nubnubyas"},"content":"            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-10-16"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"        if (hasIdPrefix) {","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"            id \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_ID).get());","lastModifiedDate":"2023-11-07"},{"lineNumber":64,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":65,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor deletePersonDescriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-16"},{"lineNumber":67,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":68,"author":{"gitId":"nubnubyas"},"content":"        if (argMultimap.prefixExist(PREFIX_MEDICAL)) {","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"nubnubyas"},"content":"            deletePersonDescriptor.setDeleteMedicalHistory();","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"nubnubyas"},"content":"            if (argMultimap.getValue(PREFIX_MEDICAL).get().equals(\"\")) {","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"nubnubyas"},"content":"                deletePersonDescriptor.setMedicalHistory(new HashSet\u003c\u003e());","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"nubnubyas"},"content":"            } else {","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"nubnubyas"},"content":"                Set\u003cMedicalHistory\u003e medicalHistories \u003d ParserUtil.parseMedicals(","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"nubnubyas"},"content":"                        argMultimap.getAllValues(PREFIX_MEDICAL));","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"nubnubyas"},"content":"                deletePersonDescriptor.setMedicalHistory(medicalHistories);","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"nubnubyas"},"content":"            }","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":79,"author":{"gitId":"nubnubyas"},"content":"        if (argMultimap.prefixExist(PREFIX_APPOINTMENT)) {","lastModifiedDate":"2023-10-17"},{"lineNumber":80,"author":{"gitId":"nubnubyas"},"content":"            deletePersonDescriptor.setDeleteAppointment();","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":82,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":83,"author":{"gitId":"hyc17003"},"content":"        return new DeleteCommand(id, name, deletePersonDescriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"nubnubyas":46,"hyc17003":11,"WZWren":4,"-":22,"kanna-1":2}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":25,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"    private static final Logger logger \u003d Logger.getLogger(EditCommandParser.class.getName());","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"kanna-1"},"content":"                        PREFIX_ADDRESS, PREFIX_APPOINTMENT, PREFIX_MEDICAL);","lastModifiedDate":"2023-11-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_ID, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2023-11-07"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"                PREFIX_ADDRESS, PREFIX_APPOINTMENT);","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"kanna-1"},"content":"        boolean hasNamePrefix \u003d argMultimap.getValue(PREFIX_NAME).isPresent();","lastModifiedDate":"2023-10-16"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"        boolean hasIdPrefix \u003d argMultimap.getValue(PREFIX_ID).isPresent();","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"        if (!hasNamePrefix \u0026\u0026 !hasIdPrefix) {","lastModifiedDate":"2023-11-07"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"            logger.log(Level.WARNING, \"Missing NAME or ID prefix in edit command: {0}\", args);","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"kanna-1"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"kanna-1"},"content":"        Name name \u003d null;","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"        Id id \u003d null;","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":59,"author":{"gitId":"kanna-1"},"content":"        if (hasNamePrefix) {","lastModifiedDate":"2023-10-16"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"            name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-10-16"},{"lineNumber":61,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"        if (hasIdPrefix) {","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"            id \u003d ParserUtil.parseId(argMultimap.getValue(PREFIX_ID).get());","lastModifiedDate":"2023-11-07"},{"lineNumber":64,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":71,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-23"},{"lineNumber":79,"author":{"gitId":"kanna-1"},"content":"        parseMedicalHistoriesForEdit(argMultimap.getAllValues(PREFIX_MEDICAL))","lastModifiedDate":"2023-10-18"},{"lineNumber":80,"author":{"gitId":"kanna-1"},"content":"                .ifPresent(editPersonDescriptor::setMedicalHistories);","lastModifiedDate":"2023-10-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"kanna-1"},"content":"        if (argMultimap.getValue(PREFIX_APPOINTMENT).isPresent()) {","lastModifiedDate":"2023-10-18"},{"lineNumber":83,"author":{"gitId":"kanna-1"},"content":"            Appointment appointment \u003d ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_APPOINTMENT).get());","lastModifiedDate":"2023-10-18"},{"lineNumber":84,"author":{"gitId":"kanna-1"},"content":"            editPersonDescriptor.setAppointment(appointment);","lastModifiedDate":"2023-10-18"},{"lineNumber":85,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2023-10-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-10-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":91,"author":{"gitId":"hyc17003"},"content":"        logger.log(Level.INFO, \"Parsed EditCommand with Name: {0}, ID: {1}\", new Object[]{name, id});","lastModifiedDate":"2023-11-07"},{"lineNumber":92,"author":{"gitId":"hyc17003"},"content":"        return new EditCommand(name, id, editPersonDescriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":95,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":96,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":98,"author":{"gitId":"kanna-1"},"content":"     * Parses {@code Collection\u003cString\u003e medicalHistories} into a {@code Set\u003cMedicalHistory\u003e}","lastModifiedDate":"2023-10-18"},{"lineNumber":99,"author":{"gitId":"kanna-1"},"content":"     * if {@code medicalHistories} is non-empty.","lastModifiedDate":"2023-10-18"},{"lineNumber":100,"author":{"gitId":"kanna-1"},"content":"     * If {@code medicalHistories } contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2023-11-05"},{"lineNumber":101,"author":{"gitId":"kanna-1"},"content":"     * {@code Set\u003cMedicalHistory\u003e} containing zero medicalHistories.","lastModifiedDate":"2023-11-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":103,"author":{"gitId":"kanna-1"},"content":"    private Optional\u003cSet\u003cMedicalHistory\u003e\u003e parseMedicalHistoriesForEdit(Collection\u003cString\u003e medicalHistories)","lastModifiedDate":"2023-10-18"},{"lineNumber":104,"author":{"gitId":"kanna-1"},"content":"            throws ParseException {","lastModifiedDate":"2023-10-18"},{"lineNumber":105,"author":{"gitId":"kanna-1"},"content":"        assert medicalHistories !\u003d null;","lastModifiedDate":"2023-10-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":107,"author":{"gitId":"kanna-1"},"content":"        if (medicalHistories.isEmpty()) {","lastModifiedDate":"2023-10-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":110,"author":{"gitId":"kanna-1"},"content":"        Collection\u003cString\u003e medicalHistorySet \u003d medicalHistories.size() \u003d\u003d 1 \u0026\u0026 medicalHistories.contains(\"\")","lastModifiedDate":"2023-10-18"},{"lineNumber":111,"author":{"gitId":"kanna-1"},"content":"                ? Collections.emptySet() : medicalHistories;","lastModifiedDate":"2023-10-18"},{"lineNumber":112,"author":{"gitId":"kanna-1"},"content":"        return Optional.of(ParserUtil.parseMedicals(medicalHistorySet));","lastModifiedDate":"2023-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"hyc17003":13,"WZWren":1,"-":63,"kanna-1":37}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_ID;","lastModifiedDate":"2023-11-09"},{"lineNumber":5,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_NAME;","lastModifiedDate":"2023-11-06"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"nubnubyas"},"content":"import java.util.List;","lastModifiedDate":"2023-11-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.AppointmentOverlapsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.CompositePredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.IdContainsKeywordsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"nubnubyas"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"nubnubyas"},"content":"     * FindCommand and returns a FindCommand object for execution.","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"nubnubyas"},"content":"     *","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"nubnubyas"},"content":"     * @throws ParseException if the user input does not conform to the expected","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"nubnubyas"},"content":"     *                        format","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ID,","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_APPOINTMENT, PREFIX_MEDICAL);","lastModifiedDate":"2023-11-05"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"        if (ArgumentMultimap.isAnyPrefixPresent(argMultimap, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_MEDICAL)","lastModifiedDate":"2023-11-05"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"                || !ArgumentMultimap.isAnyPrefixPresent(argMultimap, PREFIX_NAME, PREFIX_ID, PREFIX_APPOINTMENT)) {","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_ID, PREFIX_APPOINTMENT);","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"        CompositePredicate findCommandPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"            String[] nameKeywords \u003d argMultimap.getValue(PREFIX_NAME).get().trim().split(\"\\\\s+\");","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"nubnubyas"},"content":"            List\u003cString\u003e nameKeywordsList \u003d Arrays.asList(nameKeywords);","lastModifiedDate":"2023-11-06"},{"lineNumber":52,"author":{"gitId":"nubnubyas"},"content":"            if (nameKeywordsList.get(0).equals(\"\")) {","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"nubnubyas"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_NAME, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-06"},{"lineNumber":54,"author":{"gitId":"nubnubyas"},"content":"            }","lastModifiedDate":"2023-11-06"},{"lineNumber":55,"author":{"gitId":"nubnubyas"},"content":"            findCommandPredicate.add(new NameContainsKeywordsPredicate(nameKeywordsList));","lastModifiedDate":"2023-11-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"        if (argMultimap.getValue(PREFIX_ID).isPresent()) {","lastModifiedDate":"2023-11-07"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"            String[] idKeywords \u003d argMultimap.getValue(PREFIX_ID).get().trim().split(\"\\\\s+\");","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"nubnubyas"},"content":"            List\u003cString\u003e idKeywordsList \u003d Arrays.asList(idKeywords);","lastModifiedDate":"2023-11-09"},{"lineNumber":61,"author":{"gitId":"nubnubyas"},"content":"            if (idKeywordsList.get(0).equals(\"\")) {","lastModifiedDate":"2023-11-09"},{"lineNumber":62,"author":{"gitId":"nubnubyas"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_ID, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-09"},{"lineNumber":63,"author":{"gitId":"nubnubyas"},"content":"            }","lastModifiedDate":"2023-11-06"},{"lineNumber":64,"author":{"gitId":"nubnubyas"},"content":"            findCommandPredicate.add(new IdContainsKeywordsPredicate(idKeywordsList));","lastModifiedDate":"2023-11-09"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"WZWren"},"content":"        if (argMultimap.getValue(PREFIX_APPOINTMENT).isPresent()) {","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"WZWren"},"content":"            Appointment query \u003d ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_APPOINTMENT).get());","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"WZWren"},"content":"            findCommandPredicate.add(new AppointmentOverlapsPredicate(query));","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"WZWren"},"content":"        return new FindCommand(findCommandPredicate);","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"nubnubyas":18,"hyc17003":6,"WZWren":25,"-":23,"kanna-1":2}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.exceptions.BadAppointmentFormatException;","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"     * Parses a {@code String id} into a {@code Id}.","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-16"},{"lineNumber":61,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"     * @throws ParseException if the given {@code id} is invalid.","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":64,"author":{"gitId":"hyc17003"},"content":"    public static Id parseId(String id) throws ParseException {","lastModifiedDate":"2023-11-07"},{"lineNumber":65,"author":{"gitId":"hyc17003"},"content":"        requireNonNull(id);","lastModifiedDate":"2023-11-07"},{"lineNumber":66,"author":{"gitId":"hyc17003"},"content":"        String trimmedId \u003d id.trim();","lastModifiedDate":"2023-11-07"},{"lineNumber":67,"author":{"gitId":"hyc17003"},"content":"        if (!Id.isValidId(trimmedId)) {","lastModifiedDate":"2023-11-07"},{"lineNumber":68,"author":{"gitId":"hyc17003"},"content":"            throw new ParseException(Id.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":69,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":70,"author":{"gitId":"hyc17003"},"content":"        return new Id(trimmedId);","lastModifiedDate":"2023-11-07"},{"lineNumber":71,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":72,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":89,"author":{"gitId":"kanna-1"},"content":"     * Parses a {@code String email} into a {@code Email}.","lastModifiedDate":"2023-10-16"},{"lineNumber":90,"author":{"gitId":"kanna-1"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-16"},{"lineNumber":91,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":92,"author":{"gitId":"kanna-1"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2023-10-16"},{"lineNumber":93,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":94,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":95,"author":{"gitId":"kanna-1"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2023-10-16"},{"lineNumber":96,"author":{"gitId":"kanna-1"},"content":"        requireNonNull(email);","lastModifiedDate":"2023-10-16"},{"lineNumber":97,"author":{"gitId":"kanna-1"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2023-10-16"},{"lineNumber":98,"author":{"gitId":"kanna-1"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":99,"author":{"gitId":"kanna-1"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-16"},{"lineNumber":100,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":101,"author":{"gitId":"kanna-1"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2023-10-16"},{"lineNumber":102,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":103,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":120,"author":{"gitId":"WZWren"},"content":"     * Parses a {@code String appointment} into an {@code Appointment}, if it exists.","lastModifiedDate":"2023-10-17"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-17"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-10-17"},{"lineNumber":123,"author":{"gitId":"WZWren"},"content":"     * @throws ParseException if the given {@code appointment} is invalid.","lastModifiedDate":"2023-10-17"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":125,"author":{"gitId":"WZWren"},"content":"    public static Appointment parseAppointmentIfExists(Optional\u003cString\u003e appointment) throws ParseException {","lastModifiedDate":"2023-10-17"},{"lineNumber":126,"author":{"gitId":"WZWren"},"content":"        if (appointment.isEmpty()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":127,"author":{"gitId":"WZWren"},"content":"            return null;","lastModifiedDate":"2023-10-17"},{"lineNumber":128,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":129,"author":{"gitId":"WZWren"},"content":"        return parseAppointment(appointment.get());","lastModifiedDate":"2023-10-17"},{"lineNumber":130,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":131,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"kanna-1"},"content":"     * Parses a {@code String appointment} into an {@code Appointment}.","lastModifiedDate":"2023-10-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"WZWren"},"content":"     * @throws ParseException if the given {@code appointment} is invalid.","lastModifiedDate":"2023-10-17"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"kanna-1"},"content":"    public static Appointment parseAppointment(String appointment) throws ParseException {","lastModifiedDate":"2023-10-18"},{"lineNumber":139,"author":{"gitId":"kanna-1"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-10-18"},{"lineNumber":140,"author":{"gitId":"kanna-1"},"content":"        String trimmedAppointment \u003d appointment.trim();","lastModifiedDate":"2023-10-18"},{"lineNumber":141,"author":{"gitId":"WZWren"},"content":"        if (!Appointment.isValidAppointmentDelimit(trimmedAppointment, InputSource.USER_INPUT)) {","lastModifiedDate":"2023-10-29"},{"lineNumber":142,"author":{"gitId":"kanna-1"},"content":"            throw new ParseException(Appointment.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-18"},{"lineNumber":143,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":144,"author":{"gitId":"WZWren"},"content":"        try {","lastModifiedDate":"2023-10-28"},{"lineNumber":145,"author":{"gitId":"WZWren"},"content":"            return Appointment.of(trimmedAppointment, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":146,"author":{"gitId":"WZWren"},"content":"        } catch (BadAppointmentFormatException e) {","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"WZWren"},"content":"            throw new ParseException(e.getMessage());","lastModifiedDate":"2023-10-28"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":152,"author":{"gitId":"WZWren"},"content":"     * Parses a {@code String medHistory} into a {@code MedicalHistory}.","lastModifiedDate":"2023-10-17"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-17"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-10-17"},{"lineNumber":155,"author":{"gitId":"WZWren"},"content":"     * @throws ParseException if the given {@code medHistory} is invalid.","lastModifiedDate":"2023-10-17"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":157,"author":{"gitId":"WZWren"},"content":"    public static MedicalHistory parseMedical(String medHistory) throws ParseException {","lastModifiedDate":"2023-10-17"},{"lineNumber":158,"author":{"gitId":"WZWren"},"content":"        requireNonNull(medHistory);","lastModifiedDate":"2023-10-17"},{"lineNumber":159,"author":{"gitId":"WZWren"},"content":"        String trimmedHistory \u003d medHistory.trim();","lastModifiedDate":"2023-10-17"},{"lineNumber":160,"author":{"gitId":"WZWren"},"content":"        if (!MedicalHistory.isValidMedicalHistory(trimmedHistory)) {","lastModifiedDate":"2023-10-17"},{"lineNumber":161,"author":{"gitId":"WZWren"},"content":"            throw new ParseException(MedicalHistory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-17"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":163,"author":{"gitId":"WZWren"},"content":"        return new MedicalHistory(trimmedHistory);","lastModifiedDate":"2023-10-17"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":167,"author":{"gitId":"WZWren"},"content":"     * Parses {@code Collection\u003cString\u003e medHistories} into {@code Set\u003cMedicalHistory\u003e}.","lastModifiedDate":"2023-10-17"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":169,"author":{"gitId":"WZWren"},"content":"    public static Set\u003cMedicalHistory\u003e parseMedicals(Collection\u003cString\u003e medHistories) throws ParseException {","lastModifiedDate":"2023-10-17"},{"lineNumber":170,"author":{"gitId":"WZWren"},"content":"        requireNonNull(medHistories);","lastModifiedDate":"2023-10-17"},{"lineNumber":171,"author":{"gitId":"WZWren"},"content":"        final Set\u003cMedicalHistory\u003e historiesSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-17"},{"lineNumber":172,"author":{"gitId":"WZWren"},"content":"        for (String historyName : medHistories) {","lastModifiedDate":"2023-10-17"},{"lineNumber":173,"author":{"gitId":"WZWren"},"content":"            historiesSet.add(parseMedical(historyName));","lastModifiedDate":"2023-10-17"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":175,"author":{"gitId":"WZWren"},"content":"        return historiesSet;","lastModifiedDate":"2023-10-17"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hyc17003":9,"WZWren":33,"-":104,"kanna-1":31}},{"path":"src/main/java/seedu/address/logic/parser/UndoCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kanna-1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"kanna-1"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":" * Parses input arguments and creates a new UndoCommand object.","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"kanna-1"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"public class UndoCommandParser implements Parser\u003cUndoCommand\u003e {","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"     * Parses the given {@code args} and generates an UndoCommand object.","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"     * @param args User input string.","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"     * @return UndoCommand object.","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"     * @throws ParseException if the user input does not conform to the expected format","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"kanna-1"},"content":"    public UndoCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"kanna-1"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"kanna-1"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"kanna-1"},"content":"            return new UndoCommand(1);","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"        } else {","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"kanna-1"},"content":"            try {","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"kanna-1"},"content":"                int steps \u003d Integer.parseInt(trimmedArgs);","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"kanna-1"},"content":"                if (steps \u003c\u003d 0) {","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"kanna-1"},"content":"                    throw new ParseException(String.format(","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"kanna-1"},"content":"                            UndoCommand.INVALID_STEPS_TO_UNDO));","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"                } else {","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"kanna-1"},"content":"                    return new UndoCommand(steps);","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"kanna-1"},"content":"                }","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"kanna-1"},"content":"                throw new ParseException(String.format(","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"                        MESSAGE_INVALID_COMMAND_FORMAT, UndoCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"kanna-1"},"content":"            }","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"}","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"kanna-1":42}},{"path":"src/main/java/seedu/address/model/LogBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"WeeeHung"},"content":"import java.util.List;","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"WeeeHung"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"public class LogBook implements ReadOnlyAddressBook {","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"    private final UniquePersonList loggedPersons;","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"    /*","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"WeeeHung"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block,","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"     * sometimes used to avoid duplication","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"     * between constructors. See","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"     * https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":"     * Note that non-static init blocks are not recommended to use. There are other","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"     * ways to avoid duplication","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"     * among constructors.","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"WeeeHung"},"content":"    {","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"        loggedPersons \u003d new UniquePersonList();","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"WeeeHung"},"content":"        // Placeholder data for Logger tab can be included here to initialise logger with patient profiles,","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"        // ie. use loggedPersons.addPerson(Person p)","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"    public LogBook() {","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"     * Creates an LogBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"WeeeHung"},"content":"    public LogBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"        this();","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"    //// list overwrite operations","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"        this.loggedPersons.setPersons(persons);","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"    public UniquePersonList getPersons() {","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"        return loggedPersons;","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"WeeeHung"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"WeeeHung"},"content":"        requireNonNull(newData);","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"WeeeHung"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":68,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":69,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":70,"author":{"gitId":"WeeeHung"},"content":"    //// person-level operations","lastModifiedDate":"2023-10-27"},{"lineNumber":71,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":72,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"WeeeHung"},"content":"     * Returns true if a person with the same identity as {@code person} exists in","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"WeeeHung"},"content":"     * the address book.","lastModifiedDate":"2023-10-27"},{"lineNumber":75,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":76,"author":{"gitId":"WeeeHung"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2023-10-27"},{"lineNumber":77,"author":{"gitId":"WeeeHung"},"content":"        requireNonNull(person);","lastModifiedDate":"2023-10-27"},{"lineNumber":78,"author":{"gitId":"WeeeHung"},"content":"        return loggedPersons.contains(person);","lastModifiedDate":"2023-10-27"},{"lineNumber":79,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":80,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":81,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"WeeeHung"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2023-10-27"},{"lineNumber":83,"author":{"gitId":"WeeeHung"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2023-10-27"},{"lineNumber":84,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"WeeeHung"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"WeeeHung"},"content":"        loggedPersons.add(p);","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":89,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":90,"author":{"gitId":"WeeeHung"},"content":"     * Replaces the given person {@code target} in the list with","lastModifiedDate":"2023-10-27"},{"lineNumber":91,"author":{"gitId":"WeeeHung"},"content":"     * {@code editedPerson}.","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"WeeeHung"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-10-27"},{"lineNumber":93,"author":{"gitId":"WeeeHung"},"content":"     * The person identity of {@code editedPerson} must not be the same as another","lastModifiedDate":"2023-10-27"},{"lineNumber":94,"author":{"gitId":"WeeeHung"},"content":"     * existing person in the address book.","lastModifiedDate":"2023-10-27"},{"lineNumber":95,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":96,"author":{"gitId":"WeeeHung"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-10-27"},{"lineNumber":97,"author":{"gitId":"WeeeHung"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2023-10-27"},{"lineNumber":98,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":99,"author":{"gitId":"WeeeHung"},"content":"        loggedPersons.setPerson(target, editedPerson);","lastModifiedDate":"2023-10-27"},{"lineNumber":100,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":101,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":102,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":103,"author":{"gitId":"WeeeHung"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2023-10-27"},{"lineNumber":104,"author":{"gitId":"WeeeHung"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2023-10-27"},{"lineNumber":105,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":106,"author":{"gitId":"WeeeHung"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2023-10-27"},{"lineNumber":107,"author":{"gitId":"WeeeHung"},"content":"        loggedPersons.remove(key);","lastModifiedDate":"2023-10-27"},{"lineNumber":108,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":109,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":110,"author":{"gitId":"WeeeHung"},"content":"    //// util methods","lastModifiedDate":"2023-10-27"},{"lineNumber":111,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":112,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":113,"author":{"gitId":"WeeeHung"},"content":"    public String toString() {","lastModifiedDate":"2023-10-27"},{"lineNumber":114,"author":{"gitId":"WeeeHung"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-27"},{"lineNumber":115,"author":{"gitId":"WeeeHung"},"content":"                .add(\"persons\", loggedPersons)","lastModifiedDate":"2023-10-27"},{"lineNumber":116,"author":{"gitId":"WeeeHung"},"content":"                .toString();","lastModifiedDate":"2023-10-27"},{"lineNumber":117,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":118,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":119,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":120,"author":{"gitId":"WeeeHung"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":121,"author":{"gitId":"WeeeHung"},"content":"        return loggedPersons.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-27"},{"lineNumber":122,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":123,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":124,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":125,"author":{"gitId":"WeeeHung"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-27"},{"lineNumber":126,"author":{"gitId":"WeeeHung"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-27"},{"lineNumber":127,"author":{"gitId":"WeeeHung"},"content":"            return true;","lastModifiedDate":"2023-10-27"},{"lineNumber":128,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":129,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":130,"author":{"gitId":"WeeeHung"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-27"},{"lineNumber":131,"author":{"gitId":"WeeeHung"},"content":"        if (!(other instanceof LogBook)) {","lastModifiedDate":"2023-10-27"},{"lineNumber":132,"author":{"gitId":"WeeeHung"},"content":"            return false;","lastModifiedDate":"2023-10-27"},{"lineNumber":133,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":134,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":135,"author":{"gitId":"WeeeHung"},"content":"        LogBook otherLogBook \u003d (LogBook) other;","lastModifiedDate":"2023-10-27"},{"lineNumber":136,"author":{"gitId":"WeeeHung"},"content":"        return loggedPersons.equals(otherLogBook.loggedPersons);","lastModifiedDate":"2023-10-27"},{"lineNumber":137,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":138,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":139,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":140,"author":{"gitId":"WeeeHung"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-27"},{"lineNumber":141,"author":{"gitId":"WeeeHung"},"content":"        return loggedPersons.hashCode();","lastModifiedDate":"2023-10-27"},{"lineNumber":142,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":143,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"hyc17003":4,"WeeeHung":139}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.UndoableCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":83,"author":{"gitId":"kanna-1"},"content":"     * Adds an {@code UndoableCommand} to the command history stack.","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":85,"author":{"gitId":"kanna-1"},"content":"     * @param command The undoable command to be added to the command history stack.","lastModifiedDate":"2023-10-28"},{"lineNumber":86,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"kanna-1"},"content":"    void addToHistory(UndoableCommand command);","lastModifiedDate":"2023-10-28"},{"lineNumber":88,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":89,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"kanna-1"},"content":"     * Checks if the command history stack is empty.","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"kanna-1"},"content":"     * @return {@code true} if the command history stack is empty, {@code false} otherwise.","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"kanna-1"},"content":"    boolean isCommandHistoryEmpty();","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"kanna-1"},"content":"     * Pops an {@code UndoableCommand} from the command history stack.","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"kanna-1"},"content":"     * @return The {@code UndoableCommand} popped from the command history stack.","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"kanna-1"},"content":"    UndoableCommand popCommandFromHistory();","lastModifiedDate":"2023-10-28"},{"lineNumber":102,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"kanna-1"},"content":"     * Gets the size of the stack of commandHistory.","lastModifiedDate":"2023-10-28"},{"lineNumber":105,"author":{"gitId":"kanna-1"},"content":"     *","lastModifiedDate":"2023-10-28"},{"lineNumber":106,"author":{"gitId":"kanna-1"},"content":"     * @return The size of the stack of commandHistory.","lastModifiedDate":"2023-10-28"},{"lineNumber":107,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":108,"author":{"gitId":"kanna-1"},"content":"    int getCommandHistorySize();","lastModifiedDate":"2023-10-28"},{"lineNumber":109,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":113,"author":{"gitId":"nubnubyas"},"content":"    /** Returns an unmodifiable view of the unfiltered person list */","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"nubnubyas"},"content":"    ObservableList\u003cPerson\u003e getUnfilteredPersonList();","lastModifiedDate":"2023-11-02"},{"lineNumber":115,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"WeeeHung"},"content":"    /** Returns an unmodifiable view of the logged filtered person list saved when user execute Log Command*/","lastModifiedDate":"2023-10-27"},{"lineNumber":117,"author":{"gitId":"WeeeHung"},"content":"    ObservableList\u003cPerson\u003e getLoggedFilteredPersonList();","lastModifiedDate":"2023-10-27"},{"lineNumber":118,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":124,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":125,"author":{"gitId":"hyc17003"},"content":"    LogBook getLogBook();","lastModifiedDate":"2023-10-30"},{"lineNumber":126,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":127,"author":{"gitId":"hyc17003"},"content":"    void updateFoundPersonsList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2023-10-30"},{"lineNumber":128,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":129,"author":{"gitId":"hyc17003"},"content":"    List\u003cPerson\u003e getFoundPersonsList();","lastModifiedDate":"2023-10-30"},{"lineNumber":130,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":131,"author":{"gitId":"hyc17003"},"content":"    void setLogBook(LogBook logBook);","lastModifiedDate":"2023-10-30"},{"lineNumber":132,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"hyc17003":10,"nubnubyas":3,"-":87,"kanna-1":30,"WeeeHung":3}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import static seedu.address.model.person.predicates.AppointmentOverlapsPredicate.PREDICATE_TODAY;","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"kanna-1"},"content":"import java.util.Stack;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.UndoableCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"kanna-1"},"content":"     * Stack to maintain the history of executed undoable commands.","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"kanna-1"},"content":"    private final Stack\u003cUndoableCommand\u003e commandHistory \u003d new Stack\u003c\u003e();","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"WeeeHung"},"content":"    private final LogBook logBook;","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"    private final FilteredList\u003cPerson\u003e loggedFilteredPersons;","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"    private FilteredList\u003cPerson\u003e foundPersonsList;","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"        this.logBook \u003d new LogBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"        foundPersonsList \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"        foundPersonsList.setPredicate(PREDICATE_TODAY);","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"        this.logBook.setPersons(foundPersonsList);","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"        loggedFilteredPersons \u003d new FilteredList\u003c\u003e(this.logBook.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":132,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":135,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":136,"author":{"gitId":"kanna-1"},"content":"    public void addToHistory(UndoableCommand command) {","lastModifiedDate":"2023-10-28"},{"lineNumber":137,"author":{"gitId":"kanna-1"},"content":"        commandHistory.push(command);","lastModifiedDate":"2023-10-28"},{"lineNumber":138,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":139,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":140,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":141,"author":{"gitId":"kanna-1"},"content":"    public boolean isCommandHistoryEmpty() {","lastModifiedDate":"2023-10-28"},{"lineNumber":142,"author":{"gitId":"kanna-1"},"content":"        return commandHistory.isEmpty();","lastModifiedDate":"2023-10-28"},{"lineNumber":143,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":144,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":145,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":146,"author":{"gitId":"kanna-1"},"content":"    public UndoableCommand popCommandFromHistory() {","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"kanna-1"},"content":"        return commandHistory.pop();","lastModifiedDate":"2023-10-28"},{"lineNumber":148,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":149,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":150,"author":{"gitId":"kanna-1"},"content":"    @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":151,"author":{"gitId":"kanna-1"},"content":"    public int getCommandHistorySize() {","lastModifiedDate":"2023-10-28"},{"lineNumber":152,"author":{"gitId":"kanna-1"},"content":"        return commandHistory.size();","lastModifiedDate":"2023-10-28"},{"lineNumber":153,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":154,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":155,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors","lastModifiedDate":"2023-11-02"},{"lineNumber":156,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":159,"author":{"gitId":"nubnubyas"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the","lastModifiedDate":"2023-11-02"},{"lineNumber":160,"author":{"gitId":"nubnubyas"},"content":"     * internal list of","lastModifiedDate":"2023-11-02"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":168,"author":{"gitId":"nubnubyas"},"content":"    /**","lastModifiedDate":"2023-11-02"},{"lineNumber":169,"author":{"gitId":"nubnubyas"},"content":"     * Returns an unmodifiable view of the original, unfiltered list of persons","lastModifiedDate":"2023-11-02"},{"lineNumber":170,"author":{"gitId":"nubnubyas"},"content":"     * contained in the address book.","lastModifiedDate":"2023-11-02"},{"lineNumber":171,"author":{"gitId":"nubnubyas"},"content":"     * Modifications to this list will not affect the internal state of the address","lastModifiedDate":"2023-11-02"},{"lineNumber":172,"author":{"gitId":"nubnubyas"},"content":"     * book.","lastModifiedDate":"2023-11-02"},{"lineNumber":173,"author":{"gitId":"nubnubyas"},"content":"     */","lastModifiedDate":"2023-11-02"},{"lineNumber":174,"author":{"gitId":"nubnubyas"},"content":"    @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":175,"author":{"gitId":"nubnubyas"},"content":"    public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":176,"author":{"gitId":"nubnubyas"},"content":"        return addressBook.getPersonList();","lastModifiedDate":"2023-11-02"},{"lineNumber":177,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":178,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":179,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":180,"author":{"gitId":"WeeeHung"},"content":"    public ObservableList\u003cPerson\u003e getLoggedFilteredPersonList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":181,"author":{"gitId":"WeeeHung"},"content":"        return loggedFilteredPersons;","lastModifiedDate":"2023-10-27"},{"lineNumber":182,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":183,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":190,"author":{"gitId":"hyc17003"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":191,"author":{"gitId":"hyc17003"},"content":"     * Updates the foundPersonsList for logbook, executed by Find Command only","lastModifiedDate":"2023-10-30"},{"lineNumber":192,"author":{"gitId":"nubnubyas"},"content":"     *","lastModifiedDate":"2023-11-02"},{"lineNumber":193,"author":{"gitId":"hyc17003"},"content":"     * @param predicate This is the condition to filter the personsList by","lastModifiedDate":"2023-10-30"},{"lineNumber":194,"author":{"gitId":"hyc17003"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":195,"author":{"gitId":"hyc17003"},"content":"    public void updateFoundPersonsList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-10-30"},{"lineNumber":196,"author":{"gitId":"hyc17003"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-30"},{"lineNumber":197,"author":{"gitId":"hyc17003"},"content":"        foundPersonsList.setPredicate(predicate);","lastModifiedDate":"2023-10-30"},{"lineNumber":198,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":199,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":200,"author":{"gitId":"hyc17003"},"content":"    public FilteredList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-10-30"},{"lineNumber":201,"author":{"gitId":"hyc17003"},"content":"        return foundPersonsList;","lastModifiedDate":"2023-10-30"},{"lineNumber":202,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":203,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        return addressBook.equals(otherModelManager.addressBook)","lastModifiedDate":"2023-07-13"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons);","lastModifiedDate":"2023-07-13"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d LogBook","lastModifiedDate":"2023-11-02"},{"lineNumber":222,"author":{"gitId":"nubnubyas"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":223,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":224,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":225,"author":{"gitId":"hyc17003"},"content":"    public LogBook getLogBook() {","lastModifiedDate":"2023-10-30"},{"lineNumber":226,"author":{"gitId":"hyc17003"},"content":"        return logBook;","lastModifiedDate":"2023-10-30"},{"lineNumber":227,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":228,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":229,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":230,"author":{"gitId":"hyc17003"},"content":"    public void setLogBook(LogBook logBook) {","lastModifiedDate":"2023-10-30"},{"lineNumber":231,"author":{"gitId":"hyc17003"},"content":"        this.logBook.resetData(logBook);","lastModifiedDate":"2023-10-30"},{"lineNumber":232,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":233,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hyc17003":26,"nubnubyas":24,"WZWren":4,"-":144,"kanna-1":27,"WeeeHung":9}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"healthsync.json\");","lastModifiedDate":"2023-11-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(otherUserPrefs.addressBookFilePath);","lastModifiedDate":"2023-07-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":87,"WeeeHung":1}},{"path":"src/main/java/seedu/address/model/person/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-10"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-10"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-10"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"import java.time.format.SignStyle;","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"import java.time.format.TextStyle;","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"import java.time.temporal.ChronoField;","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"import java.util.function.Function;","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.exceptions.BadAppointmentFormatException;","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"/**","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":" * Represents a Person\u0027s Appointment in the address book.","lastModifiedDate":"2023-10-10"},{"lineNumber":24,"author":{"gitId":"nubnubyas"},"content":" * Guarantees: immutable; is valid as declared in","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":" * {@link #isValidAppointmentDelimit(String, InputSource)}","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":" */","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"public class Appointment {","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"    public static final Appointment TODAY \u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"            new Appointment(LocalDate.now(), LocalTime.of(0, 0), LocalTime.of(23, 59));","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Appointment should be in the format \"","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"            + \"\\\"\u003cDate\u003e \u003cStart Time\u003e \u003cEnd Time\u003e\\\" and adhere to the following constraints:\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"            + \"1. Appointment should not be left blank. Remove this field if no Appointment is needed.\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"            + \"2. The \u003cDate\u003e field is formatted as \\\"\u003cDay\u003e-\u003cMonth\u003e-\u003cYear\u003e\\\". It should be separated with dashes (-).\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"            + \"    ie DD-MM-YYYY.\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"            + \"    - \u003cDay\u003e is given as a simple numeric value.\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"            + \"    - \u003cMonth\u003e is given as a simple numeric value or a standard 3-letter month name.\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"            + \"    - \u003cYear\u003e is optional. It is given as a 2 or 4 digit numeric value.\"","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"            + \" If no year is given, the current year is assumed.\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"            + \"3. The 2 \u003cTime\u003e fields are formatted as \\\"\u003cHour\u003e:\u003cMinute\u003e\\\". It should be separated by colons (:) or not\"","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"            + \"separated at all.\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"            + \"    if no colon is separated, hour should have a leading 0 if relevant. ie HHmm or HH:mm\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"            + \"4. \u003cStart Time\u003e should be earlier than or equals to \u003cEnd Time\u003e, and both are defined within \u003cDate\u003e.\\n\"","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"            + \"5. \u003cDate\u003e, \u003cStart Time\u003e and \u003cEnd Time\u003e are separated by spaces ( ) or commas (,).\";","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"    public static final String UNRECOGNIZED_SOURCE \u003d \"Unrecognised input source detected in Appointment.\";","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"    public static final String FIELD_SEPARATOR_REGEX \u003d \"(,? )|(,)\";","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"    private static final DateTimeFormatter INPUT_DATE_FORMATTER \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"nubnubyas"},"content":"            .parseCaseInsensitive()","lastModifiedDate":"2023-11-06"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"            .optionalStart()","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"            .appendValue(ChronoField.DAY_OF_MONTH, 1, 2, SignStyle.NOT_NEGATIVE)","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"            .appendLiteral(\u0027-\u0027).appendValue(ChronoField.MONTH_OF_YEAR, 1, 2, SignStyle.NOT_NEGATIVE)","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"            .optionalStart()","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"            .appendLiteral(\u0027-\u0027).appendValueReduced(ChronoField.YEAR, 2, 4, 2000)","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"            .optionalEnd().optionalEnd()","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"            .optionalStart()","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"            .appendValue(ChronoField.DAY_OF_MONTH, 1, 2, SignStyle.NOT_NEGATIVE)","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"nubnubyas"},"content":"            .appendLiteral(\u0027-\u0027).appendText(ChronoField.MONTH_OF_YEAR, TextStyle.SHORT_STANDALONE)","lastModifiedDate":"2023-11-06"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"            .optionalStart()","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"            .appendLiteral(\u0027-\u0027).appendValueReduced(ChronoField.YEAR, 2, 4, 2000)","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"WZWren"},"content":"            .optionalEnd().optionalEnd()","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"WZWren"},"content":"            .parseDefaulting(ChronoField.YEAR, LocalDate.now().getYear()).toFormatter()","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"    private static final DateTimeFormatter INPUT_TIME_FORMATTER \u003d new DateTimeFormatterBuilder()","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"WZWren"},"content":"            .appendValue(ChronoField.HOUR_OF_DAY, 1, 2, SignStyle.NOT_NEGATIVE)","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"WZWren"},"content":"            .optionalStart().appendLiteral(\":\").optionalEnd()","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"WZWren"},"content":"            .optionalStart().appendValue(ChronoField.MINUTE_OF_HOUR, 2).optionalEnd()","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"WZWren"},"content":"            .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"WZWren"},"content":"            .toFormatter().withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"WZWren"},"content":"    private static final String STORAGE_FIELD_SEPARATOR \u003d \", \";","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"WZWren"},"content":"    private static final String STORAGE_DATE_FORMAT \u003d \"dd-MMM-uuuu\";","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"WZWren"},"content":"    private static final String STORAGE_TIME_FORMAT \u003d \"HH:mm\";","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"WZWren"},"content":"    private static final DateTimeFormatter STORAGE_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(STORAGE_DATE_FORMAT)","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"WZWren"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"WZWren"},"content":"    private static final DateTimeFormatter STORAGE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(STORAGE_TIME_FORMAT)","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"WZWren"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"WZWren"},"content":"    private static final String MODEL_PERIOD_SEPARATOR \u003d \" to \";","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"WZWren"},"content":"    private final LocalDate date;","lastModifiedDate":"2023-10-28"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"    private final LocalTime start;","lastModifiedDate":"2023-10-28"},{"lineNumber":82,"author":{"gitId":"WZWren"},"content":"    private final LocalTime end;","lastModifiedDate":"2023-10-28"},{"lineNumber":83,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":84,"author":{"gitId":"WZWren"},"content":"    private Appointment(LocalDate date, LocalTime start, LocalTime end) {","lastModifiedDate":"2023-10-29"},{"lineNumber":85,"author":{"gitId":"WZWren"},"content":"        requireAllNonNull(date, start, end);","lastModifiedDate":"2023-10-29"},{"lineNumber":86,"author":{"gitId":"WZWren"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-10-29"},{"lineNumber":87,"author":{"gitId":"WZWren"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-10-29"},{"lineNumber":88,"author":{"gitId":"WZWren"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"WZWren"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":92,"author":{"gitId":"WZWren"},"content":"     * Constructs an {@code Appointment}.","lastModifiedDate":"2023-10-29"},{"lineNumber":93,"author":{"gitId":"WZWren"},"content":"     *","lastModifiedDate":"2023-10-29"},{"lineNumber":94,"author":{"gitId":"WZWren"},"content":"     * @param appointment An appointment String input.","lastModifiedDate":"2023-10-29"},{"lineNumber":95,"author":{"gitId":"WZWren"},"content":"     * @param origin The enumeration defining where the method was called from.","lastModifiedDate":"2023-10-29"},{"lineNumber":96,"author":{"gitId":"WZWren"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":97,"author":{"gitId":"WZWren"},"content":"    public static Appointment of(String appointment, InputSource origin) throws BadAppointmentFormatException {","lastModifiedDate":"2023-10-29"},{"lineNumber":98,"author":{"gitId":"WZWren"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-10-29"},{"lineNumber":99,"author":{"gitId":"WZWren"},"content":"        Function\u003cString, LocalDate\u003e dateFormatter;","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"WZWren"},"content":"        Function\u003cString, LocalTime\u003e timeFormatter;","lastModifiedDate":"2023-10-29"},{"lineNumber":101,"author":{"gitId":"WZWren"},"content":"        String fieldSeparator;","lastModifiedDate":"2023-10-29"},{"lineNumber":102,"author":{"gitId":"WZWren"},"content":"        switch (origin) {","lastModifiedDate":"2023-10-29"},{"lineNumber":103,"author":{"gitId":"WZWren"},"content":"        case USER_INPUT:","lastModifiedDate":"2023-10-29"},{"lineNumber":104,"author":{"gitId":"WZWren"},"content":"            dateFormatter \u003d (val) -\u003e LocalDate.parse(val, INPUT_DATE_FORMATTER);","lastModifiedDate":"2023-10-29"},{"lineNumber":105,"author":{"gitId":"WZWren"},"content":"            timeFormatter \u003d (val) -\u003e LocalTime.parse(val, INPUT_TIME_FORMATTER);","lastModifiedDate":"2023-10-29"},{"lineNumber":106,"author":{"gitId":"WZWren"},"content":"            fieldSeparator \u003d FIELD_SEPARATOR_REGEX;","lastModifiedDate":"2023-10-29"},{"lineNumber":107,"author":{"gitId":"WZWren"},"content":"            break;","lastModifiedDate":"2023-10-29"},{"lineNumber":108,"author":{"gitId":"WZWren"},"content":"        case STORAGE:","lastModifiedDate":"2023-10-29"},{"lineNumber":109,"author":{"gitId":"WZWren"},"content":"            dateFormatter \u003d (val) -\u003e LocalDate.parse(val, STORAGE_DATE_FORMATTER);","lastModifiedDate":"2023-10-29"},{"lineNumber":110,"author":{"gitId":"WZWren"},"content":"            timeFormatter \u003d (val) -\u003e LocalTime.parse(val, STORAGE_TIME_FORMATTER);","lastModifiedDate":"2023-10-29"},{"lineNumber":111,"author":{"gitId":"WZWren"},"content":"            fieldSeparator \u003d \"(\" + STORAGE_FIELD_SEPARATOR + \")\";","lastModifiedDate":"2023-10-29"},{"lineNumber":112,"author":{"gitId":"WZWren"},"content":"            break;","lastModifiedDate":"2023-10-29"},{"lineNumber":113,"author":{"gitId":"WZWren"},"content":"        default:","lastModifiedDate":"2023-10-29"},{"lineNumber":114,"author":{"gitId":"WZWren"},"content":"            throw new IllegalStateException(UNRECOGNIZED_SOURCE);","lastModifiedDate":"2023-10-29"},{"lineNumber":115,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":116,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":117,"author":{"gitId":"WZWren"},"content":"        checkArgument(isValidAppointmentDelimit(appointment, origin), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-29"},{"lineNumber":118,"author":{"gitId":"WZWren"},"content":"        String[] splitFields \u003d appointment.split(fieldSeparator);","lastModifiedDate":"2023-10-29"},{"lineNumber":119,"author":{"gitId":"WZWren"},"content":"        LocalDate date;","lastModifiedDate":"2023-10-29"},{"lineNumber":120,"author":{"gitId":"WZWren"},"content":"        LocalTime start;","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"WZWren"},"content":"        LocalTime end;","lastModifiedDate":"2023-10-29"},{"lineNumber":122,"author":{"gitId":"WZWren"},"content":"        try {","lastModifiedDate":"2023-10-29"},{"lineNumber":123,"author":{"gitId":"WZWren"},"content":"            date \u003d dateFormatter.apply(splitFields[0]);","lastModifiedDate":"2023-10-29"},{"lineNumber":124,"author":{"gitId":"WZWren"},"content":"            start \u003d timeFormatter.apply(splitFields[1]);","lastModifiedDate":"2023-10-29"},{"lineNumber":125,"author":{"gitId":"WZWren"},"content":"            end \u003d timeFormatter.apply(splitFields[2]);","lastModifiedDate":"2023-10-29"},{"lineNumber":126,"author":{"gitId":"WZWren"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-29"},{"lineNumber":127,"author":{"gitId":"WZWren"},"content":"            throw new BadAppointmentFormatException(MESSAGE_CONSTRAINTS, e);","lastModifiedDate":"2023-10-29"},{"lineNumber":128,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":129,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":130,"author":{"gitId":"WZWren"},"content":"        if (start.isAfter(end)) {","lastModifiedDate":"2023-10-29"},{"lineNumber":131,"author":{"gitId":"WZWren"},"content":"            throw new BadAppointmentFormatException(MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-29"},{"lineNumber":132,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":133,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":134,"author":{"gitId":"WZWren"},"content":"        return new Appointment(date, start, end);","lastModifiedDate":"2023-10-29"},{"lineNumber":135,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":136,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":137,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":138,"author":{"gitId":"WZWren"},"content":"     * Returns true if a given input string is delimited properly based on its source.","lastModifiedDate":"2023-10-29"},{"lineNumber":139,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":140,"author":{"gitId":"WZWren"},"content":"    public static boolean isValidAppointmentDelimit(String test, InputSource origin) {","lastModifiedDate":"2023-10-29"},{"lineNumber":141,"author":{"gitId":"WZWren"},"content":"        switch (origin) {","lastModifiedDate":"2023-10-29"},{"lineNumber":142,"author":{"gitId":"WZWren"},"content":"        case USER_INPUT:","lastModifiedDate":"2023-10-29"},{"lineNumber":143,"author":{"gitId":"WZWren"},"content":"            return test.split(FIELD_SEPARATOR_REGEX).length \u003d\u003d 3;","lastModifiedDate":"2023-10-28"},{"lineNumber":144,"author":{"gitId":"WZWren"},"content":"        case STORAGE:","lastModifiedDate":"2023-10-29"},{"lineNumber":145,"author":{"gitId":"WZWren"},"content":"            return test.split(\"(\" + STORAGE_FIELD_SEPARATOR + \")\").length \u003d\u003d 3;","lastModifiedDate":"2023-10-29"},{"lineNumber":146,"author":{"gitId":"WZWren"},"content":"        default:","lastModifiedDate":"2023-10-29"},{"lineNumber":147,"author":{"gitId":"WZWren"},"content":"            throw new IllegalStateException(UNRECOGNIZED_SOURCE);","lastModifiedDate":"2023-10-29"},{"lineNumber":148,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":149,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":150,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":151,"author":{"gitId":"WZWren"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":152,"author":{"gitId":"WZWren"},"content":"     * Returns true if the period represented by this {@code Appointment} overlaps with the period","lastModifiedDate":"2023-10-29"},{"lineNumber":153,"author":{"gitId":"WZWren"},"content":"     * of {@code target} on the same day, inclusive of the {@code start} and {@code end}.\u003cbr\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":154,"author":{"gitId":"WZWren"},"content":"     *","lastModifiedDate":"2023-10-29"},{"lineNumber":155,"author":{"gitId":"WZWren"},"content":"     * This method defines an incompatibility relationship between 2 {@code Appointment} objects.","lastModifiedDate":"2023-10-29"},{"lineNumber":156,"author":{"gitId":"WZWren"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":157,"author":{"gitId":"WZWren"},"content":"    public boolean hasOverlap(Appointment target) {","lastModifiedDate":"2023-10-30"},{"lineNumber":158,"author":{"gitId":"WZWren"},"content":"        assert !start.isAfter(end);","lastModifiedDate":"2023-10-29"},{"lineNumber":159,"author":{"gitId":"WZWren"},"content":"        if (target \u003d\u003d null) {","lastModifiedDate":"2023-10-29"},{"lineNumber":160,"author":{"gitId":"WZWren"},"content":"            return false;","lastModifiedDate":"2023-10-29"},{"lineNumber":161,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":162,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":163,"author":{"gitId":"WZWren"},"content":"        assert !target.start.isAfter(target.end);","lastModifiedDate":"2023-10-29"},{"lineNumber":164,"author":{"gitId":"WZWren"},"content":"        if (!date.isEqual(target.date)) {","lastModifiedDate":"2023-10-29"},{"lineNumber":165,"author":{"gitId":"WZWren"},"content":"            return false;","lastModifiedDate":"2023-10-29"},{"lineNumber":166,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":167,"author":{"gitId":"WZWren"},"content":"        return !end.isBefore(target.start) \u0026\u0026 !start.isAfter(target.end);","lastModifiedDate":"2023-10-29"},{"lineNumber":168,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":169,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":170,"author":{"gitId":"WZWren"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":171,"author":{"gitId":"WZWren"},"content":"     * @return The String representation of {@code Appointment} for use in Storage/Save-Parsing","lastModifiedDate":"2023-10-29"},{"lineNumber":172,"author":{"gitId":"WZWren"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":173,"author":{"gitId":"WZWren"},"content":"    public String toSaveString() {","lastModifiedDate":"2023-10-29"},{"lineNumber":174,"author":{"gitId":"WZWren"},"content":"        return STORAGE_DATE_FORMATTER.format(date) + STORAGE_FIELD_SEPARATOR","lastModifiedDate":"2023-10-29"},{"lineNumber":175,"author":{"gitId":"WZWren"},"content":"                + STORAGE_TIME_FORMATTER.format(start) + STORAGE_FIELD_SEPARATOR + STORAGE_TIME_FORMATTER.format(end);","lastModifiedDate":"2023-10-29"},{"lineNumber":176,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":177,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":178,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":179,"author":{"gitId":"WeeeHung"},"content":"    public String toString() {","lastModifiedDate":"2023-10-10"},{"lineNumber":180,"author":{"gitId":"WZWren"},"content":"        return STORAGE_DATE_FORMATTER.format(date) + STORAGE_FIELD_SEPARATOR","lastModifiedDate":"2023-10-29"},{"lineNumber":181,"author":{"gitId":"WZWren"},"content":"                + STORAGE_TIME_FORMATTER.format(start) + MODEL_PERIOD_SEPARATOR + STORAGE_TIME_FORMATTER.format(end);","lastModifiedDate":"2023-10-29"},{"lineNumber":182,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":183,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":184,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":185,"author":{"gitId":"WeeeHung"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-10"},{"lineNumber":186,"author":{"gitId":"WeeeHung"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-10"},{"lineNumber":187,"author":{"gitId":"WeeeHung"},"content":"            return true;","lastModifiedDate":"2023-10-10"},{"lineNumber":188,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":189,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":190,"author":{"gitId":"WeeeHung"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-10"},{"lineNumber":191,"author":{"gitId":"WeeeHung"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2023-10-10"},{"lineNumber":192,"author":{"gitId":"WeeeHung"},"content":"            return false;","lastModifiedDate":"2023-10-10"},{"lineNumber":193,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":194,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":195,"author":{"gitId":"WeeeHung"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2023-10-10"},{"lineNumber":196,"author":{"gitId":"WZWren"},"content":"        return date.equals(otherAppointment.date)","lastModifiedDate":"2023-10-29"},{"lineNumber":197,"author":{"gitId":"WZWren"},"content":"                \u0026\u0026 start.equals(otherAppointment.start)","lastModifiedDate":"2023-10-29"},{"lineNumber":198,"author":{"gitId":"WZWren"},"content":"                \u0026\u0026 end.equals(otherAppointment.end);","lastModifiedDate":"2023-10-29"},{"lineNumber":199,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":200,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":201,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":202,"author":{"gitId":"WeeeHung"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-10"},{"lineNumber":203,"author":{"gitId":"WZWren"},"content":"        return Objects.hash(date, start, end);","lastModifiedDate":"2023-10-29"},{"lineNumber":204,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":205,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-10"}],"authorContributionMap":{"nubnubyas":3,"WZWren":165,"WeeeHung":37}},{"path":"src/main/java/seedu/address/model/person/Id.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-10"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-10"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-10"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"/**","lastModifiedDate":"2023-10-10"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":" * Represents a Person\u0027s ID in the address book.","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidId(String)}","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":" */","lastModifiedDate":"2023-10-10"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"public class Id {","lastModifiedDate":"2023-11-07"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"ID can take any values, and it should not be blank\";","lastModifiedDate":"2023-11-07"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"    public final String value;","lastModifiedDate":"2023-10-10"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"     * Constructs an {@code Id}.","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"     *","lastModifiedDate":"2023-10-10"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"     * @param id A valid ID.","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"    public Id(String id) {","lastModifiedDate":"2023-11-07"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"        requireNonNull(id);","lastModifiedDate":"2023-11-07"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"        checkArgument(isValidId(id), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"nubnubyas"},"content":"        value \u003d id.toUpperCase();","lastModifiedDate":"2023-11-09"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"     * Returns true if a given string is a valid ID.","lastModifiedDate":"2023-11-07"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"    public static boolean isValidId(String test) {","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"        // to add more checks for a valid id combination","lastModifiedDate":"2023-11-07"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-10"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"    public String toString() {","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"        return value;","lastModifiedDate":"2023-10-10"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":42,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"            return true;","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"        if (!(other instanceof Id)) {","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"            return false;","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"        Id otherId \u003d (Id) other;","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"        return value.equalsIgnoreCase((otherId.value));","lastModifiedDate":"2023-11-07"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":57,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":58,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":59,"author":{"gitId":"WeeeHung"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-10"},{"lineNumber":60,"author":{"gitId":"WeeeHung"},"content":"        return value.hashCode();","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-10"}],"authorContributionMap":{"hyc17003":15,"nubnubyas":1,"kanna-1":2,"WeeeHung":44}},{"path":"src/main/java/seedu/address/model/person/MedicalHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-10"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-10"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-10"},{"lineNumber":5,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"/**","lastModifiedDate":"2023-10-10"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":" * Represents a Person\u0027s Medical History in the address book.","lastModifiedDate":"2023-10-10"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMedicalHistory(String)}","lastModifiedDate":"2023-10-10"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":" */","lastModifiedDate":"2023-10-10"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"public class MedicalHistory {","lastModifiedDate":"2023-10-10"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":12,"author":{"gitId":"WeeeHung"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Medical History can take any values, and it should not be blank\";","lastModifiedDate":"2023-10-10"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"    /*","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":"     * The first character of the Medical History must not be a whitespace,","lastModifiedDate":"2023-10-10"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2023-10-10"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2023-10-10"},{"lineNumber":19,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"    public final String value;","lastModifiedDate":"2023-10-10"},{"lineNumber":21,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"     * Constructs an {@code Medical History}.","lastModifiedDate":"2023-10-10"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"     *","lastModifiedDate":"2023-10-10"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"     * @param medicalHistory A valid Medical History.","lastModifiedDate":"2023-10-10"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"    public MedicalHistory(String medicalHistory) {","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"        requireNonNull(medicalHistory);","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"        checkArgument(isValidMedicalHistory(medicalHistory), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-10"},{"lineNumber":30,"author":{"gitId":"WeeeHung"},"content":"        value \u003d medicalHistory;","lastModifiedDate":"2023-10-10"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":32,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"     * Returns true if a given string is a valid Medical History.","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"    public static boolean isValidMedicalHistory(String test) {","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"    public String toString() {","lastModifiedDate":"2023-10-10"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"        return \u0027[\u0027 + value + \u0027]\u0027;","lastModifiedDate":"2023-10-23"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"            return true;","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"        if (!(other instanceof MedicalHistory)) {","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"            return false;","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"        MedicalHistory otherMedicalHistory \u003d (MedicalHistory) other;","lastModifiedDate":"2023-10-10"},{"lineNumber":57,"author":{"gitId":"WeeeHung"},"content":"        return value.equals(otherMedicalHistory.value);","lastModifiedDate":"2023-10-10"},{"lineNumber":58,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":59,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":60,"author":{"gitId":"WeeeHung"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-10"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"        return value.hashCode();","lastModifiedDate":"2023-10-10"},{"lineNumber":63,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":64,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":65,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-10"}],"authorContributionMap":{"kanna-1":1,"WeeeHung":64}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof Name)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Name otherName \u003d (Name) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"kanna-1"},"content":"        return fullName.equalsIgnoreCase((otherName.fullName));","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":63,"kanna-1":1}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"    private final Id id;","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"    private final Appointment appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"    private final Set\u003cMedicalHistory\u003e medicalHistories \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"    public Person(Name name, Id id, Phone phone, Email email, Address address, Appointment appointment,","lastModifiedDate":"2023-11-09"},{"lineNumber":36,"author":{"gitId":"kanna-1"},"content":"                  Set\u003cMedicalHistory\u003e medicalHistories) {","lastModifiedDate":"2023-11-05"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"        requireAllNonNull(name, id, phone, email, address, medicalHistories);","lastModifiedDate":"2023-11-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"        this.id \u003d id;","lastModifiedDate":"2023-11-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"        this.medicalHistories.addAll(medicalHistories);","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"    public Id getId() {","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"        return id;","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":68,"author":{"gitId":"WZWren"},"content":"    public Optional\u003cAppointment\u003e getAppointment() {","lastModifiedDate":"2023-10-17"},{"lineNumber":69,"author":{"gitId":"WZWren"},"content":"        return Optional.ofNullable(appointment);","lastModifiedDate":"2023-10-17"},{"lineNumber":70,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":72,"author":{"gitId":"WeeeHung"},"content":"     * Returns an immutable medical history set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2023-10-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2023-10-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":75,"author":{"gitId":"WeeeHung"},"content":"    public Set\u003cMedicalHistory\u003e getMedicalHistories() {","lastModifiedDate":"2023-10-10"},{"lineNumber":76,"author":{"gitId":"WeeeHung"},"content":"        return Collections.unmodifiableSet(medicalHistories);","lastModifiedDate":"2023-10-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"     * Returns true if both persons have the same name or ID.","lastModifiedDate":"2023-11-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"WZWren"},"content":"                \u0026\u0026 (otherPerson.getName().equals(getName())","lastModifiedDate":"2023-11-06"},{"lineNumber":91,"author":{"gitId":"hyc17003"},"content":"                || otherPerson.getId().equals(getId()));","lastModifiedDate":"2023-11-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":112,"author":{"gitId":"hyc17003"},"content":"                \u0026\u0026 id.equals(otherPerson.id)","lastModifiedDate":"2023-11-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                \u0026\u0026 address.equals(otherPerson.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"WZWren"},"content":"                \u0026\u0026 Objects.equals(appointment, otherPerson.appointment)","lastModifiedDate":"2023-10-17"},{"lineNumber":117,"author":{"gitId":"kanna-1"},"content":"                \u0026\u0026 medicalHistories.equals(otherPerson.medicalHistories);","lastModifiedDate":"2023-11-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"hyc17003"},"content":"        return Objects.hash(name, id, phone, email, address, appointment, medicalHistories);","lastModifiedDate":"2023-11-09"},{"lineNumber":124,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"hyc17003"},"content":"                .add(\"id\", id)","lastModifiedDate":"2023-11-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":135,"author":{"gitId":"WeeeHung"},"content":"                .add(\"appointment\", appointment)","lastModifiedDate":"2023-10-10"},{"lineNumber":136,"author":{"gitId":"WeeeHung"},"content":"                .add(\"medicalHistories\", medicalHistories)","lastModifiedDate":"2023-10-10"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hyc17003":12,"WZWren":7,"-":104,"kanna-1":2,"WeeeHung":14}},{"path":"src/main/java/seedu/address/model/person/enums/InputSource.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.enums;","lastModifiedDate":"2023-10-29"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"/**","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":" * Indicates where the field input originates from in the model.","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":" */","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"public enum InputSource {","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"    USER_INPUT, STORAGE;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"WZWren":8}},{"path":"src/main/java/seedu/address/model/person/exceptions/BadAppointmentFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"/**","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":" * Signals that Appointment has been given a bad value.","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":" */","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"public class BadAppointmentFormatException extends IllegalValueException {","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"    public BadAppointmentFormatException(String message) {","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"        super(message);","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"    /**","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"     * @param cause of the main exception","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"     */","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"    public BadAppointmentFormatException(String message, Throwable cause) {","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"        super(message, cause);","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"WZWren":23}},{"path":"src/main/java/seedu/address/model/person/predicates/AppointmentOverlapsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"/**","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":" * Tests that a {@code Person}\u0027s {@code Appointment} overlaps with the query Appointment.","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":" */","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"public class AppointmentOverlapsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"    public static final AppointmentOverlapsPredicate PREDICATE_TODAY \u003d","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"            new AppointmentOverlapsPredicate(Appointment.TODAY);","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"    private final Appointment query;","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"     * Takes in a non-null {@code Appointment query} to create a well-defined","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"     * Predicate.","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"    public AppointmentOverlapsPredicate(Appointment query) {","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"        requireNonNull(query);","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"        this.query \u003d query;","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"        return query.hasOverlap(person.getAppointment().orElse(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"        return Objects.hash(PREFIX_APPOINTMENT, query);","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"            return true;","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"        if (!(other instanceof AppointmentOverlapsPredicate)) {","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"            return false;","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"        AppointmentOverlapsPredicate otherAppointmentOverlapsPredicate \u003d (AppointmentOverlapsPredicate) other;","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"        return query.equals(otherAppointmentOverlapsPredicate.query);","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"    public String toString() {","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"        return new ToStringBuilder(this).add(\"query\", query.toSaveString()).toString();","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-29"}],"authorContributionMap":{"WZWren":60}},{"path":"src/main/java/seedu/address/model/person/predicates/CompositePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"import java.util.LinkedHashSet;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"/**","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":" * Composite predicate, with a well-defined equals method, for use in comparing Persons.","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":" */","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"public class CompositePredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"    private final Set\u003cPredicate\u003cPerson\u003e\u003e predicateSet;","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"    public CompositePredicate() {","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"        predicateSet \u003d new LinkedHashSet\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"     * Adds the Predicate into the CompositePredicate collection.","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"    public void add(Predicate\u003cPerson\u003e e) {","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"        predicateSet.add(e);","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"        Predicate\u003cPerson\u003e composite \u003d predicateSet.stream().reduce(new IdentityPredicate(), Predicate::and);","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"        return composite.test(person);","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"        return Objects.hash(\"CompositeSet\", predicateSet);","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"            return true;","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"        if (!(other instanceof CompositePredicate)) {","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"            return false;","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"        CompositePredicate otherCompositePredicate \u003d (CompositePredicate) other;","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"        return predicateSet.equals(otherCompositePredicate.predicateSet);","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"    public String toString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"        ToStringBuilder result \u003d new ToStringBuilder(this);","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"        Iterator\u003cPredicate\u003cPerson\u003e\u003e predicates \u003d predicateSet.iterator();","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"        for (int i \u003d 1; predicates.hasNext(); i++) {","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"            result \u003d result.add(String.valueOf(i), predicates.next().toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"WZWren"},"content":"        return result.toString();","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"WZWren":65}},{"path":"src/main/java/seedu/address/model/person/predicates/IdContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"import java.util.List;","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-18"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"/**","lastModifiedDate":"2023-10-18"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":" * Tests that a {@code Person}\u0027s {@code Id} matches any of the keywords given exactly.","lastModifiedDate":"2023-11-07"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":" */","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"public class IdContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"    public IdContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"        return keywords.stream()","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getId().value, keyword));","lastModifiedDate":"2023-11-07"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"        return Objects.hash(PREFIX_ID, keywords);","lastModifiedDate":"2023-11-07"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"            return true;","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"hyc17003"},"content":"        if (!(other instanceof IdContainsKeywordsPredicate)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"            return false;","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"        IdContainsKeywordsPredicate otherIdContainsKeywordsPredicate \u003d (IdContainsKeywordsPredicate) other;","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"        return keywords.equals(otherIdContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"    @Override","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"    public String toString() {","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"}","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"hyc17003":45,"WZWren":8}},{"path":"src/main/java/seedu/address/model/person/predicates/IdentityPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"/**","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":" * Default predicate for predicate chaining.","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":" */","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"public class IdentityPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"    public IdentityPredicate() {}","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"        return true;","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"        return Objects.hash(true);","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"            return true;","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"        return other instanceof IdentityPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"    public String toString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"        return new ToStringBuilder(this).add(\"identity\", true).toString();","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"WZWren":40}},{"path":"src/main/java/seedu/address/model/person/predicates/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"    @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"        return Objects.hash(PREFIX_NAME, keywords);","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!(other instanceof NameContainsKeywordsPredicate)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate otherNameContainsKeywordsPredicate \u003d (NameContainsKeywordsPredicate) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"WZWren":9,"-":44}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.exceptions.BadAppointmentFormatException;","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"    // manual input of sample data to populate app","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"        try {","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            return new Person[]{","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"                new Person(new Name(\"Alex Yeoh\"), new Id(\"T0123456F\"), new Phone(\"87438807\"),","lastModifiedDate":"2023-11-07"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"                        new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2023-10-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                        new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"                        Appointment.of(\"17-Nov-2023, 10:00, 12:00\", InputSource.STORAGE),","lastModifiedDate":"2023-11-09"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"                        getMedicalHistorySet()),","lastModifiedDate":"2023-11-05"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"                new Person(new Name(\"Bernice Yu\"), new Id(\"S0123452F\"), new Phone(\"99272758\"),","lastModifiedDate":"2023-11-07"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"                        new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                        new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"                        Appointment.of(\"08-Aug-2023, 12:00, 14:00\", InputSource.STORAGE),","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"                        getMedicalHistorySet(\"Diabetes\")),","lastModifiedDate":"2023-11-05"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"                new Person(new Name(\"Charlotte Oliveiro\"), new Id(\"T0123456Y\"), new Phone(\"93210283\"),","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"                        new Email(\"charlotte@example.com\"),","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                        new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"                        null,","lastModifiedDate":"2023-10-17"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"                        getMedicalHistorySet(\"AB+ Blood\")),","lastModifiedDate":"2023-11-05"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"                new Person(new Name(\"David Li\"), new Id(\"T0123436F\"), new Phone(\"91031282\"),","lastModifiedDate":"2023-11-07"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"                        new Email(\"lidavid@example.com\"),","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                        new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"                        null,","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"kanna-1"},"content":"                        getMedicalHistorySet()),","lastModifiedDate":"2023-11-05"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"                new Person(new Name(\"Irfan Ibrahim\"), new Id(\"S0123456F\"), new Phone(\"92492021\"),","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"                        new Email(\"irfan@example.com\"),","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                        new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"                        Appointment.of(\"17-Nov-2023, 14:00, 16:00\", InputSource.STORAGE),","lastModifiedDate":"2023-11-09"},{"lineNumber":52,"author":{"gitId":"kanna-1"},"content":"                        getMedicalHistorySet()),","lastModifiedDate":"2023-11-05"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"                new Person(new Name(\"Roy Balakrishnan\"), new Id(\"T0128456F\"), new Phone(\"92624417\"),","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"                        new Email(\"royb@example.com\"),","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                        new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"                        null,","lastModifiedDate":"2023-10-17"},{"lineNumber":57,"author":{"gitId":"kanna-1"},"content":"                        getMedicalHistorySet(\"Currently on XYZ Medication\"))","lastModifiedDate":"2023-11-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            };","lastModifiedDate":"2016-12-20"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"        } catch (BadAppointmentFormatException e) {","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"            throw new IllegalStateException(e);","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":74,"author":{"gitId":"kanna-1"},"content":"     * Returns a medicalHistory set containing the list of strings given.","lastModifiedDate":"2023-11-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":76,"author":{"gitId":"WeeeHung"},"content":"    public static Set\u003cMedicalHistory\u003e getMedicalHistorySet(String... strings) {","lastModifiedDate":"2023-10-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2023-10-10"},{"lineNumber":78,"author":{"gitId":"WeeeHung"},"content":"                .map(MedicalHistory::new)","lastModifiedDate":"2023-10-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2023-10-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"hyc17003":7,"WZWren":10,"-":44,"kanna-1":7,"WeeeHung":13}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedMedicalHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-10"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":5,"author":{"gitId":"WeeeHung"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-10"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2023-10-10"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-10"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-10"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"/**","lastModifiedDate":"2023-10-10"},{"lineNumber":12,"author":{"gitId":"WeeeHung"},"content":" * Jackson-friendly version of {@link MedicalHistory}.","lastModifiedDate":"2023-10-10"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":" */","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"class JsonAdaptedMedicalHistory {","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"    private final String medicalHistory;","lastModifiedDate":"2023-10-10"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":19,"author":{"gitId":"WeeeHung"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2023-10-10"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":21,"author":{"gitId":"WeeeHung"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-10"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"    public JsonAdaptedMedicalHistory(String medicalHistory) {","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"        this.medicalHistory \u003d medicalHistory;","lastModifiedDate":"2023-10-10"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"kanna-1"},"content":"     * Converts a given {@code MedicalHistory} into this class for Jackson use.","lastModifiedDate":"2023-11-05"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"    public JsonAdaptedMedicalHistory(MedicalHistory source) {","lastModifiedDate":"2023-10-10"},{"lineNumber":30,"author":{"gitId":"WeeeHung"},"content":"        medicalHistory \u003d source.value;","lastModifiedDate":"2023-10-10"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":32,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"    @JsonValue","lastModifiedDate":"2023-10-10"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"    public String getMedicalHistoryName() {","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"        return medicalHistory;","lastModifiedDate":"2023-10-10"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"     * Converts this Jackson-friendly adapted MedicalHistory object into the model\u0027s {@code MedicalHistory} object.","lastModifiedDate":"2023-11-05"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"     *","lastModifiedDate":"2023-10-10"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted MedicalHistory.","lastModifiedDate":"2023-11-05"},{"lineNumber":42,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"    public MedicalHistory toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"        if (!MedicalHistory.isValidMedicalHistory(medicalHistory)) {","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"            throw new IllegalValueException(MedicalHistory.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"        return new MedicalHistory(medicalHistory);","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-10"}],"authorContributionMap":{"kanna-1":3,"WeeeHung":47}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.exceptions.BadAppointmentFormatException;","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"    private final String id;","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"    private final String appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"    private final List\u003cJsonAdaptedMedicalHistory\u003e medicalHistories \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"id\") String id,","lastModifiedDate":"2023-11-07"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"                             @JsonProperty(\"address\") String address, @JsonProperty(\"appointment\") String appointment,","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"                             @JsonProperty(\"medicalHistories\") List\u003cJsonAdaptedMedicalHistory\u003e medicalHistories) {","lastModifiedDate":"2023-11-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"        this.id \u003d id;","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"        if (medicalHistories !\u003d null) {","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"            this.medicalHistories.addAll(medicalHistories);","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"WeeeHung"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"    public JsonAdaptedPerson(String name,","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"                             String phone,","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"WeeeHung"},"content":"                             String email,","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"kanna-1"},"content":"                             String address) {","lastModifiedDate":"2023-11-05"},{"lineNumber":65,"author":{"gitId":"WeeeHung"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"WeeeHung"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"WeeeHung"},"content":"        this.email \u003d email;","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"WeeeHung"},"content":"        this.address \u003d address;","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"hyc17003"},"content":"        this.id \u003d null;","lastModifiedDate":"2023-11-07"},{"lineNumber":70,"author":{"gitId":"WeeeHung"},"content":"        this.appointment \u003d null;","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"hyc17003"},"content":"        id \u003d source.getId() !\u003d null","lastModifiedDate":"2023-11-07"},{"lineNumber":79,"author":{"gitId":"hyc17003"},"content":"            ? source.getId().value","lastModifiedDate":"2023-11-07"},{"lineNumber":80,"author":{"gitId":"WeeeHung"},"content":"            : null;","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"WZWren"},"content":"        appointment \u003d source.getAppointment().isPresent()","lastModifiedDate":"2023-10-17"},{"lineNumber":85,"author":{"gitId":"WZWren"},"content":"            ? source.getAppointment().get().toSaveString()","lastModifiedDate":"2023-10-29"},{"lineNumber":86,"author":{"gitId":"WeeeHung"},"content":"            : null;","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"WeeeHung"},"content":"        medicalHistories.addAll(source.getMedicalHistories().stream()","lastModifiedDate":"2023-10-10"},{"lineNumber":88,"author":{"gitId":"WeeeHung"},"content":"                .map(JsonAdaptedMedicalHistory::new)","lastModifiedDate":"2023-10-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-10-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"WeeeHung"},"content":"        final List\u003cMedicalHistory\u003e personMedicalHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-10"},{"lineNumber":99,"author":{"gitId":"WeeeHung"},"content":"        for (JsonAdaptedMedicalHistory medicalHistory : medicalHistories) {","lastModifiedDate":"2023-10-10"},{"lineNumber":100,"author":{"gitId":"WeeeHung"},"content":"            personMedicalHistory.add(medicalHistory.toModelType());","lastModifiedDate":"2023-10-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"hyc17003"},"content":"        if (id \u003d\u003d null) {","lastModifiedDate":"2023-11-07"},{"lineNumber":136,"author":{"gitId":"hyc17003"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName()));","lastModifiedDate":"2023-11-07"},{"lineNumber":137,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"hyc17003"},"content":"        if (!Id.isValidId(id)) {","lastModifiedDate":"2023-11-07"},{"lineNumber":139,"author":{"gitId":"hyc17003"},"content":"            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-07"},{"lineNumber":140,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"hyc17003"},"content":"        final Id modelId \u003d new Id(id);","lastModifiedDate":"2023-11-07"},{"lineNumber":142,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"WeeeHung"},"content":"        final Set\u003cMedicalHistory\u003e modelMedicalHistories \u003d new HashSet\u003c\u003e(personMedicalHistory);","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"WZWren"},"content":"        if (appointment !\u003d null \u0026\u0026 !Appointment.isValidAppointmentDelimit(appointment, InputSource.STORAGE)) {","lastModifiedDate":"2023-10-29"},{"lineNumber":146,"author":{"gitId":"WZWren"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":148,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":149,"author":{"gitId":"WZWren"},"content":"        final Appointment modelAppointment;","lastModifiedDate":"2023-10-28"},{"lineNumber":150,"author":{"gitId":"WZWren"},"content":"        try {","lastModifiedDate":"2023-10-28"},{"lineNumber":151,"author":{"gitId":"WZWren"},"content":"            modelAppointment \u003d appointment \u003d\u003d null ? null : Appointment.of(appointment, InputSource.STORAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":152,"author":{"gitId":"WZWren"},"content":"        } catch (BadAppointmentFormatException e) {","lastModifiedDate":"2023-10-28"},{"lineNumber":153,"author":{"gitId":"WeeeHung"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-10"},{"lineNumber":154,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":155,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":156,"author":{"gitId":"hyc17003"},"content":"        return new Person(modelName, modelId, modelPhone, modelEmail, modelAddress, modelAppointment,","lastModifiedDate":"2023-11-07"},{"lineNumber":157,"author":{"gitId":"kanna-1"},"content":"                modelMedicalHistories);","lastModifiedDate":"2023-11-05"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hyc17003":13,"WZWren":12,"-":96,"kanna-1":3,"WeeeHung":36}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-10-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"    public TextField getTextField() {","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"        return commandTextField;","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"         * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"-":85,"WeeeHung":4}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2324s1-cs2103t-t14-3.github.io/tp/UserGuide.html\";","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":101,"kanna-1":1}},{"path":"src/main/java/seedu/address/ui/LoggedPersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"WeeeHung"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"public class LoggedPersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"    private static final String FXML \u003d \"LoggedPersonListPanel.fxml\";","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"    @FXML","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"WeeeHung"},"content":"    private ListView\u003cPerson\u003e loggedPersonListView;","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":"    public LoggedPersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"        super(FXML);","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"        loggedPersonListView.setItems(personList);","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"        loggedPersonListView.setCellFactory(listView -\u003e new LoggedPersonListViewCell());","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"    class LoggedPersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"        @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"                setGraphic(null);","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"WeeeHung"},"content":"                setText(null);","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"            } else {","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"            }","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"WeeeHung":49}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"    private LoggedPersonListPanel loggedPersonListPanel;","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"    private StackPane loggerPanelPlaceholder;","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"    private CommandBox commandBox;","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":65,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":79,"author":{"gitId":"WeeeHung"},"content":"        loggedPersonListPanel \u003d new LoggedPersonListPanel(logic.getLoggedFilteredPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":80,"author":{"gitId":"WeeeHung"},"content":"        loggerPanelPlaceholder.getChildren().add(loggedPersonListPanel.getRoot());","lastModifiedDate":"2023-10-27"},{"lineNumber":81,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":88,"author":{"gitId":"WeeeHung"},"content":"        commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":92,"author":{"gitId":"WeeeHung"},"content":"    public TextField getTextField() {","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"WeeeHung"},"content":"        return commandBox.getTextField();","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);","lastModifiedDate":"2023-06-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":152,"WeeeHung":14}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"    private Label appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"    @FXML","lastModifiedDate":"2023-10-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"    private FlowPane medicalHistories;","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"        id.setText(person.getId().value);","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"        person.getAppointment().ifPresentOrElse((appt) -\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"                appointment.setText(appt.toString()), () -\u003e appointment.setText(\"No appointment found.\"));","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"WeeeHung"},"content":"        person.getMedicalHistories().stream()","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"                .sorted(Comparator.comparing(medicalHistory -\u003e medicalHistory.value))","lastModifiedDate":"2023-10-10"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"                .forEach(medicalHistory -\u003e medicalHistories.getChildren().add(new Label(medicalHistory.value)));","lastModifiedDate":"2023-10-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"hyc17003":1,"WZWren":2,"-":55,"WeeeHung":6}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"        saveLocationStatus.setText(\"Data is stored locally at \" + Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":27,"WeeeHung":1}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"            // Add a key event filter to the Stage","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"            primaryStage.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"                if (event.getCode() \u003d\u003d KeyCode.SPACE) {","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"                    // Handle \u0027spacebar\u0027 key press at the stage level","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"                    mainWindow.getTextField().requestFocus();","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"                }","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"WeeeHung"},"content":"            });","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":88,"WeeeHung":10}},{"path":"src/main/resources/view/CommandBox.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"\u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Hit the spacebar and start typing command...\"/\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"-":8,"WeeeHung":1}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#4E2B76, 20%);","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"    background-color: #4E2B76;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"    /* Used in the default.html file */","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"WeeeHung"},"content":".label-logger {","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"    -fx-opacity: 0.8;","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"WeeeHung"},"content":"    -fx-font-size: 24px;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"    /* Change the color to your preferred color */","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"    /* Set a transparent background */","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"    -fx-padding: 10px 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"    /* Add padding to top and bottom for spacing */","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":".menu-header {","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"WeeeHung"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"    -fx-text-fill: derive(#ddb533, 10%);","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"    /* Change the color to your preferred color */","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"    /* Set a transparent background */","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"    -fx-padding: 10px 0;","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"    /* Add padding to top and bottom for spacing */","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"WeeeHung"},"content":"    -fx-base: #100b13;","lastModifiedDate":"2023-10-27"},{"lineNumber":70,"author":{"gitId":"WeeeHung"},"content":"    -fx-control-inner-background: #100b13;","lastModifiedDate":"2023-10-27"},{"lineNumber":71,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: #100b13;","lastModifiedDate":"2023-10-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"WeeeHung"},"content":".table-view .column-header,","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"WeeeHung"},"content":".table-view .filler {","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"WeeeHung"},"content":"        transparent transparent derive(-fx-base, 80%) transparent;","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 20%);","lastModifiedDate":"2023-10-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":111,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 20%);","lastModifiedDate":"2023-10-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 20%);","lastModifiedDate":"2023-10-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":120,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":127,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#372941, 10%);","lastModifiedDate":"2023-10-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":130,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":131,"author":{"gitId":"WeeeHung"},"content":"    /* -fx-background-color: #231335; */","lastModifiedDate":"2023-10-27"},{"lineNumber":132,"author":{"gitId":"WeeeHung"},"content":"    /* give me a lighter shade of this background color #231335*/","lastModifiedDate":"2023-10-27"},{"lineNumber":133,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#564463, 10%);","lastModifiedDate":"2023-10-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":136,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":141,"author":{"gitId":"WeeeHung"},"content":"    -fx-border-color: derive(#ffffff, 10%);","lastModifiedDate":"2023-10-27"},{"lineNumber":142,"author":{"gitId":"WeeeHung"},"content":"    -fx-border-width: 0.5;","lastModifiedDate":"2023-10-27"},{"lineNumber":143,"author":{"gitId":"WeeeHung"},"content":"    /* -fx-background-color: #242424; */","lastModifiedDate":"2023-10-27"},{"lineNumber":144,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: #010a31;","lastModifiedDate":"2023-10-27"},{"lineNumber":145,"author":{"gitId":"WeeeHung"},"content":"    /* -fx-background-color: #f0746c; */","lastModifiedDate":"2023-10-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":148,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":166,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 20%);","lastModifiedDate":"2023-10-27"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":170,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 20%);","lastModifiedDate":"2023-10-27"},{"lineNumber":171,"author":{"gitId":"WeeeHung"},"content":"    -fx-border-color: derive(#100b13, 10%);","lastModifiedDate":"2023-10-27"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 30%);","lastModifiedDate":"2023-10-27"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":179,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":180,"author":{"gitId":"WeeeHung"},"content":"    /* -fx-background-color: transparent; */","lastModifiedDate":"2023-10-27"},{"lineNumber":181,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 30%);","lastModifiedDate":"2023-10-27"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":183,"author":{"gitId":"WeeeHung"},"content":"    -fx-text-fill: #00FF00;","lastModifiedDate":"2023-10-27"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":185,"author":{"gitId":"WeeeHung"},"content":"    /* -fx-text-fill: white; */","lastModifiedDate":"2023-10-27"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":188,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 30%);","lastModifiedDate":"2023-10-27"},{"lineNumber":201,"author":{"gitId":"WeeeHung"},"content":"    -fx-border-color: derive(#100b13, 25%);","lastModifiedDate":"2023-10-27"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#A4B65A, 30%);","lastModifiedDate":"2023-10-26"},{"lineNumber":211,"author":{"gitId":"WeeeHung"},"content":"    -fx-border-color: derive(#100b13, 30%);","lastModifiedDate":"2023-10-27"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":216,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 30%);","lastModifiedDate":"2023-10-27"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 50%);","lastModifiedDate":"2023-10-27"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 20%);","lastModifiedDate":"2023-10-27"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":247,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: #100b13;","lastModifiedDate":"2023-10-27"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"WeeeHung"},"content":".button:pressed,","lastModifiedDate":"2023-10-26"},{"lineNumber":264,"author":{"gitId":"WeeeHung"},"content":".button:default:hover:pressed {","lastModifiedDate":"2023-10-26"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"WeeeHung"},"content":"    -fx-text-fill: #100b13;","lastModifiedDate":"2023-10-27"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"WeeeHung"},"content":".button:disabled,","lastModifiedDate":"2023-10-26"},{"lineNumber":278,"author":{"gitId":"WeeeHung"},"content":".button:default:disabled {","lastModifiedDate":"2023-10-26"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: #100b13;","lastModifiedDate":"2023-10-27"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":287,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":289,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":293,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":294,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: #100b13;","lastModifiedDate":"2023-10-27"},{"lineNumber":295,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":297,"author":{"gitId":"-"},"content":".dialog-pane\u003e*.button-bar\u003e*.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":298,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: #100b13;","lastModifiedDate":"2023-10-27"},{"lineNumber":299,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":301,"author":{"gitId":"-"},"content":".dialog-pane\u003e*.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":305,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":307,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":308,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 25%);","lastModifiedDate":"2023-10-27"},{"lineNumber":309,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":319,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 20%);","lastModifiedDate":"2023-10-27"},{"lineNumber":320,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":322,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":323,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 50%);","lastModifiedDate":"2023-10-27"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":325,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":327,"author":{"gitId":"WeeeHung"},"content":".scroll-bar .increment-button,","lastModifiedDate":"2023-10-26"},{"lineNumber":328,"author":{"gitId":"WeeeHung"},"content":".scroll-bar .decrement-button {","lastModifiedDate":"2023-10-26"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":331,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":333,"author":{"gitId":"WeeeHung"},"content":".scroll-bar .increment-arrow,","lastModifiedDate":"2023-10-26"},{"lineNumber":334,"author":{"gitId":"WeeeHung"},"content":".scroll-bar .decrement-arrow {","lastModifiedDate":"2023-10-26"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":336,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":338,"author":{"gitId":"WeeeHung"},"content":".scroll-bar:vertical .increment-arrow,","lastModifiedDate":"2023-10-26"},{"lineNumber":339,"author":{"gitId":"WeeeHung"},"content":".scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2023-10-26"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":341,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":343,"author":{"gitId":"WeeeHung"},"content":".scroll-bar:horizontal .increment-arrow,","lastModifiedDate":"2023-10-26"},{"lineNumber":344,"author":{"gitId":"WeeeHung"},"content":".scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2023-10-26"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":348,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":351,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":353,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":356,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":358,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":361,"author":{"gitId":"WeeeHung"},"content":"    -fx-border-color: #383838 #383838 #383838 #383838;","lastModifiedDate":"2023-10-27"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":367,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":369,"author":{"gitId":"WeeeHung"},"content":"#filterField,","lastModifiedDate":"2023-10-26"},{"lineNumber":370,"author":{"gitId":"WeeeHung"},"content":"#personListPanel,","lastModifiedDate":"2023-10-26"},{"lineNumber":371,"author":{"gitId":"WeeeHung"},"content":"#personWebpage {","lastModifiedDate":"2023-10-26"},{"lineNumber":372,"author":{"gitId":"WeeeHung"},"content":"    -fx-effect: innershadow(gaussian, #A4B65A, 10, 0, 0, 0);","lastModifiedDate":"2023-10-26"},{"lineNumber":373,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":375,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":376,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: black;","lastModifiedDate":"2023-10-27"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":378,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":380,"author":{"gitId":"kanna-1"},"content":"#medicalHistories {","lastModifiedDate":"2023-10-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":383,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":385,"author":{"gitId":"kanna-1"},"content":"#medicalHistories .label {","lastModifiedDate":"2023-10-23"},{"lineNumber":386,"author":{"gitId":"WeeeHung"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-10-26"},{"lineNumber":387,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#ddb533, 10%);","lastModifiedDate":"2023-10-27"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":392,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":393,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":394,"author":{"gitId":"WeeeHung"},"content":".button {","lastModifiedDate":"2023-10-26"},{"lineNumber":395,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-10-26"},{"lineNumber":396,"author":{"gitId":"WeeeHung"},"content":"    /* Set the background to transparent */","lastModifiedDate":"2023-10-26"},{"lineNumber":397,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-insets: 0, 0, 0, 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":398,"author":{"gitId":"WeeeHung"},"content":"    /* Remove any padding or background insets */","lastModifiedDate":"2023-10-26"},{"lineNumber":399,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":400,"author":{"gitId":"WeeeHung"},"content":"    /* Remove background radius */","lastModifiedDate":"2023-10-26"},{"lineNumber":401,"author":{"gitId":"WeeeHung"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":402,"author":{"gitId":"WeeeHung"},"content":"    /* Set border width to 0 */","lastModifiedDate":"2023-10-26"},{"lineNumber":403,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":404,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":405,"author":{"gitId":"WeeeHung"},"content":".logger-tab {","lastModifiedDate":"2023-10-26"},{"lineNumber":406,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 20%);","lastModifiedDate":"2023-10-27"},{"lineNumber":407,"author":{"gitId":"WeeeHung"},"content":"    -fx-padding: 10px;","lastModifiedDate":"2023-10-26"},{"lineNumber":408,"author":{"gitId":"WeeeHung"},"content":"    /* inset of left and right */","lastModifiedDate":"2023-10-26"},{"lineNumber":409,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-insets: 0 10px 0 10px;","lastModifiedDate":"2023-10-26"},{"lineNumber":410,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"-":301,"kanna-1":2,"WeeeHung":107}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"    -fx-text-fill: #fa4b28 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"    -fx-background-color: derive(#100b13, 20%);","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":18,"WeeeHung":2}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@HelpWindow.css\" /\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2021-08-28"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"         \u003cVBox prefHeight\u003d\"39.0\" prefWidth\u003d\"862.0\"\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"            \u003cHBox fx:id\u003d\"helpMessageContainer\" alignment\u003d\"CENTER\" prefHeight\u003d\"0.0\" prefWidth\u003d\"713.0\"\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"              \u003cchildren\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                  \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                    \u003cInsets right\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                  \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                  \u003cHBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                    \u003cInsets left\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                  \u003c/HBox.margin\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                \u003c/Button\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"              \u003c/children\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"              \u003copaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"              \u003c/opaqueInsets\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2019-08-19"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"         \u003c/VBox\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-12-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-12-01"}],"authorContributionMap":{"-":41,"WeeeHung":8}},{"path":"src/main/resources/view/LoggedPersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"WeeeHung"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"   \u003cLabel alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"44.0\" prefWidth\u003d\"248.0\" text\u003d\"Logger Tab\" styleClass\u003d\"label-logger\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"  \u003cListView fx:id\u003d\"loggedPersonListView\" prefWidth\u003d\"248.0\" styleClass\u003d\"logger-tab\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"WeeeHung":10}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"WeeeHung"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"HealthSync\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"         \u003cHBox alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"540.0\" prefWidth\u003d\"824.0\"\u003e","lastModifiedDate":"2023-11-06"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":"               \u003cVBox prefHeight\u003d\"540.0\" prefWidth\u003d\"162.0\" style\u003d\"-fx-background-color: #16071f;\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-11-06"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"                  \u003cchildren\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"                     \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"39.0\" prefWidth\u003d\"51.0\" styleClass\u003d\"menu-header\" text\u003d\" Files\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"                     \u003cButton disable\u003d\"true\" mnemonicParsing\u003d\"false\" text\u003d\"Settings\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-11-06"},{"lineNumber":30,"author":{"gitId":"WeeeHung"},"content":"                      \u003cButton disable\u003d\"true\" mnemonicParsing\u003d\"false\" text\u003d\"Import Data\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-11-06"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"                      \u003cButton disable\u003d\"true\" mnemonicParsing\u003d\"false\" text\u003d\"Export Data\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-11-06"},{"lineNumber":32,"author":{"gitId":"WeeeHung"},"content":"                     \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"39.0\" prefWidth\u003d\"50.0\" styleClass\u003d\"menu-header\" text\u003d\" Help\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"                     \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"User Guide\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"                     \u003cButton disable\u003d\"true\" mnemonicParsing\u003d\"false\" text\u003d\"Release Notes\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-11-06"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"                     \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"229.0\" prefHeight\u003d\"35.0\" prefWidth\u003d\"60.0\" styleClass\u003d\"menu-header\" text\u003d\" Others\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"                     \u003cButton disable\u003d\"true\" mnemonicParsing\u003d\"false\" text\u003d\"About Us\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-11-06"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"                     \u003cButton disable\u003d\"true\" mnemonicParsing\u003d\"false\" text\u003d\"Feedback\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-11-06"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"                     \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" styleClass\u003d\"button\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"                  \u003c/children\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"               \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"                \u003cVBox prefHeight\u003d\"540.0\" prefWidth\u003d\"656.0\" style\u003d\"-fx-background-color: #624583;\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"WeeeHung"},"content":"                  \u003cVBox fx:id\u003d\"personList\" prefHeight\u003d\"453.0\" prefWidth\u003d\"523.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                  \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                  \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"                     \u003cLabel alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"74.0\" prefWidth\u003d\"634.0\" styleClass\u003d\"label-header\" text\u003d\"  Welcome to HealthSync :)\" /\u003e","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"                     \u003cHBox prefHeight\u003d\"376.0\" prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"                        \u003cchildren\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"                            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"367.0\" prefWidth\u003d\"643.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"                           \u003cStackPane fx:id\u003d\"loggerPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"376.0\" prefWidth\u003d\"332.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"                        \u003c/children\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"                     \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"                  \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150\" minHeight\u003d\"120.0\" prefHeight\u003d\"120.0\" prefWidth\u003d\"633.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"                      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                  \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"WeeeHung"},"content":"                  \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"17.0\" prefWidth\u003d\"842.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"                      \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":63,"author":{"gitId":"WeeeHung"},"content":"                  \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                  \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"WeeeHung"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"WeeeHung"},"content":"         \u003c/HBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":30,"WeeeHung":40}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$id\" /\u003e","lastModifiedDate":"2023-11-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"      \u003cFlowPane fx:id\u003d\"medicalHistories\" /\u003e","lastModifiedDate":"2023-10-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"      \u003cLabel fx:id\u003d\"appointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" /\u003e","lastModifiedDate":"2023-10-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"hyc17003":1,"-":35,"WeeeHung":2}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" /\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"-":7,"WeeeHung":1}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DESC_AMY;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_AMY;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"healthsync.json\"));","lastModifiedDate":"2023-11-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"nubnubyas"},"content":"        String deleteCommand \u003d \"delete n/invalid name\";","lastModifiedDate":"2023-10-18"},{"lineNumber":65,"author":{"gitId":"nubnubyas"},"content":"        assertCommandException(deleteCommand, DeleteCommand.MESSAGE_PATIENT_NOT_FOUND);","lastModifiedDate":"2023-11-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":80,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":81,"author":{"gitId":"WeeeHung"},"content":"    public void getLoggedFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getLoggedFilteredPersonList().remove(0));","lastModifiedDate":"2023-10-27"},{"lineNumber":83,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":84,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component.","lastModifiedDate":"2023-06-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // Inject LogicManager with an AddressBookStorage that throws the IOException e when saving","lastModifiedDate":"2023-06-13"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(prefPath) {","lastModifiedDate":"2023-06-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2023-06-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-06-13"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // Triggers the saveAddressBook method by executing an add command","lastModifiedDate":"2023-06-13"},{"lineNumber":176,"author":{"gitId":"hyc17003"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ID_DESC_AMY","lastModifiedDate":"2023-11-07"},{"lineNumber":177,"author":{"gitId":"kanna-1"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + APPOINTMENT_DESC_AMY;","lastModifiedDate":"2023-10-18"},{"lineNumber":178,"author":{"gitId":"kanna-1"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2023-06-13"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"hyc17003":2,"nubnubyas":3,"WZWren":1,"-":167,"kanna-1":4,"WeeeHung":6}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                expectedModel);","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model,","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"nubnubyas"},"content":"                AddCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-11-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"nubnubyas":1,"-":47}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"import java.util.Stack;","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.LogBook;","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"nubnubyas"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2023-11-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"kanna-1"},"content":"    public void execute_undo_successful() throws Exception {","lastModifiedDate":"2023-10-28"},{"lineNumber":91,"author":{"gitId":"kanna-1"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"kanna-1"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"kanna-1"},"content":"        addCommand.execute(modelStub);","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"kanna-1"},"content":"        assertTrue(modelStub.hasPerson(ALICE));","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":97,"author":{"gitId":"kanna-1"},"content":"        CommandResult undoResult \u003d addCommand.undo(modelStub);","lastModifiedDate":"2023-10-28"},{"lineNumber":98,"author":{"gitId":"kanna-1"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_UNDO_ADD_SUCCESS, Messages.format(ALICE)),","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"kanna-1"},"content":"                undoResult.getFeedbackToUser());","lastModifiedDate":"2023-10-28"},{"lineNumber":100,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"kanna-1"},"content":"        assertFalse(modelStub.hasPerson(ALICE));","lastModifiedDate":"2023-10-28"},{"lineNumber":102,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":108,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":109,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":110,"author":{"gitId":"hyc17003"},"content":"        public LogBook getLogBook() {","lastModifiedDate":"2023-10-30"},{"lineNumber":111,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-30"},{"lineNumber":112,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":113,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":120,"author":{"gitId":"hyc17003"},"content":"        public void setLogBook(LogBook logBook) {","lastModifiedDate":"2023-10-30"},{"lineNumber":121,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-30"},{"lineNumber":122,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":123,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":124,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":125,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-10-30"},{"lineNumber":126,"author":{"gitId":"hyc17003"},"content":"            // Return an empty list or a list with some persons if needed for your test","lastModifiedDate":"2023-10-30"},{"lineNumber":127,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-30"},{"lineNumber":128,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":129,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":130,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":131,"author":{"gitId":"hyc17003"},"content":"        public void updateFoundPersonsList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-10-30"},{"lineNumber":132,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-30"},{"lineNumber":133,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":134,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":135,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":196,"author":{"gitId":"nubnubyas"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":197,"author":{"gitId":"nubnubyas"},"content":"        public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":198,"author":{"gitId":"nubnubyas"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":199,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":200,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":201,"author":{"gitId":"WeeeHung"},"content":"        @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":202,"author":{"gitId":"WeeeHung"},"content":"        public ObservableList\u003cPerson\u003e getLoggedFilteredPersonList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":203,"author":{"gitId":"WeeeHung"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-27"},{"lineNumber":204,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":205,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":210,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":211,"author":{"gitId":"kanna-1"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":212,"author":{"gitId":"kanna-1"},"content":"        public void addToHistory(UndoableCommand command) {","lastModifiedDate":"2023-10-28"},{"lineNumber":213,"author":{"gitId":"kanna-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":214,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":215,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":216,"author":{"gitId":"kanna-1"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":217,"author":{"gitId":"kanna-1"},"content":"        public boolean isCommandHistoryEmpty() {","lastModifiedDate":"2023-10-28"},{"lineNumber":218,"author":{"gitId":"kanna-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":219,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":220,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":221,"author":{"gitId":"kanna-1"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":222,"author":{"gitId":"kanna-1"},"content":"        public UndoableCommand popCommandFromHistory() {","lastModifiedDate":"2023-10-28"},{"lineNumber":223,"author":{"gitId":"kanna-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":224,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":225,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":226,"author":{"gitId":"kanna-1"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":227,"author":{"gitId":"kanna-1"},"content":"        public int getCommandHistorySize() {","lastModifiedDate":"2023-10-28"},{"lineNumber":228,"author":{"gitId":"kanna-1"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-28"},{"lineNumber":229,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":251,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":252,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"kanna-1"},"content":"        private Stack\u003cUndoableCommand\u003e commandHistory \u003d new Stack\u003c\u003e();","lastModifiedDate":"2023-10-28"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":274,"author":{"gitId":"kanna-1"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":275,"author":{"gitId":"kanna-1"},"content":"        public void addToHistory(UndoableCommand undoableCommand) {","lastModifiedDate":"2023-10-28"},{"lineNumber":276,"author":{"gitId":"kanna-1"},"content":"            this.commandHistory.push(undoableCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":279,"author":{"gitId":"kanna-1"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":280,"author":{"gitId":"kanna-1"},"content":"        public void deletePerson(Person person) {","lastModifiedDate":"2023-10-28"},{"lineNumber":281,"author":{"gitId":"kanna-1"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-10-28"},{"lineNumber":282,"author":{"gitId":"kanna-1"},"content":"            personsAdded.remove(person);","lastModifiedDate":"2023-10-28"},{"lineNumber":283,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":284,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"hyc17003":24,"nubnubyas":6,"-":204,"kanna-1":46,"WeeeHung":5}},{"path":"src/test/java/seedu/address/logic/commands/AppendLogCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-11-08"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-11-06"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2023-11-06"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2023-11-06"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"import java.util.List;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.LogBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-01"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"public class AppendLogCommandTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"    private final ObservableList\u003cPerson\u003e foundPersonsList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-11-01"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"    private final List\u003cUndoableCommand\u003e commandHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"        public LogBook getLogBook() {","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"        public void setLogBook(LogBook logBook) {","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"            // Return an empty list or a list with some persons if needed for your test","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"        public void updateFoundPersonsList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"hyc17003"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"hyc17003"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"hyc17003"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"hyc17003"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"hyc17003"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":91,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":94,"author":{"gitId":"hyc17003"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"hyc17003"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":104,"author":{"gitId":"hyc17003"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-11-01"},{"lineNumber":105,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":106,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":107,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":108,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":109,"author":{"gitId":"hyc17003"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-11-01"},{"lineNumber":110,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":111,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":112,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":113,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":114,"author":{"gitId":"hyc17003"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2023-11-01"},{"lineNumber":115,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":118,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":119,"author":{"gitId":"hyc17003"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-11-01"},{"lineNumber":120,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":122,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":123,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":124,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":125,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":126,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":127,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":128,"author":{"gitId":"nubnubyas"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"nubnubyas"},"content":"        public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"nubnubyas"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":132,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":133,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":134,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getLoggedFilteredPersonList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":135,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":136,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":137,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":138,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":139,"author":{"gitId":"hyc17003"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-11-01"},{"lineNumber":140,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":141,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":142,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":143,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":144,"author":{"gitId":"hyc17003"},"content":"        public void addToHistory(UndoableCommand command) {","lastModifiedDate":"2023-11-01"},{"lineNumber":145,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":146,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":147,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":148,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":149,"author":{"gitId":"hyc17003"},"content":"        public boolean isCommandHistoryEmpty() {","lastModifiedDate":"2023-11-01"},{"lineNumber":150,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":151,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":152,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":153,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":154,"author":{"gitId":"hyc17003"},"content":"        public UndoableCommand popCommandFromHistory() {","lastModifiedDate":"2023-11-01"},{"lineNumber":155,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":156,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":157,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":158,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":159,"author":{"gitId":"hyc17003"},"content":"        public int getCommandHistorySize() {","lastModifiedDate":"2023-11-01"},{"lineNumber":160,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":161,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":162,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":163,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":164,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":165,"author":{"gitId":"hyc17003"},"content":"    private class ModelStubLoggingPersonAdded extends ModelStub {","lastModifiedDate":"2023-11-01"},{"lineNumber":166,"author":{"gitId":"hyc17003"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-01"},{"lineNumber":167,"author":{"gitId":"hyc17003"},"content":"        private LogBook logBook \u003d new LogBook();","lastModifiedDate":"2023-11-01"},{"lineNumber":168,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":169,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":170,"author":{"gitId":"hyc17003"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-11-01"},{"lineNumber":171,"author":{"gitId":"hyc17003"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-11-01"},{"lineNumber":172,"author":{"gitId":"hyc17003"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2023-11-01"},{"lineNumber":173,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":174,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":175,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":176,"author":{"gitId":"hyc17003"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-11-01"},{"lineNumber":177,"author":{"gitId":"hyc17003"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-11-01"},{"lineNumber":178,"author":{"gitId":"hyc17003"},"content":"            personsAdded.add(person);","lastModifiedDate":"2023-11-01"},{"lineNumber":179,"author":{"gitId":"hyc17003"},"content":"            logBook.addPerson(person);","lastModifiedDate":"2023-11-01"},{"lineNumber":180,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":181,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":182,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":183,"author":{"gitId":"hyc17003"},"content":"        public LogBook getLogBook() {","lastModifiedDate":"2023-11-01"},{"lineNumber":184,"author":{"gitId":"hyc17003"},"content":"            return logBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":185,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":186,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":187,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":188,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":189,"author":{"gitId":"hyc17003"},"content":"            return foundPersonsList;","lastModifiedDate":"2023-11-01"},{"lineNumber":190,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":191,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":192,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":193,"author":{"gitId":"hyc17003"},"content":"        public void addToHistory(UndoableCommand undoableCommand) {","lastModifiedDate":"2023-11-01"},{"lineNumber":194,"author":{"gitId":"hyc17003"},"content":"            commandHistory.add(undoableCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":195,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":196,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":197,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":198,"author":{"gitId":"hyc17003"},"content":"        public boolean isCommandHistoryEmpty() {","lastModifiedDate":"2023-11-01"},{"lineNumber":199,"author":{"gitId":"hyc17003"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":200,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":202,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":203,"author":{"gitId":"hyc17003"},"content":"        public void setLogBook(LogBook logBook) {","lastModifiedDate":"2023-11-01"},{"lineNumber":204,"author":{"gitId":"hyc17003"},"content":"            this.logBook.resetData(logBook);","lastModifiedDate":"2023-11-01"},{"lineNumber":205,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":206,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":207,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":208,"author":{"gitId":"hyc17003"},"content":"    private class ModelStubNoPersonsFound extends ModelStubLoggingPersonAdded {","lastModifiedDate":"2023-11-01"},{"lineNumber":209,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":210,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":211,"author":{"gitId":"hyc17003"},"content":"            return FXCollections.observableArrayList(); // Return an empty list","lastModifiedDate":"2023-11-01"},{"lineNumber":212,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":213,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":214,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":215,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":216,"author":{"gitId":"hyc17003"},"content":"            return FXCollections.observableArrayList(); // Return an empty list","lastModifiedDate":"2023-11-01"},{"lineNumber":217,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":218,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":219,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":220,"author":{"gitId":"hyc17003"},"content":"        public boolean isCommandHistoryEmpty() {","lastModifiedDate":"2023-11-01"},{"lineNumber":221,"author":{"gitId":"hyc17003"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":222,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":223,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":224,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":225,"author":{"gitId":"hyc17003"},"content":"    private class ModelStubAppendingPersonFound extends ModelStubLoggingPersonAdded {","lastModifiedDate":"2023-11-01"},{"lineNumber":226,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":227,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":228,"author":{"gitId":"hyc17003"},"content":"            List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-01"},{"lineNumber":229,"author":{"gitId":"WZWren"},"content":"            persons.add(new PersonBuilder(ALICE).build());","lastModifiedDate":"2023-11-06"},{"lineNumber":230,"author":{"gitId":"hyc17003"},"content":"            return FXCollections.observableArrayList(persons);","lastModifiedDate":"2023-11-01"},{"lineNumber":231,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":232,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":233,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":234,"author":{"gitId":"WZWren"},"content":"    private class ModelStubAppendingPersonsFound extends ModelStubLoggingPersonAdded {","lastModifiedDate":"2023-11-02"},{"lineNumber":235,"author":{"gitId":"WZWren"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":236,"author":{"gitId":"WZWren"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":237,"author":{"gitId":"WZWren"},"content":"            List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-02"},{"lineNumber":238,"author":{"gitId":"hyc17003"},"content":"            persons.add(new PersonBuilder(ALICE).build());","lastModifiedDate":"2023-11-08"},{"lineNumber":239,"author":{"gitId":"WZWren"},"content":"            persons.add(new PersonBuilder(BENSON).build());","lastModifiedDate":"2023-11-06"},{"lineNumber":240,"author":{"gitId":"WZWren"},"content":"            persons.add(new PersonBuilder(CARL).build());","lastModifiedDate":"2023-11-06"},{"lineNumber":241,"author":{"gitId":"WZWren"},"content":"            return FXCollections.observableArrayList(persons);","lastModifiedDate":"2023-11-02"},{"lineNumber":242,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":243,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":244,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":245,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":246,"author":{"gitId":"hyc17003"},"content":"    public void execute_resultsAppendedToEmptyLogBook_success() throws Exception {","lastModifiedDate":"2023-11-01"},{"lineNumber":247,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":248,"author":{"gitId":"hyc17003"},"content":"        ModelStubAppendingPersonFound model \u003d new ModelStubAppendingPersonFound();","lastModifiedDate":"2023-11-01"},{"lineNumber":249,"author":{"gitId":"WZWren"},"content":"        Person personToAppend \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2023-11-06"},{"lineNumber":250,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":251,"author":{"gitId":"hyc17003"},"content":"        AppendLogCommand appendLogCommand \u003d new AppendLogCommand();","lastModifiedDate":"2023-11-01"},{"lineNumber":252,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":253,"author":{"gitId":"hyc17003"},"content":"        CommandResult commandResult \u003d appendLogCommand.execute(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":254,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":255,"author":{"gitId":"hyc17003"},"content":"        assertEquals(AppendLogCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());","lastModifiedDate":"2023-11-01"},{"lineNumber":256,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":257,"author":{"gitId":"WZWren"},"content":"        assertEquals(1, model.getLogBook().getPersonList().size());","lastModifiedDate":"2023-11-06"},{"lineNumber":258,"author":{"gitId":"WZWren"},"content":"        assertEquals(personToAppend, model.getLogBook().getPersonList().get(0));","lastModifiedDate":"2023-11-06"},{"lineNumber":259,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":260,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":261,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":262,"author":{"gitId":"hyc17003"},"content":"    public void execute_resultsAppendedToNonEmptyLogBook_success() throws Exception {","lastModifiedDate":"2023-11-01"},{"lineNumber":263,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":264,"author":{"gitId":"hyc17003"},"content":"        ModelStubAppendingPersonFound model \u003d new ModelStubAppendingPersonFound();","lastModifiedDate":"2023-11-01"},{"lineNumber":265,"author":{"gitId":"WZWren"},"content":"        Person existingPerson \u003d new PersonBuilder(BENSON).build();","lastModifiedDate":"2023-11-06"},{"lineNumber":266,"author":{"gitId":"WZWren"},"content":"        Person personToAppend \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2023-11-06"},{"lineNumber":267,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":268,"author":{"gitId":"hyc17003"},"content":"        model.addPerson(existingPerson);","lastModifiedDate":"2023-11-01"},{"lineNumber":269,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":270,"author":{"gitId":"hyc17003"},"content":"        AppendLogCommand appendLogCommand \u003d new AppendLogCommand();","lastModifiedDate":"2023-11-01"},{"lineNumber":271,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":272,"author":{"gitId":"hyc17003"},"content":"        CommandResult commandResult \u003d appendLogCommand.execute(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":273,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":274,"author":{"gitId":"hyc17003"},"content":"        assertEquals(AppendLogCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());","lastModifiedDate":"2023-11-01"},{"lineNumber":275,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":276,"author":{"gitId":"WZWren"},"content":"        assertEquals(2, model.getLogBook().getPersonList().size());","lastModifiedDate":"2023-11-06"},{"lineNumber":277,"author":{"gitId":"WZWren"},"content":"        assertEquals(personToAppend, model.getLogBook().getPersonList().get(1));","lastModifiedDate":"2023-11-06"},{"lineNumber":278,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":279,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":280,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":281,"author":{"gitId":"hyc17003"},"content":"    public void execute_duplicatePersonFound_appendSkipsDuplicate() throws Exception {","lastModifiedDate":"2023-11-08"},{"lineNumber":282,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":283,"author":{"gitId":"hyc17003"},"content":"        ModelStubAppendingPersonsFound model \u003d new ModelStubAppendingPersonsFound();","lastModifiedDate":"2023-11-08"},{"lineNumber":284,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":285,"author":{"gitId":"hyc17003"},"content":"        Person existingPerson1 \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":286,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":287,"author":{"gitId":"hyc17003"},"content":"        model.addPerson(existingPerson1);","lastModifiedDate":"2023-11-08"},{"lineNumber":288,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":289,"author":{"gitId":"hyc17003"},"content":"        AppendLogCommand appendLogCommand \u003d new AppendLogCommand();","lastModifiedDate":"2023-11-08"},{"lineNumber":290,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":291,"author":{"gitId":"hyc17003"},"content":"        CommandResult commandResult \u003d appendLogCommand.execute(model);","lastModifiedDate":"2023-11-08"},{"lineNumber":292,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":293,"author":{"gitId":"hyc17003"},"content":"        assertEquals(\"Person(s) already in list: Alice Pauline, ID: T7243948H. \"","lastModifiedDate":"2023-11-08"},{"lineNumber":294,"author":{"gitId":"hyc17003"},"content":"                + \"They were not appended to the log.\", commandResult.getFeedbackToUser());","lastModifiedDate":"2023-11-08"},{"lineNumber":295,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":296,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":297,"author":{"gitId":"hyc17003"},"content":"        assertEquals(3, model.getLogBook().getPersonList().size());","lastModifiedDate":"2023-11-08"},{"lineNumber":298,"author":{"gitId":"hyc17003"},"content":"        assertEquals(existingPerson1, model.getLogBook().getPersonList().get(0));","lastModifiedDate":"2023-11-08"},{"lineNumber":299,"author":{"gitId":"hyc17003"},"content":"        assertNotEquals(existingPerson1, model.getLogBook().getPersonList().get(1));","lastModifiedDate":"2023-11-08"},{"lineNumber":300,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-08"},{"lineNumber":301,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":302,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-08"},{"lineNumber":303,"author":{"gitId":"hyc17003"},"content":"    public void execute_duplicatePersonsFound_appendSkipsDuplicates() throws Exception {","lastModifiedDate":"2023-11-08"},{"lineNumber":304,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":305,"author":{"gitId":"WZWren"},"content":"        ModelStubAppendingPersonsFound model \u003d new ModelStubAppendingPersonsFound();","lastModifiedDate":"2023-11-02"},{"lineNumber":306,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":307,"author":{"gitId":"WZWren"},"content":"        Person existingPerson1 \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2023-11-06"},{"lineNumber":308,"author":{"gitId":"WZWren"},"content":"        Person existingPerson2 \u003d new PersonBuilder(BENSON).build();","lastModifiedDate":"2023-11-06"},{"lineNumber":309,"author":{"gitId":"hyc17003"},"content":"        Person existingPerson3 \u003d new PersonBuilder(CARL).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":310,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":311,"author":{"gitId":"WZWren"},"content":"        model.addPerson(existingPerson1);","lastModifiedDate":"2023-11-02"},{"lineNumber":312,"author":{"gitId":"WZWren"},"content":"        model.addPerson(existingPerson2);","lastModifiedDate":"2023-11-02"},{"lineNumber":313,"author":{"gitId":"hyc17003"},"content":"        model.addPerson(existingPerson3);","lastModifiedDate":"2023-11-08"},{"lineNumber":314,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":315,"author":{"gitId":"WZWren"},"content":"        AppendLogCommand appendLogCommand \u003d new AppendLogCommand();","lastModifiedDate":"2023-11-02"},{"lineNumber":316,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":317,"author":{"gitId":"WZWren"},"content":"        CommandResult commandResult \u003d appendLogCommand.execute(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":318,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":319,"author":{"gitId":"hyc17003"},"content":"        assertEquals(\"Person(s) already in list: Alice Pauline, ID: T7243948H. Benson Meier, ID: S1234567B. \"","lastModifiedDate":"2023-11-08"},{"lineNumber":320,"author":{"gitId":"hyc17003"},"content":"                + \"Carl Kurz, ID: S8765432B. They were not appended to the log.\", commandResult.getFeedbackToUser());","lastModifiedDate":"2023-11-08"},{"lineNumber":321,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":322,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-08"},{"lineNumber":323,"author":{"gitId":"hyc17003"},"content":"        assertEquals(3, model.getLogBook().getPersonList().size());","lastModifiedDate":"2023-11-08"},{"lineNumber":324,"author":{"gitId":"WZWren"},"content":"        assertEquals(existingPerson1, model.getLogBook().getPersonList().get(0));","lastModifiedDate":"2023-11-06"},{"lineNumber":325,"author":{"gitId":"WZWren"},"content":"        assertEquals(existingPerson2, model.getLogBook().getPersonList().get(1));","lastModifiedDate":"2023-11-06"},{"lineNumber":326,"author":{"gitId":"hyc17003"},"content":"        assertEquals(existingPerson3, model.getLogBook().getPersonList().get(2));","lastModifiedDate":"2023-11-08"},{"lineNumber":327,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":328,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":329,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":330,"author":{"gitId":"hyc17003"},"content":"    public void execute_noPersonsFound_appendNotExecuted() {","lastModifiedDate":"2023-11-01"},{"lineNumber":331,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":332,"author":{"gitId":"hyc17003"},"content":"        ModelStubNoPersonsFound model \u003d new ModelStubNoPersonsFound();","lastModifiedDate":"2023-11-01"},{"lineNumber":333,"author":{"gitId":"hyc17003"},"content":"        AppendLogCommand appendLogCommand \u003d new AppendLogCommand();","lastModifiedDate":"2023-11-01"},{"lineNumber":334,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":335,"author":{"gitId":"WZWren"},"content":"        assertThrows(CommandException.class, () -\u003e appendLogCommand.execute(model));","lastModifiedDate":"2023-11-02"},{"lineNumber":336,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":337,"author":{"gitId":"hyc17003"},"content":"        assertEquals(0, model.getLogBook().getPersonList().size());","lastModifiedDate":"2023-11-01"},{"lineNumber":338,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":339,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":340,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":341,"author":{"gitId":"hyc17003"},"content":"    public void undo_executeCommand_resultsUndone() throws Exception {","lastModifiedDate":"2023-11-01"},{"lineNumber":342,"author":{"gitId":"hyc17003"},"content":"        ModelStubAppendingPersonFound model \u003d new ModelStubAppendingPersonFound();","lastModifiedDate":"2023-11-01"},{"lineNumber":343,"author":{"gitId":"WZWren"},"content":"        Person existingPerson \u003d new PersonBuilder(BENSON).build();","lastModifiedDate":"2023-11-06"},{"lineNumber":344,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":345,"author":{"gitId":"hyc17003"},"content":"        model.addPerson(existingPerson);","lastModifiedDate":"2023-11-01"},{"lineNumber":346,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":347,"author":{"gitId":"hyc17003"},"content":"        AppendLogCommand appendLogCommand \u003d new AppendLogCommand();","lastModifiedDate":"2023-11-01"},{"lineNumber":348,"author":{"gitId":"hyc17003"},"content":"        appendLogCommand.execute(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":349,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":350,"author":{"gitId":"hyc17003"},"content":"        CommandResult undoResult \u003d appendLogCommand.undo(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":351,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":352,"author":{"gitId":"hyc17003"},"content":"        assertEquals(AppendLogCommand.MESSAGE_UNDO_ALOG_SUCCESS, undoResult.getFeedbackToUser());","lastModifiedDate":"2023-11-01"},{"lineNumber":353,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":354,"author":{"gitId":"WZWren"},"content":"        assertEquals(1, model.getLogBook().getPersons().asUnmodifiableObservableList().size());","lastModifiedDate":"2023-11-06"},{"lineNumber":355,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":356,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":357,"author":{"gitId":"hyc17003"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hyc17003":311,"nubnubyas":3,"WZWren":43}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":33,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"kanna-1"},"content":"    public void undo_nonEmptyAddressBook() {","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"kanna-1"},"content":"        Model emptyModel \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"kanna-1"},"content":"        ClearCommand clearCommand \u003d new ClearCommand();","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"kanna-1"},"content":"        // Execute the clear command","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"        clearCommand.execute(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"        assertEquals(emptyModel, model);","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"kanna-1"},"content":"        // Undo the command","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"kanna-1"},"content":"        CommandResult undoResult \u003d clearCommand.undo(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"kanna-1"},"content":"        assertEquals(ClearCommand.MESSAGE_UNDO_CLEAR_SUCCESS, undoResult.getFeedbackToUser());","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":49,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":51,"author":{"gitId":"kanna-1"},"content":"    public void undo_emptyAddressBook() {","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"kanna-1"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"kanna-1"},"content":"        Model emptyModel \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"kanna-1"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"kanna-1"},"content":"        ClearCommand clearCommand \u003d new ClearCommand();","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"kanna-1"},"content":"        // Execute the clear command","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"kanna-1"},"content":"        clearCommand.execute(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"kanna-1"},"content":"        assertEquals(model, emptyModel);","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"kanna-1"},"content":"        // Undo the command","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"kanna-1"},"content":"        CommandResult undoResult \u003d clearCommand.undo(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"kanna-1"},"content":"        assertEquals(model, expectedModel);","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"kanna-1"},"content":"        assertEquals(ClearCommand.MESSAGE_UNDO_CLEAR_SUCCESS, undoResult.getFeedbackToUser());","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"-":32,"kanna-1":35}},{"path":"src/test/java/seedu/address/logic/commands/ClearLogCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-02"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-02"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"import java.util.List;","lastModifiedDate":"2023-11-02"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-11-02"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-11-02"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.LogBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-02"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-02"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-11-02"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-02"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-02"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"public class ClearLogCommandTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-11-02"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"    private List\u003cUndoableCommand\u003e commandHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-02"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-11-02"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"        private LogBook logBook \u003d new LogBook();","lastModifiedDate":"2023-11-02"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"        public LogBook getLogBook() {","lastModifiedDate":"2023-11-02"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"            return logBook;","lastModifiedDate":"2023-11-02"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-11-02"},{"lineNumber":41,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"        public void setLogBook(LogBook logBook) {","lastModifiedDate":"2023-11-02"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"            this.logBook.resetData(logBook);","lastModifiedDate":"2023-11-02"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"        public void updateFoundPersonsList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-11-02"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-11-02"},{"lineNumber":61,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":64,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":65,"author":{"gitId":"hyc17003"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-11-02"},{"lineNumber":66,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":67,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":68,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":69,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":70,"author":{"gitId":"hyc17003"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-11-02"},{"lineNumber":71,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":72,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":73,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":74,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":75,"author":{"gitId":"hyc17003"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2023-11-02"},{"lineNumber":76,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":77,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":78,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":79,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":80,"author":{"gitId":"hyc17003"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-11-02"},{"lineNumber":81,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":82,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":83,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":84,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":85,"author":{"gitId":"hyc17003"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-11-02"},{"lineNumber":86,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":87,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":88,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":89,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":90,"author":{"gitId":"hyc17003"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-11-02"},{"lineNumber":91,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":93,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":94,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":95,"author":{"gitId":"hyc17003"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-11-02"},{"lineNumber":96,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":97,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":98,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":99,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":100,"author":{"gitId":"hyc17003"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-11-02"},{"lineNumber":101,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":102,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":103,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":104,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"hyc17003"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"hyc17003"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":113,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":115,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":119,"author":{"gitId":"nubnubyas"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"nubnubyas"},"content":"        public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":121,"author":{"gitId":"nubnubyas"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getLoggedFilteredPersonList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"hyc17003"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"hyc17003"},"content":"        public void addToHistory(UndoableCommand command) {","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"hyc17003"},"content":"            commandHistory.add(command);","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":140,"author":{"gitId":"hyc17003"},"content":"        public boolean isCommandHistoryEmpty() {","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"hyc17003"},"content":"            return false;","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":144,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"hyc17003"},"content":"        public UndoableCommand popCommandFromHistory() {","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"hyc17003"},"content":"            return commandHistory.remove(commandHistory.size() - 1);","lastModifiedDate":"2023-11-02"},{"lineNumber":147,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":148,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":149,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":150,"author":{"gitId":"hyc17003"},"content":"        public int getCommandHistorySize() {","lastModifiedDate":"2023-11-02"},{"lineNumber":151,"author":{"gitId":"hyc17003"},"content":"            return commandHistory.size();","lastModifiedDate":"2023-11-02"},{"lineNumber":152,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":153,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":154,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":155,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":156,"author":{"gitId":"hyc17003"},"content":"    public void execute_clearLogBook_logBookCleared() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":157,"author":{"gitId":"hyc17003"},"content":"        ModelStub model \u003d new ModelStub();","lastModifiedDate":"2023-11-02"},{"lineNumber":158,"author":{"gitId":"hyc17003"},"content":"        ClearLogCommand clearLogCommand \u003d new ClearLogCommand();","lastModifiedDate":"2023-11-02"},{"lineNumber":159,"author":{"gitId":"hyc17003"},"content":"        CommandResult commandResult \u003d clearLogCommand.execute(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":160,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":161,"author":{"gitId":"hyc17003"},"content":"        assertEquals(ClearLogCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());","lastModifiedDate":"2023-11-02"},{"lineNumber":162,"author":{"gitId":"hyc17003"},"content":"        assertEquals(model.getLogBook().getPersons().asUnmodifiableObservableList().size(), 0);","lastModifiedDate":"2023-11-02"},{"lineNumber":163,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":164,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":165,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":166,"author":{"gitId":"hyc17003"},"content":"    public void undo_executeCommand_resultsUndone() throws Exception {","lastModifiedDate":"2023-11-02"},{"lineNumber":167,"author":{"gitId":"hyc17003"},"content":"        ModelStub model \u003d new ModelStub();","lastModifiedDate":"2023-11-02"},{"lineNumber":168,"author":{"gitId":"hyc17003"},"content":"        LogBook logBookBeforeClear \u003d model.getLogBook();","lastModifiedDate":"2023-11-02"},{"lineNumber":169,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":170,"author":{"gitId":"hyc17003"},"content":"        ClearLogCommand clearLogCommand \u003d new ClearLogCommand();","lastModifiedDate":"2023-11-02"},{"lineNumber":171,"author":{"gitId":"hyc17003"},"content":"        clearLogCommand.execute(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":172,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":173,"author":{"gitId":"hyc17003"},"content":"        CommandResult undoResult \u003d clearLogCommand.undo(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":174,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":175,"author":{"gitId":"hyc17003"},"content":"        assertEquals(ClearLogCommand.MESSAGE_UNDO_CLOG_SUCCESS, undoResult.getFeedbackToUser());","lastModifiedDate":"2023-11-02"},{"lineNumber":176,"author":{"gitId":"hyc17003"},"content":"        assertEquals(model.getLogBook(), logBookBeforeClear);","lastModifiedDate":"2023-11-02"},{"lineNumber":177,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":178,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":179,"author":{"gitId":"hyc17003"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hyc17003":174,"nubnubyas":5}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2023-11-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"    public static final String VALID_ID_AMY \u003d \"T4651323H\";","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"    public static final String VALID_ID_BOB \u003d \"S5210654J\";","lastModifiedDate":"2023-11-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"    public static final String VALID_APPOINTMENT \u003d \"01-Jan-2023 6:00 8:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"    public static final String VALID_MEDICALHISTORY \u003d \"cancer\";","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"    public static final String VALID_ID \u003d \"S2829102B\";","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"    public static final String ID_DESC_AMY \u003d \" \" + PREFIX_ID + VALID_ID_AMY;","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"    public static final String ID_DESC_BOB \u003d \" \" + PREFIX_ID + VALID_ID_BOB;","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"kanna-1"},"content":"    public static final String APPOINTMENT_DESC_AMY \u003d \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT;","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"kanna-1"},"content":"    public static final String APPOINTMENT_DESC_BOB \u003d \" \" + PREFIX_APPOINTMENT + VALID_APPOINTMENT;","lastModifiedDate":"2023-11-05"},{"lineNumber":56,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":57,"author":{"gitId":"kanna-1"},"content":"    public static final String MEDICAL_DESC_BOB \u003d \" \" + PREFIX_MEDICAL + VALID_MEDICALHISTORY;","lastModifiedDate":"2023-11-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"    public static final String INVALID_ID_DESC \u003d \" \" + PREFIX_ID; // empty string not allowed for IDs","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"    public static final String INVALID_FIELD_DESC \u003d \" \" + \"INVALID_PREFIX/\" + \"test\";","lastModifiedDate":"2023-11-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"kanna-1"},"content":"                .build();","lastModifiedDate":"2023-11-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"kanna-1"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"hyc17003":7,"WZWren":2,"-":116,"kanna-1":10}},{"path":"src/test/java/seedu/address/logic/commands/CommandUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import java.util.List;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"public class CommandUtilTest {","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"    public void findPersonByIdentifier_consistentPersonInfo_returnsPerson() throws CommandException {","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"        personList.add(new PersonBuilder(TypicalPersons.ALICE).build());","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"        personList.add(new PersonBuilder(TypicalPersons.BENSON).build());","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"        Optional\u003cPerson\u003e nameFetch \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"                TypicalPersons.ALICE.getName(), null, personList);","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"        Optional\u003cPerson\u003e idFetch \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-11-07"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"                null, TypicalPersons.ALICE.getId(), personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"        Optional\u003cPerson\u003e bothFetch \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"                TypicalPersons.ALICE.getName(), TypicalPersons.ALICE.getId(), personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"        assertTrue(nameFetch.isPresent());","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"        assertTrue(idFetch.isPresent());","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"        assertTrue(bothFetch.isPresent());","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"        assertEquals(TypicalPersons.ALICE, nameFetch.get());","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"        assertEquals(TypicalPersons.ALICE, idFetch.get());","lastModifiedDate":"2023-11-07"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"        assertEquals(TypicalPersons.ALICE, bothFetch.get());","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"    public void findPersonByIdentifier_inconsistentPersonInfo_returnsEmpty() throws CommandException {","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"        personList.add(new PersonBuilder(TypicalPersons.ALICE).build());","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"        personList.add(new PersonBuilder(TypicalPersons.BENSON).build());","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"        Optional\u003cPerson\u003e bothInList \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"                TypicalPersons.ALICE.getName(), TypicalPersons.BENSON.getId(), personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        Optional\u003cPerson\u003e idInList \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"                TypicalPersons.CARL.getName(), TypicalPersons.BENSON.getId(), personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"        Optional\u003cPerson\u003e nameInList \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"                TypicalPersons.ALICE.getName(), TypicalPersons.CARL.getId(), personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"        assertTrue(bothInList.isEmpty());","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"        assertTrue(idInList.isEmpty());","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"        assertTrue(nameInList.isEmpty());","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"    public void findPersonByIdentifier_personNotInList_returnsEmpty() throws CommandException {","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"        personList.add(new PersonBuilder(TypicalPersons.ALICE).build());","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"        personList.add(new PersonBuilder(TypicalPersons.BENSON).build());","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"        Optional\u003cPerson\u003e fetchWithBoth \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"                TypicalPersons.CARL.getName(), TypicalPersons.CARL.getId(), personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":64,"author":{"gitId":"WZWren"},"content":"        Optional\u003cPerson\u003e fetchWithName \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"                TypicalPersons.CARL.getName(), null, personList);","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"hyc17003"},"content":"        Optional\u003cPerson\u003e fetchWithId \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-11-07"},{"lineNumber":67,"author":{"gitId":"hyc17003"},"content":"                null, TypicalPersons.CARL.getId(), personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":68,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":69,"author":{"gitId":"WZWren"},"content":"        assertTrue(fetchWithBoth.isEmpty());","lastModifiedDate":"2023-10-27"},{"lineNumber":70,"author":{"gitId":"WZWren"},"content":"        assertTrue(fetchWithName.isEmpty());","lastModifiedDate":"2023-10-27"},{"lineNumber":71,"author":{"gitId":"hyc17003"},"content":"        assertTrue(fetchWithId.isEmpty());","lastModifiedDate":"2023-11-07"},{"lineNumber":72,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":75,"author":{"gitId":"WZWren"},"content":"    public void findPersonByIdentifier_emptyPersonInfo_throwsCommandException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":76,"author":{"gitId":"WZWren"},"content":"        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-27"},{"lineNumber":77,"author":{"gitId":"WZWren"},"content":"        personList.add(new PersonBuilder(TypicalPersons.ALICE).build());","lastModifiedDate":"2023-10-27"},{"lineNumber":78,"author":{"gitId":"WZWren"},"content":"        personList.add(new PersonBuilder(TypicalPersons.BENSON).build());","lastModifiedDate":"2023-10-27"},{"lineNumber":79,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":80,"author":{"gitId":"WZWren"},"content":"        assertThrows(CommandException.class, () -\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"                CommandUtil.findPersonByIdentifier(null, null, personList));","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":83,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":84,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"WZWren"},"content":"    public void findPersonByIdentifier_emptyList_returnsEmpty() throws CommandException {","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"WZWren"},"content":"        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"WZWren"},"content":"        Optional\u003cPerson\u003e nameFetch \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"WZWren"},"content":"                TypicalPersons.ALICE.getName(), null, personList);","lastModifiedDate":"2023-10-27"},{"lineNumber":89,"author":{"gitId":"hyc17003"},"content":"        Optional\u003cPerson\u003e idFetch \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-11-07"},{"lineNumber":90,"author":{"gitId":"hyc17003"},"content":"                null, TypicalPersons.ALICE.getId(), personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":91,"author":{"gitId":"WZWren"},"content":"        Optional\u003cPerson\u003e bothFetch \u003d CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"hyc17003"},"content":"                TypicalPersons.ALICE.getName(), TypicalPersons.ALICE.getId(), personList);","lastModifiedDate":"2023-11-07"},{"lineNumber":93,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":94,"author":{"gitId":"WZWren"},"content":"        assertEquals(Optional.empty(), nameFetch);","lastModifiedDate":"2023-10-27"},{"lineNumber":95,"author":{"gitId":"hyc17003"},"content":"        assertEquals(Optional.empty(), idFetch);","lastModifiedDate":"2023-11-07"},{"lineNumber":96,"author":{"gitId":"WZWren"},"content":"        assertEquals(Optional.empty(), bothFetch);","lastModifiedDate":"2023-10-27"},{"lineNumber":97,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":98,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":99,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":100,"author":{"gitId":"WZWren"},"content":"    public void findPersonByIdentifier_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":101,"author":{"gitId":"WZWren"},"content":"        assertThrows(NullPointerException.class, () -\u003e CommandUtil.findPersonByIdentifier(","lastModifiedDate":"2023-10-27"},{"lineNumber":102,"author":{"gitId":"hyc17003"},"content":"                TypicalPersons.ALICE.getName(), TypicalPersons.ALICE.getId(), null));","lastModifiedDate":"2023-11-07"},{"lineNumber":103,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":104,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"hyc17003":19,"WZWren":85}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-11-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":11,"author":{"gitId":"nubnubyas"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-11-02"},{"lineNumber":12,"author":{"gitId":"nubnubyas"},"content":"import java.util.Set;","lastModifiedDate":"2023-11-02"},{"lineNumber":13,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.logic.commands.DeleteCommand.DeletePersonDescriptor;","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":23,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-11-02"},{"lineNumber":24,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"nubnubyas"},"content":"    private Name defaultName \u003d new Name(PersonBuilder.DEFAULT_NAME);","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"    private Id defaultId \u003d new Id(PersonBuilder.DEFAULT_ID);","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":40,"author":{"gitId":"nubnubyas"},"content":"    private DeletePersonDescriptor defaultDescriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"nubnubyas"},"content":"    public void execute_validNameUnfilteredList_success() {","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"nubnubyas"},"content":"        Person personToDelete \u003d new PersonBuilder().withName(\"Amy Bee\").build();","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"nubnubyas"},"content":"        model.addPerson(personToDelete);","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"nubnubyas"},"content":"        Name name \u003d personToDelete.getName();","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"nubnubyas"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(null, name, defaultDescriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS,","lastModifiedDate":"2023-11-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"    public void execute_validIdUnfilteredList_success() {","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"        Person personToDelete \u003d new PersonBuilder().withId(\"S1234567E\").build();","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"nubnubyas"},"content":"        model.addPerson(personToDelete);","lastModifiedDate":"2023-10-18"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"        Id id \u003d personToDelete.getId();","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(id, null, defaultDescriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"nubnubyas"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS,","lastModifiedDate":"2023-11-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"nubnubyas"},"content":"    public void execute_invalidName_throwsCommandException() {","lastModifiedDate":"2023-10-18"},{"lineNumber":76,"author":{"gitId":"nubnubyas"},"content":"        Name invalidName \u003d new Name(\"Does Not Exist\");","lastModifiedDate":"2023-10-18"},{"lineNumber":77,"author":{"gitId":"nubnubyas"},"content":"        DeleteCommand command \u003d new DeleteCommand(null, invalidName, new DeletePersonDescriptor());","lastModifiedDate":"2023-10-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"nubnubyas"},"content":"        assertThrows(CommandException.class, DeleteCommand.MESSAGE_PATIENT_NOT_FOUND, () -\u003e command.execute(model));","lastModifiedDate":"2023-11-06"},{"lineNumber":80,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":83,"author":{"gitId":"hyc17003"},"content":"    public void execute_invalidId_throwsCommandException() {","lastModifiedDate":"2023-11-07"},{"lineNumber":84,"author":{"gitId":"hyc17003"},"content":"        Id invalidId \u003d new Id(\"S000000X\");","lastModifiedDate":"2023-11-07"},{"lineNumber":85,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand command \u003d new DeleteCommand(invalidId, null, new DeletePersonDescriptor());","lastModifiedDate":"2023-11-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"nubnubyas"},"content":"        assertThrows(CommandException.class, DeleteCommand.MESSAGE_PATIENT_NOT_FOUND, () -\u003e command.execute(model));","lastModifiedDate":"2023-11-06"},{"lineNumber":88,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":91,"author":{"gitId":"nubnubyas"},"content":"    public void execute_deleteAppointmentField_success() throws CommandException {","lastModifiedDate":"2023-11-02"},{"lineNumber":92,"author":{"gitId":"nubnubyas"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":95,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteAppointment();","lastModifiedDate":"2023-10-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand command \u003d new DeleteCommand(firstPerson.getId(), null, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":98,"author":{"gitId":"nubnubyas"},"content":"        command.execute(model);","lastModifiedDate":"2023-10-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":100,"author":{"gitId":"nubnubyas"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-18"},{"lineNumber":101,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(editedPerson.getAppointment().isEmpty());","lastModifiedDate":"2023-10-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":105,"author":{"gitId":"nubnubyas"},"content":"    public void execute_deleteMedicalHistoryField_success() throws CommandException {","lastModifiedDate":"2023-11-02"},{"lineNumber":106,"author":{"gitId":"nubnubyas"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-11-02"},{"lineNumber":107,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":108,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-11-02"},{"lineNumber":109,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteMedicalHistory();","lastModifiedDate":"2023-11-02"},{"lineNumber":110,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setMedicalHistory(new HashSet\u003c\u003e());","lastModifiedDate":"2023-11-02"},{"lineNumber":111,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":112,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(firstPerson.getId(), null, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":113,"author":{"gitId":"nubnubyas"},"content":"        deleteCommand.execute(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":114,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":115,"author":{"gitId":"nubnubyas"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-11-02"},{"lineNumber":116,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(editedPerson.getMedicalHistories().isEmpty());","lastModifiedDate":"2023-11-02"},{"lineNumber":117,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":118,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":119,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":120,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":121,"author":{"gitId":"nubnubyas"},"content":"    public void execute_deleteSpecificMedicalHistoryField_success() throws CommandException {","lastModifiedDate":"2023-11-02"},{"lineNumber":122,"author":{"gitId":"nubnubyas"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(1);","lastModifiedDate":"2023-11-02"},{"lineNumber":123,"author":{"gitId":"nubnubyas"},"content":"        MedicalHistory medicalHistory1 \u003d new MedicalHistory(\"diabetes\");","lastModifiedDate":"2023-11-02"},{"lineNumber":124,"author":{"gitId":"nubnubyas"},"content":"        MedicalHistory medicalHistory2 \u003d new MedicalHistory(\"high-risk\");","lastModifiedDate":"2023-11-02"},{"lineNumber":125,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(secondPerson.getMedicalHistories().contains(medicalHistory1));","lastModifiedDate":"2023-11-02"},{"lineNumber":126,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":127,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-11-02"},{"lineNumber":128,"author":{"gitId":"nubnubyas"},"content":"        Set\u003cMedicalHistory\u003e medicalHistories \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-11-02"},{"lineNumber":129,"author":{"gitId":"nubnubyas"},"content":"        medicalHistories.add(medicalHistory1);","lastModifiedDate":"2023-11-02"},{"lineNumber":130,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteMedicalHistory();","lastModifiedDate":"2023-11-02"},{"lineNumber":131,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setMedicalHistory(medicalHistories);","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(secondPerson.getId(), null, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":134,"author":{"gitId":"nubnubyas"},"content":"        deleteCommand.execute(model);","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"nubnubyas"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(1);","lastModifiedDate":"2023-11-02"},{"lineNumber":137,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(editedPerson.getMedicalHistories().contains(medicalHistory2));","lastModifiedDate":"2023-11-02"},{"lineNumber":138,"author":{"gitId":"nubnubyas"},"content":"        assertFalse(editedPerson.getMedicalHistories().contains(medicalHistory1));","lastModifiedDate":"2023-11-02"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":140,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":141,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":142,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":143,"author":{"gitId":"nubnubyas"},"content":"    public void execute_patientNoAppointment() throws CommandException {","lastModifiedDate":"2023-11-02"},{"lineNumber":144,"author":{"gitId":"nubnubyas"},"content":"        Person personToDelete \u003d new PersonBuilder().withoutAppointment().build();","lastModifiedDate":"2023-11-02"},{"lineNumber":145,"author":{"gitId":"nubnubyas"},"content":"        model.addPerson(personToDelete);","lastModifiedDate":"2023-11-02"},{"lineNumber":146,"author":{"gitId":"nubnubyas"},"content":"        Name name \u003d personToDelete.getName();","lastModifiedDate":"2023-11-02"},{"lineNumber":147,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-11-02"},{"lineNumber":148,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteAppointment();","lastModifiedDate":"2023-11-02"},{"lineNumber":149,"author":{"gitId":"nubnubyas"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(null, name, descriptor);","lastModifiedDate":"2023-11-02"},{"lineNumber":150,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":151,"author":{"gitId":"nubnubyas"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_NO_APPOINTMENT_TO_DELETE,","lastModifiedDate":"2023-11-02"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2023-11-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":154,"author":{"gitId":"nubnubyas"},"content":"        assertCommandFailure(deleteCommand, model, expectedMessage);","lastModifiedDate":"2023-11-02"},{"lineNumber":155,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":157,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":158,"author":{"gitId":"nubnubyas"},"content":"    public void execute_patientNoMedicalHistory() throws CommandException {","lastModifiedDate":"2023-11-02"},{"lineNumber":159,"author":{"gitId":"nubnubyas"},"content":"        Person personToDelete \u003d new PersonBuilder().build();","lastModifiedDate":"2023-11-02"},{"lineNumber":160,"author":{"gitId":"nubnubyas"},"content":"        model.addPerson(personToDelete);","lastModifiedDate":"2023-11-02"},{"lineNumber":161,"author":{"gitId":"nubnubyas"},"content":"        Name name \u003d personToDelete.getName();","lastModifiedDate":"2023-11-02"},{"lineNumber":162,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-11-02"},{"lineNumber":163,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteMedicalHistory();","lastModifiedDate":"2023-11-02"},{"lineNumber":164,"author":{"gitId":"nubnubyas"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(null, name, descriptor);","lastModifiedDate":"2023-11-02"},{"lineNumber":165,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":166,"author":{"gitId":"nubnubyas"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_NO_MEDICAL_HISTORY_TO_DELETE,","lastModifiedDate":"2023-11-02"},{"lineNumber":167,"author":{"gitId":"nubnubyas"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2023-11-02"},{"lineNumber":168,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":169,"author":{"gitId":"nubnubyas"},"content":"        assertCommandFailure(deleteCommand, model, expectedMessage);","lastModifiedDate":"2023-11-02"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":173,"author":{"gitId":"nubnubyas"},"content":"    public void execute_patientNoMedicalHistorySpecified() throws CommandException {","lastModifiedDate":"2023-11-02"},{"lineNumber":174,"author":{"gitId":"nubnubyas"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(1);","lastModifiedDate":"2023-11-02"},{"lineNumber":175,"author":{"gitId":"nubnubyas"},"content":"        MedicalHistory medicalHistory1 \u003d new MedicalHistory(\"ABC disease\");","lastModifiedDate":"2023-11-02"},{"lineNumber":176,"author":{"gitId":"nubnubyas"},"content":"        assertFalse(secondPerson.getMedicalHistories().contains(medicalHistory1));","lastModifiedDate":"2023-11-02"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":178,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-11-02"},{"lineNumber":179,"author":{"gitId":"nubnubyas"},"content":"        Set\u003cMedicalHistory\u003e medicalHistories \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-11-02"},{"lineNumber":180,"author":{"gitId":"nubnubyas"},"content":"        medicalHistories.add(medicalHistory1);","lastModifiedDate":"2023-11-02"},{"lineNumber":181,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteMedicalHistory();","lastModifiedDate":"2023-11-02"},{"lineNumber":182,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setMedicalHistory(medicalHistories);","lastModifiedDate":"2023-11-02"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":184,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(secondPerson.getId(), null, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":186,"author":{"gitId":"nubnubyas"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_INVALID_MEDICAL_HISTORY,","lastModifiedDate":"2023-11-02"},{"lineNumber":187,"author":{"gitId":"nubnubyas"},"content":"                Messages.format(secondPerson));","lastModifiedDate":"2023-11-02"},{"lineNumber":188,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":189,"author":{"gitId":"nubnubyas"},"content":"        assertCommandFailure(deleteCommand, model, expectedMessage);","lastModifiedDate":"2023-11-02"},{"lineNumber":190,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":191,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":192,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":193,"author":{"gitId":"nubnubyas"},"content":"    public void deletePersonDescriptor_setterMethods() {","lastModifiedDate":"2023-10-18"},{"lineNumber":194,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":195,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":196,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteAppointment();","lastModifiedDate":"2023-10-31"},{"lineNumber":197,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteMedicalHistory();","lastModifiedDate":"2023-10-31"},{"lineNumber":198,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":199,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(descriptor.shouldDeleteAppointment());","lastModifiedDate":"2023-10-31"},{"lineNumber":200,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(descriptor.shouldDeleteMedicalHistory());","lastModifiedDate":"2023-10-31"},{"lineNumber":201,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":202,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":203,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":204,"author":{"gitId":"nubnubyas"},"content":"    public void deletePersonDescriptor_isAllFalse() {","lastModifiedDate":"2023-10-18"},{"lineNumber":205,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":206,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":207,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(descriptor.isAllFalse());","lastModifiedDate":"2023-10-18"},{"lineNumber":208,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":209,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteAppointment();","lastModifiedDate":"2023-10-31"},{"lineNumber":210,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":211,"author":{"gitId":"nubnubyas"},"content":"        assertFalse(descriptor.isAllFalse());","lastModifiedDate":"2023-10-18"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-11-02"},{"lineNumber":215,"author":{"gitId":"nubnubyas"},"content":"    public void deletePersonDescriptor_getMedicalHistories() {","lastModifiedDate":"2023-11-02"},{"lineNumber":216,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-11-02"},{"lineNumber":217,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":218,"author":{"gitId":"nubnubyas"},"content":"        Set\u003cMedicalHistory\u003e medicalHistories \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-11-02"},{"lineNumber":219,"author":{"gitId":"nubnubyas"},"content":"        medicalHistories.add(new MedicalHistory(\"diabetes\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":220,"author":{"gitId":"nubnubyas"},"content":"        medicalHistories.add(new MedicalHistory(\"high-risk\"));","lastModifiedDate":"2023-11-02"},{"lineNumber":221,"author":{"gitId":"nubnubyas"},"content":"        Set\u003cMedicalHistory\u003e medicalHistoriesCopy \u003d new HashSet\u003c\u003e(medicalHistories);","lastModifiedDate":"2023-11-02"},{"lineNumber":222,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":223,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setMedicalHistory(medicalHistories);","lastModifiedDate":"2023-11-02"},{"lineNumber":224,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":225,"author":{"gitId":"nubnubyas"},"content":"        assertEquals(medicalHistoriesCopy, descriptor.getMedicalHistories());","lastModifiedDate":"2023-11-02"},{"lineNumber":226,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-11-02"},{"lineNumber":227,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":229,"author":{"gitId":"nubnubyas"},"content":"    public void equalsDeleteCommand() {","lastModifiedDate":"2023-10-18"},{"lineNumber":230,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(defaultId, null, defaultDescriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":231,"author":{"gitId":"nubnubyas"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(null, defaultName, defaultDescriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":237,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(defaultId, null, defaultDescriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":248,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":249,"author":{"gitId":"nubnubyas"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":250,"author":{"gitId":"nubnubyas"},"content":"        DeleteCommand deleteThirdCommand \u003d new DeleteCommand(null, new Name(\"Bob\"), defaultDescriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":251,"author":{"gitId":"nubnubyas"},"content":"        assertFalse(deleteSecondCommand.equals(deleteThirdCommand));","lastModifiedDate":"2023-10-18"},{"lineNumber":252,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":253,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":254,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":255,"author":{"gitId":"nubnubyas"},"content":"    public void equalsDeletePersonDescriptor() {","lastModifiedDate":"2023-10-18"},{"lineNumber":256,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":257,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":258,"author":{"gitId":"nubnubyas"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-18"},{"lineNumber":259,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(descriptor.equals(descriptor));","lastModifiedDate":"2023-10-18"},{"lineNumber":260,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":261,"author":{"gitId":"nubnubyas"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-18"},{"lineNumber":262,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptorCopy \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":263,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(descriptor.equals(descriptorCopy));","lastModifiedDate":"2023-10-18"},{"lineNumber":264,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":265,"author":{"gitId":"nubnubyas"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":266,"author":{"gitId":"nubnubyas"},"content":"        assertFalse(descriptor.equals(1));","lastModifiedDate":"2023-10-18"},{"lineNumber":267,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":268,"author":{"gitId":"nubnubyas"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":269,"author":{"gitId":"nubnubyas"},"content":"        assertFalse(descriptor.equals(null));","lastModifiedDate":"2023-10-18"},{"lineNumber":270,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":271,"author":{"gitId":"nubnubyas"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":272,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptorDifferent \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":273,"author":{"gitId":"nubnubyas"},"content":"        descriptorDifferent.setDeleteAppointment();","lastModifiedDate":"2023-10-31"},{"lineNumber":274,"author":{"gitId":"nubnubyas"},"content":"        assertFalse(descriptor.equals(descriptorDifferent));","lastModifiedDate":"2023-10-18"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":279,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(defaultId, defaultName, defaultDescriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":280,"author":{"gitId":"hyc17003"},"content":"        String expected \u003d DeleteCommand.class.getCanonicalName() + \"{id\u003d\" + defaultId + \", \" + \"name\u003d\" + defaultName","lastModifiedDate":"2023-11-07"},{"lineNumber":281,"author":{"gitId":"nubnubyas"},"content":"                + \", \"","lastModifiedDate":"2023-10-18"},{"lineNumber":282,"author":{"gitId":"nubnubyas"},"content":"                + \"deletePersonDescriptor\u003d\" + defaultDescriptor + \"}\";","lastModifiedDate":"2023-10-18"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        assertEquals(expected, deleteCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":286,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":287,"author":{"gitId":"kanna-1"},"content":"    public void undoDeletePerson_success() throws CommandException {","lastModifiedDate":"2023-10-28"},{"lineNumber":288,"author":{"gitId":"kanna-1"},"content":"        Person personToDelete \u003d new PersonBuilder().withName(\"Amy Bee\").build();","lastModifiedDate":"2023-10-28"},{"lineNumber":289,"author":{"gitId":"kanna-1"},"content":"        model.addPerson(personToDelete);","lastModifiedDate":"2023-10-28"},{"lineNumber":290,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":291,"author":{"gitId":"kanna-1"},"content":"        DeleteCommand deletePersonCommand \u003d new DeleteCommand(null, personToDelete.getName(), defaultDescriptor);","lastModifiedDate":"2023-10-28"},{"lineNumber":292,"author":{"gitId":"kanna-1"},"content":"        deletePersonCommand.execute(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":293,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":294,"author":{"gitId":"kanna-1"},"content":"        // Undo the deletion of the person","lastModifiedDate":"2023-10-28"},{"lineNumber":295,"author":{"gitId":"kanna-1"},"content":"        CommandResult undoResult \u003d deletePersonCommand.undo(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":296,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":297,"author":{"gitId":"kanna-1"},"content":"        assertTrue(model.hasPerson(personToDelete));","lastModifiedDate":"2023-10-28"},{"lineNumber":298,"author":{"gitId":"nubnubyas"},"content":"        assertEquals(String.format(DeleteCommand.MESSAGE_UNDO_DELETE_PATIENT_SUCCESS,","lastModifiedDate":"2023-11-06"},{"lineNumber":299,"author":{"gitId":"kanna-1"},"content":"                Messages.format(personToDelete)), undoResult.getFeedbackToUser());","lastModifiedDate":"2023-10-28"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":301,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":302,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":303,"author":{"gitId":"kanna-1"},"content":"    public void undoDeleteFields() throws CommandException {","lastModifiedDate":"2023-10-28"},{"lineNumber":304,"author":{"gitId":"kanna-1"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-28"},{"lineNumber":305,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":306,"author":{"gitId":"kanna-1"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-28"},{"lineNumber":307,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteAppointment();","lastModifiedDate":"2023-10-31"},{"lineNumber":308,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":309,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteFieldsCommand \u003d new DeleteCommand(firstPerson.getId(), null, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":310,"author":{"gitId":"kanna-1"},"content":"        deleteFieldsCommand.execute(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":311,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":312,"author":{"gitId":"kanna-1"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-28"},{"lineNumber":313,"author":{"gitId":"kanna-1"},"content":"        assertTrue(editedPerson.getAppointment().isEmpty());","lastModifiedDate":"2023-10-28"},{"lineNumber":314,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":315,"author":{"gitId":"kanna-1"},"content":"        CommandResult undoResult \u003d deleteFieldsCommand.undo(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":316,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":317,"author":{"gitId":"kanna-1"},"content":"        Person unDonePerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-28"},{"lineNumber":318,"author":{"gitId":"kanna-1"},"content":"        assertFalse(unDonePerson.getAppointment().isEmpty());","lastModifiedDate":"2023-10-28"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":320,"author":{"gitId":"kanna-1"},"content":"        assertEquals(String.format(DeleteCommand.MESSAGE_UNDO_DELETE_FIELD_SUCCESS,","lastModifiedDate":"2023-10-28"},{"lineNumber":321,"author":{"gitId":"kanna-1"},"content":"                Messages.format(editedPerson)), undoResult.getFeedbackToUser());","lastModifiedDate":"2023-10-28"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":323,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"nubnubyas":176,"hyc17003":18,"-":98,"kanna-1":31}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.EditCommand.MESSAGE_NO_CHANGE;","lastModifiedDate":"2023-11-05"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.EditCommand.createEditedPerson;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"kanna-1"},"content":" * Contains integration tests (interaction with the Model) and unit tests for the EditCommand.","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"kanna-1"},"content":"    private final String nonExistentName \u003d \"NonExistentName\";","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"kanna-1"},"content":"        Person person \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(person);","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":48,"author":{"gitId":"kanna-1"},"content":"        Person editedPerson \u003d personInList.withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":49,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":51,"author":{"gitId":"kanna-1"},"content":"        EditCommand editCommand \u003d new EditCommand(new Name(person.getName().toString()),","lastModifiedDate":"2023-10-16"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"                new Id(person.getId().toString()), descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"kanna-1"},"content":"        String expectedMessage \u003d","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"nubnubyas"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2023-11-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"kanna-1"},"content":"        expectedModel.setPerson(person, editedPerson);","lastModifiedDate":"2023-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-10-16"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2023-10-16"},{"lineNumber":68,"author":{"gitId":"kanna-1"},"content":"        Person editedPerson \u003d personInList.withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":70,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2023-10-16"},{"lineNumber":71,"author":{"gitId":"kanna-1"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":72,"author":{"gitId":"kanna-1"},"content":"        EditCommand editCommand \u003d new EditCommand(new Name(lastPerson.getName().toString()), null, descriptor);","lastModifiedDate":"2023-10-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":74,"author":{"gitId":"nubnubyas"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS,","lastModifiedDate":"2023-11-06"},{"lineNumber":75,"author":{"gitId":"kanna-1"},"content":"                Messages.format(editedPerson));","lastModifiedDate":"2023-10-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2023-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":84,"author":{"gitId":"kanna-1"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-16"},{"lineNumber":85,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-10-16"},{"lineNumber":86,"author":{"gitId":"kanna-1"},"content":"        EditCommand editCommand \u003d new EditCommand(new Name(\"Name\"), null, editPersonDescriptor);","lastModifiedDate":"2023-10-16"},{"lineNumber":87,"author":{"gitId":"hyc17003"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{name\u003dName, id\u003dnull\" + \", editPersonDescriptor\u003d\"","lastModifiedDate":"2023-11-07"},{"lineNumber":88,"author":{"gitId":"kanna-1"},"content":"                + editPersonDescriptor + \"}\";","lastModifiedDate":"2023-10-16"},{"lineNumber":89,"author":{"gitId":"kanna-1"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2023-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":93,"author":{"gitId":"kanna-1"},"content":"    public void equals_nullObject_returnsFalse() {","lastModifiedDate":"2023-10-18"},{"lineNumber":94,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":95,"author":{"gitId":"kanna-1"},"content":"        assertFalse(descriptor.equals(null));","lastModifiedDate":"2023-10-18"},{"lineNumber":96,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":98,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":99,"author":{"gitId":"kanna-1"},"content":"    public void equals_differentTypes_returnsFalse() {","lastModifiedDate":"2023-10-18"},{"lineNumber":100,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-18"},{"lineNumber":101,"author":{"gitId":"kanna-1"},"content":"        EditCommand editCommand \u003d new EditCommand(new Name(VALID_NAME_BOB), null, descriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":103,"author":{"gitId":"kanna-1"},"content":"        assertFalse(editCommand.equals(5)); // Different type","lastModifiedDate":"2023-10-18"},{"lineNumber":104,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":106,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":107,"author":{"gitId":"kanna-1"},"content":"    public void equals_equalEditPersonDescriptors_returnsTrue() {","lastModifiedDate":"2023-10-18"},{"lineNumber":108,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor1 \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":109,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor2 \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":110,"author":{"gitId":"kanna-1"},"content":"        assertTrue(descriptor1.equals(descriptor2));","lastModifiedDate":"2023-10-18"},{"lineNumber":111,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":113,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":114,"author":{"gitId":"kanna-1"},"content":"    public void equals_unequalEditPersonDescriptors_returnsFalse() {","lastModifiedDate":"2023-10-18"},{"lineNumber":115,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor1 \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":116,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor2 \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":117,"author":{"gitId":"kanna-1"},"content":"        descriptor1.setName(new Name(VALID_NAME_BOB));","lastModifiedDate":"2023-10-28"},{"lineNumber":118,"author":{"gitId":"kanna-1"},"content":"        assertFalse(descriptor1.equals(descriptor2)); // Different name","lastModifiedDate":"2023-10-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":122,"author":{"gitId":"kanna-1"},"content":"    public void equals_sameObject_returnsTrue() {","lastModifiedDate":"2023-10-18"},{"lineNumber":123,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2023-10-16"},{"lineNumber":124,"author":{"gitId":"kanna-1"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":125,"author":{"gitId":"kanna-1"},"content":"        EditCommand editCommand \u003d new EditCommand(new Name(VALID_NAME_AMY), null, descriptor);","lastModifiedDate":"2023-10-28"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":127,"author":{"gitId":"kanna-1"},"content":"        assertTrue(editCommand.equals(editCommand));","lastModifiedDate":"2023-10-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":131,"author":{"gitId":"kanna-1"},"content":"    public void execute_personNotFound_throwsCommandException() {","lastModifiedDate":"2023-10-18"},{"lineNumber":132,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(nonExistentName).build();","lastModifiedDate":"2023-10-28"},{"lineNumber":133,"author":{"gitId":"kanna-1"},"content":"        EditCommand editCommand \u003d new EditCommand(new Name(nonExistentName), null, descriptor);","lastModifiedDate":"2023-10-28"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":135,"author":{"gitId":"kanna-1"},"content":"        // The expected CommandException should be thrown with the specified message","lastModifiedDate":"2023-10-18"},{"lineNumber":136,"author":{"gitId":"nubnubyas"},"content":"        assertThrows(CommandException.class, () -\u003e editCommand.execute(model), EditCommand.MESSAGE_PATIENT_NOT_FOUND);","lastModifiedDate":"2023-11-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":140,"author":{"gitId":"WZWren"},"content":"    public void execute_allNullFields_throwsCommandException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":141,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2023-10-18"},{"lineNumber":142,"author":{"gitId":"kanna-1"},"content":"        EditCommand editCommand \u003d new EditCommand(null, null, descriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":144,"author":{"gitId":"WZWren"},"content":"        assertThrows(CommandException.class, () -\u003e editCommand.execute(model), CommandUtil.MESSAGES_ALL_FIELDS_NULL);","lastModifiedDate":"2023-10-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":148,"author":{"gitId":"kanna-1"},"content":"    public void createEditedPerson_validInput_returnsEditedPerson() {","lastModifiedDate":"2023-10-26"},{"lineNumber":149,"author":{"gitId":"kanna-1"},"content":"        Person personToEdit \u003d ALICE;","lastModifiedDate":"2023-10-26"},{"lineNumber":150,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-10-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":152,"author":{"gitId":"kanna-1"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2023-10-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":154,"author":{"gitId":"hyc17003"},"content":"        assertEquals(editedPerson.getId(), personToEdit.getId());","lastModifiedDate":"2023-11-07"},{"lineNumber":155,"author":{"gitId":"kanna-1"},"content":"        assertEquals(editedPerson.getPhone(), personToEdit.getPhone());","lastModifiedDate":"2023-10-26"},{"lineNumber":156,"author":{"gitId":"kanna-1"},"content":"        assertEquals(editedPerson.getAddress(), personToEdit.getAddress());","lastModifiedDate":"2023-10-26"},{"lineNumber":157,"author":{"gitId":"kanna-1"},"content":"        assertEquals(editedPerson.getMedicalHistories(), personToEdit.getMedicalHistories());","lastModifiedDate":"2023-10-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-11-05"},{"lineNumber":161,"author":{"gitId":"kanna-1"},"content":"    public void execute_noChangeInEditFields_throwsCommandException() {","lastModifiedDate":"2023-11-05"},{"lineNumber":162,"author":{"gitId":"kanna-1"},"content":"        Person person \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-11-05"},{"lineNumber":163,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":164,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-11-05"},{"lineNumber":165,"author":{"gitId":"kanna-1"},"content":"        EditCommand editCommand \u003d new EditCommand(person.getName(), null, descriptor);","lastModifiedDate":"2023-11-05"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-05"},{"lineNumber":167,"author":{"gitId":"kanna-1"},"content":"        assertThrows(CommandException.class, () -\u003e editCommand.execute(model), MESSAGE_NO_CHANGE);","lastModifiedDate":"2023-11-05"},{"lineNumber":168,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":170,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":171,"author":{"gitId":"kanna-1"},"content":"    public void undo_successfulEditCommand() throws CommandException {","lastModifiedDate":"2023-10-28"},{"lineNumber":172,"author":{"gitId":"kanna-1"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":173,"author":{"gitId":"kanna-1"},"content":"        Person originalPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2023-10-28"},{"lineNumber":174,"author":{"gitId":"kanna-1"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":176,"author":{"gitId":"kanna-1"},"content":"        model.addPerson(originalPerson);","lastModifiedDate":"2023-10-28"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":178,"author":{"gitId":"kanna-1"},"content":"        EditCommand editCommand \u003d new EditCommand(originalPerson.getName(),","lastModifiedDate":"2023-10-28"},{"lineNumber":179,"author":{"gitId":"kanna-1"},"content":"                null, new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build());","lastModifiedDate":"2023-11-05"},{"lineNumber":180,"author":{"gitId":"kanna-1"},"content":"        editCommand.execute(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":182,"author":{"gitId":"kanna-1"},"content":"        Person personAfterEdit \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-28"},{"lineNumber":183,"author":{"gitId":"kanna-1"},"content":"        assertEquals(editedPerson, personAfterEdit);","lastModifiedDate":"2023-10-28"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":185,"author":{"gitId":"kanna-1"},"content":"        // Undo the edit","lastModifiedDate":"2023-10-28"},{"lineNumber":186,"author":{"gitId":"kanna-1"},"content":"        UndoableCommand undoCommand \u003d model.popCommandFromHistory();","lastModifiedDate":"2023-10-28"},{"lineNumber":187,"author":{"gitId":"kanna-1"},"content":"        undoCommand.undo(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":189,"author":{"gitId":"kanna-1"},"content":"        Person personAfterUndo \u003d model.getFilteredPersonList().get(0);","lastModifiedDate":"2023-10-28"},{"lineNumber":190,"author":{"gitId":"kanna-1"},"content":"        assertEquals(originalPerson, personAfterUndo);","lastModifiedDate":"2023-10-28"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"hyc17003":4,"nubnubyas":3,"WZWren":2,"-":88,"kanna-1":95}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"kanna-1"},"content":"        System.out.println(DESC_AMY);","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"kanna-1"},"content":"        System.out.println(descriptorWithSameValues);","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2023-10-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-10-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String expected \u003d EditPersonDescriptor.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2023-10-18"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"                + editPersonDescriptor.getName().orElse(null) + \", id\u003d\"","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"                + editPersonDescriptor.getId().orElse(null) + \", phone\u003d\"","lastModifiedDate":"2023-11-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getPhone().orElse(null) + \", email\u003d\"","lastModifiedDate":"2023-10-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                + editPersonDescriptor.getEmail().orElse(null) + \", address\u003d\"","lastModifiedDate":"2023-10-18"},{"lineNumber":66,"author":{"gitId":"kanna-1"},"content":"                + editPersonDescriptor.getAddress().orElse(null) + \", appointment\u003d\"","lastModifiedDate":"2023-10-18"},{"lineNumber":67,"author":{"gitId":"kanna-1"},"content":"                + editPersonDescriptor.getAppointment().orElse(null) + \", medicalHistories\u003d\"","lastModifiedDate":"2023-10-18"},{"lineNumber":68,"author":{"gitId":"kanna-1"},"content":"                + editPersonDescriptor.getMedicalHistories().orElse(null) + \"}\";","lastModifiedDate":"2023-11-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertEquals(expected, editPersonDescriptor.toString());","lastModifiedDate":"2023-10-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-18"}],"authorContributionMap":{"hyc17003":2,"-":64,"kanna-1":5}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.Messages.MESSAGE_NO_PATIENT_FOUND;","lastModifiedDate":"2023-11-06"},{"lineNumber":7,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;","lastModifiedDate":"2023-11-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.CompositePredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.IdContainsKeywordsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"    public void nameEquals() {","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"        CompositePredicate firstPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"        firstPredicate.add(new NameContainsKeywordsPredicate(Collections.singletonList(\"first\")));","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"        CompositePredicate secondPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"        secondPredicate.add(new NameContainsKeywordsPredicate(Collections.singletonList(\"second\")));","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-18"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"hyc17003"},"content":"    public void idEquals() {","lastModifiedDate":"2023-10-18"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"        CompositePredicate firstPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"WZWren"},"content":"        firstPredicate.add(new IdContainsKeywordsPredicate(Collections.singletonList(\"first\")));","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"WZWren"},"content":"        CompositePredicate secondPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"        secondPredicate.add(new IdContainsKeywordsPredicate(Collections.singletonList(\"second\")));","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2023-10-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2023-10-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2023-10-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":90,"author":{"gitId":"WZWren"},"content":"        predicate.add(preparePredicate(\" \"));","lastModifiedDate":"2023-10-30"},{"lineNumber":91,"author":{"gitId":"nubnubyas"},"content":"        String expectedMessage \u003d MESSAGE_NO_PATIENT_FOUND;","lastModifiedDate":"2023-11-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"WZWren"},"content":"        predicate.add(preparePredicate(\"Kurz Elle Kunz\"));","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"nubnubyas"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2023-11-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":111,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":112,"author":{"gitId":"WZWren"},"content":"        predicate.add(new NameContainsKeywordsPredicate(Arrays.asList(\"keyword\")));","lastModifiedDate":"2023-10-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        FindCommand findCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2019-02-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        String expected \u003d FindCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(expected, findCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"nubnubyas":4,"hyc17003":14,"WZWren":17,"-":89}},{"path":"src/test/java/seedu/address/logic/commands/LogCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-11-01"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-11-01"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-11-01"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-11-01"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-11-01"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"import java.util.List;","lastModifiedDate":"2023-11-01"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-11-01"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-01"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-11-01"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-11-01"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-11-01"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-02"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.LogBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-11-01"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-11-01"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-11-01"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-01"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-11-01"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"public class LogCommandTest {","lastModifiedDate":"2023-11-01"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-11-01"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"    private Name defaultName \u003d new Name(PersonBuilder.DEFAULT_NAME);","lastModifiedDate":"2023-11-01"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"    private Id defaultId \u003d new Id(PersonBuilder.DEFAULT_ID);","lastModifiedDate":"2023-11-07"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"    private final ObservableList\u003cPerson\u003e foundPersonsList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-11-01"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"    private final List\u003cUndoableCommand\u003e commandHistory \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-01"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":41,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-11-01"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"        public LogBook getLogBook() {","lastModifiedDate":"2023-11-01"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-11-01"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"        public void setLogBook(LogBook logBook) {","lastModifiedDate":"2023-11-01"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":61,"author":{"gitId":"hyc17003"},"content":"            // Return an empty list or a list with some persons if needed for your test","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":64,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":65,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"hyc17003"},"content":"        public void updateFoundPersonsList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-11-01"},{"lineNumber":67,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"hyc17003"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-11-01"},{"lineNumber":73,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"hyc17003"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":80,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":81,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":82,"author":{"gitId":"hyc17003"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-11-01"},{"lineNumber":83,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":84,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":85,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":86,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":87,"author":{"gitId":"hyc17003"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2023-11-01"},{"lineNumber":88,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":89,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":90,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":91,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":92,"author":{"gitId":"hyc17003"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-11-01"},{"lineNumber":93,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":94,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":95,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":96,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":97,"author":{"gitId":"hyc17003"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-11-01"},{"lineNumber":98,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":99,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":100,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":101,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":102,"author":{"gitId":"hyc17003"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-11-01"},{"lineNumber":103,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":104,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":105,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":106,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":107,"author":{"gitId":"hyc17003"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-11-01"},{"lineNumber":108,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":109,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":110,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":111,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":112,"author":{"gitId":"hyc17003"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-11-01"},{"lineNumber":113,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":114,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":115,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":116,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":117,"author":{"gitId":"hyc17003"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2023-11-01"},{"lineNumber":118,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":119,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":120,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":121,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":122,"author":{"gitId":"hyc17003"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-11-01"},{"lineNumber":123,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":124,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":125,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":126,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":127,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":128,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":129,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":130,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":131,"author":{"gitId":"nubnubyas"},"content":"        @Override","lastModifiedDate":"2023-11-02"},{"lineNumber":132,"author":{"gitId":"nubnubyas"},"content":"        public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {","lastModifiedDate":"2023-11-02"},{"lineNumber":133,"author":{"gitId":"nubnubyas"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-02"},{"lineNumber":134,"author":{"gitId":"nubnubyas"},"content":"        }","lastModifiedDate":"2023-11-02"},{"lineNumber":135,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-02"},{"lineNumber":136,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":137,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getLoggedFilteredPersonList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":138,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":139,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":140,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":141,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":142,"author":{"gitId":"hyc17003"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-11-01"},{"lineNumber":143,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":144,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":145,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":146,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":147,"author":{"gitId":"hyc17003"},"content":"        public void addToHistory(UndoableCommand command) {","lastModifiedDate":"2023-11-01"},{"lineNumber":148,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":149,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":150,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":151,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":152,"author":{"gitId":"hyc17003"},"content":"        public boolean isCommandHistoryEmpty() {","lastModifiedDate":"2023-11-01"},{"lineNumber":153,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":154,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":155,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":156,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":157,"author":{"gitId":"hyc17003"},"content":"        public UndoableCommand popCommandFromHistory() {","lastModifiedDate":"2023-11-01"},{"lineNumber":158,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":159,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":160,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":161,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":162,"author":{"gitId":"hyc17003"},"content":"        public int getCommandHistorySize() {","lastModifiedDate":"2023-11-01"},{"lineNumber":163,"author":{"gitId":"hyc17003"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-11-01"},{"lineNumber":164,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":165,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":166,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":167,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":168,"author":{"gitId":"hyc17003"},"content":"    private class ModelStubLoggingPersonAdded extends ModelStub {","lastModifiedDate":"2023-11-01"},{"lineNumber":169,"author":{"gitId":"hyc17003"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-11-01"},{"lineNumber":170,"author":{"gitId":"hyc17003"},"content":"        private LogBook logBook \u003d new LogBook();","lastModifiedDate":"2023-11-01"},{"lineNumber":171,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":172,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":173,"author":{"gitId":"hyc17003"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-11-01"},{"lineNumber":174,"author":{"gitId":"hyc17003"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-11-01"},{"lineNumber":175,"author":{"gitId":"hyc17003"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2023-11-01"},{"lineNumber":176,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":177,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":178,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":179,"author":{"gitId":"hyc17003"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-11-01"},{"lineNumber":180,"author":{"gitId":"hyc17003"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-11-01"},{"lineNumber":181,"author":{"gitId":"hyc17003"},"content":"            personsAdded.add(person);","lastModifiedDate":"2023-11-01"},{"lineNumber":182,"author":{"gitId":"hyc17003"},"content":"            logBook.addPerson(person);","lastModifiedDate":"2023-11-01"},{"lineNumber":183,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":184,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":185,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":186,"author":{"gitId":"hyc17003"},"content":"        public LogBook getLogBook() {","lastModifiedDate":"2023-11-01"},{"lineNumber":187,"author":{"gitId":"hyc17003"},"content":"            return logBook;","lastModifiedDate":"2023-11-01"},{"lineNumber":188,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":189,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":190,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":191,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":192,"author":{"gitId":"hyc17003"},"content":"            return foundPersonsList;","lastModifiedDate":"2023-11-01"},{"lineNumber":193,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":194,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":195,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":196,"author":{"gitId":"hyc17003"},"content":"        public void addToHistory(UndoableCommand undoableCommand) {","lastModifiedDate":"2023-11-01"},{"lineNumber":197,"author":{"gitId":"hyc17003"},"content":"            commandHistory.add(undoableCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":198,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":199,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":200,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"hyc17003"},"content":"        public boolean isCommandHistoryEmpty() {","lastModifiedDate":"2023-11-01"},{"lineNumber":202,"author":{"gitId":"hyc17003"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":203,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":204,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":205,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":206,"author":{"gitId":"hyc17003"},"content":"        public void setLogBook(LogBook logBook) {","lastModifiedDate":"2023-11-01"},{"lineNumber":207,"author":{"gitId":"hyc17003"},"content":"            this.logBook.resetData(logBook);","lastModifiedDate":"2023-11-01"},{"lineNumber":208,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":209,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":210,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":211,"author":{"gitId":"hyc17003"},"content":"    private class ModelStubNoPersonsFound extends ModelStubLoggingPersonAdded {","lastModifiedDate":"2023-11-01"},{"lineNumber":212,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":213,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFoundPersonsList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":214,"author":{"gitId":"hyc17003"},"content":"            return FXCollections.observableArrayList(); // Return an empty list","lastModifiedDate":"2023-11-01"},{"lineNumber":215,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":216,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":217,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":218,"author":{"gitId":"hyc17003"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-11-01"},{"lineNumber":219,"author":{"gitId":"hyc17003"},"content":"            return FXCollections.observableArrayList(); // Return an empty list","lastModifiedDate":"2023-11-01"},{"lineNumber":220,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":221,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":222,"author":{"gitId":"hyc17003"},"content":"        @Override","lastModifiedDate":"2023-11-01"},{"lineNumber":223,"author":{"gitId":"hyc17003"},"content":"        public boolean isCommandHistoryEmpty() {","lastModifiedDate":"2023-11-01"},{"lineNumber":224,"author":{"gitId":"hyc17003"},"content":"            return false;","lastModifiedDate":"2023-11-01"},{"lineNumber":225,"author":{"gitId":"hyc17003"},"content":"        }","lastModifiedDate":"2023-11-01"},{"lineNumber":226,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":227,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":228,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":229,"author":{"gitId":"hyc17003"},"content":"    public void execute_resultsLoggedToLogBook_logSuccessful() throws Exception {","lastModifiedDate":"2023-11-01"},{"lineNumber":230,"author":{"gitId":"hyc17003"},"content":"        ModelStubLoggingPersonAdded model \u003d new ModelStubLoggingPersonAdded();","lastModifiedDate":"2023-11-01"},{"lineNumber":231,"author":{"gitId":"hyc17003"},"content":"        Person personToLog \u003d new PersonBuilder().withName(\"Amy Bee\").build();","lastModifiedDate":"2023-11-01"},{"lineNumber":232,"author":{"gitId":"hyc17003"},"content":"        model.addPerson(personToLog);","lastModifiedDate":"2023-11-01"},{"lineNumber":233,"author":{"gitId":"hyc17003"},"content":"        foundPersonsList.add(personToLog);","lastModifiedDate":"2023-11-01"},{"lineNumber":234,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":235,"author":{"gitId":"hyc17003"},"content":"        LogCommand logCommand \u003d new LogCommand();","lastModifiedDate":"2023-11-01"},{"lineNumber":236,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":237,"author":{"gitId":"hyc17003"},"content":"        CommandResult commandResult \u003d logCommand.execute(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":238,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":239,"author":{"gitId":"hyc17003"},"content":"        assertEquals(LogCommand.MESSAGE_SUCCESS, commandResult.getFeedbackToUser());","lastModifiedDate":"2023-11-01"},{"lineNumber":240,"author":{"gitId":"hyc17003"},"content":"        assertEquals(model.getLogBook().getPersonList().size(), 1);","lastModifiedDate":"2023-11-01"},{"lineNumber":241,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":242,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":243,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":244,"author":{"gitId":"hyc17003"},"content":"    public void execute_noPersonsFound_logNotExecuted() throws AssertionError {","lastModifiedDate":"2023-11-02"},{"lineNumber":245,"author":{"gitId":"hyc17003"},"content":"        ModelStubNoPersonsFound model \u003d new ModelStubNoPersonsFound();","lastModifiedDate":"2023-11-01"},{"lineNumber":246,"author":{"gitId":"hyc17003"},"content":"        LogCommand logCommand \u003d new LogCommand();","lastModifiedDate":"2023-11-01"},{"lineNumber":247,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":248,"author":{"gitId":"WZWren"},"content":"        assertThrows(CommandException.class, () -\u003e logCommand.execute(model));","lastModifiedDate":"2023-11-02"},{"lineNumber":249,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":250,"author":{"gitId":"hyc17003"},"content":"        assertEquals(0, model.getLogBook().getPersonList().size());","lastModifiedDate":"2023-11-01"},{"lineNumber":251,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":252,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":253,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":254,"author":{"gitId":"hyc17003"},"content":"    public void undo_executeCommand_resultsUndone() throws Exception {","lastModifiedDate":"2023-11-01"},{"lineNumber":255,"author":{"gitId":"hyc17003"},"content":"        ModelStubLoggingPersonAdded model \u003d new ModelStubLoggingPersonAdded();","lastModifiedDate":"2023-11-01"},{"lineNumber":256,"author":{"gitId":"hyc17003"},"content":"        Person personToLog \u003d new PersonBuilder().withName(\"Amy Bee\").build();","lastModifiedDate":"2023-11-01"},{"lineNumber":257,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":258,"author":{"gitId":"hyc17003"},"content":"        foundPersonsList.add(personToLog);","lastModifiedDate":"2023-11-01"},{"lineNumber":259,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":260,"author":{"gitId":"hyc17003"},"content":"        LogCommand logCommand \u003d new LogCommand();","lastModifiedDate":"2023-11-01"},{"lineNumber":261,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":262,"author":{"gitId":"hyc17003"},"content":"        logCommand.execute(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":263,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":264,"author":{"gitId":"hyc17003"},"content":"        CommandResult undoResult \u003d logCommand.undo(model);","lastModifiedDate":"2023-11-01"},{"lineNumber":265,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":266,"author":{"gitId":"hyc17003"},"content":"        assertEquals(LogCommand.MESSAGE_UNDO_LOG_SUCCESS, undoResult.getFeedbackToUser());","lastModifiedDate":"2023-11-01"},{"lineNumber":267,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":268,"author":{"gitId":"hyc17003"},"content":"        assertEquals(model.getLogBook().getPersons().asUnmodifiableObservableList().size(), 0);","lastModifiedDate":"2023-11-01"},{"lineNumber":269,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":270,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":271,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":272,"author":{"gitId":"hyc17003"},"content":"}","lastModifiedDate":"2023-11-01"}],"authorContributionMap":{"hyc17003":265,"nubnubyas":5,"WZWren":2}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kanna-1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":"public class UndoCommandTest {","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"    public void execute_singleUndoableCommand_success() throws CommandException {","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"        UndoableCommandStub stubUndoableCommand \u003d new UndoableCommandStub();","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"kanna-1"},"content":"        model.addToHistory(stubUndoableCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"kanna-1"},"content":"        UndoCommand undoCommand \u003d new UndoCommand(1);","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"kanna-1"},"content":"        CommandResult result \u003d undoCommand.execute(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"kanna-1"},"content":"        assertEquals(\"Undoing 1 command(s):\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"kanna-1"},"content":"                + \"1. Stub Undoable Command undone\", result.getFeedbackToUser());","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"kanna-1"},"content":"    public void execute_multipleUndoableCommand_success() throws CommandException {","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"kanna-1"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"kanna-1"},"content":"        UndoableCommandStub stubUndoableCommand1 \u003d new UndoableCommandStub();","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"        UndoableCommandStub stubUndoableCommand2 \u003d new UndoableCommandStub();","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"kanna-1"},"content":"        UndoableCommandStub stubUndoableCommand3 \u003d new UndoableCommandStub();","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"        model.addToHistory(stubUndoableCommand1);","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"kanna-1"},"content":"        model.addToHistory(stubUndoableCommand2);","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"        model.addToHistory(stubUndoableCommand3);","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"        UndoCommand undoCommand \u003d new UndoCommand(3);","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"kanna-1"},"content":"        CommandResult result \u003d undoCommand.execute(model);","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"        assertEquals(\"Undoing 3 command(s):\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"kanna-1"},"content":"                + \"1. Stub Undoable Command undone\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"kanna-1"},"content":"                + \"2. Stub Undoable Command undone\\n\"","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"kanna-1"},"content":"                + \"3. Stub Undoable Command undone\", result.getFeedbackToUser());","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"kanna-1"},"content":"    public void execute_undoMoreCommandsThanHistory_failure() {","lastModifiedDate":"2023-10-28"},{"lineNumber":49,"author":{"gitId":"kanna-1"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"kanna-1"},"content":"        UndoableCommandStub stubUndoableCommand \u003d new UndoableCommandStub();","lastModifiedDate":"2023-10-28"},{"lineNumber":51,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"kanna-1"},"content":"        model.addToHistory(stubUndoableCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"kanna-1"},"content":"        // Attempt to undo 2 commands when only 1 is in history","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"kanna-1"},"content":"        UndoCommand undoCommand \u003d new UndoCommand(2);","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"kanna-1"},"content":"        assertThrows(CommandException.class, () -\u003e undoCommand.execute(model));","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"    public void execute_undoCommandsInEmptyStack_failure() {","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"kanna-1"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"kanna-1"},"content":"        UndoCommand undoCommand \u003d new UndoCommand(3);","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"kanna-1"},"content":"        assertThrows(CommandException.class, () -\u003e undoCommand.execute(model));","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"kanna-1"},"content":"    // Define a stub UndoableCommand class for testing purposes","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"kanna-1"},"content":"    static class UndoableCommandStub extends UndoableCommand {","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"kanna-1"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":70,"author":{"gitId":"kanna-1"},"content":"        public CommandResult execute(Model model) {","lastModifiedDate":"2023-10-28"},{"lineNumber":71,"author":{"gitId":"kanna-1"},"content":"            return new CommandResult(\"Stub Undoable Command executed\");","lastModifiedDate":"2023-10-28"},{"lineNumber":72,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":73,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":74,"author":{"gitId":"kanna-1"},"content":"        @Override","lastModifiedDate":"2023-10-28"},{"lineNumber":75,"author":{"gitId":"kanna-1"},"content":"        public CommandResult undo(Model model) {","lastModifiedDate":"2023-10-28"},{"lineNumber":76,"author":{"gitId":"kanna-1"},"content":"            return new CommandResult(\"Stub Undoable Command undone\");","lastModifiedDate":"2023-10-28"},{"lineNumber":77,"author":{"gitId":"kanna-1"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":78,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":79,"author":{"gitId":"kanna-1"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"kanna-1":79}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DESC_AMY;","lastModifiedDate":"2023-10-18"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DESC_BOB;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_AMY;","lastModifiedDate":"2023-11-07"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_BOB;","lastModifiedDate":"2023-11-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ID_DESC;","lastModifiedDate":"2023-11-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"kanna-1"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"        String basicCommandString \u003d NAME_DESC_BOB + ID_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-11-07"},{"lineNumber":57,"author":{"gitId":"kanna-1"},"content":"                + APPOINTMENT_DESC_BOB;","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + basicCommandString,","lastModifiedDate":"2023-11-05"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2023-10-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":68,"author":{"gitId":"hyc17003"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + ID_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-11-07"},{"lineNumber":69,"author":{"gitId":"kanna-1"},"content":"                + ADDRESS_DESC_BOB;","lastModifiedDate":"2023-11-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"hyc17003"},"content":"        // multiple IDs","lastModifiedDate":"2023-11-07"},{"lineNumber":77,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, ID_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-11-07"},{"lineNumber":78,"author":{"gitId":"hyc17003"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ID));","lastModifiedDate":"2023-11-07"},{"lineNumber":79,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // multiple phones","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // multiple emails","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // multiple addresses","lastModifiedDate":"2023-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, ADDRESS_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":94,"author":{"gitId":"WZWren"},"content":"                validExpectedPersonString","lastModifiedDate":"2023-10-17"},{"lineNumber":95,"author":{"gitId":"hyc17003"},"content":"                        + PHONE_DESC_AMY + ID_DESC_AMY + EMAIL_DESC_AMY + NAME_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2023-11-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                        + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":97,"author":{"gitId":"WZWren"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(","lastModifiedDate":"2023-10-17"},{"lineNumber":98,"author":{"gitId":"hyc17003"},"content":"                        PREFIX_NAME, PREFIX_ID, PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_PHONE));","lastModifiedDate":"2023-11-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":106,"author":{"gitId":"hyc17003"},"content":"        // invalid id","lastModifiedDate":"2023-11-07"},{"lineNumber":107,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, INVALID_ID_DESC + validExpectedPersonString,","lastModifiedDate":"2023-11-07"},{"lineNumber":108,"author":{"gitId":"hyc17003"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ID));","lastModifiedDate":"2023-11-07"},{"lineNumber":109,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_ADDRESS_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":128,"author":{"gitId":"hyc17003"},"content":"        // invalid id","lastModifiedDate":"2023-11-07"},{"lineNumber":129,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_ID_DESC,","lastModifiedDate":"2023-11-07"},{"lineNumber":130,"author":{"gitId":"hyc17003"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ID));","lastModifiedDate":"2023-11-07"},{"lineNumber":131,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_ADDRESS_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":147,"author":{"gitId":"kanna-1"},"content":"        // appointments \u0026 medical histories","lastModifiedDate":"2023-11-05"},{"lineNumber":148,"author":{"gitId":"kanna-1"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withMedical().build();","lastModifiedDate":"2023-11-05"},{"lineNumber":149,"author":{"gitId":"WZWren"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-10-17"},{"lineNumber":150,"author":{"gitId":"hyc17003"},"content":"                NAME_DESC_AMY + ID_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2023-11-07"},{"lineNumber":151,"author":{"gitId":"kanna-1"},"content":"                        + APPOINTMENT_DESC_AMY,","lastModifiedDate":"2023-10-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":183,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + ID_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-11-07"},{"lineNumber":184,"author":{"gitId":"kanna-1"},"content":"                + ADDRESS_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-05"},{"lineNumber":185,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":186,"author":{"gitId":"hyc17003"},"content":"        // invalid id","lastModifiedDate":"2023-11-07"},{"lineNumber":187,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_ID_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-11-07"},{"lineNumber":188,"author":{"gitId":"hyc17003"},"content":"                + ADDRESS_DESC_BOB, Id.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":191,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ID_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB","lastModifiedDate":"2023-11-07"},{"lineNumber":192,"author":{"gitId":"kanna-1"},"content":"                + ADDRESS_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-05"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":195,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ID_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC","lastModifiedDate":"2023-11-07"},{"lineNumber":196,"author":{"gitId":"kanna-1"},"content":"                + ADDRESS_DESC_BOB, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-05"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":199,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ID_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-11-07"},{"lineNumber":200,"author":{"gitId":"kanna-1"},"content":"                + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-11-05"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":203,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + ID_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-11-07"},{"lineNumber":204,"author":{"gitId":"WZWren"},"content":"                + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-17"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":207,"author":{"gitId":"hyc17003"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + ID_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-11-07"},{"lineNumber":208,"author":{"gitId":"kanna-1"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2023-11-05"},{"lineNumber":209,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"hyc17003":29,"WZWren":9,"-":160,"kanna-1":14}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.AppendLogCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.ClearLogCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.logic.commands.DeleteCommand.DeletePersonDescriptor;","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.LogCommand;","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.CompositePredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"    public void parseCommand_add_alias() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"nubnubyas"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"nubnubyas"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAlias(person));","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"nubnubyas"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":62,"author":{"gitId":"nubnubyas"},"content":"    public void parseCommand_clear_alias() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS) instanceof ClearCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":64,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"nubnubyas"},"content":"                DeleteCommand.COMMAND_WORD + \" n/\" + PersonBuilder.DEFAULT_NAME);","lastModifiedDate":"2023-10-18"},{"lineNumber":71,"author":{"gitId":"nubnubyas"},"content":"        assertEquals(new DeleteCommand(null,","lastModifiedDate":"2023-10-18"},{"lineNumber":72,"author":{"gitId":"nubnubyas"},"content":"                new Name(PersonBuilder.DEFAULT_NAME), new DeletePersonDescriptor()), command);","lastModifiedDate":"2023-10-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"nubnubyas"},"content":"    public void parseCommand_delete_alias() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"nubnubyas"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"nubnubyas"},"content":"            DeleteCommand.COMMAND_WORD_ALIAS + \" n/\" + PersonBuilder.DEFAULT_NAME);","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"nubnubyas"},"content":"        assertEquals(new DeleteCommand(null,","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"nubnubyas"},"content":"                new Name(PersonBuilder.DEFAULT_NAME), new DeletePersonDescriptor()), command);","lastModifiedDate":"2023-10-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"kanna-1"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2023-10-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"kanna-1"},"content":"            + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2023-10-18"},{"lineNumber":89,"author":{"gitId":"nubnubyas"},"content":"        assertEquals(new EditCommand(new Name(\"Amy Bee\"), null, descriptor), command);","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":92,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":93,"author":{"gitId":"nubnubyas"},"content":"    public void parseCommand_edit_alias() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":94,"author":{"gitId":"nubnubyas"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2023-10-29"},{"lineNumber":95,"author":{"gitId":"nubnubyas"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2023-10-29"},{"lineNumber":96,"author":{"gitId":"nubnubyas"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_ALIAS + \" \"","lastModifiedDate":"2023-10-29"},{"lineNumber":97,"author":{"gitId":"nubnubyas"},"content":"            + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2023-10-29"},{"lineNumber":98,"author":{"gitId":"nubnubyas"},"content":"        assertEquals(new EditCommand(new Name(\"Amy Bee\"), null, descriptor), command);","lastModifiedDate":"2023-10-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":108,"author":{"gitId":"nubnubyas"},"content":"    public void parseCommand_exit_alias() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":109,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS) instanceof ExitCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":110,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":111,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":112,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"hyc17003"},"content":"                FindCommand.COMMAND_WORD + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2023-10-18"},{"lineNumber":118,"author":{"gitId":"WZWren"},"content":"        CompositePredicate findCommandPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":119,"author":{"gitId":"WZWren"},"content":"        findCommandPredicate.add(new NameContainsKeywordsPredicate(keywords));","lastModifiedDate":"2023-10-30"},{"lineNumber":120,"author":{"gitId":"WZWren"},"content":"        assertEquals(new FindCommand(findCommandPredicate), command);","lastModifiedDate":"2023-10-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":124,"author":{"gitId":"nubnubyas"},"content":"    public void parseCommand_find_alias() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":125,"author":{"gitId":"nubnubyas"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2023-10-29"},{"lineNumber":126,"author":{"gitId":"WZWren"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD_ALIAS","lastModifiedDate":"2023-10-30"},{"lineNumber":127,"author":{"gitId":"WZWren"},"content":"                + \" n/\" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2023-10-30"},{"lineNumber":128,"author":{"gitId":"WZWren"},"content":"        CompositePredicate findCommandPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":129,"author":{"gitId":"WZWren"},"content":"        findCommandPredicate.add(new NameContainsKeywordsPredicate(keywords));","lastModifiedDate":"2023-10-30"},{"lineNumber":130,"author":{"gitId":"WZWren"},"content":"        assertEquals(new FindCommand(findCommandPredicate), command);","lastModifiedDate":"2023-10-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":139,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":140,"author":{"gitId":"nubnubyas"},"content":"    public void parseCommand_help_alias() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":141,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS) instanceof HelpCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":142,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":143,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":144,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":151,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":152,"author":{"gitId":"nubnubyas"},"content":"    public void parseCommand_list_alias() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":153,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS) instanceof ListCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":154,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ListCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":155,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":156,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":157,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":158,"author":{"gitId":"kanna-1"},"content":"    public void parseCommand_undo() throws Exception {","lastModifiedDate":"2023-10-28"},{"lineNumber":159,"author":{"gitId":"kanna-1"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":160,"author":{"gitId":"kanna-1"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":161,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":162,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":163,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":164,"author":{"gitId":"nubnubyas"},"content":"    public void parseCommand_undo_alias() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":165,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS) instanceof UndoCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":166,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof UndoCommand);","lastModifiedDate":"2023-10-29"},{"lineNumber":167,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":168,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":169,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":170,"author":{"gitId":"hyc17003"},"content":"    public void parseCommand_log() throws Exception {","lastModifiedDate":"2023-10-30"},{"lineNumber":171,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(LogCommand.COMMAND_WORD) instanceof LogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":172,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(LogCommand.COMMAND_WORD + \" 3\") instanceof LogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":173,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":174,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":175,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":176,"author":{"gitId":"hyc17003"},"content":"    public void parseCommand_log_alias() throws Exception {","lastModifiedDate":"2023-10-30"},{"lineNumber":177,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(LogCommand.COMMAND_WORD_ALIAS) instanceof LogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":178,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(LogCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof LogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":179,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":180,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":181,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":182,"author":{"gitId":"hyc17003"},"content":"    public void parseCommand_appendlog() throws Exception {","lastModifiedDate":"2023-10-30"},{"lineNumber":183,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(AppendLogCommand.COMMAND_WORD) instanceof AppendLogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":184,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(AppendLogCommand.COMMAND_WORD + \" 3\") instanceof AppendLogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":185,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":186,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":187,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":188,"author":{"gitId":"hyc17003"},"content":"    public void parseCommand_appendlog_alias() throws Exception {","lastModifiedDate":"2023-10-30"},{"lineNumber":189,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(AppendLogCommand.COMMAND_WORD_ALIAS) instanceof AppendLogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":190,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(AppendLogCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof AppendLogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":191,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":192,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":193,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":194,"author":{"gitId":"hyc17003"},"content":"    public void parseCommand_clearlog() throws Exception {","lastModifiedDate":"2023-10-30"},{"lineNumber":195,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(ClearLogCommand.COMMAND_WORD) instanceof ClearLogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":196,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(ClearLogCommand.COMMAND_WORD + \" 3\") instanceof ClearLogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":197,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":198,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":199,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":200,"author":{"gitId":"hyc17003"},"content":"    public void parseCommand_clearlog_alias() throws Exception {","lastModifiedDate":"2023-10-30"},{"lineNumber":201,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(ClearLogCommand.COMMAND_WORD_ALIAS) instanceof ClearLogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":202,"author":{"gitId":"hyc17003"},"content":"        assertTrue(parser.parseCommand(ClearLogCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearLogCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":203,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":204,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":207,"author":{"gitId":"nubnubyas"},"content":"        String expectedString \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-18"},{"lineNumber":208,"author":{"gitId":"nubnubyas"},"content":"        assertThrows(ParseException.class, expectedString, () -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2023-10-18"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"hyc17003":40,"nubnubyas":63,"WZWren":10,"-":93,"kanna-1":9}},{"path":"src/test/java/seedu/address/logic/parser/ArgumentMultimapTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nubnubyas"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"nubnubyas"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"nubnubyas"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"nubnubyas"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"nubnubyas"},"content":"public class ArgumentMultimapTest {","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"nubnubyas"},"content":"    public void testIsAnyPrefixPresent() {","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"nubnubyas"},"content":"        // Create an ArgumentMultimap with some values","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"nubnubyas"},"content":"        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"nubnubyas"},"content":"        argumentMultimap.put(new Prefix(\"phone\"), \"123456789\");","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"nubnubyas"},"content":"        argumentMultimap.put(new Prefix(\"email\"), \"john@example.com\");","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"nubnubyas"},"content":"        // Test with prefixes that exist in the ArgumentMultimap","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"nubnubyas"},"content":"        boolean result1 \u003d ArgumentMultimap.isAnyPrefixPresent(argumentMultimap, new Prefix(\"phone\"),","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"nubnubyas"},"content":"                new Prefix(\"email\"));","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(result1);","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"nubnubyas"},"content":"        // Test with a mix of existing and non-existing prefixes","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"nubnubyas"},"content":"        boolean result3 \u003d ArgumentMultimap.isAnyPrefixPresent(argumentMultimap, new Prefix(\"phone\"),","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"nubnubyas"},"content":"                new Prefix(\"address\"));","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(result3);","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"nubnubyas"},"content":"        // Test with no prefixes","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"nubnubyas"},"content":"        boolean result4 \u003d ArgumentMultimap.isAnyPrefixPresent(argumentMultimap);","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"nubnubyas"},"content":"        assertFalse(result4);","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"nubnubyas"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"nubnubyas":32}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"nubnubyas"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-11-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.logic.commands.DeleteCommand.DeletePersonDescriptor;","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":14,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-11-01"},{"lineNumber":15,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"nubnubyas"},"content":" * As we are only doing white-box testing, our test cases do not cover path","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"nubnubyas"},"content":" * variations","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"nubnubyas"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"nubnubyas"},"content":" * the","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":31,"author":{"gitId":"nubnubyas"},"content":"    private DeletePersonDescriptor defaultDescriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":32,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"nubnubyas"},"content":"    private Name defaultName \u003d new Name(PersonBuilder.DEFAULT_NAME);","lastModifiedDate":"2023-10-18"},{"lineNumber":34,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"    private Id defaultId \u003d new Id(PersonBuilder.DEFAULT_ID);","lastModifiedDate":"2023-11-07"},{"lineNumber":36,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":38,"author":{"gitId":"nubnubyas"},"content":"    public void test_parse_validName() {","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"nubnubyas"},"content":"        String userString \u003d \" n/\" + PersonBuilder.DEFAULT_NAME;","lastModifiedDate":"2023-10-18"},{"lineNumber":40,"author":{"gitId":"nubnubyas"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(null, defaultName, defaultDescriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"nubnubyas"},"content":"        assertParseSuccess(parser, userString, deleteCommand);","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"    public void test_parse_validId() {","lastModifiedDate":"2023-11-07"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"        String userString \u003d \" id/\" + PersonBuilder.DEFAULT_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(defaultId, null, defaultDescriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"nubnubyas"},"content":"        assertParseSuccess(parser, userString, deleteCommand);","lastModifiedDate":"2023-10-18"},{"lineNumber":49,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"nubnubyas"},"content":"    public void test_parse_descriptorAppointment() {","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"        String userString \u003d \" id/\" + PersonBuilder.DEFAULT_ID + \" ap/\";","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteAppointment();","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(defaultId, null, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":57,"author":{"gitId":"nubnubyas"},"content":"        assertParseSuccess(parser, userString, deleteCommand);","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":59,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":60,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"nubnubyas"},"content":"    public void test_parse_descriptorMedicalHistoryDeleteAll() {","lastModifiedDate":"2023-11-01"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"        String userString \u003d \" id/\" + PersonBuilder.DEFAULT_ID + \" m/\";","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteMedicalHistory();","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setMedicalHistory(new HashSet\u003c\u003e());","lastModifiedDate":"2023-11-01"},{"lineNumber":66,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(defaultId, null, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":67,"author":{"gitId":"nubnubyas"},"content":"        assertParseSuccess(parser, userString, deleteCommand);","lastModifiedDate":"2023-11-01"},{"lineNumber":68,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":69,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":70,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":71,"author":{"gitId":"nubnubyas"},"content":"    public void test_parse_descriptorMedicalHistoryDeleteOne() {","lastModifiedDate":"2023-11-01"},{"lineNumber":72,"author":{"gitId":"hyc17003"},"content":"        String userString \u003d \" id/\" + PersonBuilder.DEFAULT_ID + \" m/tachycardia\";","lastModifiedDate":"2023-11-07"},{"lineNumber":73,"author":{"gitId":"nubnubyas"},"content":"        DeletePersonDescriptor descriptor \u003d new DeletePersonDescriptor();","lastModifiedDate":"2023-11-01"},{"lineNumber":74,"author":{"gitId":"nubnubyas"},"content":"        MedicalHistory medicalHistory \u003d new MedicalHistory(\"tachycardia\");","lastModifiedDate":"2023-11-01"},{"lineNumber":75,"author":{"gitId":"nubnubyas"},"content":"        HashSet\u003cMedicalHistory\u003e testSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-11-01"},{"lineNumber":76,"author":{"gitId":"nubnubyas"},"content":"        testSet.add(medicalHistory);","lastModifiedDate":"2023-11-01"},{"lineNumber":77,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setDeleteMedicalHistory();","lastModifiedDate":"2023-11-01"},{"lineNumber":78,"author":{"gitId":"nubnubyas"},"content":"        descriptor.setMedicalHistory(testSet);","lastModifiedDate":"2023-11-01"},{"lineNumber":79,"author":{"gitId":"hyc17003"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(defaultId, null, descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":80,"author":{"gitId":"nubnubyas"},"content":"        assertParseSuccess(parser, userString, deleteCommand);","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":82,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":83,"author":{"gitId":"nubnubyas"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":84,"author":{"gitId":"nubnubyas"},"content":"    public void test_parse_descriptorInvalidField() {","lastModifiedDate":"2023-10-31"},{"lineNumber":85,"author":{"gitId":"hyc17003"},"content":"        String userString \u003d \"id/ \" + PersonBuilder.DEFAULT_ID + \" p/\";","lastModifiedDate":"2023-11-07"},{"lineNumber":86,"author":{"gitId":"nubnubyas"},"content":"        assertParseFailure(parser, userString,","lastModifiedDate":"2023-10-31"},{"lineNumber":87,"author":{"gitId":"nubnubyas"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-31"},{"lineNumber":88,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":89,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":91,"author":{"gitId":"hyc17003"},"content":"    public void test_parse_missingNameAndId() {","lastModifiedDate":"2023-11-07"},{"lineNumber":92,"author":{"gitId":"nubnubyas"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"nubnubyas":57,"hyc17003":13,"-":29}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DESC_BOB;","lastModifiedDate":"2023-11-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_AMY;","lastModifiedDate":"2023-11-09"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ID_DESC_BOB;","lastModifiedDate":"2023-11-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_FIELD_DESC;","lastModifiedDate":"2023-11-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MEDICAL_DESC_BOB;","lastModifiedDate":"2023-11-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-11-05"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-11-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;","lastModifiedDate":"2023-11-09"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICALHISTORY;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.EditCommand.COMMAND_WORD;","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.EditCommand.MESSAGE_NOT_EDITED;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2023-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2023-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2023-10-16"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"        assertParseFailure(parser, PREFIX_NAME + VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"        // no name or id and no field specified","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-10-16"},{"lineNumber":69,"author":{"gitId":"kanna-1"},"content":"        assertParseFailure(parser, PREFIX_NAME + VALID_NAME_AMY + VALID_EMAIL_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-10-16"},{"lineNumber":72,"author":{"gitId":"kanna-1"},"content":"        assertParseFailure(parser, PREFIX_NAME + VALID_NAME_AMY + INVALID_FIELD_DESC, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-11-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2023-10-16"},{"lineNumber":77,"author":{"gitId":"kanna-1"},"content":"        String userInput \u003d COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-11-05"},{"lineNumber":78,"author":{"gitId":"kanna-1"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":80,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()","lastModifiedDate":"2023-10-16"},{"lineNumber":81,"author":{"gitId":"kanna-1"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":82,"author":{"gitId":"kanna-1"},"content":"        EditCommand expectedCommand \u003d new EditCommand(new Name(VALID_NAME_BOB), null, descriptor);","lastModifiedDate":"2023-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2023-10-16"},{"lineNumber":89,"author":{"gitId":"kanna-1"},"content":"        String userInput \u003d COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2023-11-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":93,"author":{"gitId":"kanna-1"},"content":"        EditCommand expectedCommand \u003d new EditCommand(new Name(VALID_NAME_BOB), null, descriptor);","lastModifiedDate":"2023-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2023-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2023-10-16"},{"lineNumber":101,"author":{"gitId":"kanna-1"},"content":"        String userInput \u003d COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY;","lastModifiedDate":"2023-11-05"},{"lineNumber":102,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":103,"author":{"gitId":"kanna-1"},"content":"        EditCommand expectedCommand \u003d new EditCommand(new Name(VALID_NAME_BOB), null, descriptor);","lastModifiedDate":"2023-10-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2023-10-16"},{"lineNumber":107,"author":{"gitId":"kanna-1"},"content":"        userInput \u003d COMMAND_WORD + NAME_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2023-11-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":109,"author":{"gitId":"kanna-1"},"content":"        expectedCommand \u003d new EditCommand(new Name(VALID_NAME_BOB), null, descriptor);","lastModifiedDate":"2023-10-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2023-10-16"},{"lineNumber":113,"author":{"gitId":"kanna-1"},"content":"        userInput \u003d COMMAND_WORD + NAME_DESC_BOB + ADDRESS_DESC_AMY;","lastModifiedDate":"2023-11-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":115,"author":{"gitId":"kanna-1"},"content":"        expectedCommand \u003d new EditCommand(new Name(VALID_NAME_BOB), null, descriptor);","lastModifiedDate":"2023-10-16"},{"lineNumber":116,"author":{"gitId":"kanna-1"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-16"},{"lineNumber":117,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":118,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":119,"author":{"gitId":"kanna-1"},"content":"        // medical","lastModifiedDate":"2023-10-16"},{"lineNumber":120,"author":{"gitId":"kanna-1"},"content":"        userInput \u003d COMMAND_WORD + NAME_DESC_BOB + MEDICAL_DESC_BOB;","lastModifiedDate":"2023-11-05"},{"lineNumber":121,"author":{"gitId":"kanna-1"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withMedicalHistories(VALID_MEDICALHISTORY).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":122,"author":{"gitId":"kanna-1"},"content":"        expectedCommand \u003d new EditCommand(new Name(VALID_NAME_BOB), null, descriptor);","lastModifiedDate":"2023-10-16"},{"lineNumber":123,"author":{"gitId":"kanna-1"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-16"},{"lineNumber":124,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":125,"author":{"gitId":"kanna-1"},"content":"        // appointment","lastModifiedDate":"2023-10-16"},{"lineNumber":126,"author":{"gitId":"kanna-1"},"content":"        userInput \u003d COMMAND_WORD + NAME_DESC_AMY + APPOINTMENT_DESC_BOB;","lastModifiedDate":"2023-11-05"},{"lineNumber":127,"author":{"gitId":"kanna-1"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAppointment(VALID_APPOINTMENT).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":128,"author":{"gitId":"kanna-1"},"content":"        expectedCommand \u003d new EditCommand(new Name(VALID_NAME_AMY), null, descriptor);","lastModifiedDate":"2023-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-16"},{"lineNumber":130,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":131,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":132,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":133,"author":{"gitId":"kanna-1"},"content":"    public void parse_oneFieldSpecifiedUsingID_success() {","lastModifiedDate":"2023-10-16"},{"lineNumber":134,"author":{"gitId":"kanna-1"},"content":"        // phone","lastModifiedDate":"2023-10-16"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":136,"author":{"gitId":"hyc17003"},"content":"        String userInput \u003d COMMAND_WORD + ID_DESC_AMY + PHONE_DESC_AMY;","lastModifiedDate":"2023-11-09"},{"lineNumber":137,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":138,"author":{"gitId":"hyc17003"},"content":"        EditCommand expectedCommand \u003d new EditCommand(null, new Id(VALID_ID_AMY), descriptor);","lastModifiedDate":"2023-11-09"},{"lineNumber":139,"author":{"gitId":"kanna-1"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-16"},{"lineNumber":140,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":141,"author":{"gitId":"kanna-1"},"content":"        // email","lastModifiedDate":"2023-10-16"},{"lineNumber":142,"author":{"gitId":"hyc17003"},"content":"        userInput \u003d COMMAND_WORD + ID_DESC_AMY + EMAIL_DESC_AMY;","lastModifiedDate":"2023-11-09"},{"lineNumber":143,"author":{"gitId":"kanna-1"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":144,"author":{"gitId":"hyc17003"},"content":"        expectedCommand \u003d new EditCommand(null, new Id(VALID_ID_AMY), descriptor);","lastModifiedDate":"2023-11-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-16"},{"lineNumber":146,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-10-16"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-10-16"},{"lineNumber":153,"author":{"gitId":"kanna-1"},"content":"        String userInput \u003d COMMAND_WORD + NAME_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2023-11-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-10-16"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-10-16"},{"lineNumber":158,"author":{"gitId":"kanna-1"},"content":"        userInput \u003d COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_PHONE_DESC;","lastModifiedDate":"2023-11-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-10-16"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // mulltiple valid fields repeated","lastModifiedDate":"2023-10-16"},{"lineNumber":163,"author":{"gitId":"kanna-1"},"content":"        userInput \u003d COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2023-11-05"},{"lineNumber":164,"author":{"gitId":"kanna-1"},"content":"                + EMAIL_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-11-05"},{"lineNumber":165,"author":{"gitId":"kanna-1"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-10-16"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));","lastModifiedDate":"2023-10-16"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // multiple invalid values","lastModifiedDate":"2023-10-16"},{"lineNumber":171,"author":{"gitId":"kanna-1"},"content":"        userInput \u003d COMMAND_WORD + NAME_DESC_BOB + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC","lastModifiedDate":"2023-11-05"},{"lineNumber":172,"author":{"gitId":"kanna-1"},"content":"                + INVALID_EMAIL_DESC + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC;","lastModifiedDate":"2023-10-28"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-10-16"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));","lastModifiedDate":"2023-10-16"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":179,"author":{"gitId":"kanna-1"},"content":"    public void parser_noFieldsProvided_failure() {","lastModifiedDate":"2023-10-26"},{"lineNumber":180,"author":{"gitId":"kanna-1"},"content":"        String userInput \u003d COMMAND_WORD + NAME_DESC_BOB;","lastModifiedDate":"2023-11-05"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":182,"author":{"gitId":"kanna-1"},"content":"        assertParseFailure(parser, userInput, MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-10-26"},{"lineNumber":183,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":184,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":185,"author":{"gitId":"kanna-1"},"content":"    public void parse_invalidInput_throwsParseException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":186,"author":{"gitId":"hyc17003"},"content":"        // Missing NAME or ID prefix","lastModifiedDate":"2023-11-07"},{"lineNumber":187,"author":{"gitId":"kanna-1"},"content":"        String invalidInput \u003d COMMAND_WORD + \" \" + INVALID_EMAIL_DESC;","lastModifiedDate":"2023-10-28"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":189,"author":{"gitId":"kanna-1"},"content":"        assertThrows(ParseException.class, () -\u003e parser.parse(invalidInput));","lastModifiedDate":"2023-10-26"},{"lineNumber":190,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":191,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":192,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":193,"author":{"gitId":"kanna-1"},"content":"    public void parse_validInput_returnsEditCommand() throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":194,"author":{"gitId":"kanna-1"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2023-11-05"},{"lineNumber":195,"author":{"gitId":"hyc17003"},"content":"        // Valid input with ID","lastModifiedDate":"2023-11-07"},{"lineNumber":196,"author":{"gitId":"hyc17003"},"content":"        String validInputWithId \u003d COMMAND_WORD + ID_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-11-09"},{"lineNumber":197,"author":{"gitId":"kanna-1"},"content":"                + NAME_DESC_BOB;","lastModifiedDate":"2023-11-05"},{"lineNumber":198,"author":{"gitId":"hyc17003"},"content":"        EditCommand expectedCommandWithId \u003d new EditCommand(new Name(VALID_NAME_BOB),","lastModifiedDate":"2023-11-07"},{"lineNumber":199,"author":{"gitId":"hyc17003"},"content":"                new Id(VALID_ID_BOB), descriptor);","lastModifiedDate":"2023-11-07"},{"lineNumber":200,"author":{"gitId":"hyc17003"},"content":"        assertEquals(parser.parse(validInputWithId), expectedCommandWithId);","lastModifiedDate":"2023-11-07"},{"lineNumber":201,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":202,"author":{"gitId":"kanna-1"},"content":"        // Valid input with Name","lastModifiedDate":"2023-10-26"},{"lineNumber":203,"author":{"gitId":"kanna-1"},"content":"        String validInputWithName \u003d COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY;","lastModifiedDate":"2023-11-05"},{"lineNumber":204,"author":{"gitId":"kanna-1"},"content":"        EditCommand expectedCommandWithName \u003d new EditCommand(new Name(VALID_NAME_AMY), null, descriptor);","lastModifiedDate":"2023-10-28"},{"lineNumber":205,"author":{"gitId":"kanna-1"},"content":"        assertEquals(parser.parse(validInputWithName), expectedCommandWithName);","lastModifiedDate":"2023-10-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"hyc17003":16,"-":111,"kanna-1":80}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_ID;","lastModifiedDate":"2023-11-09"},{"lineNumber":5,"author":{"gitId":"nubnubyas"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_NAME;","lastModifiedDate":"2023-11-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.AppointmentOverlapsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.CompositePredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.IdContainsKeywordsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"    public void parse_illegalFields_throwsParseException() {","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"        assertParseFailure(parser, \" n/Alice p/91234567\",","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"        assertParseFailure(parser, \" n/Alice e/example@email.com\",","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"        assertParseFailure(parser, \" n/Alice a/Address Here\",","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"        assertParseFailure(parser, \" n/Alice m/On Medication XYZ\",","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"        assertParseFailure(parser, \" n/Alice n/Benson\",","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(CliSyntax.PREFIX_NAME));","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"        assertParseFailure(parser, \" p/91234567\",","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"nubnubyas"},"content":"        assertParseFailure(parser, \" n/\",","lastModifiedDate":"2023-11-06"},{"lineNumber":46,"author":{"gitId":"nubnubyas"},"content":"                String.format(MESSAGE_INVALID_NAME, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-06"},{"lineNumber":47,"author":{"gitId":"nubnubyas"},"content":"        assertParseFailure(parser, \" id/\",","lastModifiedDate":"2023-11-06"},{"lineNumber":48,"author":{"gitId":"nubnubyas"},"content":"                String.format(MESSAGE_INVALID_ID, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-11-09"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"    public void nameparse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-10-18"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"        CompositePredicate findCommandPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"        findCommandPredicate.add(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"        FindCommand expectedFindCommand \u003d new FindCommand(findCommandPredicate);","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"        assertParseSuccess(parser, \" n/Alice Bob\", expectedFindCommand);","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"        assertParseSuccess(parser, \" n/Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":64,"author":{"gitId":"hyc17003"},"content":"    public void idparse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-11-07"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"        CompositePredicate findCommandPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"        findCommandPredicate.add(new IdContainsKeywordsPredicate(Arrays.asList(\"T0100606Z\", \"T0206006Z\")));","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-10-18"},{"lineNumber":68,"author":{"gitId":"WZWren"},"content":"        FindCommand expectedFindCommand \u003d new FindCommand(findCommandPredicate);","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"hyc17003"},"content":"        assertParseSuccess(parser, \" id/T0100606Z T0206006Z\", expectedFindCommand);","lastModifiedDate":"2023-10-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2023-10-18"},{"lineNumber":72,"author":{"gitId":"WZWren"},"content":"        assertParseSuccess(parser, \" id/T0100606Z \\n \\t T0206006Z  \\t\", expectedFindCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"WZWren"},"content":"    public void apptparse_validArgs_returnsFindCommand() throws Exception {","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"WZWren"},"content":"        Appointment appointment \u003d Appointment.of(\"1-1-2021, 9 11:30\", InputSource.USER_INPUT);","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"WZWren"},"content":"        CompositePredicate findCommandPredicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"WZWren"},"content":"        findCommandPredicate.add(new AppointmentOverlapsPredicate(appointment));","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"WZWren"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"        FindCommand expectedFindCommand \u003d new FindCommand(findCommandPredicate);","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"WZWren"},"content":"        assertParseSuccess(parser, \" ap/1-1-2021, 9 11:30\", expectedFindCommand);","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"nubnubyas":6,"hyc17003":5,"WZWren":39,"-":34}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":21,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"    // TODO: Modify ID Constraints to be more tightly bound","lastModifiedDate":"2023-11-07"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"    private static final String INVALID_ID \u003d \" \";","lastModifiedDate":"2023-11-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_APPOINTMENT_FORMAT \u003d \"Tomorrow 8PM\";","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_APPOINTMENT_VALUES \u003d \"31-Feb-2023 10:00 12:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"kanna-1"},"content":"    private static final String INVALID_MEDICAL_HISTORY \u003d \"\";","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"    private static final String VALID_ID \u003d \"S9876543A\";","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"    private static final String VALID_APPOINTMENT \u003d \"23-Jan-2023 10:00 12:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":43,"author":{"gitId":"kanna-1"},"content":"    private static final String VALID_MEDICAL_HISTORY_1 \u003d \"cancer\";","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"kanna-1"},"content":"    private static final String VALID_MEDICAL_HISTORY_2 \u003d \"fever\";","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":68,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":69,"author":{"gitId":"hyc17003"},"content":"    public void parseId_null_throwsNullPointerException() {","lastModifiedDate":"2023-11-07"},{"lineNumber":70,"author":{"gitId":"hyc17003"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseId((String) null));","lastModifiedDate":"2023-11-07"},{"lineNumber":71,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":72,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":73,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":74,"author":{"gitId":"hyc17003"},"content":"    public void parseId_invalidValue_throwsParseException() {","lastModifiedDate":"2023-11-07"},{"lineNumber":75,"author":{"gitId":"hyc17003"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseId(INVALID_ID));","lastModifiedDate":"2023-11-07"},{"lineNumber":76,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":77,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":84,"author":{"gitId":"hyc17003"},"content":"    public void parseIdvalidValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2023-11-07"},{"lineNumber":85,"author":{"gitId":"hyc17003"},"content":"        Id expectedId \u003d new Id(VALID_ID);","lastModifiedDate":"2023-11-07"},{"lineNumber":86,"author":{"gitId":"hyc17003"},"content":"        assertEquals(expectedId, ParserUtil.parseId(VALID_ID));","lastModifiedDate":"2023-11-07"},{"lineNumber":87,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":88,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":107,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":108,"author":{"gitId":"kanna-1"},"content":"    public void parseAppointment_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-16"},{"lineNumber":109,"author":{"gitId":"kanna-1"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAppointment((String) null));","lastModifiedDate":"2023-10-18"},{"lineNumber":110,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":111,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":112,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":113,"author":{"gitId":"kanna-1"},"content":"    public void parseAppointment_validValue_returnsAppointment() throws Exception {","lastModifiedDate":"2023-10-16"},{"lineNumber":114,"author":{"gitId":"WZWren"},"content":"        Appointment expectedAppointment \u003d Appointment.of(VALID_APPOINTMENT, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":115,"author":{"gitId":"kanna-1"},"content":"        System.out.println(ParserUtil.parseAppointment(VALID_APPOINTMENT));","lastModifiedDate":"2023-10-18"},{"lineNumber":116,"author":{"gitId":"kanna-1"},"content":"        assertEquals(expectedAppointment, ParserUtil.parseAppointment(VALID_APPOINTMENT));","lastModifiedDate":"2023-10-18"},{"lineNumber":117,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":118,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":119,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":120,"author":{"gitId":"WZWren"},"content":"    public void parseAppointment_invalidFormatValue_returnsAppointment() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"WZWren"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAppointment(INVALID_APPOINTMENT_FORMAT));","lastModifiedDate":"2023-10-29"},{"lineNumber":122,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":123,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":124,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":125,"author":{"gitId":"WZWren"},"content":"    public void parseAppointment_invalidDelimitedValue_throwsParseException() {","lastModifiedDate":"2023-10-29"},{"lineNumber":126,"author":{"gitId":"WZWren"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAppointment(INVALID_APPOINTMENT_VALUES));","lastModifiedDate":"2023-10-29"},{"lineNumber":127,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":128,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":129,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":130,"author":{"gitId":"WZWren"},"content":"    public void parseAppointment_validValueWithoutWhitespace_returnsAppointment() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":131,"author":{"gitId":"WZWren"},"content":"        Appointment expectedAppt \u003d Appointment.of(VALID_APPOINTMENT, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":132,"author":{"gitId":"WZWren"},"content":"        assertEquals(expectedAppt, ParserUtil.parseAppointment(VALID_APPOINTMENT));","lastModifiedDate":"2023-10-29"},{"lineNumber":133,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":134,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":135,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":136,"author":{"gitId":"WZWren"},"content":"    public void parseAppointment_validValueWithWhitespace_returnsTrimmedAppointment() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":137,"author":{"gitId":"WZWren"},"content":"        String apptWithWhitespace \u003d WHITESPACE + VALID_APPOINTMENT + WHITESPACE;","lastModifiedDate":"2023-10-29"},{"lineNumber":138,"author":{"gitId":"WZWren"},"content":"        Appointment expectedAppt \u003d Appointment.of(VALID_APPOINTMENT, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":139,"author":{"gitId":"WZWren"},"content":"        assertEquals(expectedAppt, ParserUtil.parseAppointment(apptWithWhitespace));","lastModifiedDate":"2023-10-29"},{"lineNumber":140,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":141,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":142,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":143,"author":{"gitId":"hyc17003"},"content":"    public void parseId_validValueWithoutWhitespace_returnsId() throws Exception {","lastModifiedDate":"2023-11-07"},{"lineNumber":144,"author":{"gitId":"hyc17003"},"content":"        Id expectedId \u003d new Id(VALID_ID);","lastModifiedDate":"2023-11-07"},{"lineNumber":145,"author":{"gitId":"hyc17003"},"content":"        assertEquals(expectedId, ParserUtil.parseId(VALID_ID));","lastModifiedDate":"2023-11-07"},{"lineNumber":146,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":147,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":148,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":149,"author":{"gitId":"hyc17003"},"content":"    public void parseId_validValueWithWhitespace_returnsTrimmedId() throws Exception {","lastModifiedDate":"2023-11-07"},{"lineNumber":150,"author":{"gitId":"hyc17003"},"content":"        String idWithWhitespace \u003d WHITESPACE + VALID_ID + WHITESPACE;","lastModifiedDate":"2023-11-07"},{"lineNumber":151,"author":{"gitId":"hyc17003"},"content":"        Id expectedId \u003d new Id(VALID_ID);","lastModifiedDate":"2023-11-07"},{"lineNumber":152,"author":{"gitId":"hyc17003"},"content":"        assertEquals(expectedId, ParserUtil.parseId(idWithWhitespace));","lastModifiedDate":"2023-11-07"},{"lineNumber":153,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":154,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":225,"author":{"gitId":"kanna-1"},"content":"    public void parseMedicalHistories_emptyHistory_exceptionThrown() {","lastModifiedDate":"2023-10-16"},{"lineNumber":226,"author":{"gitId":"kanna-1"},"content":"        // Input data with an empty medical history","lastModifiedDate":"2023-10-16"},{"lineNumber":227,"author":{"gitId":"kanna-1"},"content":"        String input \u003d \"History 1, , History 3\";","lastModifiedDate":"2023-10-16"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":229,"author":{"gitId":"kanna-1"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedicals(Arrays.asList(input.split(\",\"))));","lastModifiedDate":"2023-10-19"},{"lineNumber":230,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":232,"author":{"gitId":"WZWren"},"content":"    public void parseMedical_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-17"},{"lineNumber":233,"author":{"gitId":"WZWren"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedical(null));","lastModifiedDate":"2023-10-17"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":237,"author":{"gitId":"WZWren"},"content":"    public void parseMedical_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-17"},{"lineNumber":238,"author":{"gitId":"kanna-1"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMedical(INVALID_MEDICAL_HISTORY));","lastModifiedDate":"2023-10-18"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":242,"author":{"gitId":"WZWren"},"content":"    public void parseMedical_validValueWithoutWhitespace_returnsMedical() throws Exception {","lastModifiedDate":"2023-10-17"},{"lineNumber":243,"author":{"gitId":"kanna-1"},"content":"        MedicalHistory expectedMedHistory \u003d new MedicalHistory(VALID_MEDICAL_HISTORY_1);","lastModifiedDate":"2023-10-18"},{"lineNumber":244,"author":{"gitId":"kanna-1"},"content":"        assertEquals(expectedMedHistory, ParserUtil.parseMedical(VALID_MEDICAL_HISTORY_1));","lastModifiedDate":"2023-10-18"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":248,"author":{"gitId":"WZWren"},"content":"    public void parseMedical_validValueWithWhitespace_returnsTrimmedMedical() throws Exception {","lastModifiedDate":"2023-10-17"},{"lineNumber":249,"author":{"gitId":"kanna-1"},"content":"        String medHistoryWithWhitespace \u003d WHITESPACE + VALID_MEDICAL_HISTORY_1 + WHITESPACE;","lastModifiedDate":"2023-10-18"},{"lineNumber":250,"author":{"gitId":"kanna-1"},"content":"        MedicalHistory expectedMedHistory \u003d new MedicalHistory(VALID_MEDICAL_HISTORY_1);","lastModifiedDate":"2023-10-18"},{"lineNumber":251,"author":{"gitId":"WZWren"},"content":"        assertEquals(expectedMedHistory, ParserUtil.parseMedical(medHistoryWithWhitespace));","lastModifiedDate":"2023-10-17"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":255,"author":{"gitId":"WZWren"},"content":"    public void parseMedicals_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-17"},{"lineNumber":256,"author":{"gitId":"WZWren"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMedicals(null));","lastModifiedDate":"2023-10-17"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":260,"author":{"gitId":"WZWren"},"content":"    public void parseMedicals_collectionWithInvalidMedicals_throwsParseException() {","lastModifiedDate":"2023-10-17"},{"lineNumber":261,"author":{"gitId":"WZWren"},"content":"        assertThrows(ParseException.class, () -\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":262,"author":{"gitId":"kanna-1"},"content":"                ParserUtil.parseMedicals(Arrays.asList(VALID_MEDICAL_HISTORY_1, INVALID_MEDICAL_HISTORY)));","lastModifiedDate":"2023-10-18"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":266,"author":{"gitId":"WZWren"},"content":"    public void parseMedicals_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2023-10-17"},{"lineNumber":267,"author":{"gitId":"WZWren"},"content":"        assertTrue(ParserUtil.parseMedicals(Collections.emptyList()).isEmpty());","lastModifiedDate":"2023-10-17"},{"lineNumber":268,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":270,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":271,"author":{"gitId":"WZWren"},"content":"    public void parseMedicals_collectionWithValidMedicals_returnsMedicalSet() throws Exception {","lastModifiedDate":"2023-10-17"},{"lineNumber":272,"author":{"gitId":"kanna-1"},"content":"        Set\u003cMedicalHistory\u003e actualMedSet \u003d ParserUtil.parseMedicals(Arrays.asList(VALID_MEDICAL_HISTORY_1,","lastModifiedDate":"2023-10-18"},{"lineNumber":273,"author":{"gitId":"kanna-1"},"content":"                VALID_MEDICAL_HISTORY_2));","lastModifiedDate":"2023-10-18"},{"lineNumber":274,"author":{"gitId":"WZWren"},"content":"        Set\u003cMedicalHistory\u003e expectedMedSet \u003d new HashSet\u003cMedicalHistory\u003e(","lastModifiedDate":"2023-10-17"},{"lineNumber":275,"author":{"gitId":"kanna-1"},"content":"                Arrays.asList(new MedicalHistory(VALID_MEDICAL_HISTORY_1),","lastModifiedDate":"2023-10-18"},{"lineNumber":276,"author":{"gitId":"kanna-1"},"content":"                        new MedicalHistory(VALID_MEDICAL_HISTORY_2)));","lastModifiedDate":"2023-10-18"},{"lineNumber":277,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":278,"author":{"gitId":"WZWren"},"content":"        assertEquals(expectedMedSet, actualMedSet);","lastModifiedDate":"2023-10-17"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"hyc17003":18,"WZWren":53,"-":169,"kanna-1":40}},{"path":"src/test/java/seedu/address/logic/parser/UndoCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kanna-1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-28"},{"lineNumber":2,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-28"},{"lineNumber":4,"author":{"gitId":"kanna-1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-28"},{"lineNumber":6,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.UndoCommand.INVALID_STEPS_TO_UNDO;","lastModifiedDate":"2023-10-28"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-28"},{"lineNumber":8,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":10,"author":{"gitId":"kanna-1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-28"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"public class UndoCommandParserTest {","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"    private final UndoCommandParser parser \u003d new UndoCommandParser();","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":19,"author":{"gitId":"kanna-1"},"content":"    public void parse_invalidSteps_throwsParseException() {","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"kanna-1"},"content":"        assertParseFailure(parser, \"-9\", String.format(INVALID_STEPS_TO_UNDO));","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"kanna-1"},"content":"        assertParseFailure(parser, \"0\", String.format(INVALID_STEPS_TO_UNDO));","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":23,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":25,"author":{"gitId":"kanna-1"},"content":"    public void parse_nonNumericInput_throwsParseException() {","lastModifiedDate":"2023-10-28"},{"lineNumber":26,"author":{"gitId":"kanna-1"},"content":"        assertParseFailure(parser, \"abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"kanna-1"},"content":"    public void parse_validSteps_success() {","lastModifiedDate":"2023-10-28"},{"lineNumber":31,"author":{"gitId":"kanna-1"},"content":"        UndoCommand expectedUndoCommand \u003d new UndoCommand(3);","lastModifiedDate":"2023-10-28"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"        assertParseSuccess(parser, \"3\", expectedUndoCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":33,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":34,"author":{"gitId":"kanna-1"},"content":"        expectedUndoCommand \u003d new UndoCommand(999);","lastModifiedDate":"2023-10-28"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"        assertParseSuccess(parser, \"999\", expectedUndoCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":36,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"kanna-1"},"content":"    public void equals_sameObject_returnsTrue() {","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"kanna-1"},"content":"        UndoCommand command \u003d new UndoCommand(3);","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"        assertTrue(command.equals(command));","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"kanna-1"},"content":"    public void equals_equalStepsToUndo_returnsTrue() {","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"        UndoCommand command1 \u003d new UndoCommand(3);","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"kanna-1"},"content":"        UndoCommand command2 \u003d new UndoCommand(3);","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"kanna-1"},"content":"        assertTrue(command1.equals(command2));","lastModifiedDate":"2023-10-28"},{"lineNumber":49,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":51,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"kanna-1"},"content":"    public void equals_differentStepsToUndo_returnsFalse() {","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"kanna-1"},"content":"        UndoCommand command1 \u003d new UndoCommand(3);","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"kanna-1"},"content":"        UndoCommand command2 \u003d new UndoCommand(4);","lastModifiedDate":"2023-10-28"},{"lineNumber":55,"author":{"gitId":"kanna-1"},"content":"        assertFalse(command1.equals(command2));","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"kanna-1"},"content":"    public void equals_null_returnsFalse() {","lastModifiedDate":"2023-10-28"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"        UndoCommand command \u003d new UndoCommand(3);","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"kanna-1"},"content":"        assertFalse(command.equals(null));","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"    public void equals_differentType_returnsFalse() {","lastModifiedDate":"2023-10-28"},{"lineNumber":66,"author":{"gitId":"kanna-1"},"content":"        UndoCommand command \u003d new UndoCommand(3);","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"kanna-1"},"content":"        assertFalse(command.equals(\"This is a string\"));","lastModifiedDate":"2023-10-28"},{"lineNumber":68,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":69,"author":{"gitId":"kanna-1"},"content":"}","lastModifiedDate":"2023-10-28"}],"authorContributionMap":{"kanna-1":69}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"    public void constructor_withValidReadOnlyAddressBook() {","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"        AddressBook newLogBook \u003d new AddressBook(newData);","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"        assertEquals(newData, newLogBook);","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"kanna-1"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"kanna-1"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":91,"author":{"gitId":"WeeeHung"},"content":"    public void setPersons_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.setPersons(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":93,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":94,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":95,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":96,"author":{"gitId":"WeeeHung"},"content":"    public void setPersons_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2023-10-27"},{"lineNumber":97,"author":{"gitId":"WeeeHung"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":98,"author":{"gitId":"WeeeHung"},"content":"        addressBook.setPersons(newData.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":99,"author":{"gitId":"WeeeHung"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2023-10-27"},{"lineNumber":100,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":101,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":102,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":103,"author":{"gitId":"WeeeHung"},"content":"    public void addPersons_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":104,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.addPerson(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":105,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":106,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":107,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":108,"author":{"gitId":"WeeeHung"},"content":"    public void addPersons_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2023-10-27"},{"lineNumber":109,"author":{"gitId":"WeeeHung"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":110,"author":{"gitId":"WeeeHung"},"content":"        addressBook.setPersons(newData.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":111,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.addPerson(newData.getPersonList().get(0)));","lastModifiedDate":"2023-10-27"},{"lineNumber":112,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":113,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":114,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":115,"author":{"gitId":"WeeeHung"},"content":"    public void removePersons_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":116,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.removePerson(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":117,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":118,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":119,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":120,"author":{"gitId":"WeeeHung"},"content":"    public void removePersons_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2023-10-27"},{"lineNumber":121,"author":{"gitId":"WeeeHung"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":122,"author":{"gitId":"WeeeHung"},"content":"        addressBook.setPersons(newData.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":123,"author":{"gitId":"WeeeHung"},"content":"        addressBook.removePerson(newData.getPersonList().get(0));","lastModifiedDate":"2023-10-27"},{"lineNumber":124,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(addressBook.equals(newData));","lastModifiedDate":"2023-10-27"},{"lineNumber":125,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":126,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":127,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":128,"author":{"gitId":"WeeeHung"},"content":"    public void hashCodeMethod() {","lastModifiedDate":"2023-10-27"},{"lineNumber":129,"author":{"gitId":"WeeeHung"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":130,"author":{"gitId":"WeeeHung"},"content":"        addressBook.setPersons(newData.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":131,"author":{"gitId":"WeeeHung"},"content":"        assertEquals(newData.hashCode(), addressBook.hashCode());","lastModifiedDate":"2023-10-27"},{"lineNumber":132,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":133,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String expected \u003d AddressBook.class.getCanonicalName() + \"{persons\u003d\" + addressBook.getPersonList() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertEquals(expected, addressBook.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"-":103,"kanna-1":2,"WeeeHung":51}},{"path":"src/test/java/seedu/address/model/LogBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"WeeeHung"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalLogBook;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"WeeeHung"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"import java.util.List;","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"WeeeHung"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"public class LogBookTest {","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":"    private final LogBook logbook \u003d new LogBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"    public void constructor() {","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"WeeeHung"},"content":"        assertEquals(Collections.emptyList(), logbook.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"    public void constructor_withValidReadOnlyAddressBook() {","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"        LogBook newData \u003d getTypicalLogBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"        LogBook newLogBook \u003d new LogBook(newData);","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"        assertEquals(newData, newLogBook);","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e logbook.resetData(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"    public void resetDataInLogBook_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"        LogBook newData \u003d getTypicalLogBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"        logbook.resetData(newData);","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"        assertEquals(newData, logbook);","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"    public void resetDataInLogBook_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"kanna-1"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2023-11-05"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"                .build();","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"WeeeHung"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2023-10-27"},{"lineNumber":58,"author":{"gitId":"WeeeHung"},"content":"        LogBookStub newData \u003d new LogBookStub(newPersons);","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e logbook.resetData(newData));","lastModifiedDate":"2023-10-27"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":63,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":64,"author":{"gitId":"WeeeHung"},"content":"    public void hasPersonInLogBook_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":65,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e logbook.hasPerson(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":66,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":67,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":68,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":69,"author":{"gitId":"WeeeHung"},"content":"    public void hasPerson_personNotInLogBook_returnsFalse() {","lastModifiedDate":"2023-10-27"},{"lineNumber":70,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(logbook.hasPerson(ALICE));","lastModifiedDate":"2023-10-27"},{"lineNumber":71,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":72,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"WeeeHung"},"content":"    public void hasPerson_personInLogBook_returnsTrue() {","lastModifiedDate":"2023-10-27"},{"lineNumber":75,"author":{"gitId":"WeeeHung"},"content":"        logbook.addPerson(ALICE);","lastModifiedDate":"2023-10-27"},{"lineNumber":76,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(logbook.hasPerson(ALICE));","lastModifiedDate":"2023-10-27"},{"lineNumber":77,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":78,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":79,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":80,"author":{"gitId":"WeeeHung"},"content":"    public void hasPerson_personWithSameIdentityFieldsInLogBook_returnsTrue() {","lastModifiedDate":"2023-10-27"},{"lineNumber":81,"author":{"gitId":"WeeeHung"},"content":"        logbook.addPerson(ALICE);","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"kanna-1"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2023-11-05"},{"lineNumber":83,"author":{"gitId":"WeeeHung"},"content":"                .build();","lastModifiedDate":"2023-10-27"},{"lineNumber":84,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(logbook.hasPerson(editedAlice));","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"WeeeHung"},"content":"    public void getPersonListInLogBook_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":89,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logbook.getPersonList().remove(0));","lastModifiedDate":"2023-10-27"},{"lineNumber":90,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":91,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":93,"author":{"gitId":"WeeeHung"},"content":"    public void setPersons_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":94,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e logbook.setPersons(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":95,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":96,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":97,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":98,"author":{"gitId":"WeeeHung"},"content":"    public void setPersons_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2023-10-27"},{"lineNumber":99,"author":{"gitId":"WeeeHung"},"content":"        LogBook newData \u003d getTypicalLogBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":100,"author":{"gitId":"WeeeHung"},"content":"        logbook.setPersons(newData.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":101,"author":{"gitId":"WeeeHung"},"content":"        assertEquals(newData, logbook);","lastModifiedDate":"2023-10-27"},{"lineNumber":102,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":103,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":104,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":105,"author":{"gitId":"WeeeHung"},"content":"    public void addPersons_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":106,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e logbook.addPerson(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":107,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":108,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":109,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":110,"author":{"gitId":"WeeeHung"},"content":"    public void addPersons_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2023-10-27"},{"lineNumber":111,"author":{"gitId":"WeeeHung"},"content":"        LogBook newData \u003d getTypicalLogBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":112,"author":{"gitId":"WeeeHung"},"content":"        logbook.setPersons(newData.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":113,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e logbook.addPerson(newData.getPersonList().get(0)));","lastModifiedDate":"2023-10-27"},{"lineNumber":114,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":115,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":116,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":117,"author":{"gitId":"WeeeHung"},"content":"    public void removePersons_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":118,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e logbook.removePerson(null));","lastModifiedDate":"2023-10-27"},{"lineNumber":119,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":120,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":121,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":122,"author":{"gitId":"WeeeHung"},"content":"    public void removePersons_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2023-10-27"},{"lineNumber":123,"author":{"gitId":"WeeeHung"},"content":"        LogBook newData \u003d getTypicalLogBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":124,"author":{"gitId":"WeeeHung"},"content":"        logbook.setPersons(newData.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":125,"author":{"gitId":"WeeeHung"},"content":"        logbook.removePerson(newData.getPersonList().get(0));","lastModifiedDate":"2023-10-27"},{"lineNumber":126,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(logbook.equals(newData));","lastModifiedDate":"2023-10-27"},{"lineNumber":127,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":128,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":129,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":130,"author":{"gitId":"WeeeHung"},"content":"    public void hashCodeMethod() {","lastModifiedDate":"2023-10-27"},{"lineNumber":131,"author":{"gitId":"WeeeHung"},"content":"        LogBook newData \u003d getTypicalLogBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":132,"author":{"gitId":"WeeeHung"},"content":"        logbook.setPersons(newData.getPersonList());","lastModifiedDate":"2023-10-27"},{"lineNumber":133,"author":{"gitId":"WeeeHung"},"content":"        assertEquals(newData.hashCode(), logbook.hashCode());","lastModifiedDate":"2023-10-27"},{"lineNumber":134,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":135,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":136,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":137,"author":{"gitId":"WeeeHung"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-27"},{"lineNumber":138,"author":{"gitId":"WeeeHung"},"content":"        String expected \u003d LogBook.class.getCanonicalName() + \"{persons\u003d\" + logbook.getPersonList() + \"}\";","lastModifiedDate":"2023-10-27"},{"lineNumber":139,"author":{"gitId":"WeeeHung"},"content":"        assertEquals(expected, logbook.toString());","lastModifiedDate":"2023-10-27"},{"lineNumber":140,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":141,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":142,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":143,"author":{"gitId":"WeeeHung"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2023-10-27"},{"lineNumber":144,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":145,"author":{"gitId":"WeeeHung"},"content":"    private static class LogBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2023-10-27"},{"lineNumber":146,"author":{"gitId":"WeeeHung"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-27"},{"lineNumber":147,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":148,"author":{"gitId":"WeeeHung"},"content":"        LogBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2023-10-27"},{"lineNumber":149,"author":{"gitId":"WeeeHung"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2023-10-27"},{"lineNumber":150,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":151,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":152,"author":{"gitId":"WeeeHung"},"content":"        @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":153,"author":{"gitId":"WeeeHung"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2023-10-27"},{"lineNumber":154,"author":{"gitId":"WeeeHung"},"content":"            return persons;","lastModifiedDate":"2023-10-27"},{"lineNumber":155,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":156,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":157,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":158,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"kanna-1":2,"WeeeHung":156}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"kanna-1"},"content":"import java.util.EmptyStackException;","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2023-11-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":21,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.LogCommand;","lastModifiedDate":"2023-11-01"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-11-01"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-11-01"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-27"},{"lineNumber":104,"author":{"gitId":"WeeeHung"},"content":"    public void getLoggedFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-27"},{"lineNumber":105,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getLoggedFilteredPersonList().remove(0));","lastModifiedDate":"2023-10-27"},{"lineNumber":106,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":107,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":145,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":146,"author":{"gitId":"kanna-1"},"content":"    public void isCommandHistoryEmpty_emptyStack_returnsTrue() {","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"kanna-1"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":148,"author":{"gitId":"kanna-1"},"content":"        assertTrue(modelManager.isCommandHistoryEmpty());","lastModifiedDate":"2023-10-28"},{"lineNumber":149,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":150,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":151,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":152,"author":{"gitId":"kanna-1"},"content":"    public void popCommandFromHistory_emptyStack_exception() {","lastModifiedDate":"2023-10-28"},{"lineNumber":153,"author":{"gitId":"kanna-1"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":154,"author":{"gitId":"kanna-1"},"content":"        assertThrows(EmptyStackException.class, modelManager::popCommandFromHistory);","lastModifiedDate":"2023-10-28"},{"lineNumber":155,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":156,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":157,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":158,"author":{"gitId":"kanna-1"},"content":"    public void getCommandHistorySize_emptyStack_returnsZero() {","lastModifiedDate":"2023-10-28"},{"lineNumber":159,"author":{"gitId":"kanna-1"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":160,"author":{"gitId":"kanna-1"},"content":"        assertEquals(0, modelManager.getCommandHistorySize());","lastModifiedDate":"2023-10-28"},{"lineNumber":161,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":162,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":163,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":164,"author":{"gitId":"kanna-1"},"content":"    public void popCommandFromHistory_nonEmptyStack_returnsCommand() {","lastModifiedDate":"2023-10-28"},{"lineNumber":165,"author":{"gitId":"kanna-1"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":166,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":167,"author":{"gitId":"kanna-1"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2023-10-28"},{"lineNumber":168,"author":{"gitId":"kanna-1"},"content":"        ClearCommand clearCommand \u003d new ClearCommand();","lastModifiedDate":"2023-10-28"},{"lineNumber":169,"author":{"gitId":"kanna-1"},"content":"        modelManager.addToHistory(addCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":170,"author":{"gitId":"kanna-1"},"content":"        modelManager.addToHistory(clearCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":171,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":172,"author":{"gitId":"kanna-1"},"content":"        assertEquals(clearCommand, modelManager.popCommandFromHistory());","lastModifiedDate":"2023-10-28"},{"lineNumber":173,"author":{"gitId":"kanna-1"},"content":"        assertEquals(addCommand, modelManager.popCommandFromHistory());","lastModifiedDate":"2023-10-28"},{"lineNumber":174,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":175,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":176,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-28"},{"lineNumber":177,"author":{"gitId":"kanna-1"},"content":"    public void getCommandHistorySize_nonEmptyStack_returnsCorrectSize() {","lastModifiedDate":"2023-10-28"},{"lineNumber":178,"author":{"gitId":"kanna-1"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-28"},{"lineNumber":179,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":180,"author":{"gitId":"kanna-1"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2023-10-28"},{"lineNumber":181,"author":{"gitId":"kanna-1"},"content":"        ClearCommand clearCommand \u003d new ClearCommand();","lastModifiedDate":"2023-10-28"},{"lineNumber":182,"author":{"gitId":"kanna-1"},"content":"        modelManager.addToHistory(addCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":183,"author":{"gitId":"kanna-1"},"content":"        modelManager.addToHistory(clearCommand);","lastModifiedDate":"2023-10-28"},{"lineNumber":184,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-28"},{"lineNumber":185,"author":{"gitId":"kanna-1"},"content":"        assertEquals(2, modelManager.getCommandHistorySize());","lastModifiedDate":"2023-10-28"},{"lineNumber":186,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-28"},{"lineNumber":187,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":188,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-01"},{"lineNumber":189,"author":{"gitId":"hyc17003"},"content":"    public void getFoundPersonsList_nonEmptyList_returnsListWithSameSize() throws CommandException {","lastModifiedDate":"2023-11-01"},{"lineNumber":190,"author":{"gitId":"hyc17003"},"content":"        ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2023-11-01"},{"lineNumber":191,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":192,"author":{"gitId":"hyc17003"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2023-11-01"},{"lineNumber":193,"author":{"gitId":"hyc17003"},"content":"        modelManager.addPerson(BENSON);","lastModifiedDate":"2023-11-01"},{"lineNumber":194,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":195,"author":{"gitId":"hyc17003"},"content":"        LogCommand logCommand \u003d new LogCommand();","lastModifiedDate":"2023-11-01"},{"lineNumber":196,"author":{"gitId":"hyc17003"},"content":"        modelManager.updateFoundPersonsList(person -\u003e true);","lastModifiedDate":"2023-11-01"},{"lineNumber":197,"author":{"gitId":"hyc17003"},"content":"        logCommand.execute(modelManager);","lastModifiedDate":"2023-11-01"},{"lineNumber":198,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":199,"author":{"gitId":"hyc17003"},"content":"        FilteredList\u003cPerson\u003e foundPersonsList \u003d modelManager.getFoundPersonsList();","lastModifiedDate":"2023-11-01"},{"lineNumber":200,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":201,"author":{"gitId":"hyc17003"},"content":"        assertEquals(2, foundPersonsList.size());","lastModifiedDate":"2023-11-01"},{"lineNumber":202,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-01"},{"lineNumber":203,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-01"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"hyc17003":21,"WZWren":1,"-":131,"kanna-1":46,"WeeeHung":5}},{"path":"src/test/java/seedu/address/model/person/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"kanna-1"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"kanna-1"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.parser.ParserUtil;","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"kanna-1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.exceptions.BadAppointmentFormatException;","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"// TODO: Update AppointmentTest to handle new implementation of Appointment","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"public class AppointmentTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"    private static final String VALID_APPOINTMENT_USER_INPUT_1 \u003d \"1-1-2021, 9 11:30\";","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"    private static final String VALID_APPOINTMENT_USER_INPUT_2 \u003d \"01-Jan-2021 09:00 11:30\";","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"    private static final String VALID_APPOINTMENT_USER_INPUT_3 \u003d \"01-Jan-2021,9:00,11:30\";","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"    private static final String VALID_APPOINTMENT_USER_INPUT_4 \u003d \"01-01-2021,0900, 11:30\";","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"    private static final String VALID_APPOINTMENT_USER_INPUT_5 \u003d \"02-01-2021,9:00, 11:30\";","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"    private static final String VALID_APPOINTMENT_USER_INPUT_6 \u003d \"01-1-21,13:00, 1330\";","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"nubnubyas"},"content":"    private static final String VALID_APPOINTMENT_USER_INPUT_7 \u003d \"01-JAN-2021 09:00 11:30\";","lastModifiedDate":"2023-11-06"},{"lineNumber":30,"author":{"gitId":"nubnubyas"},"content":"    private static final String VALID_APPOINTMENT_USER_INPUT_8 \u003d \"01-jan-2021, 09:00, 11:30\";","lastModifiedDate":"2023-11-06"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"    private static final String VALID_APPOINTMENT_STORAGE \u003d \"01-Jan-2021, 09:00, 11:30\";","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_MISSING_FIELD \u003d \"1-Jan-2023 12:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_BAD_YEAR \u003d \"29-Feb-2023 12:00 15:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_BAD_MONTH \u003d \"1-13-2023 12:00 15:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_BAD_DAY \u003d \"30-Feb-2023 12:00 15:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_BAD_MIN \u003d \"1-Jan-2023 12:60 15:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_BAD_HOUR \u003d \"1-Jan-2023 25:00 15:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_BAD_START \u003d \"1-Jan-2023 16:00 15:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"    private static final String APPOINTMENT_END_OVERLAPS_WITH_START \u003d \"1-1-2021, 8 9\";","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"    private static final String APPOINTMENT_START_OVERLAPS_WITH_END \u003d \"1-1-2021, 1130 12\";","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"    private static final String APPOINTMENT_NO_OVERLAP_START \u003d \"1-1-2021, 7 0759\";","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"    private static final String APPOINTMENT_NO_OVERLAP_END \u003d \"1-1-2021, 1201 1300\";","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"    private static final String APPOINTMENT_DIFF_DATE \u003d \"2-1-2021, 9 11:30\";","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"    private static final String APPOINTMENT_OVERLAPS \u003d \"1-1-2021, 8 10\";","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"    public void factory_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"        assertThrows(NullPointerException.class, () -\u003e Appointment.of(null, InputSource.STORAGE));","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"        assertThrows(NullPointerException.class, () -\u003e Appointment.of(null, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"    public void factory_invalidAppointment_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"        String invalidAppointment \u003d \" \";","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Appointment.of(invalidAppointment, InputSource.STORAGE));","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Appointment.of(invalidAppointment, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"        assertThrows(","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"                IllegalArgumentException.class, () -\u003e Appointment.of(INVALID_MISSING_FIELD, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":64,"author":{"gitId":"WZWren"},"content":"    public void factory_validAppointment_success() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"        Appointment userInput1 \u003d Appointment.of(VALID_APPOINTMENT_USER_INPUT_1, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"        Appointment userInput2 \u003d Appointment.of(VALID_APPOINTMENT_USER_INPUT_2, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":67,"author":{"gitId":"WZWren"},"content":"        Appointment userInput3 \u003d Appointment.of(VALID_APPOINTMENT_USER_INPUT_3, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"WZWren"},"content":"        Appointment userInput4 \u003d Appointment.of(VALID_APPOINTMENT_USER_INPUT_4, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":69,"author":{"gitId":"WZWren"},"content":"        Appointment storageInput \u003d Appointment.of(VALID_APPOINTMENT_STORAGE, InputSource.STORAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"WZWren"},"content":"        assertEquals(userInput1, userInput2);","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"WZWren"},"content":"        assertEquals(userInput2, userInput3);","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"WZWren"},"content":"        assertEquals(userInput3, userInput4);","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"WZWren"},"content":"        assertEquals(userInput4, storageInput);","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"WZWren"},"content":"        assertEquals(\"01-Jan-2021, 09:00 to 11:30\", userInput1.toString());","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":78,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":79,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":80,"author":{"gitId":"WZWren"},"content":"    public void factory_badAppointment_throwsBadAppointmentException() throws Exception {","lastModifiedDate":"2023-10-29"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"        assertThrows(","lastModifiedDate":"2023-10-29"},{"lineNumber":82,"author":{"gitId":"WZWren"},"content":"                BadAppointmentFormatException.class, () -\u003e Appointment.of(INVALID_BAD_YEAR, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":83,"author":{"gitId":"WZWren"},"content":"        assertThrows(","lastModifiedDate":"2023-10-29"},{"lineNumber":84,"author":{"gitId":"WZWren"},"content":"                BadAppointmentFormatException.class, () -\u003e Appointment.of(INVALID_BAD_MONTH, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":85,"author":{"gitId":"WZWren"},"content":"        assertThrows(","lastModifiedDate":"2023-10-29"},{"lineNumber":86,"author":{"gitId":"WZWren"},"content":"                BadAppointmentFormatException.class, () -\u003e Appointment.of(INVALID_BAD_DAY, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":87,"author":{"gitId":"WZWren"},"content":"        assertThrows(","lastModifiedDate":"2023-10-29"},{"lineNumber":88,"author":{"gitId":"WZWren"},"content":"                BadAppointmentFormatException.class, () -\u003e Appointment.of(INVALID_BAD_MIN, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"WZWren"},"content":"        assertThrows(","lastModifiedDate":"2023-10-29"},{"lineNumber":90,"author":{"gitId":"WZWren"},"content":"                BadAppointmentFormatException.class, () -\u003e Appointment.of(INVALID_BAD_HOUR, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"WZWren"},"content":"        assertThrows(","lastModifiedDate":"2023-10-29"},{"lineNumber":92,"author":{"gitId":"WZWren"},"content":"                BadAppointmentFormatException.class, () -\u003e Appointment.of(INVALID_BAD_START, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":93,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":94,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":95,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"WZWren"},"content":"    public void isValidAppointmentDelimit() {","lastModifiedDate":"2023-10-29"},{"lineNumber":97,"author":{"gitId":"WZWren"},"content":"        // null appointment","lastModifiedDate":"2023-10-17"},{"lineNumber":98,"author":{"gitId":"WZWren"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":99,"author":{"gitId":"WZWren"},"content":"                Appointment.isValidAppointmentDelimit(null, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"WZWren"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":101,"author":{"gitId":"WZWren"},"content":"                Appointment.isValidAppointmentDelimit(null, InputSource.STORAGE));","lastModifiedDate":"2023-10-29"},{"lineNumber":102,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":103,"author":{"gitId":"WZWren"},"content":"        // invalid delimits for appointment","lastModifiedDate":"2023-10-29"},{"lineNumber":104,"author":{"gitId":"WZWren"},"content":"        assertFalse(Appointment.isValidAppointmentDelimit(\"\", InputSource.USER_INPUT)); // empty string","lastModifiedDate":"2023-10-29"},{"lineNumber":105,"author":{"gitId":"WZWren"},"content":"        assertFalse(Appointment.isValidAppointmentDelimit(\"\", InputSource.STORAGE));","lastModifiedDate":"2023-10-29"},{"lineNumber":106,"author":{"gitId":"WZWren"},"content":"        assertFalse(Appointment.isValidAppointmentDelimit(\" \", InputSource.USER_INPUT)); // spaces only","lastModifiedDate":"2023-10-29"},{"lineNumber":107,"author":{"gitId":"WZWren"},"content":"        assertFalse(Appointment.isValidAppointmentDelimit(\" \", InputSource.STORAGE));","lastModifiedDate":"2023-10-29"},{"lineNumber":108,"author":{"gitId":"WZWren"},"content":"        assertFalse(Appointment.isValidAppointmentDelimit(\"a, b, c, d\", InputSource.USER_INPUT)); // too many","lastModifiedDate":"2023-10-29"},{"lineNumber":109,"author":{"gitId":"WZWren"},"content":"        assertFalse(Appointment.isValidAppointmentDelimit(\"a, b to c to d\", InputSource.STORAGE));","lastModifiedDate":"2023-10-29"},{"lineNumber":110,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":111,"author":{"gitId":"WZWren"},"content":"        // valid delimits","lastModifiedDate":"2023-10-29"},{"lineNumber":112,"author":{"gitId":"WZWren"},"content":"        assertTrue(Appointment.isValidAppointmentDelimit(VALID_APPOINTMENT_USER_INPUT_1, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":113,"author":{"gitId":"WZWren"},"content":"        assertTrue(Appointment.isValidAppointmentDelimit(VALID_APPOINTMENT_USER_INPUT_2, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":114,"author":{"gitId":"WZWren"},"content":"        assertTrue(Appointment.isValidAppointmentDelimit(VALID_APPOINTMENT_USER_INPUT_5, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":115,"author":{"gitId":"WZWren"},"content":"        assertTrue(Appointment.isValidAppointmentDelimit(VALID_APPOINTMENT_USER_INPUT_6, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":116,"author":{"gitId":"WZWren"},"content":"        assertTrue(Appointment.isValidAppointmentDelimit(VALID_APPOINTMENT_STORAGE, InputSource.STORAGE));","lastModifiedDate":"2023-10-29"},{"lineNumber":117,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"kanna-1"},"content":"    @Test","lastModifiedDate":"2023-10-18"},{"lineNumber":120,"author":{"gitId":"kanna-1"},"content":"    public void parseAppointmentIfExists_emptyOptional_returnsNull() throws ParseException {","lastModifiedDate":"2023-10-18"},{"lineNumber":121,"author":{"gitId":"kanna-1"},"content":"        Optional\u003cString\u003e emptyAppointment \u003d Optional.empty();","lastModifiedDate":"2023-10-18"},{"lineNumber":122,"author":{"gitId":"kanna-1"},"content":"        assertNull(ParserUtil.parseAppointmentIfExists(emptyAppointment));","lastModifiedDate":"2023-10-18"},{"lineNumber":123,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":124,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":125,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":126,"author":{"gitId":"WZWren"},"content":"    void overlaps() throws Exception {","lastModifiedDate":"2023-10-30"},{"lineNumber":127,"author":{"gitId":"WZWren"},"content":"        Appointment appointment \u003d Appointment.of(VALID_APPOINTMENT_USER_INPUT_1, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-30"},{"lineNumber":128,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":129,"author":{"gitId":"WZWren"},"content":"        // handles null","lastModifiedDate":"2023-10-30"},{"lineNumber":130,"author":{"gitId":"WZWren"},"content":"        assertFalse(appointment.hasOverlap(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":131,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":132,"author":{"gitId":"WZWren"},"content":"        // overlaps with edge-to-edge","lastModifiedDate":"2023-10-30"},{"lineNumber":133,"author":{"gitId":"WZWren"},"content":"        assertTrue(","lastModifiedDate":"2023-10-30"},{"lineNumber":134,"author":{"gitId":"WZWren"},"content":"                appointment.hasOverlap(Appointment.of(APPOINTMENT_START_OVERLAPS_WITH_END, InputSource.USER_INPUT)));","lastModifiedDate":"2023-10-30"},{"lineNumber":135,"author":{"gitId":"WZWren"},"content":"        assertTrue(","lastModifiedDate":"2023-10-30"},{"lineNumber":136,"author":{"gitId":"WZWren"},"content":"                appointment.hasOverlap(Appointment.of(APPOINTMENT_END_OVERLAPS_WITH_START, InputSource.USER_INPUT)));","lastModifiedDate":"2023-10-30"},{"lineNumber":137,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":138,"author":{"gitId":"WZWren"},"content":"        // handles no overlap","lastModifiedDate":"2023-10-30"},{"lineNumber":139,"author":{"gitId":"WZWren"},"content":"        assertFalse(appointment.hasOverlap(Appointment.of(APPOINTMENT_NO_OVERLAP_START, InputSource.USER_INPUT)));","lastModifiedDate":"2023-10-30"},{"lineNumber":140,"author":{"gitId":"WZWren"},"content":"        assertFalse(appointment.hasOverlap(Appointment.of(APPOINTMENT_NO_OVERLAP_END, InputSource.USER_INPUT)));","lastModifiedDate":"2023-10-30"},{"lineNumber":141,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":142,"author":{"gitId":"WZWren"},"content":"        // handles overlap","lastModifiedDate":"2023-10-30"},{"lineNumber":143,"author":{"gitId":"WZWren"},"content":"        Appointment other \u003d Appointment.of(APPOINTMENT_OVERLAPS, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-30"},{"lineNumber":144,"author":{"gitId":"WZWren"},"content":"        assertTrue(appointment.hasOverlap(other));","lastModifiedDate":"2023-10-30"},{"lineNumber":145,"author":{"gitId":"WZWren"},"content":"        assertTrue(other.hasOverlap(appointment));","lastModifiedDate":"2023-10-30"},{"lineNumber":146,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":147,"author":{"gitId":"WZWren"},"content":"        // handles diff dates","lastModifiedDate":"2023-10-30"},{"lineNumber":148,"author":{"gitId":"WZWren"},"content":"        assertFalse(appointment.hasOverlap(Appointment.of(APPOINTMENT_DIFF_DATE, InputSource.USER_INPUT)));","lastModifiedDate":"2023-10-30"},{"lineNumber":149,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":150,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":151,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":152,"author":{"gitId":"WZWren"},"content":"    public void equals() throws Exception {","lastModifiedDate":"2023-10-28"},{"lineNumber":153,"author":{"gitId":"WZWren"},"content":"        Appointment appointment \u003d Appointment.of(VALID_APPOINTMENT_USER_INPUT_1, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":154,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":155,"author":{"gitId":"WeeeHung"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":156,"author":{"gitId":"WZWren"},"content":"        assertTrue(appointment.equals(Appointment.of(VALID_APPOINTMENT_USER_INPUT_1, InputSource.USER_INPUT)));","lastModifiedDate":"2023-10-29"},{"lineNumber":157,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":158,"author":{"gitId":"WeeeHung"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":159,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(appointment.equals(appointment));","lastModifiedDate":"2023-10-13"},{"lineNumber":160,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":161,"author":{"gitId":"nubnubyas"},"content":"        // different capitalisation of months -\u003e returns true","lastModifiedDate":"2023-11-06"},{"lineNumber":162,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(appointment.equals(Appointment.of(VALID_APPOINTMENT_USER_INPUT_7, InputSource.USER_INPUT)));","lastModifiedDate":"2023-11-06"},{"lineNumber":163,"author":{"gitId":"nubnubyas"},"content":"        assertTrue(appointment.equals(Appointment.of(VALID_APPOINTMENT_USER_INPUT_8, InputSource.USER_INPUT)));","lastModifiedDate":"2023-11-06"},{"lineNumber":164,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":165,"author":{"gitId":"WeeeHung"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":166,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(appointment.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":167,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":168,"author":{"gitId":"WeeeHung"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":169,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(appointment.equals(5.0f));","lastModifiedDate":"2023-10-13"},{"lineNumber":170,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":171,"author":{"gitId":"WeeeHung"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":172,"author":{"gitId":"WZWren"},"content":"        assertFalse(appointment.equals(Appointment.of(VALID_APPOINTMENT_USER_INPUT_5, InputSource.USER_INPUT)));","lastModifiedDate":"2023-10-29"},{"lineNumber":173,"author":{"gitId":"WZWren"},"content":"        assertFalse(appointment.equals(Appointment.of(VALID_APPOINTMENT_USER_INPUT_6, InputSource.USER_INPUT)));","lastModifiedDate":"2023-10-29"},{"lineNumber":174,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":175,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":176,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":177,"author":{"gitId":"WZWren"},"content":"    public void hashCodeTest() throws Exception {","lastModifiedDate":"2023-10-28"},{"lineNumber":178,"author":{"gitId":"WZWren"},"content":"        LocalDate date \u003d LocalDate.of(2021, 1, 1);","lastModifiedDate":"2023-10-29"},{"lineNumber":179,"author":{"gitId":"WZWren"},"content":"        LocalTime start \u003d LocalTime.of(9, 0);","lastModifiedDate":"2023-10-29"},{"lineNumber":180,"author":{"gitId":"WZWren"},"content":"        LocalTime end \u003d LocalTime.of(11, 30);","lastModifiedDate":"2023-10-29"},{"lineNumber":181,"author":{"gitId":"WZWren"},"content":"        Appointment appointment \u003d Appointment.of(VALID_APPOINTMENT_STORAGE, InputSource.STORAGE);","lastModifiedDate":"2023-10-29"},{"lineNumber":182,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":183,"author":{"gitId":"WeeeHung"},"content":"        // same value","lastModifiedDate":"2023-10-13"},{"lineNumber":184,"author":{"gitId":"WZWren"},"content":"        assertTrue(appointment.hashCode() \u003d\u003d Objects.hash(date, start, end));","lastModifiedDate":"2023-10-29"},{"lineNumber":185,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":186,"author":{"gitId":"WeeeHung"},"content":"        // different value","lastModifiedDate":"2023-10-13"},{"lineNumber":187,"author":{"gitId":"WZWren"},"content":"        assertFalse(appointment.hashCode() !\u003d Objects.hash(date, start, end));","lastModifiedDate":"2023-10-29"},{"lineNumber":188,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":189,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"nubnubyas":6,"WZWren":124,"kanna-1":17,"WeeeHung":42}},{"path":"src/test/java/seedu/address/model/person/IdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hyc17003"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-11-07"},{"lineNumber":2,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":3,"author":{"gitId":"hyc17003"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-11-07"},{"lineNumber":4,"author":{"gitId":"hyc17003"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-11-07"},{"lineNumber":5,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-11-07"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":7,"author":{"gitId":"hyc17003"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-11-07"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"public class IdTest {","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":11,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":12,"author":{"gitId":"hyc17003"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-11-07"},{"lineNumber":13,"author":{"gitId":"hyc17003"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Id(null));","lastModifiedDate":"2023-11-07"},{"lineNumber":14,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":15,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":16,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"    public void constructor_invalidId_throwsIllegalArgumentException() {","lastModifiedDate":"2023-11-07"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"        String invalidId \u003d \"\";","lastModifiedDate":"2023-11-07"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Id(invalidId));","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"    public void isValidId() {","lastModifiedDate":"2023-11-07"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"        // null id","lastModifiedDate":"2023-11-07"},{"lineNumber":25,"author":{"gitId":"hyc17003"},"content":"        assertThrows(NullPointerException.class, () -\u003e Id.isValidId(null));","lastModifiedDate":"2023-11-07"},{"lineNumber":26,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":27,"author":{"gitId":"hyc17003"},"content":"        // invalid id","lastModifiedDate":"2023-11-07"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"        assertFalse(Id.isValidId(\"\")); // empty string","lastModifiedDate":"2023-11-07"},{"lineNumber":29,"author":{"gitId":"hyc17003"},"content":"        assertFalse(Id.isValidId(\" \")); // spaces only","lastModifiedDate":"2023-11-07"},{"lineNumber":30,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"        // valid id","lastModifiedDate":"2023-11-07"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"        assertTrue(Id.isValidId(\"S1234567E\"));","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"hyc17003"},"content":"        assertTrue(Id.isValidId(\"-\")); // one character","lastModifiedDate":"2023-11-07"},{"lineNumber":34,"author":{"gitId":"hyc17003"},"content":"        assertTrue(Id.isValidId(\"t0987654f\")); // long address","lastModifiedDate":"2023-11-07"},{"lineNumber":35,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":37,"author":{"gitId":"hyc17003"},"content":"    @Test","lastModifiedDate":"2023-11-07"},{"lineNumber":38,"author":{"gitId":"hyc17003"},"content":"    public void equals() {","lastModifiedDate":"2023-11-07"},{"lineNumber":39,"author":{"gitId":"hyc17003"},"content":"        Id id \u003d new Id(\"Valid Id\");","lastModifiedDate":"2023-11-07"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":41,"author":{"gitId":"hyc17003"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-11-07"},{"lineNumber":42,"author":{"gitId":"hyc17003"},"content":"        assertTrue(id.equals(new Id(\"Valid Id\")));","lastModifiedDate":"2023-11-07"},{"lineNumber":43,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-11-07"},{"lineNumber":45,"author":{"gitId":"hyc17003"},"content":"        assertTrue(id.equals(id));","lastModifiedDate":"2023-11-07"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"hyc17003"},"content":"        assertFalse(id.equals(null));","lastModifiedDate":"2023-11-07"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"        assertFalse(id.equals(5.0f));","lastModifiedDate":"2023-11-07"},{"lineNumber":52,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-07"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"        assertFalse(id.equals(new Id(\"Other Valid Id\")));","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"hyc17003"},"content":"    }","lastModifiedDate":"2023-11-07"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"}","lastModifiedDate":"2023-11-07"}],"authorContributionMap":{"hyc17003":56}},{"path":"src/test/java/seedu/address/model/person/MedicalHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"WeeeHung"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"public class MedicalHistoryTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"WeeeHung"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e new MedicalHistory(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"    public void constructor_invalidMedicalHistory_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"        String invalidMedicalHistory \u003d \"\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MedicalHistory(invalidMedicalHistory));","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"WeeeHung"},"content":"    public void isValidMedicalHistory() {","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"WeeeHung"},"content":"        // null medical history","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(NullPointerException.class, () -\u003e MedicalHistory.isValidMedicalHistory(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"WeeeHung"},"content":"        // invalid medical history","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(MedicalHistory.isValidMedicalHistory(\"\")); // empty string","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(MedicalHistory.isValidMedicalHistory(\" \")); // spaces only","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"WeeeHung"},"content":"        // valid medical history","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(MedicalHistory.isValidMedicalHistory(\"Diabetes\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(MedicalHistory.isValidMedicalHistory(\"-\")); // one character","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(MedicalHistory.isValidMedicalHistory(\"hypertension\")); // long address","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"        MedicalHistory medicalHistory \u003d new MedicalHistory(\"Valid Medical History\");","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(medicalHistory.equals(new MedicalHistory(\"Valid Medical History\")));","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"WeeeHung"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(medicalHistory.equals(medicalHistory));","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"WeeeHung"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(medicalHistory.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"WeeeHung"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(medicalHistory.equals(5.0f));","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"WeeeHung"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(medicalHistory.equals(new MedicalHistory(\"Other Valid Medical History\")));","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"WeeeHung"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"WeeeHung"},"content":"        String medicalHistoryValue \u003d \"Valid Medical History\";","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"WeeeHung"},"content":"        MedicalHistory medicalHistory \u003d new MedicalHistory(medicalHistoryValue);","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"WeeeHung"},"content":"        // same value","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(medicalHistory.hashCode() \u003d\u003d medicalHistoryValue.hashCode());","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"WeeeHung"},"content":"        // different value","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(medicalHistory.hashCode() !\u003d medicalHistoryValue.hashCode());","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"WeeeHung"},"content":"        return 0;","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"WeeeHung":70}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICALHISTORY;","lastModifiedDate":"2023-11-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"    public void isSamePersonGeneral() {","lastModifiedDate":"2023-11-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"        // same name, all other non-identifying attributes different -\u003e returns true","lastModifiedDate":"2023-11-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"kanna-1"},"content":"                .withAddress(VALID_ADDRESS_BOB).withMedical(VALID_MEDICALHISTORY).build();","lastModifiedDate":"2023-11-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-11-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-11-06"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"    public void isSamePersonName() {","lastModifiedDate":"2023-11-06"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"        // different name, all other attributes same including IC -\u003e returns true","lastModifiedDate":"2023-11-06"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-11-06"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2023-11-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"        // name differs in case, all other attributes same -\u003e returns True","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"kanna-1"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"        // name has trailing spaces, all other attributes same including IC -\u003e returns true","lastModifiedDate":"2023-11-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2023-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2023-10-16"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2023-11-06"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"        // name has trailing spaces, diff IC, all other attributes same -\u003e return false","lastModifiedDate":"2023-11-06"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces)","lastModifiedDate":"2023-11-06"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"                .withId(ALICE.getId().toString()).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-11-06"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"    public void isSamePersonId() {","lastModifiedDate":"2023-11-07"},{"lineNumber":59,"author":{"gitId":"hyc17003"},"content":"        // different id, all other attributes same including name -\u003e returns true","lastModifiedDate":"2023-11-07"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withId(VALID_ID_BOB).build();","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2023-11-06"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-11-06"},{"lineNumber":63,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-11-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":102,"author":{"gitId":"WZWren"},"content":"        String expectedAppt \u003d ALICE.getAppointment().isPresent() ? ALICE.getAppointment().get().toString() : null;","lastModifiedDate":"2023-10-17"},{"lineNumber":103,"author":{"gitId":"hyc17003"},"content":"        String expected \u003d Person.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", id\u003d\" + ALICE.getId()","lastModifiedDate":"2023-11-07"},{"lineNumber":104,"author":{"gitId":"WeeeHung"},"content":"                + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2023-10-12"},{"lineNumber":105,"author":{"gitId":"WeeeHung"},"content":"                + \", email\u003d\" + ALICE.getEmail() + \", address\u003d\" + ALICE.getAddress()","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"WZWren"},"content":"                + \", appointment\u003d\" + expectedAppt","lastModifiedDate":"2023-10-17"},{"lineNumber":107,"author":{"gitId":"kanna-1"},"content":"                + \", medicalHistories\u003d\" + ALICE.getMedicalHistories() + \"}\";","lastModifiedDate":"2023-11-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"hyc17003":6,"WZWren":20,"-":78,"kanna-1":4,"WeeeHung":2}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"kanna-1"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2023-11-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"kanna-1"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2023-11-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList().toString(), uniquePersonList.toString());","lastModifiedDate":"2019-02-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"-":172,"kanna-1":2}},{"path":"src/test/java/seedu/address/model/person/predicates/AppointmentOverlapsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"import org.junit.jupiter.api.BeforeAll;","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"public class AppointmentOverlapsPredicateTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_APPT_MAIN \u003d \"1-Aug-23 0900 1200\";","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_APPT_NO_OVERLAP_START \u003d \"1-Aug-23 0400 0859\";","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_APPT_NO_OVERLAP_END \u003d \"1-Aug-23 1201 1400\";","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_APPT_OVERLAP_END_START \u003d \"1-Aug-23 0859 0900\";","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_APPT_OVERLAP_EXACT_START \u003d \"1-Aug-23 0900 0900\";","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_APPT_OVERLAP_EXACT_END \u003d \"1-Aug-23 1200 1200\";","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_APPT_OVERLAP_START_END \u003d \"1-Aug-23 1200 1201\";","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_APPT_OVERLAP_PERIOD \u003d \"1-Aug-23 0800 1000\";","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_APPT_DIFFERENT_DATE \u003d \"2-Aug-23 0900 1200\";","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"    private static final List\u003cAppointment\u003e queries \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"    @BeforeAll","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"    public static void initializeQueriesArray() throws Exception {","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"        queries.add(Appointment.of(QUERY_APPT_MAIN, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"        queries.add(Appointment.of(QUERY_APPT_NO_OVERLAP_START, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentOverlapsPredicate(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"    public void equals() {","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"        AppointmentOverlapsPredicate firstPredicate \u003d new AppointmentOverlapsPredicate(queries.get(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"        AppointmentOverlapsPredicate secondPredicate \u003d new AppointmentOverlapsPredicate(queries.get(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"        AppointmentOverlapsPredicate firstPredicateCopy \u003d new AppointmentOverlapsPredicate(queries.get(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"WZWren"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"WZWren"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"WZWren"},"content":"        assertEquals(Objects.hash(PREFIX_APPOINTMENT, queries.get(0)),","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"WZWren"},"content":"                new AppointmentOverlapsPredicate(queries.get(0)).hashCode());","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"WZWren"},"content":"        assertEquals(Objects.hash(PREFIX_APPOINTMENT, queries.get(1)),","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"WZWren"},"content":"                new AppointmentOverlapsPredicate(queries.get(1)).hashCode());","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"WZWren"},"content":"    public void test_apptOverlaps_returnsTrue() {","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"WZWren"},"content":"        // Exact overlap","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"WZWren"},"content":"        AppointmentOverlapsPredicate predicate \u003d new AppointmentOverlapsPredicate(queries.get(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_MAIN).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"WZWren"},"content":"        // End-Start overlap","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_OVERLAP_END_START).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"WZWren"},"content":"        // Exact-Start overlap","lastModifiedDate":"2023-10-30"},{"lineNumber":84,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_OVERLAP_EXACT_START).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"WZWren"},"content":"        // Start-End overlap","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_OVERLAP_START_END).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":88,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"WZWren"},"content":"        // Exact-End overlap","lastModifiedDate":"2023-10-30"},{"lineNumber":90,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_OVERLAP_EXACT_END).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":91,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":92,"author":{"gitId":"WZWren"},"content":"        // Period Overlap","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new AppointmentOverlapsPredicate(queries.get(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":94,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_OVERLAP_PERIOD).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":95,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new AppointmentOverlapsPredicate(queries.get(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":96,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_OVERLAP_PERIOD).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":98,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":99,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":100,"author":{"gitId":"WZWren"},"content":"    public void test_apptDoesNotOverlap_returnsFalse() {","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"WZWren"},"content":"        // Test against no appointment","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"WZWren"},"content":"        AppointmentOverlapsPredicate predicate \u003d new AppointmentOverlapsPredicate(queries.get(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":103,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(new PersonBuilder().withoutAppointment().build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":104,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"WZWren"},"content":"        // No overlap from start","lastModifiedDate":"2023-10-30"},{"lineNumber":106,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_NO_OVERLAP_START).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":107,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":108,"author":{"gitId":"WZWren"},"content":"        // No overlap from end","lastModifiedDate":"2023-10-30"},{"lineNumber":109,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_NO_OVERLAP_END).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":110,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":111,"author":{"gitId":"WZWren"},"content":"        // Different dates","lastModifiedDate":"2023-10-30"},{"lineNumber":112,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(new PersonBuilder().withAppointment(QUERY_APPT_DIFFERENT_DATE).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":113,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":115,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":116,"author":{"gitId":"WZWren"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-30"},{"lineNumber":117,"author":{"gitId":"WZWren"},"content":"        AppointmentOverlapsPredicate predicate \u003d new AppointmentOverlapsPredicate(queries.get(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":118,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":119,"author":{"gitId":"WZWren"},"content":"        String expected \u003d AppointmentOverlapsPredicate.class.getCanonicalName()","lastModifiedDate":"2023-10-30"},{"lineNumber":120,"author":{"gitId":"WZWren"},"content":"                + \"{query\u003d\" + queries.get(0).toSaveString() + \"}\";","lastModifiedDate":"2023-10-30"},{"lineNumber":121,"author":{"gitId":"WZWren"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":122,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":123,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"WZWren":123}},{"path":"src/test/java/seedu/address/model/person/predicates/CompositePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"import java.util.LinkedHashSet;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"public class CompositePredicateTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"    public void addTest() {","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"        PredicateStub elemOne \u003d new PredicateStub(-1);","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"        predicate.add(elemOne);","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"        String expectedOneElem \u003d CompositePredicate.class.getCanonicalName() + \"{1\u003d\" + elemOne + \"}\";","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"        assertEquals(expectedOneElem, predicate.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"        PredicateStub elemDupe \u003d new PredicateStub(-1);","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"        predicate.add(elemDupe);","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"        assertEquals(expectedOneElem, predicate.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"        PredicateStub elemTwo \u003d new PredicateStub(1);","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"        predicate.add(elemTwo);","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"        String expectedTwoElem \u003d CompositePredicate.class.getCanonicalName() + \"{1\u003d\" + elemOne + \", 2\u003d\" + elemTwo + \"}\";","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"        assertEquals(expectedTwoElem, predicate.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"    public void equals() {","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicateMain \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicateDiff \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"        predicateMain.add(new PredicateStub(-1));","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"        predicateDiff.add(new PredicateStub(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicateMain.equals(predicateMain));","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicateSame \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"        predicateSame.add(new PredicateStub(-1));","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicateMain.equals(predicateSame));","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicateMain.equals(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicateMain.equals(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicateMain.equals(predicateDiff));","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"WZWren"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":69,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(-1));","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicateDiff \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"WZWren"},"content":"        predicateDiff.add(new PredicateStub(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":73,"author":{"gitId":"WZWren"},"content":"        Set\u003cPredicate\u003cPerson\u003e\u003e predicateSet \u003d new LinkedHashSet\u003c\u003e();","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"WZWren"},"content":"        predicateSet.add(new PredicateStub(-1));","lastModifiedDate":"2023-10-30"},{"lineNumber":75,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"WZWren"},"content":"        assertEquals(Objects.hash(\"CompositeSet\", predicateSet), predicate.hashCode());","lastModifiedDate":"2023-10-30"},{"lineNumber":77,"author":{"gitId":"WZWren"},"content":"        assertNotEquals(predicateDiff.hashCode(), predicate.hashCode());","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"    public void test_singletonComposition_shouldReflectSingletonLogic() {","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"WZWren"},"content":"        // base case always passes","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":84,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(ALICE));","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(BENSON));","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"WZWren"},"content":"        // composition with logical stub passes if ALICE is passed in","lastModifiedDate":"2023-10-30"},{"lineNumber":88,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":89,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":90,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(ALICE));","lastModifiedDate":"2023-10-30"},{"lineNumber":91,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(BENSON));","lastModifiedDate":"2023-10-30"},{"lineNumber":92,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":93,"author":{"gitId":"WZWren"},"content":"        // composition with falsy stub always fails","lastModifiedDate":"2023-10-30"},{"lineNumber":94,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":95,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(-1));","lastModifiedDate":"2023-10-30"},{"lineNumber":96,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(ALICE));","lastModifiedDate":"2023-10-30"},{"lineNumber":97,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(BENSON));","lastModifiedDate":"2023-10-30"},{"lineNumber":98,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":99,"author":{"gitId":"WZWren"},"content":"        // composition with truthy stub always passes","lastModifiedDate":"2023-10-30"},{"lineNumber":100,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(ALICE));","lastModifiedDate":"2023-10-30"},{"lineNumber":103,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(BENSON));","lastModifiedDate":"2023-10-30"},{"lineNumber":104,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":106,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":107,"author":{"gitId":"WZWren"},"content":"    public void test_multipleComposition_shouldReflectAndLogic() {","lastModifiedDate":"2023-10-30"},{"lineNumber":108,"author":{"gitId":"WZWren"},"content":"        CompositePredicate predicate;","lastModifiedDate":"2023-10-30"},{"lineNumber":109,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":110,"author":{"gitId":"WZWren"},"content":"        // composition with truthy stubs always passes","lastModifiedDate":"2023-10-30"},{"lineNumber":111,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":112,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(2));","lastModifiedDate":"2023-10-30"},{"lineNumber":113,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":114,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(ALICE));","lastModifiedDate":"2023-10-30"},{"lineNumber":115,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(BENSON));","lastModifiedDate":"2023-10-30"},{"lineNumber":116,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":117,"author":{"gitId":"WZWren"},"content":"        // composition with logical stubs pass for conditions if all other conditions are true","lastModifiedDate":"2023-10-30"},{"lineNumber":118,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":119,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(2));","lastModifiedDate":"2023-10-30"},{"lineNumber":120,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":121,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":122,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(ALICE));","lastModifiedDate":"2023-10-30"},{"lineNumber":123,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(BENSON));","lastModifiedDate":"2023-10-30"},{"lineNumber":124,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":125,"author":{"gitId":"WZWren"},"content":"        // composition with falsy stubs always fails","lastModifiedDate":"2023-10-30"},{"lineNumber":126,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":127,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(-2));","lastModifiedDate":"2023-10-30"},{"lineNumber":128,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(-1));","lastModifiedDate":"2023-10-30"},{"lineNumber":129,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(ALICE));","lastModifiedDate":"2023-10-30"},{"lineNumber":130,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(BENSON));","lastModifiedDate":"2023-10-30"},{"lineNumber":131,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":132,"author":{"gitId":"WZWren"},"content":"        // composition with any falsy stub always fails","lastModifiedDate":"2023-10-30"},{"lineNumber":133,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new CompositePredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":134,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":135,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(0));","lastModifiedDate":"2023-10-30"},{"lineNumber":136,"author":{"gitId":"WZWren"},"content":"        predicate.add(new PredicateStub(-1));","lastModifiedDate":"2023-10-30"},{"lineNumber":137,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(ALICE));","lastModifiedDate":"2023-10-30"},{"lineNumber":138,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(BENSON));","lastModifiedDate":"2023-10-30"},{"lineNumber":139,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":140,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":141,"author":{"gitId":"WZWren"},"content":"    private static class PredicateStub implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2023-10-30"},{"lineNumber":142,"author":{"gitId":"WZWren"},"content":"        // -ve for falsy, 0 for logical, +ve for truthy","lastModifiedDate":"2023-10-30"},{"lineNumber":143,"author":{"gitId":"WZWren"},"content":"        private final int state;","lastModifiedDate":"2023-10-30"},{"lineNumber":144,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":145,"author":{"gitId":"WZWren"},"content":"        private PredicateStub(int state) {","lastModifiedDate":"2023-10-30"},{"lineNumber":146,"author":{"gitId":"WZWren"},"content":"            this.state \u003d state;","lastModifiedDate":"2023-10-30"},{"lineNumber":147,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":148,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":149,"author":{"gitId":"WZWren"},"content":"        @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":150,"author":{"gitId":"WZWren"},"content":"        public boolean test(Person person) {","lastModifiedDate":"2023-10-30"},{"lineNumber":151,"author":{"gitId":"WZWren"},"content":"            if (state \u003c 0) {","lastModifiedDate":"2023-10-30"},{"lineNumber":152,"author":{"gitId":"WZWren"},"content":"                return false;","lastModifiedDate":"2023-10-30"},{"lineNumber":153,"author":{"gitId":"WZWren"},"content":"            }","lastModifiedDate":"2023-10-30"},{"lineNumber":154,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":155,"author":{"gitId":"WZWren"},"content":"            if (state \u003e 0) {","lastModifiedDate":"2023-10-30"},{"lineNumber":156,"author":{"gitId":"WZWren"},"content":"                return true;","lastModifiedDate":"2023-10-30"},{"lineNumber":157,"author":{"gitId":"WZWren"},"content":"            }","lastModifiedDate":"2023-10-30"},{"lineNumber":158,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":159,"author":{"gitId":"WZWren"},"content":"            return person.equals(ALICE);","lastModifiedDate":"2023-10-30"},{"lineNumber":160,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":161,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":162,"author":{"gitId":"WZWren"},"content":"        @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":163,"author":{"gitId":"WZWren"},"content":"        public int hashCode() {","lastModifiedDate":"2023-10-30"},{"lineNumber":164,"author":{"gitId":"WZWren"},"content":"            return state;","lastModifiedDate":"2023-10-30"},{"lineNumber":165,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":166,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":167,"author":{"gitId":"WZWren"},"content":"        @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":168,"author":{"gitId":"WZWren"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2023-10-30"},{"lineNumber":169,"author":{"gitId":"WZWren"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-30"},{"lineNumber":170,"author":{"gitId":"WZWren"},"content":"                return true;","lastModifiedDate":"2023-10-30"},{"lineNumber":171,"author":{"gitId":"WZWren"},"content":"            }","lastModifiedDate":"2023-10-30"},{"lineNumber":172,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":173,"author":{"gitId":"WZWren"},"content":"            // instanceof handles nulls","lastModifiedDate":"2023-10-30"},{"lineNumber":174,"author":{"gitId":"WZWren"},"content":"            if (!(other instanceof PredicateStub)) {","lastModifiedDate":"2023-10-30"},{"lineNumber":175,"author":{"gitId":"WZWren"},"content":"                return false;","lastModifiedDate":"2023-10-30"},{"lineNumber":176,"author":{"gitId":"WZWren"},"content":"            }","lastModifiedDate":"2023-10-30"},{"lineNumber":177,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":178,"author":{"gitId":"WZWren"},"content":"            PredicateStub otherStub \u003d (PredicateStub) other;","lastModifiedDate":"2023-10-30"},{"lineNumber":179,"author":{"gitId":"WZWren"},"content":"            return state \u003d\u003d otherStub.state;","lastModifiedDate":"2023-10-30"},{"lineNumber":180,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":181,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":182,"author":{"gitId":"WZWren"},"content":"        @Override","lastModifiedDate":"2023-10-30"},{"lineNumber":183,"author":{"gitId":"WZWren"},"content":"        public String toString() {","lastModifiedDate":"2023-10-30"},{"lineNumber":184,"author":{"gitId":"WZWren"},"content":"            return \"Stub state: \" + state;","lastModifiedDate":"2023-10-30"},{"lineNumber":185,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-30"},{"lineNumber":186,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":187,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"WZWren":187}},{"path":"src/test/java/seedu/address/model/person/predicates/IdContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"import java.util.List;","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"public class IdContainsKeywordsPredicateTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"hyc17003"},"content":"    private static final String QUERY_ID_1 \u003d \"T0123456I\";","lastModifiedDate":"2023-11-07"},{"lineNumber":19,"author":{"gitId":"hyc17003"},"content":"    private static final String QUERY_ID_2 \u003d \"T2468101Z\";","lastModifiedDate":"2023-11-07"},{"lineNumber":20,"author":{"gitId":"hyc17003"},"content":"    private static final List\u003cString\u003e FIRST_KEYWORD_LIST \u003d Collections.singletonList(QUERY_ID_1);","lastModifiedDate":"2023-11-07"},{"lineNumber":21,"author":{"gitId":"hyc17003"},"content":"    private static final List\u003cString\u003e SECOND_KEYWORD_LIST \u003d Arrays.asList(QUERY_ID_1, QUERY_ID_2);","lastModifiedDate":"2023-11-07"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"    public void equals() {","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"        IdContainsKeywordsPredicate firstPredicate \u003d new IdContainsKeywordsPredicate(FIRST_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"        IdContainsKeywordsPredicate secondPredicate \u003d new IdContainsKeywordsPredicate(SECOND_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"        IdContainsKeywordsPredicate firstPredicateCopy \u003d new IdContainsKeywordsPredicate(FIRST_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"hyc17003"},"content":"        assertEquals(Objects.hash(PREFIX_ID, FIRST_KEYWORD_LIST),","lastModifiedDate":"2023-11-07"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"                new IdContainsKeywordsPredicate(FIRST_KEYWORD_LIST).hashCode());","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"        assertEquals(Objects.hash(PREFIX_ID, SECOND_KEYWORD_LIST),","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"                new IdContainsKeywordsPredicate(SECOND_KEYWORD_LIST).hashCode());","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"hyc17003"},"content":"    public void test_idContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-11-07"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"        // Exact Match","lastModifiedDate":"2023-10-30"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"        IdContainsKeywordsPredicate predicate \u003d new IdContainsKeywordsPredicate(FIRST_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":57,"author":{"gitId":"hyc17003"},"content":"        assertTrue(predicate.test(new PersonBuilder().withId(QUERY_ID_1).build()));","lastModifiedDate":"2023-11-07"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"        // Lower-case keywords","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"hyc17003"},"content":"        predicate \u003d new IdContainsKeywordsPredicate(Collections.singletonList(QUERY_ID_1.toLowerCase()));","lastModifiedDate":"2023-11-07"},{"lineNumber":61,"author":{"gitId":"hyc17003"},"content":"        assertTrue(predicate.test(new PersonBuilder().withId(QUERY_ID_1).build()));","lastModifiedDate":"2023-11-07"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":64,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":65,"author":{"gitId":"hyc17003"},"content":"    public void test_idDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-11-07"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"        // Zero keywords","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"WZWren"},"content":"        IdContainsKeywordsPredicate predicate \u003d new IdContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2023-10-30"},{"lineNumber":68,"author":{"gitId":"hyc17003"},"content":"        assertFalse(predicate.test(new PersonBuilder().withId(QUERY_ID_1).build()));","lastModifiedDate":"2023-11-07"},{"lineNumber":69,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"WZWren"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new IdContainsKeywordsPredicate(FIRST_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"hyc17003"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(QUERY_ID_2).build()));","lastModifiedDate":"2023-11-07"},{"lineNumber":73,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":74,"author":{"gitId":"hyc17003"},"content":"        // Keywords match phone, email and address, but does not match id","lastModifiedDate":"2023-11-07"},{"lineNumber":75,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new IdContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2023-10-30"},{"lineNumber":76,"author":{"gitId":"hyc17003"},"content":"        assertFalse(predicate.test(new PersonBuilder().withId(QUERY_ID_1).withPhone(\"12345\")","lastModifiedDate":"2023-11-07"},{"lineNumber":77,"author":{"gitId":"WZWren"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":78,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":80,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"WZWren"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"WZWren"},"content":"        IdContainsKeywordsPredicate predicate \u003d new IdContainsKeywordsPredicate(keywords);","lastModifiedDate":"2023-10-30"},{"lineNumber":84,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":85,"author":{"gitId":"WZWren"},"content":"        String expected \u003d IdContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2023-10-30"},{"lineNumber":86,"author":{"gitId":"WZWren"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":88,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"hyc17003":16,"WZWren":72}},{"path":"src/test/java/seedu/address/model/person/predicates/IdentityPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":3,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-30"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-30"},{"lineNumber":5,"author":{"gitId":"WZWren"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-30"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":8,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"WZWren"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":13,"author":{"gitId":"WZWren"},"content":"public class IdentityPredicateTest {","lastModifiedDate":"2023-10-30"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"    public void equals() {","lastModifiedDate":"2023-10-30"},{"lineNumber":17,"author":{"gitId":"WZWren"},"content":"        IdentityPredicate firstPredicate \u003d new IdentityPredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"WZWren"},"content":"        assertTrue(firstPredicate.equals(new IdentityPredicate()));","lastModifiedDate":"2023-10-30"},{"lineNumber":24,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":25,"author":{"gitId":"WZWren"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-30"},{"lineNumber":29,"author":{"gitId":"WZWren"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":30,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":31,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":32,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"        assertEquals(Objects.hash(true), new IdentityPredicate().hashCode());","lastModifiedDate":"2023-10-30"},{"lineNumber":35,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":37,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"    public void test_anyValue_returnsTrue() {","lastModifiedDate":"2023-10-30"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"        IdentityPredicate predicate \u003d new IdentityPredicate();","lastModifiedDate":"2023-10-30"},{"lineNumber":40,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":41,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(null));","lastModifiedDate":"2023-10-30"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"        String expected \u003d IdentityPredicate.class.getCanonicalName() + \"{identity\u003d\" + true + \"}\";","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"        assertEquals(expected, new IdentityPredicate().toString());","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"}","lastModifiedDate":"2023-10-30"}],"authorContributionMap":{"WZWren":50}},{"path":"src/test/java/seedu/address/model/person/predicates/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WZWren"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2023-10-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"WZWren"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_NAME_1 \u003d \"Alice\";","lastModifiedDate":"2023-10-30"},{"lineNumber":19,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_NAME_2 \u003d \"Bob\";","lastModifiedDate":"2023-10-30"},{"lineNumber":20,"author":{"gitId":"WZWren"},"content":"    private static final String QUERY_NAME_3 \u003d \"Carol\";","lastModifiedDate":"2023-10-30"},{"lineNumber":21,"author":{"gitId":"WZWren"},"content":"    private static final List\u003cString\u003e FIRST_KEYWORD_LIST \u003d Collections.singletonList(QUERY_NAME_1);","lastModifiedDate":"2023-10-30"},{"lineNumber":22,"author":{"gitId":"WZWren"},"content":"    private static final List\u003cString\u003e SECOND_KEYWORD_LIST \u003d Arrays.asList(QUERY_NAME_1, QUERY_NAME_2);","lastModifiedDate":"2023-10-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"WZWren"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(FIRST_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(SECOND_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(FIRST_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-30"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"    public void hashCodeTest() {","lastModifiedDate":"2023-10-30"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"        assertEquals(Objects.hash(PREFIX_NAME, FIRST_KEYWORD_LIST),","lastModifiedDate":"2023-10-30"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"                new NameContainsKeywordsPredicate(FIRST_KEYWORD_LIST).hashCode());","lastModifiedDate":"2023-10-30"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"        assertEquals(Objects.hash(PREFIX_NAME, SECOND_KEYWORD_LIST),","lastModifiedDate":"2023-10-30"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"                new NameContainsKeywordsPredicate(SECOND_KEYWORD_LIST).hashCode());","lastModifiedDate":"2023-10-30"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":53,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"WZWren"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(FIRST_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(QUERY_NAME_1 + \" \" + QUERY_NAME_2).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(SECOND_KEYWORD_LIST);","lastModifiedDate":"2023-10-30"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(QUERY_NAME_1 + \" \" + QUERY_NAME_2).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(QUERY_NAME_2, QUERY_NAME_3));","lastModifiedDate":"2023-10-30"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(QUERY_NAME_1 + \" \" + QUERY_NAME_3).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(","lastModifiedDate":"2023-10-30"},{"lineNumber":70,"author":{"gitId":"WZWren"},"content":"                Arrays.asList(QUERY_NAME_1.toUpperCase(), QUERY_NAME_2.toLowerCase()));","lastModifiedDate":"2023-10-30"},{"lineNumber":71,"author":{"gitId":"WZWren"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(QUERY_NAME_1 + \" \" + QUERY_NAME_2).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(QUERY_NAME_1).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"WZWren"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(QUERY_NAME_3));","lastModifiedDate":"2023-10-30"},{"lineNumber":82,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(QUERY_NAME_1 + \" \" + QUERY_NAME_2).build()));","lastModifiedDate":"2023-10-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":86,"author":{"gitId":"WZWren"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(QUERY_NAME_1).withPhone(\"12345\")","lastModifiedDate":"2023-10-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expected \u003d NameContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"WZWren":32,"-":66}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedMedicalHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WeeeHung"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"WeeeHung"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"WeeeHung"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"WeeeHung"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"WeeeHung"},"content":"public class JsonAdaptedMedicalHistoryTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"WeeeHung"},"content":"    public void getMedicalHistoryName() {","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"WeeeHung"},"content":"        JsonAdaptedMedicalHistory medicalHistory \u003d new JsonAdaptedMedicalHistory(\"Diabetes\");","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"WeeeHung"},"content":"        assertTrue(medicalHistory.getMedicalHistoryName() \u003d\u003d \"Diabetes\");","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":"        assertFalse(medicalHistory.getMedicalHistoryName() \u003d\u003d \"Hypertension\");","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"WeeeHung"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"WeeeHung":18}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"hyc17003"},"content":"    private static final String INVALID_ID \u003d \" \";","lastModifiedDate":"2023-11-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_APPOINTMENT_FORMAT \u003d \" \";","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"    private static final String INVALID_APPOINTMENT_VALUES \u003d \"30-Feb-2023, 10:30, 11:30\";","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"WeeeHung"},"content":"    private static final String INVALID_MEDICALHISTORIES \u003d \"# \";","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"    private static final String VALID_ID \u003d \"T0123456E\";","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"WZWren"},"content":"    private static final String VALID_APPOINTMENT \u003d BENSON.getAppointment().get().toSaveString();","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"WeeeHung"},"content":"    private static final List\u003cJsonAdaptedMedicalHistory\u003e VALID_MEDICALHISTORIES \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"WeeeHung"},"content":"                    new ArrayList\u003cJsonAdaptedMedicalHistory\u003e() {{","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"WeeeHung"},"content":"                add(new JsonAdaptedMedicalHistory(\"Diabetes\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"WeeeHung"},"content":"                }};","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"WZWren"},"content":"    public void toModelType_nullAppointment_returnsPerson() throws IllegalValueException {","lastModifiedDate":"2023-10-17"},{"lineNumber":51,"author":{"gitId":"hyc17003"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_ID, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-11-07"},{"lineNumber":52,"author":{"gitId":"kanna-1"},"content":"                VALID_ADDRESS, null, VALID_MEDICALHISTORIES);","lastModifiedDate":"2023-11-05"},{"lineNumber":53,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":54,"author":{"gitId":"WZWren"},"content":"        person.toModelType();","lastModifiedDate":"2023-10-17"},{"lineNumber":55,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":56,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"kanna-1"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS);","lastModifiedDate":"2023-11-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"kanna-1"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS);","lastModifiedDate":"2023-11-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"kanna-1"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS);","lastModifiedDate":"2023-11-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"kanna-1"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS);","lastModifiedDate":"2023-11-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"kanna-1"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS);","lastModifiedDate":"2023-11-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"kanna-1"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS);","lastModifiedDate":"2023-11-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"kanna-1"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS);","lastModifiedDate":"2023-11-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"kanna-1"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null);","lastModifiedDate":"2023-11-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"hyc17003"},"content":"    public void toModelType_invalidId_throwsIllegalValueException() {","lastModifiedDate":"2023-11-07"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"hyc17003"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_ID, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2023-11-07"},{"lineNumber":121,"author":{"gitId":"kanna-1"},"content":"                        VALID_APPOINTMENT, VALID_MEDICALHISTORIES);","lastModifiedDate":"2023-11-05"},{"lineNumber":122,"author":{"gitId":"hyc17003"},"content":"        String expectedMessage \u003d Id.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-11-07"},{"lineNumber":123,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"hyc17003"},"content":"    public void toModelType_nullId_throwsIllegalValueException() {","lastModifiedDate":"2023-11-07"},{"lineNumber":128,"author":{"gitId":"WeeeHung"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"kanna-1"},"content":"                VALID_ADDRESS, VALID_APPOINTMENT, VALID_MEDICALHISTORIES);","lastModifiedDate":"2023-11-05"},{"lineNumber":130,"author":{"gitId":"hyc17003"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Id.class.getSimpleName());","lastModifiedDate":"2023-11-07"},{"lineNumber":131,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":132,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"WeeeHung"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"WZWren"},"content":"    public void toModelType_invalidAppointmentFormat_throwsIllegalValueException() {","lastModifiedDate":"2023-10-29"},{"lineNumber":136,"author":{"gitId":"WeeeHung"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"hyc17003"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ID, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2023-11-07"},{"lineNumber":138,"author":{"gitId":"kanna-1"},"content":"                        INVALID_APPOINTMENT_FORMAT, VALID_MEDICALHISTORIES);","lastModifiedDate":"2023-11-05"},{"lineNumber":139,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":140,"author":{"gitId":"WZWren"},"content":"        String expectedMessage \u003d Appointment.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-29"},{"lineNumber":141,"author":{"gitId":"WZWren"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-29"},{"lineNumber":142,"author":{"gitId":"WZWren"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":143,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":144,"author":{"gitId":"WZWren"},"content":"    @Test","lastModifiedDate":"2023-10-29"},{"lineNumber":145,"author":{"gitId":"WZWren"},"content":"    public void toModelType_invalidAppointmentValues_throwsIllegalValueException() {","lastModifiedDate":"2023-10-29"},{"lineNumber":146,"author":{"gitId":"WZWren"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-10-29"},{"lineNumber":147,"author":{"gitId":"hyc17003"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_ID, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2023-11-07"},{"lineNumber":148,"author":{"gitId":"kanna-1"},"content":"                        INVALID_APPOINTMENT_VALUES, VALID_MEDICALHISTORIES);","lastModifiedDate":"2023-11-05"},{"lineNumber":149,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":150,"author":{"gitId":"WeeeHung"},"content":"        String expectedMessage \u003d Appointment.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-13"},{"lineNumber":151,"author":{"gitId":"WeeeHung"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":152,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hyc17003":15,"WZWren":16,"-":92,"kanna-1":13,"WeeeHung":17}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"WeeeHung"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"healthsync.json\"));","lastModifiedDate":"2023-11-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataLoadingException, IOException {","lastModifiedDate":"2023-06-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":122,"WeeeHung":1}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"kanna-1"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.exceptions.BadAppointmentFormatException;","lastModifiedDate":"2023-10-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"kanna-1"},"content":"        descriptor.setAppointment(person.getAppointment().get());","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"kanna-1"},"content":"        descriptor.setMedicalHistories(person.getMedicalHistories());","lastModifiedDate":"2023-11-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"kanna-1"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"kanna-1"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-10-16"},{"lineNumber":56,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"kanna-1"},"content":"    public EditPersonDescriptorBuilder withAppointment(String appointment) {","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"WZWren"},"content":"        try {","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"WZWren"},"content":"            descriptor.setAppointment(Appointment.of(appointment, InputSource.USER_INPUT));","lastModifiedDate":"2023-10-29"},{"lineNumber":60,"author":{"gitId":"WZWren"},"content":"        } catch (BadAppointmentFormatException e) {","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"WZWren"},"content":"            throw new IllegalStateException(","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"WZWren"},"content":"                    \"Encountered an error with Appointment for EditPersonDescriptorBuilder.\", e);","lastModifiedDate":"2023-10-28"},{"lineNumber":63,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":64,"author":{"gitId":"kanna-1"},"content":"        return this;","lastModifiedDate":"2023-10-16"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":91,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":93,"author":{"gitId":"kanna-1"},"content":"     * Parses the {@code medicalHistories} into a {@code Set\u003cMedicalHistory\u003e} and set","lastModifiedDate":"2023-10-16"},{"lineNumber":94,"author":{"gitId":"kanna-1"},"content":"     * it to the {@code EditPersonDescriptor}","lastModifiedDate":"2023-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2023-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":97,"author":{"gitId":"kanna-1"},"content":"    public EditPersonDescriptorBuilder withMedicalHistories(String... medicalHistories) {","lastModifiedDate":"2023-10-16"},{"lineNumber":98,"author":{"gitId":"kanna-1"},"content":"        Set\u003cMedicalHistory\u003e medicalHistorySet \u003d","lastModifiedDate":"2023-10-16"},{"lineNumber":99,"author":{"gitId":"kanna-1"},"content":"                Stream.of(medicalHistories).map(MedicalHistory::new).collect(Collectors.toSet());","lastModifiedDate":"2023-10-16"},{"lineNumber":100,"author":{"gitId":"kanna-1"},"content":"        descriptor.setMedicalHistories(medicalHistorySet);","lastModifiedDate":"2023-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2023-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":104,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"WZWren":8,"-":81,"kanna-1":19}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"import seedu.address.model.person.Id;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"nubnubyas"},"content":"import seedu.address.model.person.MedicalHistory;","lastModifiedDate":"2023-10-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.enums.InputSource;","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"WZWren"},"content":"import seedu.address.model.person.exceptions.BadAppointmentFormatException;","lastModifiedDate":"2023-10-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"hyc17003"},"content":"    public static final String DEFAULT_ID \u003d \"T4651323H\";","lastModifiedDate":"2023-11-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"WZWren"},"content":"    public static final String DEFAULT_APPOINTMENT \u003d \"10-Jan-2023 10:00 12:00\";","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"hyc17003"},"content":"    private Id id;","lastModifiedDate":"2023-11-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"nubnubyas"},"content":"    private Appointment appointment;","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"nubnubyas"},"content":"    private Set\u003cMedicalHistory\u003e medicalHistories;","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"        try {","lastModifiedDate":"2023-10-28"},{"lineNumber":43,"author":{"gitId":"WZWren"},"content":"            appointment \u003d Appointment.of(DEFAULT_APPOINTMENT, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"        } catch (BadAppointmentFormatException e) {","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"            throw new IllegalStateException(","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"WZWren"},"content":"                    \"Encountered an error with Appointment for PersonBuilder.\", e);","lastModifiedDate":"2023-10-28"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"        id \u003d new Id(DEFAULT_ID);","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"nubnubyas"},"content":"        medicalHistories \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"hyc17003"},"content":"        id \u003d personToCopy.getId();","lastModifiedDate":"2023-11-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"kanna-1"},"content":"        medicalHistories \u003d new HashSet\u003c\u003e(personToCopy.getMedicalHistories());","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"WZWren"},"content":"        appointment \u003d personToCopy.getAppointment().isPresent() ? personToCopy.getAppointment().get() : null;","lastModifiedDate":"2023-10-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":78,"author":{"gitId":"hyc17003"},"content":"     * Sets the {@code Id} of the {@code Person} that we are building.","lastModifiedDate":"2023-11-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":80,"author":{"gitId":"hyc17003"},"content":"    public PersonBuilder withId(String id) {","lastModifiedDate":"2023-11-07"},{"lineNumber":81,"author":{"gitId":"hyc17003"},"content":"        this.id \u003d new Id(id);","lastModifiedDate":"2023-11-07"},{"lineNumber":82,"author":{"gitId":"nubnubyas"},"content":"        return this;","lastModifiedDate":"2023-10-18"},{"lineNumber":83,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":84,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"kanna-1"},"content":"     * Sets the {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-16"},{"lineNumber":87,"author":{"gitId":"kanna-1"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":88,"author":{"gitId":"kanna-1"},"content":"    public PersonBuilder withAppointment(String appointment) {","lastModifiedDate":"2023-10-16"},{"lineNumber":89,"author":{"gitId":"WZWren"},"content":"        try {","lastModifiedDate":"2023-10-28"},{"lineNumber":90,"author":{"gitId":"WZWren"},"content":"            this.appointment \u003d Appointment.of(appointment, InputSource.USER_INPUT);","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"WZWren"},"content":"        } catch (BadAppointmentFormatException e) {","lastModifiedDate":"2023-10-28"},{"lineNumber":92,"author":{"gitId":"WZWren"},"content":"            throw new IllegalStateException(","lastModifiedDate":"2023-10-28"},{"lineNumber":93,"author":{"gitId":"WZWren"},"content":"                    \"Encountered an error with Appointment for PersonBuilder.\", e);","lastModifiedDate":"2023-10-28"},{"lineNumber":94,"author":{"gitId":"WZWren"},"content":"        }","lastModifiedDate":"2023-10-28"},{"lineNumber":95,"author":{"gitId":"kanna-1"},"content":"        return this;","lastModifiedDate":"2023-10-16"},{"lineNumber":96,"author":{"gitId":"kanna-1"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":97,"author":{"gitId":"kanna-1"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":98,"author":{"gitId":"WZWren"},"content":"    /**","lastModifiedDate":"2023-10-30"},{"lineNumber":99,"author":{"gitId":"WZWren"},"content":"     * Sets the {@code Appointment} of the {@code Person} that we are building to null.","lastModifiedDate":"2023-10-30"},{"lineNumber":100,"author":{"gitId":"WZWren"},"content":"     */","lastModifiedDate":"2023-10-30"},{"lineNumber":101,"author":{"gitId":"WZWren"},"content":"    public PersonBuilder withoutAppointment() {","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"WZWren"},"content":"        this.appointment \u003d null;","lastModifiedDate":"2023-10-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2023-10-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":130,"author":{"gitId":"nubnubyas"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":131,"author":{"gitId":"kanna-1"},"content":"     * @return the person.","lastModifiedDate":"2023-10-16"},{"lineNumber":132,"author":{"gitId":"nubnubyas"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":134,"author":{"gitId":"hyc17003"},"content":"        return new Person(name, id, phone, email, address,","lastModifiedDate":"2023-11-07"},{"lineNumber":135,"author":{"gitId":"kanna-1"},"content":"                appointment, medicalHistories);","lastModifiedDate":"2023-11-05"},{"lineNumber":136,"author":{"gitId":"hyc17003"},"content":"","lastModifiedDate":"2023-11-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":139,"author":{"gitId":"nubnubyas"},"content":"    /**","lastModifiedDate":"2023-10-18"},{"lineNumber":140,"author":{"gitId":"nubnubyas"},"content":"     * Sets the {@code MedicalHistory} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-18"},{"lineNumber":141,"author":{"gitId":"nubnubyas"},"content":"     */","lastModifiedDate":"2023-10-18"},{"lineNumber":142,"author":{"gitId":"nubnubyas"},"content":"    public PersonBuilder withMedical(String... medicalHistories) {","lastModifiedDate":"2023-10-18"},{"lineNumber":143,"author":{"gitId":"nubnubyas"},"content":"        this.medicalHistories \u003d SampleDataUtil.getMedicalHistorySet(medicalHistories);","lastModifiedDate":"2023-10-18"},{"lineNumber":144,"author":{"gitId":"nubnubyas"},"content":"        return this;","lastModifiedDate":"2023-10-18"},{"lineNumber":145,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"nubnubyas":17,"hyc17003":10,"WZWren":21,"-":89,"kanna-1":9}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"WZWren"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT;","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ID;","lastModifiedDate":"2023-11-07"},{"lineNumber":7,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL;","lastModifiedDate":"2023-11-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"nubnubyas"},"content":"    /**","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"nubnubyas"},"content":"     * Returns an add command string using the alias for adding the {@code person}.","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"nubnubyas"},"content":"     */","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"nubnubyas"},"content":"    public static String getAddCommandAlias(Person person) {","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"nubnubyas"},"content":"        return AddCommand.COMMAND_WORD_ALIAS + \" \" + getPersonDetails(person);","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"nubnubyas"},"content":"    }","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"nubnubyas"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"        sb.append(PREFIX_ID + person.getId().value + \" \");","lastModifiedDate":"2023-11-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"WZWren"},"content":"        person.getAppointment().ifPresent((appt) -\u003e sb.append(PREFIX_APPOINTMENT + appt.toSaveString() + \" \"));","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"        person.getMedicalHistories().stream().forEach(","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"kanna-1"},"content":"                s -\u003e sb.append(PREFIX_MEDICAL + s.value + \" \")","lastModifiedDate":"2023-11-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"hyc17003":2,"nubnubyas":7,"WZWren":3,"-":48,"kanna-1":2}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"kanna-1"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT;","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_AMY;","lastModifiedDate":"2023-11-07"},{"lineNumber":9,"author":{"gitId":"hyc17003"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ID_BOB;","lastModifiedDate":"2023-11-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"WeeeHung"},"content":"import seedu.address.model.LogBook;","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"hyc17003"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withId(\"T7243948H\")","lastModifiedDate":"2023-11-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"kanna-1"},"content":"            .withAppointment(\"12-Dec-2023 12:00 15:00\").withPhone(\"94351253\")","lastModifiedDate":"2023-11-05"},{"lineNumber":31,"author":{"gitId":"nubnubyas"},"content":"            .withMedical(\"tachycardia\").build();","lastModifiedDate":"2023-11-02"},{"lineNumber":32,"author":{"gitId":"hyc17003"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withId(\"S1234567B\")","lastModifiedDate":"2023-11-07"},{"lineNumber":33,"author":{"gitId":"WZWren"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withAppointment(\"12-Dec-2023 12:00 15:00\")","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"WZWren"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withMedical(\"diabetes\", \"high-risk\")","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"kanna-1"},"content":"            .build();","lastModifiedDate":"2023-11-05"},{"lineNumber":36,"author":{"gitId":"hyc17003"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withId(\"S8765432B\")","lastModifiedDate":"2023-11-07"},{"lineNumber":37,"author":{"gitId":"kanna-1"},"content":"            .withPhone(\"95352563\").withEmail(\"heinz@example.com\")","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"WZWren"},"content":"            .withAddress(\"wall street\").withAppointment(\"01-Jan-2023 10:00 12:00\")","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"WZWren"},"content":"            .withMedical(\"O\u003d Blood Type\").build();","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"hyc17003"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withId(\"T1234567I\")","lastModifiedDate":"2023-11-07"},{"lineNumber":41,"author":{"gitId":"kanna-1"},"content":"            .withPhone(\"87652533\").withEmail(\"cornelia@example.com\")","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"WZWren"},"content":"            .withAddress(\"10th street\").withAppointment(\"01-Jan-2023 10:00 12:00\")","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"kanna-1"},"content":"            .build();","lastModifiedDate":"2023-11-05"},{"lineNumber":44,"author":{"gitId":"hyc17003"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withId(\"T1111111Z\")","lastModifiedDate":"2023-11-07"},{"lineNumber":45,"author":{"gitId":"WZWren"},"content":"            .withPhone(\"9482224\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"hyc17003"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withId(\"M2222222Z\")","lastModifiedDate":"2023-11-07"},{"lineNumber":47,"author":{"gitId":"WZWren"},"content":"            .withPhone(\"9482427\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"WZWren"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"hyc17003"},"content":"    // TODO: Replace George ID with non-duplicate after EditCommand is implemented.","lastModifiedDate":"2023-11-07"},{"lineNumber":50,"author":{"gitId":"hyc17003"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withId(\"G2767543H\")","lastModifiedDate":"2023-11-07"},{"lineNumber":51,"author":{"gitId":"WZWren"},"content":"            .withAppointment(\"12-Dec-2023 12:00 15:00\").withPhone(\"9482442\").withEmail(\"anna@example.com\")","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"WZWren"},"content":"            .withAddress(\"4th street\").build();","lastModifiedDate":"2023-10-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"hyc17003"},"content":"            .withId(\"S3333333H\").withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2023-11-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"hyc17003"},"content":"            .withId(\"T4444444I\").withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2023-11-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"hyc17003"},"content":"            .withAppointment(VALID_APPOINTMENT).withId(VALID_ID_AMY).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2023-11-07"},{"lineNumber":63,"author":{"gitId":"kanna-1"},"content":"            .withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-16"},{"lineNumber":65,"author":{"gitId":"hyc17003"},"content":"            .withAppointment(VALID_APPOINTMENT).withId(VALID_ID_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-11-07"},{"lineNumber":66,"author":{"gitId":"kanna-1"},"content":"            .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-11-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":84,"author":{"gitId":"WeeeHung"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":85,"author":{"gitId":"WeeeHung"},"content":"     * Returns an {@code LogBook} with all the typical persons.","lastModifiedDate":"2023-10-27"},{"lineNumber":86,"author":{"gitId":"WeeeHung"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":87,"author":{"gitId":"WeeeHung"},"content":"    public static LogBook getTypicalLogBook() {","lastModifiedDate":"2023-10-27"},{"lineNumber":88,"author":{"gitId":"WeeeHung"},"content":"        LogBook ab \u003d new LogBook();","lastModifiedDate":"2023-10-27"},{"lineNumber":89,"author":{"gitId":"WeeeHung"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2023-10-27"},{"lineNumber":90,"author":{"gitId":"WeeeHung"},"content":"            ab.addPerson(person);","lastModifiedDate":"2023-10-27"},{"lineNumber":91,"author":{"gitId":"WeeeHung"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"WeeeHung"},"content":"        return ab;","lastModifiedDate":"2023-10-27"},{"lineNumber":93,"author":{"gitId":"WeeeHung"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":94,"author":{"gitId":"WeeeHung"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"hyc17003":14,"nubnubyas":1,"WZWren":10,"-":53,"kanna-1":8,"WeeeHung":12}}]
