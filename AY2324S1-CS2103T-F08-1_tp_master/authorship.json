[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"# CareCentral App README ","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"## üåü Overview","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"CareCentral is an app designed specifically for healthcare professionals, including doctors, nurses, and hospital staff aged between 25-60 years. With a focus on streamlining patient management and appointmentEvent scheduling, CareCentral is the ultimate tool for modern healthcare providers who are comfortable with digital solutions and are looking to enhance efficiency and patient care quality.","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"## ü§î Problem Addressed","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"Healthcare professionals often grapple with the complexities of organizing patient records and ensuring timely appointments. CareCentral addresses these challenges by centralizing these tasks, promoting a more streamlined and efficient medical practice. This not only elevates the quality of patient care but also significantly reduces administrative burdens.","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"## üí™ Value Proposition","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"Elevate your medical practice with CareCentral, your all-in-one digital assistant. Seamlessly manage patient records and ensure punctual appointments. Say goodbye to administrative hassles and focus on what truly matters - providing exceptional patient care.","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"## üöÄ Features (Stay tuned for more!)","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"1. **Create Patient Record** üìù","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"2. **List Patients** üë•","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"3. **Edit Patient Record** ‚úèÔ∏è","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"4. **Delete Patient Record** üóëÔ∏è","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"## üôè Acknowledgements","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"We are grateful to the healthcare community for their insights and contributions to making CareCentral a tool that truly addresses the needs of modern healthcare professionals. A big thank you! üéâ","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S1-CS2103T-F08-1/tp/actions)","lastModifiedDate":"2023-10-04"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"pangyyen":29,"-":2}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"mainClassName \u003d \u0027seedu.cc.Main\u0027","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"run {","lastModifiedDate":"2023-10-27"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-10-27"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-27"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"    archiveFileName \u003d \u0027carecentral.jar\u0027","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"tanboonkhong":4,"LimJH2002":1,"lyuanww":1,"-":70}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"### Gan Pang Yen","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"\u003cimg src\u003d\"images/pangyyen.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"[[GitHub](https://github.com/pangyyen)]","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"[[LinkIn](https://www.linkedin.com/in/gan-pang-yen-222333227/)]","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"* Role: Developer","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"* Responsibilities: UI, Storage, Logic, Documentation, Testing","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"### LIM JIAN HONG","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"\u003cimg src\u003d\"images/limjh2002.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"[[GitHub](http://github.com/LimJH2002)]","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"[[LinkedIn](https://www.linkedin.com/in/l1mjh)]","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2023-10-04"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"* Responsibilities: UI, Storage, Logic, Documentation, Testing","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"### Tan Boon Khong","lastModifiedDate":"2023-10-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"\u003cimg src\u003d\"images/tanboonkhong.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"[[GitHub](http://github.com/tanboonkhong)] [[LinkedIn](https://www.linkedin.com/in/boon-khong-tan-bb71491ab/)]","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"* Responsibilities: UI, Storage, Logic, Documentation, Testing","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"### Wong Li Yuan","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"\u003cimg src\u003d\"images/lyuanww.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"[[Github](https://github.com/lyuanww)]","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"[[LinkedIn](https://www.linkedin.com/in/li-yuan-wong-4580a0266/)]","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"* Responsibilities: UI, Storage, Logic, Documentation, Testing","lastModifiedDate":"2023-10-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"tanboonkhong":4,"pangyyen":6,"LimJH2002":5,"lyuanww":5,"-":30}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"# Developer Guide for CareCentral","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2023-10-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2023-10-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2023-10-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2023-10-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2023-10-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"## Product Scope","lastModifiedDate":"2023-10-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"### Target User Profile","lastModifiedDate":"2023-10-04"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"- **Age:** 25-60 years","lastModifiedDate":"2023-10-04"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"- **Occupation:** Healthcare professionals including doctors, nurses, and medical practitioners","lastModifiedDate":"2023-10-04"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"- **Tech Comfort:** Regular smartphone and app user, seeks digital solutions to streamline work","lastModifiedDate":"2023-10-04"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"- **Needs:** Efficiently manage patient records, timely appointmentEvent reminders, and a seamless referral process","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"### Problem Addressed","lastModifiedDate":"2023-10-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"CareCentral tackles the complexities healthcare professionals face in organizing patient records, ensuring timely appointments, and coordinating referral processes. By centralizing these tasks, it promotes a more streamlined and efficient medical practice, enabling better patient care and reduced administrative burdens.","lastModifiedDate":"2023-10-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"### Value Proposition","lastModifiedDate":"2023-10-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"Streamline medical practice with CareCentral, designed for healthcare professionals. Seamlessly manage patient records, ensure punctual appointments, and coordinate referrals. Elevate patient care while reducing administrative tasks, all in one intuitive platform.","lastModifiedDate":"2023-10-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"---","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"## Implementation","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"### Medical History","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"CareCentral also allows users to store and access patient medical history, including past diagnoses, allergies,","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"and medications. This enables healthcare professionals to provide more accurate and efficient care during patient","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"lyuanww"},"content":"visits, ensuring continuity of care. User can add a `MedicalHistoryEvent` with the `Date` with format YYYY-MM-DD,","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"the `MedicalCondition` and the `Treatment` received by the patient.","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"lyuanww"},"content":"The `MedicalHistoryEvent` will then be shown as a list of `MedicalHistoryEvent` in the `Patient`\u0027s `Medical History`.","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"lyuanww"},"content":"The MedicalHistory will be facilitated using the FilteredList, although the current implementation does not allow","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"filtering.","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"lyuanww"},"content":"When the user starts an application, there will be an empty `CurrentMedicalHistoryEventList`. It will be populated when the","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"user executes `list-medical-history` command.","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"lyuanww"},"content":"The `MedicalHistory` for each `Patient` will be stored in clinicbook.json as a nested attribute.","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"lyuanww"},"content":"#### Note:","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"lyuanww"},"content":"The difference between `MedicalHistory` class and `CurrentMedicalHistoryEventList` class is that \u0027MedicalHistory\u0027 is a list of","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"lyuanww"},"content":"`MedicalHistoryEvent` while `MedicalHistoryEvent` is a list of `MedicalHistoryEvent` that is currently being displayed.","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2023-10-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2023-10-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":103,"author":{"gitId":"tanboonkhong"},"content":"The proposed undo/redo mechanism is facilitated by the `VersionedClinicBook` class. The `VersionedClinicBook` class extends `ClinicBook` with an undo/redo history, stored internally as `clinicBookStateList` and `currentStatePointer`. Additionally, it implementes the following operations:","lastModifiedDate":"2023-10-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":105,"author":{"gitId":"tanboonkhong"},"content":"* `VersionedClinicBook#commit()` ‚Äî Saves the current address book state in its history.","lastModifiedDate":"2023-10-27"},{"lineNumber":106,"author":{"gitId":"tanboonkhong"},"content":"* `VersionedClinicBook#undo()` ‚Äî Restores the previous address book state from its history.","lastModifiedDate":"2023-10-27"},{"lineNumber":107,"author":{"gitId":"tanboonkhong"},"content":"* `VersionedClinicBook#redo()` ‚Äî Restores a previously undone address book state from its history.","lastModifiedDate":"2023-10-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2023-10-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":111,"author":{"gitId":"tanboonkhong"},"content":"### \\[Proposed\\] Pharmacy Integration","lastModifiedDate":"2023-10-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":113,"author":{"gitId":"tanboonkhong"},"content":"#### Proposed Implementation","lastModifiedDate":"2023-10-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":115,"author":{"gitId":"tanboonkhong"},"content":"The proposed pharmacy integration is facilitated by the `Pharmacy` class. The `Pharmacy` class extends `ClinicBook` with a list of `Medicine` and `Prescription` that is stored internally as `medicineList` and `prescriptionList`. Additionally, it implementes the following operations:","lastModifiedDate":"2023-10-27"},{"lineNumber":116,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":117,"author":{"gitId":"tanboonkhong"},"content":"* `Pharmacy#addMedicine()` ‚Äî Adds a `Medicine` to the `medicineList`.","lastModifiedDate":"2023-10-27"},{"lineNumber":118,"author":{"gitId":"tanboonkhong"},"content":"* `Pharmacy#deleteMedicine()` ‚Äî Deletes a `Medicine` from the `medicineList`.","lastModifiedDate":"2023-10-27"},{"lineNumber":119,"author":{"gitId":"tanboonkhong"},"content":"* `Pharmacy#addPrescription()` ‚Äî Adds a `Prescription` to the `prescriptionList`.","lastModifiedDate":"2023-10-27"},{"lineNumber":120,"author":{"gitId":"tanboonkhong"},"content":"* `Pharmacy#deletePrescription()` ‚Äî Deletes a `Prescription` from the `prescriptionList`.","lastModifiedDate":"2023-10-27"},{"lineNumber":121,"author":{"gitId":"tanboonkhong"},"content":"* `Pharmacy#findMedicine()` ‚Äî Finds a `Medicine` from the `medicineList`.","lastModifiedDate":"2023-10-27"},{"lineNumber":122,"author":{"gitId":"tanboonkhong"},"content":"* `Pharmacy#listMedicine()` ‚Äî Lists all `Medicine` from the `medicineList`.","lastModifiedDate":"2023-10-27"},{"lineNumber":123,"author":{"gitId":"tanboonkhong"},"content":"* `Pharmacy#listPrescription()` ‚Äî Lists all `Prescription` from the `prescriptionList`.","lastModifiedDate":"2023-10-27"},{"lineNumber":124,"author":{"gitId":"tanboonkhong"},"content":"* `Pharmacy#updateMedicine()` ‚Äî Updates a `Medicine` from the `medicineList`.","lastModifiedDate":"2023-10-27"},{"lineNumber":125,"author":{"gitId":"tanboonkhong"},"content":"* `Pharmacy#updatePrescription()` ‚Äî Updates a `Prescription` from the `prescriptionList`.","lastModifiedDate":"2023-10-27"},{"lineNumber":126,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":127,"author":{"gitId":"tanboonkhong"},"content":"Given below is the UML diagram for the `Pharmacy` class.","lastModifiedDate":"2023-10-27"},{"lineNumber":128,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":129,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":130,"author":{"gitId":"pangyyen"},"content":"## User Stories","lastModifiedDate":"2023-10-04"},{"lineNumber":131,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":132,"author":{"gitId":"pangyyen"},"content":"### Doctor","lastModifiedDate":"2023-10-04"},{"lineNumber":133,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":134,"author":{"gitId":"pangyyen"},"content":"- As a doctor (Age: 30-60), I can easily create, access, and edit patient records on my smartphone app to provide accurate and efficient care during patient visits.","lastModifiedDate":"2023-10-04"},{"lineNumber":135,"author":{"gitId":"pangyyen"},"content":"- As a doctor, I can share and edit surgical notes and post-operative care instructions with my patients through the app, ensuring they have all the necessary information.","lastModifiedDate":"2023-10-04"},{"lineNumber":136,"author":{"gitId":"pangyyen"},"content":"- As a doctor, I can securely store patient therapy notes in the app, ensuring confidentiality and continuity of care.","lastModifiedDate":"2023-10-04"},{"lineNumber":137,"author":{"gitId":"pangyyen"},"content":"- As a doctor (Age: 30-60), I want to schedule, reschedule, and cancel appointments on the app to manage my day-to-day practice schedule efficiently and reduce no-shows.","lastModifiedDate":"2023-10-04"},{"lineNumber":138,"author":{"gitId":"pangyyen"},"content":"- As a doctor (Age: 30-60), I can send a patient referral to a specialist using the app so that the referred professional has immediate access to necessary patient data, ensuring smooth continuation of care.","lastModifiedDate":"2023-10-04"},{"lineNumber":139,"author":{"gitId":"pangyyen"},"content":"- As a doctor (Age: 30-60), I want to prescribe medications directly through the app, so that pharmacies can promptly prepare medicines and patients receive timely notifications.","lastModifiedDate":"2023-10-04"},{"lineNumber":140,"author":{"gitId":"pangyyen"},"content":"- As a doctor (Age: 30-60), I can view patient feedback and reviews about their visit, enabling me to continuously improve my service and better meet their needs.","lastModifiedDate":"2023-10-04"},{"lineNumber":141,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":142,"author":{"gitId":"pangyyen"},"content":"## Use Cases","lastModifiedDate":"2023-10-04"},{"lineNumber":143,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":144,"author":{"gitId":"pangyyen"},"content":"### Must Have","lastModifiedDate":"2023-10-04"},{"lineNumber":145,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":146,"author":{"gitId":"pangyyen"},"content":"1. **Create New Patient Records**","lastModifiedDate":"2023-10-04"},{"lineNumber":147,"author":{"gitId":"pangyyen"},"content":"   - **MSS (Main Success Scenario):**","lastModifiedDate":"2023-10-04"},{"lineNumber":148,"author":{"gitId":"pangyyen"},"content":"      1. Doctor chooses to create a new patient record.","lastModifiedDate":"2023-10-04"},{"lineNumber":149,"author":{"gitId":"pangyyen"},"content":"      2. App prompts for the patient\u0027s details.","lastModifiedDate":"2023-10-04"},{"lineNumber":150,"author":{"gitId":"pangyyen"},"content":"      3. Doctor enters the required information.","lastModifiedDate":"2023-10-04"},{"lineNumber":151,"author":{"gitId":"pangyyen"},"content":"      4. App saves the new patient record.","lastModifiedDate":"2023-10-04"},{"lineNumber":152,"author":{"gitId":"pangyyen"},"content":"      5. Doctor views the updated list of patient records.","lastModifiedDate":"2023-10-04"},{"lineNumber":153,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":154,"author":{"gitId":"pangyyen"},"content":"2. **View All Existing Patient Records**","lastModifiedDate":"2023-10-04"},{"lineNumber":155,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":156,"author":{"gitId":"pangyyen"},"content":"      1. Doctor chooses to view all patient records.","lastModifiedDate":"2023-10-04"},{"lineNumber":157,"author":{"gitId":"pangyyen"},"content":"      2. App displays the list of all patient records.","lastModifiedDate":"2023-10-04"},{"lineNumber":158,"author":{"gitId":"pangyyen"},"content":"3. **View One Patient Record**","lastModifiedDate":"2023-10-04"},{"lineNumber":159,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":160,"author":{"gitId":"pangyyen"},"content":"      1. Doctor searches for a specific patient record.","lastModifiedDate":"2023-10-04"},{"lineNumber":161,"author":{"gitId":"pangyyen"},"content":"      2. App displays the patient\u0027s record.","lastModifiedDate":"2023-10-04"},{"lineNumber":162,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":163,"author":{"gitId":"pangyyen"},"content":"4. **Delete Patient Record**","lastModifiedDate":"2023-10-04"},{"lineNumber":164,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":165,"author":{"gitId":"pangyyen"},"content":"      1. Doctor selects a patient record to delete.","lastModifiedDate":"2023-10-04"},{"lineNumber":166,"author":{"gitId":"pangyyen"},"content":"      2. App deletes the selected record.","lastModifiedDate":"2023-10-04"},{"lineNumber":167,"author":{"gitId":"pangyyen"},"content":"      3. Doctor views the updated list of patient records.","lastModifiedDate":"2023-10-04"},{"lineNumber":168,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":169,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":170,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":171,"author":{"gitId":"pangyyen"},"content":"### Nice to Have","lastModifiedDate":"2023-10-04"},{"lineNumber":172,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":173,"author":{"gitId":"pangyyen"},"content":"1. **Delete Confirmation**","lastModifiedDate":"2023-10-04"},{"lineNumber":174,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":175,"author":{"gitId":"pangyyen"},"content":"      1. Doctor selects a patient record to delete.","lastModifiedDate":"2023-10-04"},{"lineNumber":176,"author":{"gitId":"pangyyen"},"content":"      2. App prompts for confirmation.","lastModifiedDate":"2023-10-04"},{"lineNumber":177,"author":{"gitId":"pangyyen"},"content":"      3. Doctor confirms the deletion.","lastModifiedDate":"2023-10-04"},{"lineNumber":178,"author":{"gitId":"pangyyen"},"content":"      4. App deletes the selected record.","lastModifiedDate":"2023-10-04"},{"lineNumber":179,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":180,"author":{"gitId":"pangyyen"},"content":"2. **View All Appointments**","lastModifiedDate":"2023-10-04"},{"lineNumber":181,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":182,"author":{"gitId":"pangyyen"},"content":"      1. Doctor chooses to view all appointments.","lastModifiedDate":"2023-10-04"},{"lineNumber":183,"author":{"gitId":"pangyyen"},"content":"      2. App displays the list of all appointments.","lastModifiedDate":"2023-10-04"},{"lineNumber":184,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":185,"author":{"gitId":"pangyyen"},"content":"3. **Edit Patient Record/Appointment**","lastModifiedDate":"2023-10-04"},{"lineNumber":186,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":187,"author":{"gitId":"pangyyen"},"content":"      1. Doctor selects a patient record or appointmentEvent to edit.","lastModifiedDate":"2023-10-26"},{"lineNumber":188,"author":{"gitId":"pangyyen"},"content":"      2. App prompts for the new information.","lastModifiedDate":"2023-10-04"},{"lineNumber":189,"author":{"gitId":"pangyyen"},"content":"      3. Doctor enters the updated information.","lastModifiedDate":"2023-10-04"},{"lineNumber":190,"author":{"gitId":"pangyyen"},"content":"      4. App saves the changes.","lastModifiedDate":"2023-10-04"},{"lineNumber":191,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":192,"author":{"gitId":"pangyyen"},"content":"### Luxury to Have","lastModifiedDate":"2023-10-04"},{"lineNumber":193,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":194,"author":{"gitId":"pangyyen"},"content":"1. **Share Patient Record**","lastModifiedDate":"2023-10-04"},{"lineNumber":195,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":196,"author":{"gitId":"pangyyen"},"content":"      1. Doctor selects a patient record to share.","lastModifiedDate":"2023-10-04"},{"lineNumber":197,"author":{"gitId":"pangyyen"},"content":"      2. App prompts for the recipient\u0027s details.","lastModifiedDate":"2023-10-04"},{"lineNumber":198,"author":{"gitId":"pangyyen"},"content":"      3. Doctor enters the recipient\u0027s information.","lastModifiedDate":"2023-10-04"},{"lineNumber":199,"author":{"gitId":"pangyyen"},"content":"      4. App shares the selected record with the recipient.","lastModifiedDate":"2023-10-04"},{"lineNumber":200,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":201,"author":{"gitId":"pangyyen"},"content":"2. **Prescribe Medications**","lastModifiedDate":"2023-10-04"},{"lineNumber":202,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":203,"author":{"gitId":"pangyyen"},"content":"      1. Doctor selects a patient to prescribe medication.","lastModifiedDate":"2023-10-04"},{"lineNumber":204,"author":{"gitId":"pangyyen"},"content":"      2. App prompts for the medication details.","lastModifiedDate":"2023-10-04"},{"lineNumber":205,"author":{"gitId":"pangyyen"},"content":"      3. Doctor enters the required information.","lastModifiedDate":"2023-10-04"},{"lineNumber":206,"author":{"gitId":"pangyyen"},"content":"      4. App sends the prescription to the pharmacy and notifies the patient.","lastModifiedDate":"2023-10-04"},{"lineNumber":207,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":208,"author":{"gitId":"pangyyen"},"content":"3. **Refer to Specialist**","lastModifiedDate":"2023-10-04"},{"lineNumber":209,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":210,"author":{"gitId":"pangyyen"},"content":"      1. Doctor selects a patient to refer to a specialist.","lastModifiedDate":"2023-10-04"},{"lineNumber":211,"author":{"gitId":"pangyyen"},"content":"      2. App prompts for the specialist\u0027s and patient\u0027s details.","lastModifiedDate":"2023-10-04"},{"lineNumber":212,"author":{"gitId":"pangyyen"},"content":"      3. Doctor enters the required information.","lastModifiedDate":"2023-10-04"},{"lineNumber":213,"author":{"gitId":"pangyyen"},"content":"      4. App sends the referral to the specialist.","lastModifiedDate":"2023-10-04"},{"lineNumber":214,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":215,"author":{"gitId":"pangyyen"},"content":"4. **View Feedback and Reviews**","lastModifiedDate":"2023-10-04"},{"lineNumber":216,"author":{"gitId":"pangyyen"},"content":"   - **MSS:**","lastModifiedDate":"2023-10-04"},{"lineNumber":217,"author":{"gitId":"pangyyen"},"content":"      1. Doctor chooses to view feedback and reviews.","lastModifiedDate":"2023-10-04"},{"lineNumber":218,"author":{"gitId":"pangyyen"},"content":"      2. App displays the list of all feedback and reviews.","lastModifiedDate":"2023-10-04"},{"lineNumber":219,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":220,"author":{"gitId":"pangyyen"},"content":"## Non-Functional Requirements","lastModifiedDate":"2023-10-04"},{"lineNumber":221,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":222,"author":{"gitId":"pangyyen"},"content":"1. **Performance Requirements:** The app should be able to handle up to 500 patient records without significant performance degradation.","lastModifiedDate":"2023-10-04"},{"lineNumber":223,"author":{"gitId":"pangyyen"},"content":"2. **Security Requirements:** All patient data must be stored securely to ensure confidentiality and privacy.","lastModifiedDate":"2023-10-04"},{"lineNumber":224,"author":{"gitId":"pangyyen"},"content":"3. **Usability Requirements:** The app should be user-friendly, with a clean and intuitive CLI interface that can be easily navigated by healthcare professionals.","lastModifiedDate":"2023-10-04"},{"lineNumber":225,"author":{"gitId":"pangyyen"},"content":"4. **Compatibility Requirements:** The app should be compatible with both iOS and Android devices, ensuring accessibility for a wide range of users.","lastModifiedDate":"2023-10-04"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2023-10-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":229,"author":{"gitId":"pangyyen"},"content":"- **App:** Refers to the CareCentral application.","lastModifiedDate":"2023-10-05"},{"lineNumber":230,"author":{"gitId":"pangyyen"},"content":"- **Healthcare Professional:** A user who is a certified medical practitioner, including doctors, nurses,","lastModifiedDate":"2023-10-05"},{"lineNumber":231,"author":{"gitId":"pangyyen"},"content":"- and other medical staff.","lastModifiedDate":"2023-10-05"},{"lineNumber":232,"author":{"gitId":"pangyyen"},"content":"- **Patient Record:** A digital file within the app containing all relevant information about a patient, including","lastModifiedDate":"2023-10-05"},{"lineNumber":233,"author":{"gitId":"pangyyen"},"content":"- medical history, prescriptions, and appointmentEvent records.","lastModifiedDate":"2023-10-26"},{"lineNumber":234,"author":{"gitId":"pangyyen"},"content":"- **User:** Refers to the healthcare professionals using the CareCentral app.","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"tanboonkhong":20,"pangyyen":111,"lyuanww":19,"-":84}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"   1. Run the `seedu.cc.Main` and try a few commands.","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook‚Äôs architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"lyuanww":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"   e.g. `seedu.cc.commons.StringUtilTest`","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"   e.g. `seedu.cc.storage.StorageManagerTest`","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"   e.g. `seedu.cc.logic.LogicManagerTest`","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"lyuanww":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"# User Guide","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"\u003cimg src\u003d\"images/Ui.png\" \u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"# Introduction","lastModifiedDate":"2023-10-29"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"CareCentral is an app designed specifically for healthcare professionals, including doctors, nurses, and hospital ","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"staff aged between 25-60 years. It is a desktop app optimised for fast-typers and is designed to help healthcare","lastModifiedDate":"2023-10-29"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"professionals manage their patients\u0027 medical journey.","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"# Table of Contents","lastModifiedDate":"2023-10-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2023-10-29"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"  {:toc}","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"\u003c!--- TODO: add release link ---\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"# 1. Quick Start","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"1. Ensure you have Java 11 installed in your Computer.","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"2. Download the latest `carecentral.jar` from [here]() ","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"3. Copy the file to the folder you want to use as the home folder for CareCentral.","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds.  ","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"5. For Mac users encountering this issue, follow this [guide](https://www.theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Run-JAR-file-example-windows-linux-ubuntu).","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"   \u003cimg width\u003d\"275\" height\u003d\"280\" src\u003d\"images/mac_issue.png\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"6. Type the command in the command box and press Enter to execute it.  ","lastModifiedDate":"2023-10-29"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"   e.g. typing `help` and pressing Enter will open the help window.","lastModifiedDate":"2023-10-29"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"   Some example commands you can try:","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"   * `add-patient n/John Doe ic/S1234567A a/45 p/91234567`","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"   * `list-patients`","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"   * `delete-patient 1`","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"   * `exit`","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"# 2. Features","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"Notes about the command format:","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"- Words in UPPER_CASE are the parameters to be supplied by the user.","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"e.g. in add n/NAME, NAME is a parameter which can be used as add n/John Doe.","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"- Items in square brackets are optional.","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"e.g n/NAME [tag/TAG] can be used as n/John Doe tag/friend or as n/John Doe.","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"- Items with ‚Ä¶‚Äã after them can be used multiple times including zero times.","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"e.g. [tag/TAG]‚Ä¶‚Äã can be used as   (i.e. 0 times), tag/friend, tag/friend tag/family etc.","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"- Parameters can be in any order.","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"e.g. if the command specifies n/NAME p/PHONE_NUMBER, p/PHONE_NUMBER n/NAME is also acceptable.","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"- If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"e.g. if you specify p/12341234 p/56785678, only p/56785678 will be taken.","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"- Extraneous parameters for commands that do not take in parameters (such as help, list, exit and clear) will be ignored.","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"e.g. if the command specifies help 123, it will be interpreted as help.","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"## 2.1. Patients Related Features","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"### 2.1.1. Create Patient Record","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"**What it does:**  ","lastModifiedDate":"2023-10-04"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"Adds a new patient record to the system.","lastModifiedDate":"2023-10-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"**Command Format:**  ","lastModifiedDate":"2023-10-04"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"`add-patient n/NAME ic/NRIC a/AGE p/PHONE_NUMBER e/email [t/TAG]‚Ä¶`","lastModifiedDate":"2023-10-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"**Example Commands:**  ","lastModifiedDate":"2023-10-04"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"`add-patient n/John Doe ic/S0123456A a/45 p/12341234 e/johndoe@example.com`","lastModifiedDate":"2023-10-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"**Parameters:**","lastModifiedDate":"2023-10-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"| Parameters       | Explanation                 | Constraints                                                                                                                                                 |            ","lastModifiedDate":"2023-10-29"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"|------------------|-----------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-29"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"| `n/NAME`         | full name of the patient    | must only contain alphanumeric characters and spaces, and it should not be blank                                                                            |","lastModifiedDate":"2023-10-29"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"| `p/PHONE_NUMBER` | phone number of the patient | must be **entirely numeric** and exactly 8 digits long                                                                                                      |","lastModifiedDate":"2023-10-29"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"| `ic/NRIC`        | NRIC of the patient         | must be **entirely alphanumeric** and follow Singapore NRIC format. More details [here](https://en.wikipedia.org/wiki/National_Registration_Identity_Card). |","lastModifiedDate":"2023-10-29"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"| `a/AGE`          | age of the patient          | must be a positive integer                                                                                                                                  |","lastModifiedDate":"2023-10-29"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"| `e/email`        | email of the patient        | must be a valid email address                                                                                                                               |","lastModifiedDate":"2023-10-29"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"| `[t/TAG]‚Ä¶`       | tags of the patient         | must only contain alphanumeric characters and spaces, and it should not be blank                                                                            |","lastModifiedDate":"2023-10-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"\u003c!--- TODO: verify all of these ---\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":79,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Success):**  ","lastModifiedDate":"2023-10-04"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"CLI: A new entry appears in the list of patients.  ","lastModifiedDate":"2023-10-04"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"Message: \"Successfully added patient: [Patient Details]\"","lastModifiedDate":"2023-10-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Failure):**","lastModifiedDate":"2023-10-04"},{"lineNumber":84,"author":{"gitId":"pangyyen"},"content":"- Message: \"Invalid input. Please enter a valid name.\"","lastModifiedDate":"2023-10-04"},{"lineNumber":85,"author":{"gitId":"pangyyen"},"content":"- Message: \"Invalid input. Please enter a valid NRIC (8-16 alphanumeric characters).\"","lastModifiedDate":"2023-10-04"},{"lineNumber":86,"author":{"gitId":"pangyyen"},"content":"- Message: \"Invalid input. Age should be between 0 to 120\"","lastModifiedDate":"2023-10-04"},{"lineNumber":87,"author":{"gitId":"pangyyen"},"content":"- Message: \"Invalid input. Please enter a valid phone number.\"","lastModifiedDate":"2023-10-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"## 2.1.2. List Patients","lastModifiedDate":"2023-10-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"**What it does:**  ","lastModifiedDate":"2023-10-05"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2023-10-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"**Command Format:**  ","lastModifiedDate":"2023-10-05"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"`list-patients`","lastModifiedDate":"2023-10-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"tanboonkhong"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":99,"author":{"gitId":"lyuanww"},"content":"## 2.1.3. Edit Patient Record","lastModifiedDate":"2023-10-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":101,"author":{"gitId":"tanboonkhong"},"content":"**What it does:**","lastModifiedDate":"2023-10-05"},{"lineNumber":102,"author":{"gitId":"lyuanww"},"content":"Edits a patient record at the specified `INDEX` in the system.","lastModifiedDate":"2023-10-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":104,"author":{"gitId":"tanboonkhong"},"content":"**Command Format:**","lastModifiedDate":"2023-10-05"},{"lineNumber":105,"author":{"gitId":"lyuanww"},"content":"`edit-patient INDEX [n/NAME] [ic/NRIC] [a/AGE] [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]‚Ä¶`","lastModifiedDate":"2023-10-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":107,"author":{"gitId":"lyuanww"},"content":"**Example Commands:**","lastModifiedDate":"2023-10-29"},{"lineNumber":108,"author":{"gitId":"lyuanww"},"content":"`edit-patient 5 n/John Doe ic/S0123456A a/45 p/12341234 e/johndoe@example.com t/critical`","lastModifiedDate":"2023-10-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":110,"author":{"gitId":"lyuanww"},"content":"**Parameters:**","lastModifiedDate":"2023-10-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":112,"author":{"gitId":"lyuanww"},"content":"| Parameters       | Explanation                                        | Constraints                                                                                                                                                 |            ","lastModifiedDate":"2023-10-29"},{"lineNumber":113,"author":{"gitId":"lyuanww"},"content":"|------------------|----------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-29"},{"lineNumber":114,"author":{"gitId":"lyuanww"},"content":"| `INDEX`          | index of the patient in the displayed patient list | must be a positive integer                                                                                                                                  |","lastModifiedDate":"2023-10-29"},{"lineNumber":115,"author":{"gitId":"lyuanww"},"content":"| `n/NAME`         | full name of the patient                           | must only contain alphanumeric characters and spaces, and it should not be blank                                                                            |","lastModifiedDate":"2023-10-29"},{"lineNumber":116,"author":{"gitId":"lyuanww"},"content":"| `p/PHONE_NUMBER` | phone number of the patient                        | must be **entirely numeric** and exactly 8 digits long                                                                                                      |","lastModifiedDate":"2023-10-29"},{"lineNumber":117,"author":{"gitId":"lyuanww"},"content":"| `ic/NRIC`        | NRIC of the patient                                | must be **entirely alphanumeric** and follow Singapore NRIC format. More details [here](https://en.wikipedia.org/wiki/National_Registration_Identity_Card). |","lastModifiedDate":"2023-10-29"},{"lineNumber":118,"author":{"gitId":"lyuanww"},"content":"| `a/AGE`          | age of the patient                                 | must be a positive integer                                                                                                                                  |","lastModifiedDate":"2023-10-29"},{"lineNumber":119,"author":{"gitId":"lyuanww"},"content":"| `e/email`        | email of the patient                               | must be a valid email address                                                                                                                               |","lastModifiedDate":"2023-10-29"},{"lineNumber":120,"author":{"gitId":"lyuanww"},"content":"| `[t/TAG]‚Ä¶`       | tags of the patient                                | must only contain alphanumeric characters and spaces, and it should not be blank                                                                            |","lastModifiedDate":"2023-10-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":122,"author":{"gitId":"lyuanww"},"content":"\u003c!--- TODO: verify all of these ---\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":123,"author":{"gitId":"tanboonkhong"},"content":"**Expected Output (Success):**","lastModifiedDate":"2023-10-05"},{"lineNumber":124,"author":{"gitId":"lyuanww"},"content":"- Message: \"Successfully edited patient: [Patient Details]\"","lastModifiedDate":"2023-10-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":126,"author":{"gitId":"tanboonkhong"},"content":"**Expected Output (Failure):**","lastModifiedDate":"2023-10-05"},{"lineNumber":127,"author":{"gitId":"tanboonkhong"},"content":"- Message: \"Invalid input. Please enter a valid index or details.\"","lastModifiedDate":"2023-10-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":129,"author":{"gitId":"tanboonkhong"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":131,"author":{"gitId":"lyuanww"},"content":"## 2.1.4. Delete Patient Record","lastModifiedDate":"2023-10-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":133,"author":{"gitId":"lyuanww"},"content":"**What it does:**  ","lastModifiedDate":"2023-10-05"},{"lineNumber":134,"author":{"gitId":"lyuanww"},"content":"Removes a patient record from the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":136,"author":{"gitId":"lyuanww"},"content":"**Command Format:**  ","lastModifiedDate":"2023-10-05"},{"lineNumber":137,"author":{"gitId":"lyuanww"},"content":"`delete-patient INDEX`","lastModifiedDate":"2023-10-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":139,"author":{"gitId":"lyuanww"},"content":"**Example Commands:**  ","lastModifiedDate":"2023-10-05"},{"lineNumber":140,"author":{"gitId":"lyuanww"},"content":"`delete-patient 2`","lastModifiedDate":"2023-10-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":142,"author":{"gitId":"lyuanww"},"content":"**Acceptable Values:**","lastModifiedDate":"2023-10-05"},{"lineNumber":143,"author":{"gitId":"lyuanww"},"content":"- **INDEX:** Positive integer","lastModifiedDate":"2023-10-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":145,"author":{"gitId":"lyuanww"},"content":"\u003c!--- TODO: verify all of these ---\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":146,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Success):**  ","lastModifiedDate":"2023-10-05"},{"lineNumber":147,"author":{"gitId":"lyuanww"},"content":"- Message: \"Successfully deleted patient.\"","lastModifiedDate":"2023-10-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":149,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Failure):**  ","lastModifiedDate":"2023-10-05"},{"lineNumber":150,"author":{"gitId":"lyuanww"},"content":"- Message: \"Invalid index. Please enter a valid index.\"","lastModifiedDate":"2023-10-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":152,"author":{"gitId":"pangyyen"},"content":"## 5. Add Appointment","lastModifiedDate":"2023-10-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":154,"author":{"gitId":"pangyyen"},"content":"**What it does:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":155,"author":{"gitId":"pangyyen"},"content":"Schedules a new appointmentEvent for a patient.","lastModifiedDate":"2023-10-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":157,"author":{"gitId":"pangyyen"},"content":"**Command Format:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":158,"author":{"gitId":"pangyyen"},"content":"`add-appt INDEX d/DATE t/TIME`","lastModifiedDate":"2023-10-25"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":160,"author":{"gitId":"pangyyen"},"content":"**Example Commands:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":161,"author":{"gitId":"pangyyen"},"content":"`add-appt 1 d/2023-10-01 tm/14:00`","lastModifiedDate":"2023-10-25"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":163,"author":{"gitId":"pangyyen"},"content":"**Acceptable Values:**","lastModifiedDate":"2023-10-25"},{"lineNumber":164,"author":{"gitId":"pangyyen"},"content":"- **INDEX:** Positive integer","lastModifiedDate":"2023-10-25"},{"lineNumber":165,"author":{"gitId":"pangyyen"},"content":"- **DATE:** YYYY-MM-DD","lastModifiedDate":"2023-10-25"},{"lineNumber":166,"author":{"gitId":"pangyyen"},"content":"- **TIME:** HH:MM (24-hour format)","lastModifiedDate":"2023-10-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":168,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Success):**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":169,"author":{"gitId":"pangyyen"},"content":"CLI: A new entry appears in the list of appointments.  ","lastModifiedDate":"2023-10-25"},{"lineNumber":170,"author":{"gitId":"pangyyen"},"content":"Message: \"Successfully added appointmentEvent: [Appointment Details]\"","lastModifiedDate":"2023-10-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":172,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Failure):**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":173,"author":{"gitId":"pangyyen"},"content":"Message: \"Invalid input. Please enter a valid patient index, date, or time.\"","lastModifiedDate":"2023-10-25"},{"lineNumber":174,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":175,"author":{"gitId":"pangyyen"},"content":"## 6. List All Appointment","lastModifiedDate":"2023-10-25"},{"lineNumber":176,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":177,"author":{"gitId":"pangyyen"},"content":"**What it does:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":178,"author":{"gitId":"pangyyen"},"content":"Displays all appointments sorted by date.","lastModifiedDate":"2023-10-25"},{"lineNumber":179,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":180,"author":{"gitId":"pangyyen"},"content":"**Command Format:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":181,"author":{"gitId":"pangyyen"},"content":"`list-appointments INDEX`","lastModifiedDate":"2023-10-26"},{"lineNumber":182,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":183,"author":{"gitId":"pangyyen"},"content":"**Example Commands:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":184,"author":{"gitId":"pangyyen"},"content":"`list-appointments 1`","lastModifiedDate":"2023-10-26"},{"lineNumber":185,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":186,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Success):**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":187,"author":{"gitId":"pangyyen"},"content":"CLI: The list of appointments is displayed.  ","lastModifiedDate":"2023-10-25"},{"lineNumber":188,"author":{"gitId":"pangyyen"},"content":"Message: \"Displaying X number of appointments.\"","lastModifiedDate":"2023-10-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":190,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Failure):**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":191,"author":{"gitId":"pangyyen"},"content":"Message: \"No appointments found.\"","lastModifiedDate":"2023-10-25"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":193,"author":{"gitId":"pangyyen"},"content":"## 7. Edit Appointment","lastModifiedDate":"2023-10-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":195,"author":{"gitId":"pangyyen"},"content":"**What it does:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":196,"author":{"gitId":"pangyyen"},"content":"Edits existing appointmentEvent details.","lastModifiedDate":"2023-10-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":198,"author":{"gitId":"pangyyen"},"content":"**Command Format:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":199,"author":{"gitId":"pangyyen"},"content":"`edit-appointmentEvent INDEX [pi/patient-index] [d/DATE] [t/TIME]`","lastModifiedDate":"2023-10-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":201,"author":{"gitId":"pangyyen"},"content":"**Example Commands:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":202,"author":{"gitId":"pangyyen"},"content":"`edit-appointmentEvent 2 pi/7 d/2023-10-05 t/16:00`","lastModifiedDate":"2023-10-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":204,"author":{"gitId":"pangyyen"},"content":"**Acceptable Values:**","lastModifiedDate":"2023-10-25"},{"lineNumber":205,"author":{"gitId":"pangyyen"},"content":"- **INDEX:** Positive integer","lastModifiedDate":"2023-10-25"},{"lineNumber":206,"author":{"gitId":"pangyyen"},"content":"- **DATE:** YYYY-MM-DD","lastModifiedDate":"2023-10-25"},{"lineNumber":207,"author":{"gitId":"pangyyen"},"content":"- **TIME:** HH:MM (24-hour format)","lastModifiedDate":"2023-10-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":209,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Success):**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":210,"author":{"gitId":"pangyyen"},"content":"CLI: The edited appointmentEvent entry is updated in the list.  ","lastModifiedDate":"2023-10-26"},{"lineNumber":211,"author":{"gitId":"pangyyen"},"content":"Message: \"Successfully edited appointmentEvent: [Appointment Details]\"","lastModifiedDate":"2023-10-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":213,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Failure):**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":214,"author":{"gitId":"pangyyen"},"content":"Message: \"Invalid input. Please enter a valid index or details.\"","lastModifiedDate":"2023-10-25"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":216,"author":{"gitId":"pangyyen"},"content":"## 8. Delete Appointment","lastModifiedDate":"2023-10-25"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":218,"author":{"gitId":"pangyyen"},"content":"**What it does:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":219,"author":{"gitId":"pangyyen"},"content":"Removes an appointmentEvent from the system.","lastModifiedDate":"2023-10-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":221,"author":{"gitId":"pangyyen"},"content":"**Command Format:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":222,"author":{"gitId":"pangyyen"},"content":"`delete-appointmentEvent INDEX`","lastModifiedDate":"2023-10-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":224,"author":{"gitId":"pangyyen"},"content":"**Example Commands:**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":225,"author":{"gitId":"pangyyen"},"content":"`delete-appointmentEvent 3`","lastModifiedDate":"2023-10-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":227,"author":{"gitId":"pangyyen"},"content":"**Acceptable Values:**","lastModifiedDate":"2023-10-25"},{"lineNumber":228,"author":{"gitId":"pangyyen"},"content":"- **INDEX:** Positive integer","lastModifiedDate":"2023-10-25"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":230,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Success):**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":231,"author":{"gitId":"pangyyen"},"content":"CLI: The deleted appointmentEvent entry is removed from the list.  ","lastModifiedDate":"2023-10-26"},{"lineNumber":232,"author":{"gitId":"pangyyen"},"content":"Message: \"Successfully deleted appointmentEvent.\"","lastModifiedDate":"2023-10-26"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":234,"author":{"gitId":"pangyyen"},"content":"**Expected Output (Failure):**  ","lastModifiedDate":"2023-10-25"},{"lineNumber":235,"author":{"gitId":"pangyyen"},"content":"Message: \"Invalid index. Please enter a valid appointmentEvent index.\"","lastModifiedDate":"2023-10-26"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":237,"author":{"gitId":"pangyyen"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":238,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":239,"author":{"gitId":"pangyyen"},"content":"## 9. Add Medical History","lastModifiedDate":"2023-10-26"},{"lineNumber":240,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":241,"author":{"gitId":"lyuanww"},"content":"**What it does:**","lastModifiedDate":"2023-10-24"},{"lineNumber":242,"author":{"gitId":"lyuanww"},"content":"Adds a medical history to a patient record.","lastModifiedDate":"2023-10-24"},{"lineNumber":243,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":244,"author":{"gitId":"lyuanww"},"content":"**Command Format:**","lastModifiedDate":"2023-10-24"},{"lineNumber":245,"author":{"gitId":"lyuanww"},"content":"`add-medical-history INDEX [d/DATE] [mc/MEDICAL_CONDITION] [t/TREATMENT]`","lastModifiedDate":"2023-10-24"},{"lineNumber":246,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":247,"author":{"gitId":"lyuanww"},"content":"**Acceptable Values:**","lastModifiedDate":"2023-10-24"},{"lineNumber":248,"author":{"gitId":"lyuanww"},"content":"- **INDEX:** Positive integer","lastModifiedDate":"2023-10-24"},{"lineNumber":249,"author":{"gitId":"lyuanww"},"content":"- **DATE:** YYYY-MM-DD","lastModifiedDate":"2023-10-25"},{"lineNumber":250,"author":{"gitId":"lyuanww"},"content":"- **MEDICAL_CONDITION:** Alphabetic characters and spaces only","lastModifiedDate":"2023-10-25"},{"lineNumber":251,"author":{"gitId":"lyuanww"},"content":"- **TREATMENT:** Alphabetic characters and spaces only","lastModifiedDate":"2023-10-25"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":253,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Success):**","lastModifiedDate":"2023-10-24"},{"lineNumber":254,"author":{"gitId":"lyuanww"},"content":"Message: \"Successfully added medical history for patient: [Medical History Details]\"","lastModifiedDate":"2023-10-24"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":256,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Failure):**","lastModifiedDate":"2023-10-24"},{"lineNumber":257,"author":{"gitId":"lyuanww"},"content":"- Message: \"Invalid input. Please enter a valid index or details.\"","lastModifiedDate":"2023-10-24"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":259,"author":{"gitId":"lyuanww"},"content":"---","lastModifiedDate":"2023-10-24"},{"lineNumber":260,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":261,"author":{"gitId":"pangyyen"},"content":"## 10. List Medical History","lastModifiedDate":"2023-10-26"},{"lineNumber":262,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":263,"author":{"gitId":"lyuanww"},"content":"**What it does:**","lastModifiedDate":"2023-10-24"},{"lineNumber":264,"author":{"gitId":"lyuanww"},"content":"Lists the medical history of a patient.","lastModifiedDate":"2023-10-24"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":266,"author":{"gitId":"lyuanww"},"content":"**Command Format:**","lastModifiedDate":"2023-10-24"},{"lineNumber":267,"author":{"gitId":"lyuanww"},"content":"`list-medical-history INDEX`","lastModifiedDate":"2023-10-24"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":269,"author":{"gitId":"lyuanww"},"content":"**Acceptable Values:**","lastModifiedDate":"2023-10-24"},{"lineNumber":270,"author":{"gitId":"lyuanww"},"content":"- **INDEX:** Positive integer","lastModifiedDate":"2023-10-24"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":272,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Success):**","lastModifiedDate":"2023-10-24"},{"lineNumber":273,"author":{"gitId":"lyuanww"},"content":"Message: \"Successfully listed medical history for patient: [Medical History Details]\"","lastModifiedDate":"2023-10-24"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":275,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Failure):**","lastModifiedDate":"2023-10-24"},{"lineNumber":276,"author":{"gitId":"lyuanww"},"content":"- Message: \"Invalid input. Please enter a valid index or details.\"","lastModifiedDate":"2023-10-24"},{"lineNumber":277,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":278,"author":{"gitId":"lyuanww"},"content":"---","lastModifiedDate":"2023-10-24"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":280,"author":{"gitId":"pangyyen"},"content":"## 11. Edit Medical History","lastModifiedDate":"2023-10-26"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":282,"author":{"gitId":"lyuanww"},"content":"**What it does:**","lastModifiedDate":"2023-10-24"},{"lineNumber":283,"author":{"gitId":"lyuanww"},"content":"Edits a medical history of a patient.","lastModifiedDate":"2023-10-24"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":285,"author":{"gitId":"lyuanww"},"content":"**Command Format:**","lastModifiedDate":"2023-10-24"},{"lineNumber":286,"author":{"gitId":"lyuanww"},"content":"`edit-medical-history INDEX [pi/PATIENT_INDEX] [d/DATE] [mc/MEDICAL_CONDITION] [t/TREATMENT]`","lastModifiedDate":"2023-10-24"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":288,"author":{"gitId":"lyuanww"},"content":"**Acceptable Values:**","lastModifiedDate":"2023-10-24"},{"lineNumber":289,"author":{"gitId":"lyuanww"},"content":"- **INDEX:** Positive integer","lastModifiedDate":"2023-10-24"},{"lineNumber":290,"author":{"gitId":"lyuanww"},"content":"- **PATIENT_INDEX:** Positive integer","lastModifiedDate":"2023-10-24"},{"lineNumber":291,"author":{"gitId":"lyuanww"},"content":"- **DATE:** YYYY-MM-DD","lastModifiedDate":"2023-10-25"},{"lineNumber":292,"author":{"gitId":"lyuanww"},"content":"- **MEDICAL_CONDITION:** Alphabetic characters and spaces only","lastModifiedDate":"2023-10-24"},{"lineNumber":293,"author":{"gitId":"lyuanww"},"content":"- **TREATMENT:** Alphabetic characters and spaces only","lastModifiedDate":"2023-10-24"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":295,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Success):**","lastModifiedDate":"2023-10-24"},{"lineNumber":296,"author":{"gitId":"lyuanww"},"content":"Message: \"Successfully edited medical history for patient: [Medical History Details]\"","lastModifiedDate":"2023-10-24"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":298,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Failure):**","lastModifiedDate":"2023-10-24"},{"lineNumber":299,"author":{"gitId":"lyuanww"},"content":"- Message: \"Invalid input. Please enter a valid index or details.\"","lastModifiedDate":"2023-10-24"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":301,"author":{"gitId":"lyuanww"},"content":"---","lastModifiedDate":"2023-10-24"},{"lineNumber":302,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":303,"author":{"gitId":"pangyyen"},"content":"## 12. Delete Medical History","lastModifiedDate":"2023-10-26"},{"lineNumber":304,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":305,"author":{"gitId":"lyuanww"},"content":"**What it does:**","lastModifiedDate":"2023-10-24"},{"lineNumber":306,"author":{"gitId":"lyuanww"},"content":"Deletes a medical history of a patient.","lastModifiedDate":"2023-10-24"},{"lineNumber":307,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":308,"author":{"gitId":"lyuanww"},"content":"**Command Format:**","lastModifiedDate":"2023-10-24"},{"lineNumber":309,"author":{"gitId":"lyuanww"},"content":"`delete-medical-history INDEX [pi/PATIENT_INDEX]`","lastModifiedDate":"2023-10-24"},{"lineNumber":310,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":311,"author":{"gitId":"lyuanww"},"content":"**Acceptable Values:**","lastModifiedDate":"2023-10-24"},{"lineNumber":312,"author":{"gitId":"lyuanww"},"content":"- **INDEX:** Positive integer","lastModifiedDate":"2023-10-24"},{"lineNumber":313,"author":{"gitId":"lyuanww"},"content":"- **PATIENT_INDEX:** Positive integer","lastModifiedDate":"2023-10-24"},{"lineNumber":314,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":315,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Success):**","lastModifiedDate":"2023-10-24"},{"lineNumber":316,"author":{"gitId":"lyuanww"},"content":"Message: \"Successfully deleted medical history for patient: [Medical History Details]\"","lastModifiedDate":"2023-10-24"},{"lineNumber":317,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":318,"author":{"gitId":"lyuanww"},"content":"**Expected Output (Failure):**","lastModifiedDate":"2023-10-24"},{"lineNumber":319,"author":{"gitId":"lyuanww"},"content":"- Message: \"Invalid input. Please enter a valid index or details.\"","lastModifiedDate":"2023-10-24"},{"lineNumber":320,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":321,"author":{"gitId":"lyuanww"},"content":"---","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"tanboonkhong":9,"pangyyen":81,"LimJH2002":6,"lyuanww":148,"-":77}},{"path":"docs/team/limjh2002.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"layout: page","lastModifiedDate":"2023-10-05"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"title: Lim Jian Hong\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"### Project: CareCentral","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"CareCentral is an app designed specifically for healthcare professionals, including doctors, nurses, and hospital staff aged between 25-60 years. With a focus on streamlining patient management and appointmentEvent scheduling, CareCentral is the ultimate tool for modern healthcare providers who are comfortable with digital solutions and are looking to enhance efficiency and patient care quality.","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"Details to be added soon","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"LimJH2002":11,"pangyyen":1}},{"path":"docs/team/lyuanww.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"layout: page","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"title: Wong Li Yuan\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"### Project: CareCentral","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"CareCentral is an app designed specifically for healthcare professionals, including doctors, nurses, and hospital staff aged between 25-60 years. With a focus on streamlining patient management and appointmentEvent scheduling, CareCentral is the ultimate tool for modern healthcare providers who are comfortable with digital solutions and are looking to enhance efficiency and patient care quality.","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"Details to be added soon","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"pangyyen":1,"lyuanww":11}},{"path":"docs/team/pangyyen.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"layout: page","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"title: Pang Yen\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"### Project: CareCentral","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"CareCentral is an app designed specifically for healthcare professionals, including doctors, nurses, and hospital staff aged between 25-60 years. With a focus on streamlining patient management and appointmentEvent scheduling, CareCentral is the ultimate tool for modern healthcare providers who are comfortable with digital solutions and are looking to enhance efficiency and patient care quality.","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"* **New Feature 1**: ","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"    * What it does:","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"    * Justification: ","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"    * Highlights: ","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"    * Credits: ","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"* **Code contributed**: [RepoSense link](https://github.com/AY2324S1-CS2103T-F08-1/tp/actions)","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"* **Project management**:","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"    * Managed releases `v1.1`","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"    * User Guide:","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"    * Developer Guide:","lastModifiedDate":"2023-10-04"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"* **Community**:","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"* **Tools**:","lastModifiedDate":"2023-10-04"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"Details to be added soon","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"pangyyen":34}},{"path":"docs/team/tanboonkhong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"layout: page","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"title: Tan Boon Khong\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"### Project: CareCentral","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"CareCentral is an app designed specifically for healthcare professionals, including doctors, nurses, and hospital staff aged between 25-60 years. With a focus on streamlining patient management and appointmentEvent scheduling, CareCentral is the ultimate tool for modern healthcare providers who are comfortable with digital solutions and are looking to enhance efficiency and patient care quality.","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"Details to be added soon","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"tanboonkhong":11,"pangyyen":1}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command‚Äâ‚Äî‚Äâ`remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We‚Äôll assume that you have already set up the development environment as outlined in the Developer‚Äôs Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let‚Äôs start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let‚Äôs keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let‚Äôs change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/RemarkCommandClass.png)","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let‚Äôs change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let‚Äôs change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"Now let‚Äôs move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"lyuanww"},"content":"Create a `RemarkCommandParser` class in the `seedu.cc.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2023-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/RemarkCommandParserClass.png)","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let‚Äôs take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let‚Äôs find out what we need to do in order to obtain the Index and String that we need. Let‚Äôs look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user‚Äôs input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":":information_source: Don‚Äôt forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let‚Äôs lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person‚Äôs name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"lyuanww"},"content":"Create a new `Remark` in `seedu.cc.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2023-10-16"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":233,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"Let‚Äôs change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let‚Äôs go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"lyuanww"},"content":"Simply add the following to [`seedu.cc.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2023-10-16"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don‚Äôt worry‚Äâ‚Äî‚Äâwe will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"That‚Äôs it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library‚Äâ‚Äî‚ÄâJackson. Let‚Äôs update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook‚Äôs storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression‚Äâ‚Äî‚Äâwe went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":347,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":357,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don‚Äôt slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Let‚Äôs verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":376,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":378,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"Let‚Äôs create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"Following convention, let‚Äôs change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Let‚Äôs use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"lyuanww":6,"-":393}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e ‚Äî  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let‚Äôs try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"The `address` field in `Person` is actually an instance of the `seedu.cc.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let‚Äôs try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What‚Äôs left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"lyuanww":1,"-":111}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. ‚Ä¶‚Äã\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e ‚Äî  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA‚Äôs debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.cc.logic.Logic`.","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"A quick look at the `seedu.cc.logic.Logic` (an extract given below) confirms that this indeed might be what we‚Äôre looking for.","lastModifiedDate":"2023-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we‚Äôre looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let‚Äôs set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]‚Ä¶‚Äã` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let‚Äôs _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let‚Äôs take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let‚Äôs take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let‚Äôs see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let‚Äôs continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/„Ç¢„É™„Çπ „É¶„Éº`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"lyuanww":2,"-":299}},{"path":"src/main/java/seedu/cc/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.FileUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Objects.equals(configPath, otherAppParameters.configPath);","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .add(\"configPath\", configPath)","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"lyuanww":4,"-":69}},{"path":"src/main/java/seedu/cc/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static Logger logger \u003d LogsCenter.getLogger(Main.class);","lastModifiedDate":"2023-07-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // As per https://github.com/openjdk/jfx/blob/master/doc-files/release-notes-16.md","lastModifiedDate":"2023-07-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // JavaFX 16 (or later) runtime logs a warning at startup if JavaFX classes are loaded from","lastModifiedDate":"2023-07-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // the classpath instead of a module.","lastModifiedDate":"2023-07-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // Our application does not use Java modules yet. Even if it did, modules are ignored when","lastModifiedDate":"2023-07-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // packed into a FAT Jar file (as we do), which means this warning will persist even then.","lastModifiedDate":"2023-07-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // The warning however, can be safely ignored. Thus, the following log informs","lastModifiedDate":"2023-07-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // the user (if looking at the log output) that the said warning appearing in the log","lastModifiedDate":"2023-07-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // can be ignored.","lastModifiedDate":"2023-07-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.warning(\"The warning about Unsupported JavaFX configuration below can be ignored.\");","lastModifiedDate":"2023-07-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"lyuanww":2,"-":39}},{"path":"src/main/java/seedu/cc/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.Config;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.Version;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ConfigUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.StringUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.Logic;","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.LogicManager;","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.util.SampleDataUtil;","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.storage.ClinicBookStorage;","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.storage.JsonClinicBookStorage;","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.storage.JsonUserPrefsStorage;","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.storage.Storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.storage.StorageManager;","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.storage.UserPrefsStorage;","lastModifiedDate":"2023-10-18"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.ui.Ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.ui.UiManager;","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 2, true);","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2023-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2023-10-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2023-10-18"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"        ClinicBookStorage addressBookStorage \u003d new JsonClinicBookStorage(userPrefs.getClinicBookFilePath());","lastModifiedDate":"2023-10-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-10-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-10-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2023-10-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-18"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"        logger.info(\"Using data file : \" + storage.getClinicBookFilePath());","lastModifiedDate":"2023-10-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"        Optional\u003cReadOnlyClinicBook\u003e addressBookOptional;","lastModifiedDate":"2023-10-17"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"        ReadOnlyClinicBook initialData;","lastModifiedDate":"2023-10-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"            addressBookOptional \u003d storage.readClinicBook();","lastModifiedDate":"2023-10-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"                logger.info(\"Creating a new data file \" + storage.getClinicBookFilePath()","lastModifiedDate":"2023-10-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                    + \" populated with a sample AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleClinicBook);","lastModifiedDate":"2023-10-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":88,"author":{"gitId":"lyuanww"},"content":"            logger.warning(\"Data file at \" + storage.getClinicBookFilePath() + \" could not be loaded.\"","lastModifiedDate":"2023-10-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                + \" Will be starting with an empty AddressBook.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"            initialData \u003d new ClinicBook();","lastModifiedDate":"2023-10-17"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2023-10-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            if (!configOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new config file \" + configFilePathUsed);","lastModifiedDate":"2023-05-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                + \" Using default config properties.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2023-10-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        logger.info(\"Using preference file : \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2023-10-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2023-10-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            if (!prefsOptional.isPresent()) {","lastModifiedDate":"2023-01-03"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                logger.info(\"Creating new preference file \" + prefsFilePath);","lastModifiedDate":"2023-05-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-01-03"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2023-10-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (DataLoadingException e) {","lastModifiedDate":"2023-06-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            logger.warning(\"Preference file at \" + prefsFilePath + \" could not be loaded.\"","lastModifiedDate":"2023-06-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                + \" Using default preferences.\");","lastModifiedDate":"2023-05-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2023-10-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tanboonkhong":2,"pangyyen":2,"LimJH2002":10,"lyuanww":19,"-":153}},{"path":"src/main/java/seedu/cc/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.core;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Config otherConfig \u003d (Config) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, otherConfig.logLevel)","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, otherConfig.userPrefsFilePath);","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .add(\"logLevel\", logLevel)","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .add(\"userPrefsFilePath\", userPrefsFilePath)","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":2,"-":64}},{"path":"src/main/java/seedu/cc/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.core;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        GuiSettings otherGuiSettings \u003d (GuiSettings) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d otherGuiSettings.windowWidth","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d otherGuiSettings.windowHeight","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, otherGuiSettings.windowCoordinates);","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .add(\"windowWidth\", windowWidth)","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .add(\"windowHeight\", windowHeight)","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .add(\"windowCoordinates\", windowCoordinates)","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":2,"-":80}},{"path":"src/main/java/seedu/cc/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.core;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-05-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-05-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger; // logger for this class","lastModifiedDate":"2023-07-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static Logger baseLogger; // to be used as the parent of all other loggers created by this class.","lastModifiedDate":"2023-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // This static block ensures essential loggers are created early","lastModifiedDate":"2023-07-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2023-07-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        setBaseLogger();","lastModifiedDate":"2023-07-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2023-07-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Initializes loggers with the log level specified in the {@code config} object. Applies to all loggers created","lastModifiedDate":"2023-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * using {@link #getLogger(String)} and {@link #getLogger(Class)} methods except for those that are manually set.","lastModifiedDate":"2023-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        logger.info(\"Log level will be set as: \" + currentLogLevel);","lastModifiedDate":"2023-07-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // set the level of the baseLogger which will be inherited by other loggers","lastModifiedDate":"2023-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        baseLogger.setLevel(currentLogLevel);","lastModifiedDate":"2023-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name prefixed by the {@code baseLogger}\u0027s name so that the created logger","lastModifiedDate":"2023-07-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * becomes a descendant of the {@code baseLogger}. Furthermore, the returned logger will have the same log handlers","lastModifiedDate":"2023-07-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * as the {@code baseLogger}.","lastModifiedDate":"2023-07-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Java organizes loggers into a hierarchy based on their names (using \u0027.\u0027 as a separator, similar to how Java","lastModifiedDate":"2023-07-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // packages form a hierarchy). Furthermore, loggers without a level inherit the level of their parent logger.","lastModifiedDate":"2023-07-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // By prefixing names of all loggers with baseLogger\u0027s name + \".\", we make the baseLogger the parent of all","lastModifiedDate":"2023-07-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // loggers. This allows us to change the level of all loggers simply by changing the baseLogger level.","lastModifiedDate":"2023-07-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(baseLogger.getName() + \".\" + name);","lastModifiedDate":"2023-07-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(true);","lastModifiedDate":"2023-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return logger;","lastModifiedDate":"2023-07-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(clazz);","lastModifiedDate":"2023-05-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Removes all handlers from the {@code logger}.","lastModifiedDate":"2023-07-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Creates a logger named \u0027ab3\u0027, containing a {@code ConsoleHandler} and a {@code FileHandler}.","lastModifiedDate":"2023-07-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets it as the {@code baseLogger}, to be used as the parent logger of all other loggers.","lastModifiedDate":"2023-07-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static void setBaseLogger() {","lastModifiedDate":"2023-07-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        baseLogger \u003d Logger.getLogger(\"ab3\");","lastModifiedDate":"2023-07-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        baseLogger.setUseParentHandlers(false);","lastModifiedDate":"2023-07-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        removeHandlers(baseLogger);","lastModifiedDate":"2023-07-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Level.ALL is used as the level for the handlers because the baseLogger filters the log messages by level","lastModifiedDate":"2023-07-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // already; there is no need to control log message level of the handlers.","lastModifiedDate":"2023-07-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // add a ConsoleHandler to log to the console","lastModifiedDate":"2023-07-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2023-07-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(Level.ALL);","lastModifiedDate":"2023-07-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        baseLogger.addHandler(consoleHandler);","lastModifiedDate":"2023-07-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // add a FileHandler to log to a file","lastModifiedDate":"2023-07-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2023-07-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2023-07-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            fileHandler.setLevel(Level.ALL);","lastModifiedDate":"2023-07-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            baseLogger.addHandler(fileHandler);","lastModifiedDate":"2023-07-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":1,"-":105}},{"path":"src/main/java/seedu/cc/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.core;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!(other instanceof Version)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Version otherVersion \u003d (Version) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return major \u003d\u003d otherVersion.major","lastModifiedDate":"2023-07-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 minor \u003d\u003d otherVersion.minor","lastModifiedDate":"2023-07-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 patch \u003d\u003d otherVersion.patch","lastModifiedDate":"2023-07-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                \u0026\u0026 isEarlyAccess \u003d\u003d otherVersion.isEarlyAccess;","lastModifiedDate":"2023-07-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":1,"-":120}},{"path":"src/main/java/seedu/cc/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.core.index;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (!(other instanceof Index)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Index otherIndex \u003d (Index) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return zeroBasedIndex \u003d\u003d otherIndex.zeroBasedIndex;","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"zeroBasedIndex\", zeroBasedIndex).toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"lyuanww":2,"-":67}},{"path":"src/main/java/seedu/cc/commons/core/tabs/Tabs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.commons.core.tabs;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":" * Represents the tabs in the application.","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"public enum Tabs {","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"    PATIENTS(\"Patients\"),","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"    MEDICAL_HISTORY(\"Medical History\"),","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"    APPOINTMENTS(\"Appointments\");","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"    private final String displayName;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"    Tabs(String displayName) {","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"        this.displayName \u003d displayName;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    public String toString() {","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"        return displayName;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"LimJH2002":21}},{"path":"src/main/java/seedu/cc/commons/exceptions/DataLoadingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.exceptions;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-06-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during loading of data from a file.","lastModifiedDate":"2023-06-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-06-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataLoadingException extends Exception {","lastModifiedDate":"2023-06-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataLoadingException(Exception cause) {","lastModifiedDate":"2023-06-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2023-06-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-06-14"}],"authorContributionMap":{"lyuanww":1,"-":10}},{"path":"src/main/java/seedu/cc/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.exceptions;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":1,"-":20}},{"path":"src/main/java/seedu/cc/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.MainApp;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"lyuanww":2,"-":40}},{"path":"src/main/java/seedu/cc/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":1,"-":34}},{"path":"src/main/java/seedu/cc/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.Config;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"lyuanww":3,"-":20}},{"path":"src/main/java/seedu/cc/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":1,"-":82}},{"path":"src/main/java/seedu/cc/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the JSON object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2023-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid JSON file.","lastModifiedDate":"2023-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize JSON file has to correspond to the structure in the class given here.","lastModifiedDate":"2023-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if loading of the JSON file failed.","lastModifiedDate":"2023-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.info(\"JSON file \" + filePath + \" found.\");","lastModifiedDate":"2023-01-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new DataLoadingException(e);","lastModifiedDate":"2023-06-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":3,"-":141}},{"path":"src/main/java/seedu/cc/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":2,"-":66}},{"path":"src/main/java/seedu/cc/commons/util/ToStringBuilder.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Builds a string representation of an object that is suitable as the return value of {@link Object#toString()}.","lastModifiedDate":"2019-02-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class ToStringBuilder {","lastModifiedDate":"2019-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    private static final String OBJECT_PREFIX \u003d \"{\";","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private static final String OBJECT_SUFFIX \u003d \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    private static final String FIELD_SEPARATOR \u003d \", \";","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private static final String FIELD_NAME_VALUE_SEPARATOR \u003d \"\u003d\";","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private boolean hasField;","lastModifiedDate":"2019-02-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Constructs a {@code ToStringBuilder} whose formatted output will be prefixed with {@code objectName}.","lastModifiedDate":"2019-02-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public ToStringBuilder(String objectName) {","lastModifiedDate":"2019-02-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        stringBuilder.append(objectName).append(OBJECT_PREFIX);","lastModifiedDate":"2019-02-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code ToStringBuilder} whose formatted output will be prefixed with the","lastModifiedDate":"2019-02-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * canonical class name of {@code object}.","lastModifiedDate":"2019-02-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public ToStringBuilder(Object object) {","lastModifiedDate":"2019-02-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this(object.getClass().getCanonicalName());","lastModifiedDate":"2019-02-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Adds a field name/value pair to the output string.","lastModifiedDate":"2019-02-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-02-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param fieldName The name of the field.","lastModifiedDate":"2019-02-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param fieldValue The value of the field.","lastModifiedDate":"2019-02-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return A reference to this {@code ToStringBuilder} object, allowing method calls to be chained.","lastModifiedDate":"2019-02-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public ToStringBuilder add(String fieldName, Object fieldValue) {","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (hasField) {","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            stringBuilder.append(FIELD_SEPARATOR);","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        stringBuilder.append(fieldName).append(FIELD_NAME_VALUE_SEPARATOR).append(fieldValue);","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        hasField \u003d true;","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the built formatted string representation.","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return stringBuilder.toString() + OBJECT_SUFFIX;","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-23"}],"authorContributionMap":{"lyuanww":1,"-":52}},{"path":"src/main/java/seedu/cc/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import javafx.beans.property.IntegerProperty;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-18"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":" * API of the NewLogic component","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"     * @see seedu.cc.model.Model#getClinicBook()","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"    ReadOnlyClinicBook getClinicBook();","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"    /** Returns an unmodifiable view of the filtered list of patients */","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"    ObservableList\u003cMedicalHistoryEvent\u003e getFilteredMedicalHistoryEventList();","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"    ObservableList\u003cAppointmentEvent\u003e getFilteredAppointmentList();","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"    Path getClinicBookFilePath();","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"    void setCurrentTab(int tabIndex);","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"    IntegerProperty currentTabProperty();","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"    int getCurrentTab();","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"LimJH2002":9,"pangyyen":9,"lyuanww":7,"-":37}},{"path":"src/main/java/seedu/cc/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import javafx.beans.property.IntegerProperty;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"import javafx.beans.property.SimpleIntegerProperty;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ClinicBookParser;","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.storage.Storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-06-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"    private final ClinicBookParser clinicBookParser;","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"    private final IntegerProperty currentTab \u003d new SimpleIntegerProperty(this, \"currentTab\", 0);","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"        clinicBookParser \u003d new ClinicBookParser();","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"        this.model.currentTabProperty().addListener((observable, oldValue, newValue) -\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"            // Update LogicManager\u0027s currentTab property with the new value","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"            this.currentTab.set(newValue.intValue());","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"        });","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"        Command command \u003d clinicBookParser.parseCommand(commandText);","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"            storage.saveClinicBook(model.getClinicBook());","lastModifiedDate":"2023-10-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        } catch (AccessDeniedException e) {","lastModifiedDate":"2023-06-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);","lastModifiedDate":"2023-06-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);","lastModifiedDate":"2023-06-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"    public ReadOnlyClinicBook getClinicBook() {","lastModifiedDate":"2023-10-18"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"        return model.getClinicBook();","lastModifiedDate":"2023-10-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-10-18"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"        return model.getFilteredPatientList();","lastModifiedDate":"2023-10-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":84,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"lyuanww"},"content":"    public ObservableList\u003cMedicalHistoryEvent\u003e getFilteredMedicalHistoryEventList() {","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"lyuanww"},"content":"        return model.getFilteredMedicalHistoryEventList();","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":90,"author":{"gitId":"pangyyen"},"content":"    public ObservableList\u003cAppointmentEvent\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-10-31"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2023-10-27"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"pangyyen"},"content":"    public Path getClinicBookFilePath() {","lastModifiedDate":"2023-10-18"},{"lineNumber":96,"author":{"gitId":"pangyyen"},"content":"        return model.getClinicBookFilePath();","lastModifiedDate":"2023-10-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"LimJH2002"},"content":"    public IntegerProperty currentTabProperty() {","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"LimJH2002"},"content":"        return currentTab;","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"    public int getCurrentTab() {","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"        return currentTab.get();","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"LimJH2002"},"content":"    public void setCurrentTab(int tab) {","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"        model.setCurrentTab(tab);","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"        this.currentTab.set(tab);","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"LimJH2002":26,"pangyyen":14,"lyuanww":15,"-":66}},{"path":"src/main/java/seedu/cc/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.Prefix;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2023-10-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_INVALID_MEDICAL_HISTORY_EVENT_DISPLAYED_INDEX \u003d \"The medical history event \"","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"            + \"index provided is invalid\";","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_EVENT_DISPLAYED_INDEX \u003d \"The appointment event \"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"            + \"index provided is invalid\";","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"    public static String format(Patient patient) {","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"        builder.append(patient.getName())","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"                .append(patient.getPhone())","lastModifiedDate":"2023-10-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"                .append(patient.getEmail())","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"                .append(patient.getAddress())","lastModifiedDate":"2023-10-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                .append(\"; Tags: \");","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"        patient.getTags().forEach(builder::append);","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"     * Formats the {@code event} for display to the user.","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"    public static String format(MedicalHistoryEvent event, Patient patient) {","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"        builder.append(\"Patient: \")","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"                .append(patient.getName())","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"                .append(\"\\nDate: \")","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"                .append(event.getDate())","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"                .append(\"\\nMedical Condition: \")","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"                .append(event.getMedicalCondition())","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"                .append(\"\\nTreatment: \")","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"                .append(event.getTreatment());","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"     * Formats the {@code event} for display to the user.","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"pangyyen"},"content":"    public static String format(AppointmentEvent event, Patient patient) {","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"pangyyen"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"pangyyen"},"content":"        builder.append(\"Patient: \")","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"                .append(patient.getName())","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"                .append(\"\\nDate: \")","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"pangyyen"},"content":"                .append(event.getLocalDate())","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"pangyyen"},"content":"                .append(\"\\nTime: \")","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"pangyyen"},"content":"                .append(event.getLocalTime());","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"pangyyen"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"pangyyen":40,"lyuanww":6,"-":41}},{"path":"src/main/java/seedu/cc/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":" * Adds a patient to the address book.","lastModifiedDate":"2023-10-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"    public static final String COMMAND_WORD \u003d \"add-patient\";","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the clinic book. \"","lastModifiedDate":"2023-10-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the address book\";","lastModifiedDate":"2023-10-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"    private final Patient toAdd;","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"    public AddCommand(Patient patient) {","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"        if (model.hasPatient(toAdd)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"        model.addPatient(toAdd);","lastModifiedDate":"2023-10-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"pangyyen":8,"lyuanww":15,"-":61}},{"path":"src/main/java/seedu/cc/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-18"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"        model.setClinicBook(new ClinicBook());","lastModifiedDate":"2023-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"pangyyen":2,"lyuanww":2,"-":19}},{"path":"src/main/java/seedu/cc/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":3,"-":17}},{"path":"src/main/java/seedu/cc/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .add(\"feedbackToUser\", feedbackToUser)","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .add(\"showHelp\", showHelp)","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .add(\"exit\", exit)","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":2,"-":80}},{"path":"src/main/java/seedu/cc/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"    public static final String COMMAND_WORD \u003d \"delete-patient\";","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"        Patient personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"        model.deletePatient(personToDelete);","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, Messages.format(personToDelete)));","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof DeleteCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return targetIndex.equals(otherDeleteCommand.targetIndex);","lastModifiedDate":"2023-07-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"pangyyen":5,"lyuanww":7,"-":57}},{"path":"src/main/java/seedu/cc/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.CollectionUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Nric;","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"    public static final String COMMAND_WORD \u003d \"edit-patient\";","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Patient: %1$s\";","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"    private final EditPatientDescriptor editPatientDescriptor;","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"     * @param editPatientDescriptor details to edit the person with","lastModifiedDate":"2023-10-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"    public EditCommand(Index index, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2023-10-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(editPatientDescriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-10-18"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);","lastModifiedDate":"2023-10-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"pangyyen"},"content":"        if (!patientToEdit.isSamePerson(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {","lastModifiedDate":"2023-10-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"pangyyen"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2023-10-25"},{"lineNumber":88,"author":{"gitId":"pangyyen"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-18"},{"lineNumber":89,"author":{"gitId":"pangyyen"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient)));","lastModifiedDate":"2023-10-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"pangyyen"},"content":"    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPersonDescriptor) {","lastModifiedDate":"2023-10-18"},{"lineNumber":97,"author":{"gitId":"pangyyen"},"content":"        assert patientToEdit !\u003d null;","lastModifiedDate":"2023-10-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"pangyyen"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(patientToEdit.getName());","lastModifiedDate":"2023-10-18"},{"lineNumber":100,"author":{"gitId":"pangyyen"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(patientToEdit.getNric());","lastModifiedDate":"2023-10-18"},{"lineNumber":101,"author":{"gitId":"pangyyen"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(patientToEdit.getPhone());","lastModifiedDate":"2023-10-18"},{"lineNumber":102,"author":{"gitId":"pangyyen"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(patientToEdit.getEmail());","lastModifiedDate":"2023-10-18"},{"lineNumber":103,"author":{"gitId":"pangyyen"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(patientToEdit.getAddress());","lastModifiedDate":"2023-10-18"},{"lineNumber":104,"author":{"gitId":"pangyyen"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(patientToEdit.getTags());","lastModifiedDate":"2023-10-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"pangyyen"},"content":"        return new Patient(updatedName, updatedNric, updatedPhone, updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2023-10-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"pangyyen"},"content":"                \u0026\u0026 editPatientDescriptor.equals(otherEditCommand.editPatientDescriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":129,"author":{"gitId":"tanboonkhong"},"content":"                .add(\"editPatientDescriptor\", editPatientDescriptor)","lastModifiedDate":"2023-10-20"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"pangyyen"},"content":"    public static class EditPatientDescriptor {","lastModifiedDate":"2023-10-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"pangyyen"},"content":"        private Nric nric;","lastModifiedDate":"2023-10-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"pangyyen"},"content":"        public EditPatientDescriptor() {}","lastModifiedDate":"2023-10-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":151,"author":{"gitId":"pangyyen"},"content":"        public EditPatientDescriptor(EditPatientDescriptor toCopy) {","lastModifiedDate":"2023-10-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":153,"author":{"gitId":"pangyyen"},"content":"            setNric(toCopy.nric);","lastModifiedDate":"2023-10-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"pangyyen"},"content":"        public void setNric(Nric nric) {","lastModifiedDate":"2023-10-18"},{"lineNumber":175,"author":{"gitId":"lyuanww"},"content":"            this.nric \u003d nric;","lastModifiedDate":"2023-10-20"},{"lineNumber":176,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":177,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":178,"author":{"gitId":"pangyyen"},"content":"        public Optional\u003cNric\u003e getNric() {","lastModifiedDate":"2023-10-18"},{"lineNumber":179,"author":{"gitId":"pangyyen"},"content":"            return Optional.ofNullable(nric);","lastModifiedDate":"2023-10-18"},{"lineNumber":180,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":215,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":216,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":217,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":218,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":230,"author":{"gitId":"pangyyen"},"content":"            if (!(other instanceof EditPatientDescriptor)) {","lastModifiedDate":"2023-10-18"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":234,"author":{"gitId":"pangyyen"},"content":"            EditPatientDescriptor otherEditPersonDescriptor \u003d (EditPatientDescriptor) other;","lastModifiedDate":"2023-10-18"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":236,"author":{"gitId":"pangyyen"},"content":"                    \u0026\u0026 Objects.equals(nric, otherEditPersonDescriptor.nric)","lastModifiedDate":"2023-10-18"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(address, otherEditPersonDescriptor.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(tags, otherEditPersonDescriptor.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":247,"author":{"gitId":"pangyyen"},"content":"                    .add(\"nric\", nric)","lastModifiedDate":"2023-10-18"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                    .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                    .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":255,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"tanboonkhong":2,"pangyyen":40,"lyuanww":20,"-":193}},{"path":"src/main/java/seedu/cc/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"lyuanww":2,"-":17}},{"path":"src/main/java/seedu/cc/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"    private final PatientNameContainsKeywordsPredicate predicate;","lastModifiedDate":"2023-10-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"    public FindCommand(PatientNameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2023-10-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"        model.updateFilteredPatientList(predicate);","lastModifiedDate":"2023-10-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!(other instanceof FindCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return predicate.equals(otherFindCommand.predicate);","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                .add(\"predicate\", predicate)","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"pangyyen":6,"lyuanww":4,"-":48}},{"path":"src/main/java/seedu/cc/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":2,"-":19}},{"path":"src/main/java/seedu/cc/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"LimJH2002":1,"pangyyen":1,"lyuanww":3,"-":19}},{"path":"src/main/java/seedu/cc/logic/commands/SwitchCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.commons.core.tabs.Tabs;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":" * Switches to the tab specified by the index number used in the navigating sidebar.","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"public class SwitchCommand extends Command {","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    public static final String COMMAND_WORD \u003d \"switch\";","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Switched to \";","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches to the tab specified by the index number \"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"            + \"used in the navigating sidebar.\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"            + \"Parameters: INDEX (must be a 1/2/3)\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    private final Index tabIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"     * Creates an SwitchCommand to switch to the tab specified by the index number.","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"    public SwitchCommand(Index tabIndex) {","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(tabIndex);","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"        this.tabIndex \u003d tabIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"        model.setCurrentTab(this.tabIndex.getZeroBased());","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS + \"%s tab\", this.getTabName(this.tabIndex)));","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"    private Tabs getTabName(Index tabIndex) {","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"        switch (tabIndex.getOneBased()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"        case 1:","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"            return Tabs.PATIENTS;","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"        case 2:","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"            return Tabs.MEDICAL_HISTORY;","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"        case 3:","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"            return Tabs.APPOINTMENTS;","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        default:","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"            return null;","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"LimJH2002":50}},{"path":"src/main/java/seedu/cc/logic/commands/appointmentcommands/AddAppointmentEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.commands.appointmentcommands;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_APPT_DATE;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_APPT_TIME;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import java.util.List;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"public class AddAppointmentEventCommand extends Command {","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"    public static final String COMMAND_WORD \u003d \"add-appt\";","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointmentEvent to the patient identified \"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"            + \"by the index number used in the displayed patient list.\\n\"","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"            + PREFIX_APPT_DATE + \"DATE \"","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"            + PREFIX_APPT_TIME + \"TIME\\n\"","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"            + PREFIX_APPT_DATE + \"2023-10-01 \"","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"            + PREFIX_APPT_TIME + \"14:00\";","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_ADD_APPOINTMENT_SUCCESS \u003d \"Successfully added an appointment event: \\n%1$s\";","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_INVALID_INPUT \u003d \"Invalid input. Please enter a valid patient \"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"        + \"index, date, or time.\";","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the address book.\";","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"    private final Index index;","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"    private final AppointmentEvent appointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"     * Adds an appointment event to the patient at {@code index}.","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"     * @param index of the patient in the filtered patient list to edit","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"     * @param appointmentEvent details to edit the patient with","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"    public AddAppointmentEventCommand(Index index, AppointmentEvent appointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-10-25"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"        this.appointmentEvent \u003d appointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-25"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-25"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"        Patient patientToAddAppt \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-10-25"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"        model.addAppointmentEventToPatient(patientToAddAppt, appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_APPOINTMENT_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"                Messages.format(appointmentEvent, patientToAddAppt)));","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-25"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-25"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"            return true;","lastModifiedDate":"2023-10-25"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":77,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":78,"author":{"gitId":"pangyyen"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-25"},{"lineNumber":79,"author":{"gitId":"pangyyen"},"content":"        if (!(other instanceof AddAppointmentEventCommand)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"            return false;","lastModifiedDate":"2023-10-25"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":82,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":83,"author":{"gitId":"pangyyen"},"content":"        AddAppointmentEventCommand otherEditCommand \u003d (AddAppointmentEventCommand) other;","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"pangyyen"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-10-25"},{"lineNumber":85,"author":{"gitId":"pangyyen"},"content":"                \u0026\u0026 appointmentEvent.equals(otherEditCommand.appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":87,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":88,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":89,"author":{"gitId":"pangyyen"},"content":"    public String toString() {","lastModifiedDate":"2023-10-25"},{"lineNumber":90,"author":{"gitId":"pangyyen"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-25"},{"lineNumber":91,"author":{"gitId":"pangyyen"},"content":"                .add(\"index\", index)","lastModifiedDate":"2023-10-25"},{"lineNumber":92,"author":{"gitId":"pangyyen"},"content":"                .add(\"appointmentEvent\", appointmentEvent)","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"pangyyen"},"content":"                .toString();","lastModifiedDate":"2023-10-25"},{"lineNumber":94,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":95,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"pangyyen":94,"lyuanww":1}},{"path":"src/main/java/seedu/cc/logic/commands/appointmentcommands/DeleteAppointmentEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.commands.appointmentcommands;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import java.util.List;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":" * Deletes an appointment event identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"public class DeleteAppointmentEventCommand extends Command {","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"    public static final String COMMAND_WORD \u003d \"delete-appt\";","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"            + \": Deletes the appointment identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"            + PREFIX_PATIENT_INDEX + \"PATIENT INDEX \";","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_DELETE_APPOINTMENT_SUCCESS \u003d \"Deleted Appointment: %1$s\";","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"    private final Index eventIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"    private final Index patientIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"     * Deletes the appointment event at {@code eventIndex} from the patient at {@code patientIndex}.","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"     * @param eventIndex of the appointment event in the filtered appointment event list to delete","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"     * @param patientIndex of the patient in the filtered patient list to delete the appointment event from","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"    public DeleteAppointmentEventCommand(Index eventIndex, Index patientIndex) {","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"        this.eventIndex \u003d eventIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"        List\u003cPatient\u003e lastPatientShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastPatientShownList.size()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"        Patient personToDeleteAppointment \u003d lastPatientShownList.get(patientIndex.getZeroBased());","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"        List\u003cAppointmentEvent\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"        if (eventIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"        AppointmentEvent appointmentEventToDelete \u003d lastShownList.get(eventIndex.getZeroBased());","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"        if (!personToDeleteAppointment.hasAppointmentEvent(appointmentEventToDelete)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"            throw new CommandException(\"This Appointment event does not exist for this patient\");","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"        model.deleteAppointmentEventForPatient(personToDeleteAppointment, appointmentEventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_APPOINTMENT_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"                Messages.format(appointmentEventToDelete, personToDeleteAppointment)));","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"pangyyen"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"pangyyen"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"pangyyen"},"content":"            return true;","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"pangyyen"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"pangyyen"},"content":"        if (!(other instanceof DeleteAppointmentEventCommand)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"pangyyen"},"content":"            return false;","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"pangyyen"},"content":"        DeleteAppointmentEventCommand otherDeleteCommand \u003d (DeleteAppointmentEventCommand) other;","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"pangyyen"},"content":"        return eventIndex.equals(otherDeleteCommand.eventIndex);","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"pangyyen"},"content":"    public String toString() {","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"pangyyen"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"pangyyen"},"content":"                .add(\"eventIndex\", eventIndex)","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"pangyyen"},"content":"                .add(\"patientIndex\", patientIndex)","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"pangyyen"},"content":"                .toString();","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"pangyyen":97,"lyuanww":1}},{"path":"src/main/java/seedu/cc/logic/commands/appointmentcommands/EditAppointmentEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.commands.appointmentcommands;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_APPT_DATE;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_APPT_TIME;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import java.util.List;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.util.CollectionUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":" * Edits the details of an existing appointment event in the address book.","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"public class EditAppointmentEventCommand extends Command {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"    public static final String COMMAND_WORD \u003d \"edit-appt\";","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the appointment \"","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"            + \"identified by the index number used in the displayed appointment list. \"","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\"","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"            + PREFIX_PATIENT_INDEX + \"PATIENT INDEX \"","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"            + PREFIX_APPT_DATE + \"DATE\"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"            + PREFIX_APPT_TIME + \"TIME \";","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Appointment event: %1$s\";","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"    private final Index patientIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"    private final Index eventIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"    private final EditAppointmentEventDescriptor editAppointmentEventDescriptor;","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"     * Edit the appointment event at {@code eventIndex} from the patient at {@code patientIndex}.","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"     * @param patientIndex               of the appointment event in the filtered appointment event list to edit","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"     * @param editAppointmentEventDescriptor details to edit the appointment event with","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"    public EditAppointmentEventCommand(Index eventIndex, Index patientIndex,","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"                                       EditAppointmentEventDescriptor editAppointmentEventDescriptor) {","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"        this.eventIndex \u003d eventIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"        this.editAppointmentEventDescriptor \u003d editAppointmentEventDescriptor;","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"     * Creates and returns a {@code AppointmentEvent} with the details of {@code eventToEdit}","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"     * edited with {@code editAppointmentEventDescriptor}.","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"    private static AppointmentEvent createEditedAppointmentEvent(","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"            AppointmentEvent eventToEdit, EditAppointmentEventDescriptor editAppointmentEventDescriptor) {","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"        LocalDate updatedLocalDate \u003d editAppointmentEventDescriptor.getLocalDate()","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"                .orElse(eventToEdit.getLocalDate());","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"        LocalTime updatedLocalTime \u003d editAppointmentEventDescriptor.getLocalTime()","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"                .orElse(eventToEdit.getLocalTime());","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"        return new AppointmentEvent(updatedLocalDate, updatedLocalTime);","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"pangyyen"},"content":"        List\u003cPatient\u003e lastShownPatientList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"pangyyen"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastShownPatientList.size()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"pangyyen"},"content":"        Patient patientToEditAppointmentEvent \u003d lastShownPatientList.get(patientIndex.getZeroBased());","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"pangyyen"},"content":"        // Check if the index is valid","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"pangyyen"},"content":"        List\u003cAppointmentEvent\u003e lastShownList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"pangyyen"},"content":"        if (eventIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"pangyyen"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"pangyyen"},"content":"        // Retrieve the appointment event from the model based on the index","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"pangyyen"},"content":"        // TODO: fix the violation of Talk to Stranger principle","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"pangyyen"},"content":"        AppointmentEvent eventToEdit \u003d model.getFilteredAppointmentList().get(eventIndex.getZeroBased());","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"pangyyen"},"content":"        // Create a new appointment event with the updated details","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"pangyyen"},"content":"        AppointmentEvent editedEvent \u003d createEditedAppointmentEvent(eventToEdit, editAppointmentEventDescriptor);","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"pangyyen"},"content":"        if (!patientToEditAppointmentEvent.hasAppointmentEvent(eventToEdit)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"pangyyen"},"content":"            throw new CommandException(\"This appointment event does not exist for this patient\");","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":102,"author":{"gitId":"pangyyen"},"content":"        // Update the model with the edited event","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"pangyyen"},"content":"        model.setAppointmentEventForPatient(patientToEditAppointmentEvent, eventToEdit, editedEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"pangyyen"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"pangyyen"},"content":"                Messages.format(editedEvent, patientToEditAppointmentEvent)));","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"pangyyen"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"pangyyen"},"content":"     * corresponding field value of the appointment.","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"pangyyen"},"content":"    public static class EditAppointmentEventDescriptor {","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"pangyyen"},"content":"        private LocalDate localDate;","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"pangyyen"},"content":"        private LocalTime localTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"pangyyen"},"content":"        public EditAppointmentEventDescriptor() {","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"pangyyen"},"content":"        /**","lastModifiedDate":"2023-10-26"},{"lineNumber":121,"author":{"gitId":"pangyyen"},"content":"         * Copy constructor to create a new descriptor by copying the fields from another descriptor.","lastModifiedDate":"2023-10-26"},{"lineNumber":122,"author":{"gitId":"pangyyen"},"content":"         */","lastModifiedDate":"2023-10-26"},{"lineNumber":123,"author":{"gitId":"pangyyen"},"content":"        public EditAppointmentEventDescriptor(EditAppointmentEventDescriptor toCopy) {","lastModifiedDate":"2023-10-26"},{"lineNumber":124,"author":{"gitId":"pangyyen"},"content":"            setLocalDate(toCopy.localDate);","lastModifiedDate":"2023-10-26"},{"lineNumber":125,"author":{"gitId":"pangyyen"},"content":"            setLocalTime(toCopy.localTime);","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":127,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":128,"author":{"gitId":"pangyyen"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2023-10-26"},{"lineNumber":129,"author":{"gitId":"pangyyen"},"content":"            return CollectionUtil.isAnyNonNull(localDate, localTime);","lastModifiedDate":"2023-10-26"},{"lineNumber":130,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":131,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":132,"author":{"gitId":"pangyyen"},"content":"        public Optional\u003cLocalDate\u003e getLocalDate() {","lastModifiedDate":"2023-10-26"},{"lineNumber":133,"author":{"gitId":"pangyyen"},"content":"            return Optional.ofNullable(localDate);","lastModifiedDate":"2023-10-26"},{"lineNumber":134,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":135,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":136,"author":{"gitId":"pangyyen"},"content":"        public void setLocalDate(LocalDate localDate) {","lastModifiedDate":"2023-10-26"},{"lineNumber":137,"author":{"gitId":"pangyyen"},"content":"            this.localDate \u003d localDate;","lastModifiedDate":"2023-10-26"},{"lineNumber":138,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":139,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":140,"author":{"gitId":"pangyyen"},"content":"        public Optional\u003cLocalTime\u003e getLocalTime() {","lastModifiedDate":"2023-10-26"},{"lineNumber":141,"author":{"gitId":"pangyyen"},"content":"            return Optional.ofNullable(localTime);","lastModifiedDate":"2023-10-26"},{"lineNumber":142,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":143,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":144,"author":{"gitId":"pangyyen"},"content":"        public void setLocalTime(LocalTime localTime) {","lastModifiedDate":"2023-10-26"},{"lineNumber":145,"author":{"gitId":"pangyyen"},"content":"            this.localTime \u003d localTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":146,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":147,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":148,"author":{"gitId":"pangyyen"},"content":"        @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":149,"author":{"gitId":"pangyyen"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2023-10-26"},{"lineNumber":150,"author":{"gitId":"pangyyen"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-26"},{"lineNumber":151,"author":{"gitId":"pangyyen"},"content":"                return true;","lastModifiedDate":"2023-10-26"},{"lineNumber":152,"author":{"gitId":"pangyyen"},"content":"            }","lastModifiedDate":"2023-10-26"},{"lineNumber":153,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":154,"author":{"gitId":"pangyyen"},"content":"            // instanceof handles nulls","lastModifiedDate":"2023-10-26"},{"lineNumber":155,"author":{"gitId":"pangyyen"},"content":"            if (!(other instanceof EditAppointmentEventDescriptor)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":156,"author":{"gitId":"pangyyen"},"content":"                return false;","lastModifiedDate":"2023-10-26"},{"lineNumber":157,"author":{"gitId":"pangyyen"},"content":"            }","lastModifiedDate":"2023-10-26"},{"lineNumber":158,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":159,"author":{"gitId":"pangyyen"},"content":"            EditAppointmentEventDescriptor otherDescriptor \u003d (EditAppointmentEventDescriptor) other;","lastModifiedDate":"2023-10-26"},{"lineNumber":160,"author":{"gitId":"pangyyen"},"content":"            return Objects.equals(localDate, otherDescriptor.localDate)","lastModifiedDate":"2023-10-26"},{"lineNumber":161,"author":{"gitId":"pangyyen"},"content":"                    \u0026\u0026 Objects.equals(localTime, otherDescriptor.localTime);","lastModifiedDate":"2023-10-26"},{"lineNumber":162,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":163,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":164,"author":{"gitId":"pangyyen"},"content":"        @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":165,"author":{"gitId":"pangyyen"},"content":"        public int hashCode() {","lastModifiedDate":"2023-10-26"},{"lineNumber":166,"author":{"gitId":"pangyyen"},"content":"            return Objects.hash(localDate, localTime);","lastModifiedDate":"2023-10-26"},{"lineNumber":167,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":168,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":169,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"pangyyen":168,"lyuanww":1}},{"path":"src/main/java/seedu/cc/logic/commands/appointmentcommands/ListAppointmentEventsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.commands.appointmentcommands;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"import java.util.List;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":" * Lists all appointments of a patient.","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"public class ListAppointmentEventsCommand extends Command {","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"    public static final String COMMAND_WORD \u003d \"list-appointments\";","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all appointments of a patient identified by\"","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"            + \"the index number used in the displayed patient list.\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all appointments for: \\n%1$s\";","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"    private final Index patientIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"     * Creates a ListAppointmentEventsCommand to list the appointments of the specified {@code Patient}.","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"    public ListAppointmentEventsCommand(Index patientIndex) {","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"        Patient patient \u003d lastShownList.get(patientIndex.getZeroBased());","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"        model.listAppointmentsEventForPatient(patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"                Messages.format(patient)));","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"pangyyen":51,"lyuanww":1}},{"path":"src/main/java/seedu/cc/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands.exceptions;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"lyuanww":1,"-":16}},{"path":"src/main/java/seedu/cc/logic/commands/medhisteventcommands/AddMedicalHistoryEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands.medhisteventcommands;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TREATMENT;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":" * Adds a medical history event to the patient\u0027s medical history.","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"public class AddMedicalHistoryEventCommand extends Command {","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    public static final String COMMAND_WORD \u003d \"add-medical-history\";","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a medical history event to the patient\u0027s \"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"            + \"medical history.\\n\"","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"            + PREFIX_MEDICAL_CONDITION + \"MEDICAL CONDITION \"","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"            + PREFIX_TREATMENT + \"TREATMENT \";","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New medical history event added: \\n%1$s\";","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    private final MedicalHistoryEvent eventToAdd;","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"    private final Index patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"     * Creates an AddMedicalHistoryEventCommand to add the specified {@code MedicalHistoryEvent}.","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"    public AddMedicalHistoryEventCommand(MedicalHistoryEvent eventToAdd, Index patientIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(eventToAdd);","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(patientIndex);","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"        this.eventToAdd \u003d eventToAdd;","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        Patient patientToAddMedicalHistoryEvent \u003d lastShownList.get(patientIndex.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        model.addMedicalHistoryEvent(patientToAddMedicalHistoryEvent, eventToAdd);","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"                Messages.format(eventToAdd, patientToAddMedicalHistoryEvent)));","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"            return true;","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"        if (!(other instanceof AddMedicalHistoryEventCommand)) {","lastModifiedDate":"2023-10-31"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"            return false;","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"        // state check","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"        AddMedicalHistoryEventCommand e \u003d (AddMedicalHistoryEventCommand) other;","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"        return eventToAdd.equals(e.eventToAdd)","lastModifiedDate":"2023-10-31"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"                \u0026\u0026 patientIndex.equals(e.patientIndex);","lastModifiedDate":"2023-10-31"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":3,"lyuanww":78}},{"path":"src/main/java/seedu/cc/logic/commands/medhisteventcommands/DeleteMedicalHistoryEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands.medhisteventcommands;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":" * Deletes a medical history event identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"public class DeleteMedicalHistoryEventCommand extends Command {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    public static final String COMMAND_WORD \u003d \"delete-medical-history\";","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"            + \": Deletes the medical history identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"            + PREFIX_PATIENT_INDEX + \"PATIENT INDEX \";","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_DELETE_MEDICAL_HISTORY_SUCCESS \u003d \"Deleted Medical History: %1$s\";","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"    private final Index eventIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    private final Index patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"     * Deletes the medical history event at {@code eventIndex} from the patient at {@code patientIndex}.","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"     * @param eventIndex of the medical history event in the filtered medical history event list to delete","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"     * @param patientIndex of the patient in the filtered patient list to delete the medical history event from","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"    public DeleteMedicalHistoryEventCommand(Index eventIndex, Index patientIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"        this.eventIndex \u003d eventIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"        List\u003cPatient\u003e lastPatientShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastPatientShownList.size()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"        Patient patientToDeleteMedicalHistoryEvent \u003d lastPatientShownList.get(patientIndex.getZeroBased());","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        List\u003cMedicalHistoryEvent\u003e lastShownList \u003d model.getFilteredMedicalHistoryEventList();","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"        if (eventIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEDICAL_HISTORY_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-25"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent medicalHistoryEventToDelete \u003d lastShownList.get(eventIndex.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"        if (!patientToDeleteMedicalHistoryEvent.hasMedicalHistoryEvent(medicalHistoryEventToDelete)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(\"This medical history event does not exist for this patient\");","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"        model.deleteMedicalHistoryEvent(patientToDeleteMedicalHistoryEvent, medicalHistoryEventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_MEDICAL_HISTORY_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"                Messages.format(medicalHistoryEventToDelete, patientToDeleteMedicalHistoryEvent)));","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"            return true;","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"lyuanww"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"        if (!(other instanceof DeleteMedicalHistoryEventCommand)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"lyuanww"},"content":"            return false;","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"        DeleteMedicalHistoryEventCommand otherDeleteCommand \u003d (DeleteMedicalHistoryEventCommand) other;","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"lyuanww"},"content":"        return eventIndex.equals(otherDeleteCommand.eventIndex);","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"lyuanww"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"lyuanww"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"lyuanww"},"content":"                .add(\"eventIndex\", eventIndex)","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"lyuanww"},"content":"                .add(\"patientIndex\", patientIndex)","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"lyuanww"},"content":"                .toString();","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":6,"lyuanww":92}},{"path":"src/main/java/seedu/cc/logic/commands/medhisteventcommands/EditMedicalHistoryEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands.medhisteventcommands;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TREATMENT;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.CollectionUtil;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Date;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":" * Edits the details of a medical history event identified by the index number used in the displayed","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":" * medical history event list.","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"public class EditMedicalHistoryEventCommand extends Command {","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"    public static final String COMMAND_WORD \u003d \"edit-medical-history\";","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the medical history event \"","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"            + \"identified by the index number used in the displayed medical history event list. \"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\"","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"            + PREFIX_PATIENT_INDEX + \"PATIENT INDEX \"","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"            + PREFIX_MEDICAL_CONDITION + \"MEDICAL CONDITION \"","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"            + PREFIX_TREATMENT + \"TREATMENT \";","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Medical History Event: %1$s\";","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"    private final Index patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"    private final Index eventIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"    private final EditMedicalHistoryEventDescriptor editMedHistEventDescriptor;","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"     * @param patientIndex               of the medical history event in the filtered medical history event list to edit","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"     * @param editMedHistEventDescriptor details to edit the medical history event with","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"    public EditMedicalHistoryEventCommand(Index eventIndex, Index patientIndex,","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"                                          EditMedicalHistoryEventDescriptor editMedHistEventDescriptor) {","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"        this.eventIndex \u003d eventIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        this.editMedHistEventDescriptor \u003d editMedHistEventDescriptor;","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"     * Creates and returns a new MedicalHistoryEvent with the details of the eventToEdit edited with","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"     * editMedHistEventDescriptor.","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"    private static MedicalHistoryEvent createEditedMedicalHistoryEvent(","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"            MedicalHistoryEvent eventToEdit, EditMedicalHistoryEventDescriptor editMedHistEventDescriptor) {","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"        MedicalCondition updatedMedicalCondition \u003d editMedHistEventDescriptor.getMedicalCondition()","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"                .orElse(eventToEdit.getMedicalCondition());","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"        Date updatedDate \u003d editMedHistEventDescriptor.getDate()","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"                .orElse(eventToEdit.getDate());","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"        Treatment updatedTreatment \u003d editMedHistEventDescriptor.getTreatment()","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"                .orElse(eventToEdit.getTreatment());","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"        return new MedicalHistoryEvent(updatedMedicalCondition, updatedTreatment, updatedDate);","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"        List\u003cPatient\u003e lastShownPatientList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"lyuanww"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastShownPatientList.size()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"lyuanww"},"content":"        Patient patientToEditMedicalHistoryEvent \u003d lastShownPatientList.get(patientIndex.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"lyuanww"},"content":"        // Check if the index is valid","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"lyuanww"},"content":"        List\u003cMedicalHistoryEvent\u003e lastShownList \u003d model.getFilteredMedicalHistoryEventList();","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"lyuanww"},"content":"        if (eventIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MEDICAL_HISTORY_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"lyuanww"},"content":"        // Retrieve the medical history event from the model based on the index","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"pangyyen"},"content":"        // TODO: fix the violation of Talk to Stranger principle","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent eventToEdit \u003d model.getFilteredMedicalHistoryEventList().get(eventIndex.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent editedEvent \u003d createEditedMedicalHistoryEvent(eventToEdit, editMedHistEventDescriptor);","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"lyuanww"},"content":"        if (!patientToEditMedicalHistoryEvent.hasMedicalHistoryEvent(eventToEdit)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(\"This medical history event does not exist for this patient\");","lastModifiedDate":"2023-10-24"},{"lineNumber":105,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":107,"author":{"gitId":"lyuanww"},"content":"        model.setMedicalHistoryEvent(patientToEditMedicalHistoryEvent, eventToEdit, editedEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":108,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"pangyyen"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"pangyyen"},"content":"                Messages.format(editedEvent, patientToEditMedicalHistoryEvent)));","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":114,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":115,"author":{"gitId":"lyuanww"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-31"},{"lineNumber":116,"author":{"gitId":"lyuanww"},"content":"        // short circuit if same object","lastModifiedDate":"2023-10-31"},{"lineNumber":117,"author":{"gitId":"lyuanww"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-31"},{"lineNumber":118,"author":{"gitId":"lyuanww"},"content":"            return true;","lastModifiedDate":"2023-10-31"},{"lineNumber":119,"author":{"gitId":"lyuanww"},"content":"        } else if (!(other instanceof EditMedicalHistoryEventCommand)) {","lastModifiedDate":"2023-10-31"},{"lineNumber":120,"author":{"gitId":"lyuanww"},"content":"            return false;","lastModifiedDate":"2023-10-31"},{"lineNumber":121,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":122,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":123,"author":{"gitId":"lyuanww"},"content":"        // state check","lastModifiedDate":"2023-10-31"},{"lineNumber":124,"author":{"gitId":"lyuanww"},"content":"        EditMedicalHistoryEventCommand e \u003d (EditMedicalHistoryEventCommand) other;","lastModifiedDate":"2023-10-31"},{"lineNumber":125,"author":{"gitId":"lyuanww"},"content":"        return patientIndex.equals(e.patientIndex)","lastModifiedDate":"2023-10-31"},{"lineNumber":126,"author":{"gitId":"lyuanww"},"content":"                \u0026\u0026 eventIndex.equals(e.eventIndex)","lastModifiedDate":"2023-10-31"},{"lineNumber":127,"author":{"gitId":"lyuanww"},"content":"                \u0026\u0026 editMedHistEventDescriptor.equals(e.editMedHistEventDescriptor);","lastModifiedDate":"2023-10-31"},{"lineNumber":128,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":129,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":130,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"lyuanww"},"content":"     * Stores the details to edit the medical history with. Each non-empty field value will replace the","lastModifiedDate":"2023-10-24"},{"lineNumber":132,"author":{"gitId":"lyuanww"},"content":"     * corresponding field value of the medical history.","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"lyuanww"},"content":"    public static class EditMedicalHistoryEventDescriptor {","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"lyuanww"},"content":"        private Date date;","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"lyuanww"},"content":"        private Treatment treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"lyuanww"},"content":"        private MedicalCondition medicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"lyuanww"},"content":"        public EditMedicalHistoryEventDescriptor() {","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"lyuanww"},"content":"        /**","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"lyuanww"},"content":"         * Copy constructor to create a new descriptor by copying the fields from another descriptor.","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"lyuanww"},"content":"         */","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"lyuanww"},"content":"        public EditMedicalHistoryEventDescriptor(EditMedicalHistoryEventDescriptor toCopy) {","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"lyuanww"},"content":"            setDate(toCopy.date);","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"lyuanww"},"content":"            setMedicalCondition(toCopy.medicalCondition);","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"lyuanww"},"content":"            setTreatment(toCopy.treatment);","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":150,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":151,"author":{"gitId":"lyuanww"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"lyuanww"},"content":"            return CollectionUtil.isAnyNonNull(date, medicalCondition, treatment);","lastModifiedDate":"2023-10-24"},{"lineNumber":153,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":155,"author":{"gitId":"lyuanww"},"content":"        public Optional\u003cDate\u003e getDate() {","lastModifiedDate":"2023-10-24"},{"lineNumber":156,"author":{"gitId":"lyuanww"},"content":"            return Optional.ofNullable(date);","lastModifiedDate":"2023-10-24"},{"lineNumber":157,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":158,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":159,"author":{"gitId":"lyuanww"},"content":"        public void setDate(Date date) {","lastModifiedDate":"2023-10-24"},{"lineNumber":160,"author":{"gitId":"lyuanww"},"content":"            this.date \u003d date;","lastModifiedDate":"2023-10-24"},{"lineNumber":161,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":162,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":163,"author":{"gitId":"lyuanww"},"content":"        public Optional\u003cTreatment\u003e getTreatment() {","lastModifiedDate":"2023-10-24"},{"lineNumber":164,"author":{"gitId":"lyuanww"},"content":"            return Optional.ofNullable(treatment);","lastModifiedDate":"2023-10-24"},{"lineNumber":165,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":166,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":167,"author":{"gitId":"lyuanww"},"content":"        public void setTreatment(Treatment treatment) {","lastModifiedDate":"2023-10-24"},{"lineNumber":168,"author":{"gitId":"lyuanww"},"content":"            this.treatment \u003d treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":169,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":170,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":171,"author":{"gitId":"lyuanww"},"content":"        public Optional\u003cMedicalCondition\u003e getMedicalCondition() {","lastModifiedDate":"2023-10-24"},{"lineNumber":172,"author":{"gitId":"lyuanww"},"content":"            return Optional.ofNullable(medicalCondition);","lastModifiedDate":"2023-10-24"},{"lineNumber":173,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":174,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":175,"author":{"gitId":"lyuanww"},"content":"        public void setMedicalCondition(MedicalCondition medicalCondition) {","lastModifiedDate":"2023-10-24"},{"lineNumber":176,"author":{"gitId":"lyuanww"},"content":"            this.medicalCondition \u003d medicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":177,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":178,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":179,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":180,"author":{"gitId":"lyuanww"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2023-10-24"},{"lineNumber":181,"author":{"gitId":"lyuanww"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-24"},{"lineNumber":182,"author":{"gitId":"lyuanww"},"content":"                return true;","lastModifiedDate":"2023-10-24"},{"lineNumber":183,"author":{"gitId":"lyuanww"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":184,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":185,"author":{"gitId":"lyuanww"},"content":"            // instanceof handles nulls","lastModifiedDate":"2023-10-24"},{"lineNumber":186,"author":{"gitId":"lyuanww"},"content":"            if (!(other instanceof EditMedicalHistoryEventDescriptor)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":187,"author":{"gitId":"lyuanww"},"content":"                return false;","lastModifiedDate":"2023-10-24"},{"lineNumber":188,"author":{"gitId":"lyuanww"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":189,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":190,"author":{"gitId":"lyuanww"},"content":"            EditMedicalHistoryEventDescriptor otherDescriptor \u003d (EditMedicalHistoryEventDescriptor) other;","lastModifiedDate":"2023-10-24"},{"lineNumber":191,"author":{"gitId":"lyuanww"},"content":"            return Objects.equals(date, otherDescriptor.date)","lastModifiedDate":"2023-10-24"},{"lineNumber":192,"author":{"gitId":"lyuanww"},"content":"                    \u0026\u0026 Objects.equals(treatment, otherDescriptor.treatment)","lastModifiedDate":"2023-10-24"},{"lineNumber":193,"author":{"gitId":"lyuanww"},"content":"                    \u0026\u0026 Objects.equals(medicalCondition, otherDescriptor.medicalCondition);","lastModifiedDate":"2023-10-24"},{"lineNumber":194,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":195,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":196,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":197,"author":{"gitId":"lyuanww"},"content":"        public int hashCode() {","lastModifiedDate":"2023-10-24"},{"lineNumber":198,"author":{"gitId":"lyuanww"},"content":"            return Objects.hash(date, medicalCondition, treatment);","lastModifiedDate":"2023-10-24"},{"lineNumber":199,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":200,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":201,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":3,"lyuanww":198}},{"path":"src/main/java/seedu/cc/logic/commands/medhisteventcommands/ListMedicalHistoryEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands.medhisteventcommands;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":" * Lists all medical history events of a patient.","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"public class ListMedicalHistoryEventCommand extends Command {","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"    public static final String COMMAND_WORD \u003d \"list-medical-history\";","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"            + \": Lists all medical history events of a patient identified by the index number used in the displayed \"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"            + \"patient list.\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \";","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all medical history for: \\n%1$s\";","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    private final Index patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"    public ListMedicalHistoryEventCommand(Index patientIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"        Patient patient \u003d lastShownList.get(patientIndex.getZeroBased());","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"        model.listMedicalHistoryEvents(patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"                Messages.format(patient)));","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        // short circuit if same object","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"            return true;","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"        } else if (!(other instanceof ListMedicalHistoryEventCommand)) {","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"            return false;","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        // state check","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"        ListMedicalHistoryEventCommand e \u003d (ListMedicalHistoryEventCommand) other;","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"        return patientIndex.equals(e.patientIndex);","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":9,"lyuanww":55}},{"path":"src/main/java/seedu/cc/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.AddCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Nric;","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE,","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2023-10-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2023-07-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-10-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"        Patient person \u003d new Patient(name, nric, phone, email, address, tagList);","lastModifiedDate":"2023-10-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"pangyyen":8,"lyuanww":23,"-":35}},{"path":"src/main/java/seedu/cc/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"     * Prefixes mapped to their respective arguments","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"     **/","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Throws a {@code ParseException} if any of the prefixes given in {@code prefixes} appeared more than","lastModifiedDate":"2023-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * once among the arguments.","lastModifiedDate":"2023-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void verifyNoDuplicatePrefixesFor(Prefix... prefixes) throws ParseException {","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Prefix[] duplicatedPrefixes \u003d Stream.of(prefixes).distinct()","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .filter(prefix -\u003e argMultimap.containsKey(prefix) \u0026\u0026 argMultimap.get(prefix).size() \u003e 1)","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .toArray(Prefix[]::new);","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (duplicatedPrefixes.length \u003e 0) {","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(Messages.getErrorMessageForDuplicatePrefixes(duplicatedPrefixes));","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"lyuanww":6,"-":74}},{"path":"src/main/java/seedu/cc/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-10-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                               PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                               PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"lyuanww"},"content":"        private final int startPosition;","lastModifiedDate":"2023-10-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"lyuanww":3,"-":145}},{"path":"src/main/java/seedu/cc/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"    public static final Prefix PREFIX_APPT_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"    public static final Prefix PREFIX_APPT_TIME \u003d new Prefix(\"t/\");","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    public static final Prefix PREFIX_MEDICAL_CONDITION \u003d new Prefix(\"mc/\");","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    public static final Prefix PREFIX_TREATMENT \u003d new Prefix(\"t/\");","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    public static final Prefix PREFIX_PATIENT_INDEX \u003d new Prefix(\"pi/\");","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"pangyyen":5,"lyuanww":5,"-":13}},{"path":"src/main/java/seedu/cc/logic/parser/ClinicBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-17"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-10-17"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.AddCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.ClearCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-18"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.DeleteCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.EditCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.ExitCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.FindCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.HelpCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.ListCommand;","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.logic.commands.SwitchCommand;","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.appointmentcommands.AddAppointmentEventCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.appointmentcommands.DeleteAppointmentEventCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.appointmentcommands.EditAppointmentEventCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.appointmentcommands.ListAppointmentEventsCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.AddMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.DeleteMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.EditMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.ListMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.appointment.AddAppointmentCommandParser;","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.appointment.DeleteAppointmentEventCommandParser;","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.appointment.EditAppointmentEventCommandParser;","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.appointment.ListAppointmentEventsCommandParser;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.medicalhistory.AddMedicalHistoryEventCommandParser;","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.medicalhistory.DeleteMedicalHistoryEventCommandParser;","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.medicalhistory.EditMedicalHistoryEventCommandParser;","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.medicalhistory.ListMedicalHistoryEventsCommandParser;","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":" * Parses user input.","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-17"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"public class ClinicBookParser {","lastModifiedDate":"2023-10-17"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ClinicBookParser.class);","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2023-10-17"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-17"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-10-17"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-10-17"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-17"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2023-10-17"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-10-17"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-10-17"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2023-10-17"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-10-17"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-10-17"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-10-17"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-10-17"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-10-17"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":77,"author":{"gitId":"pangyyen"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2023-10-18"},{"lineNumber":78,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":79,"author":{"gitId":"pangyyen"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2023-10-18"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":82,"author":{"gitId":"pangyyen"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":83,"author":{"gitId":"pangyyen"},"content":"            return new ClearCommand();","lastModifiedDate":"2023-10-18"},{"lineNumber":84,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":85,"author":{"gitId":"pangyyen"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":86,"author":{"gitId":"pangyyen"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2023-10-18"},{"lineNumber":87,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":88,"author":{"gitId":"pangyyen"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":89,"author":{"gitId":"pangyyen"},"content":"            return new ListCommand();","lastModifiedDate":"2023-10-18"},{"lineNumber":90,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":91,"author":{"gitId":"pangyyen"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":92,"author":{"gitId":"pangyyen"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-10-18"},{"lineNumber":93,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":94,"author":{"gitId":"pangyyen"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-18"},{"lineNumber":95,"author":{"gitId":"pangyyen"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-10-18"},{"lineNumber":96,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":97,"author":{"gitId":"pangyyen"},"content":"        // AppointmentEvent commands","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"pangyyen"},"content":"        case AddAppointmentEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"pangyyen"},"content":"            return new AddAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":101,"author":{"gitId":"pangyyen"},"content":"        case ListAppointmentEventsCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":102,"author":{"gitId":"pangyyen"},"content":"            return new ListAppointmentEventsCommandParser().parse(arguments);","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"pangyyen"},"content":"        case EditAppointmentEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"pangyyen"},"content":"            return new EditAppointmentEventCommandParser().parse(arguments);","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"pangyyen"},"content":"        case DeleteAppointmentEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"pangyyen"},"content":"            return new DeleteAppointmentEventCommandParser().parse(arguments);","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"pangyyen"},"content":"        // Medical History Event commands","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"lyuanww"},"content":"        case AddMedicalHistoryEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"lyuanww"},"content":"            return new AddMedicalHistoryEventCommandParser().parse(arguments);","lastModifiedDate":"2023-10-31"},{"lineNumber":113,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":114,"author":{"gitId":"lyuanww"},"content":"        case ListMedicalHistoryEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"lyuanww"},"content":"            return new ListMedicalHistoryEventsCommandParser().parse(arguments);","lastModifiedDate":"2023-10-24"},{"lineNumber":116,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":117,"author":{"gitId":"lyuanww"},"content":"        case EditMedicalHistoryEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-24"},{"lineNumber":118,"author":{"gitId":"lyuanww"},"content":"            return new EditMedicalHistoryEventCommandParser().parse(arguments);","lastModifiedDate":"2023-10-24"},{"lineNumber":119,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"lyuanww"},"content":"        case DeleteMedicalHistoryEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"lyuanww"},"content":"            return new DeleteMedicalHistoryEventCommandParser().parse(arguments);","lastModifiedDate":"2023-10-24"},{"lineNumber":122,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":123,"author":{"gitId":"LimJH2002"},"content":"        case SwitchCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-26"},{"lineNumber":124,"author":{"gitId":"LimJH2002"},"content":"            return new SwitchCommandParser().parse(arguments);","lastModifiedDate":"2023-10-26"},{"lineNumber":125,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"pangyyen"},"content":"        default:","lastModifiedDate":"2023-10-17"},{"lineNumber":127,"author":{"gitId":"pangyyen"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-10-17"},{"lineNumber":128,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-10-17"},{"lineNumber":129,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":130,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":131,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":132,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"pangyyen":111,"LimJH2002":4,"lyuanww":17}},{"path":"src/main/java/seedu/cc/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.DeleteCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"lyuanww":6,"-":24}},{"path":"src/main/java/seedu/cc/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.EditCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-10-18"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"                        PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-18"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"                    EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);","lastModifiedDate":"2023-07-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"            editPatientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"            editPatientDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"            editPatientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"            editPatientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2023-10-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"            editPatientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2023-10-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPatientDescriptor::setTags);","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"        if (!editPatientDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2023-10-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"        return new EditCommand(index, editPatientDescriptor);","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"pangyyen":11,"lyuanww":17,"-":64}},{"path":"src/main/java/seedu/cc/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.FindCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"        return new FindCommand(new PatientNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2023-10-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"pangyyen":2,"lyuanww":5,"-":27}},{"path":"src/main/java/seedu/cc/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"lyuanww":4,"-":13}},{"path":"src/main/java/seedu/cc/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.StringUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Date;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Nric;","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"     * Parses a {@code String nric} into a {@code Nric}.","lastModifiedDate":"2023-10-17"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-17"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-17"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"     * @throws ParseException if the given {@code nric} is invalid.","lastModifiedDate":"2023-10-17"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"    public static Nric parseNric(String nric) throws ParseException {","lastModifiedDate":"2023-10-17"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-10-17"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"        String trimmedNric \u003d nric.trim();","lastModifiedDate":"2023-10-17"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"        if (!Nric.isValidNric(trimmedNric)) {","lastModifiedDate":"2023-10-17"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-17"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"        return new Nric(trimmedNric);","lastModifiedDate":"2023-10-17"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":123,"author":{"gitId":"pangyyen"},"content":"     * Parses a {@code String date} into a {@code LocalDate}.","lastModifiedDate":"2023-10-25"},{"lineNumber":124,"author":{"gitId":"pangyyen"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-25"},{"lineNumber":125,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":126,"author":{"gitId":"pangyyen"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2023-10-25"},{"lineNumber":127,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":128,"author":{"gitId":"pangyyen"},"content":"    public static LocalDate parseLocalDate(String date) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":129,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-10-25"},{"lineNumber":130,"author":{"gitId":"pangyyen"},"content":"        String trimmedDate \u003d date.trim();","lastModifiedDate":"2023-10-25"},{"lineNumber":131,"author":{"gitId":"pangyyen"},"content":"        if (!AppointmentEvent.isValidDate(trimmedDate)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":132,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(AppointmentEvent.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":133,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":134,"author":{"gitId":"pangyyen"},"content":"        return LocalDate.parse(trimmedDate, DateTimeFormatter.ISO_LOCAL_DATE);","lastModifiedDate":"2023-10-25"},{"lineNumber":135,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":136,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":137,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":138,"author":{"gitId":"pangyyen"},"content":"     * Parses a {@code String time} into a {@code LocalTime}.","lastModifiedDate":"2023-10-25"},{"lineNumber":139,"author":{"gitId":"pangyyen"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-25"},{"lineNumber":140,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":141,"author":{"gitId":"pangyyen"},"content":"     * @throws ParseException if the given {@code time} is invalid.","lastModifiedDate":"2023-10-25"},{"lineNumber":142,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":143,"author":{"gitId":"pangyyen"},"content":"    public static LocalTime parseLocalTime(String time) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":144,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(time);","lastModifiedDate":"2023-10-25"},{"lineNumber":145,"author":{"gitId":"pangyyen"},"content":"        String trimmedTime \u003d time.trim();","lastModifiedDate":"2023-10-25"},{"lineNumber":146,"author":{"gitId":"pangyyen"},"content":"        if (!AppointmentEvent.isValidTime(trimmedTime)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":147,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(AppointmentEvent.TIME_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":148,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":149,"author":{"gitId":"pangyyen"},"content":"        return LocalTime.parse(trimmedTime, DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":150,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":151,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":178,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":179,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":180,"author":{"gitId":"lyuanww"},"content":"     * Parses a {@code String medicalCondition} into a {@code MedicalCondition}.","lastModifiedDate":"2023-10-24"},{"lineNumber":181,"author":{"gitId":"lyuanww"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-24"},{"lineNumber":182,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":183,"author":{"gitId":"lyuanww"},"content":"     * @throws ParseException if the given {@code medicalCondition} is invalid.","lastModifiedDate":"2023-10-24"},{"lineNumber":184,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":185,"author":{"gitId":"lyuanww"},"content":"    public static MedicalCondition parseMedicalCondition(String medicalCondition) throws ParseException {","lastModifiedDate":"2023-10-24"},{"lineNumber":186,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(medicalCondition);","lastModifiedDate":"2023-10-24"},{"lineNumber":187,"author":{"gitId":"lyuanww"},"content":"        String trimmedMedicalCondition \u003d medicalCondition.trim();","lastModifiedDate":"2023-10-24"},{"lineNumber":188,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":189,"author":{"gitId":"lyuanww"},"content":"        return new MedicalCondition(trimmedMedicalCondition);","lastModifiedDate":"2023-10-24"},{"lineNumber":190,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":191,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":192,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":193,"author":{"gitId":"lyuanww"},"content":"     * Parses a {@code String treatment} into a {@code Treatment}.","lastModifiedDate":"2023-10-24"},{"lineNumber":194,"author":{"gitId":"lyuanww"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-24"},{"lineNumber":195,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":196,"author":{"gitId":"lyuanww"},"content":"     * @throws ParseException if the given {@code treatment} is invalid.","lastModifiedDate":"2023-10-24"},{"lineNumber":197,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":198,"author":{"gitId":"lyuanww"},"content":"    public static Treatment parseTreatment(String treatment) throws ParseException {","lastModifiedDate":"2023-10-24"},{"lineNumber":199,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(treatment);","lastModifiedDate":"2023-10-24"},{"lineNumber":200,"author":{"gitId":"lyuanww"},"content":"        String trimmedTreatment \u003d treatment.trim();","lastModifiedDate":"2023-10-24"},{"lineNumber":201,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":202,"author":{"gitId":"lyuanww"},"content":"        return new Treatment(trimmedTreatment);","lastModifiedDate":"2023-10-24"},{"lineNumber":203,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":204,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":205,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":206,"author":{"gitId":"pangyyen"},"content":"     * Parses a {@code String date} into a {@code Date}.","lastModifiedDate":"2023-10-26"},{"lineNumber":207,"author":{"gitId":"pangyyen"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-26"},{"lineNumber":208,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":209,"author":{"gitId":"pangyyen"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2023-10-26"},{"lineNumber":210,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":211,"author":{"gitId":"pangyyen"},"content":"    public static Date parseMedHisDate(String date) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":212,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-10-26"},{"lineNumber":213,"author":{"gitId":"pangyyen"},"content":"        String trimmedDate \u003d date.trim();","lastModifiedDate":"2023-10-26"},{"lineNumber":214,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":215,"author":{"gitId":"pangyyen"},"content":"        return new Date(trimmedDate);","lastModifiedDate":"2023-10-26"},{"lineNumber":216,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"pangyyen":62,"lyuanww":40,"-":115}},{"path":"src/main/java/seedu/cc/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!(other instanceof Prefix)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return prefix.equals(otherPrefix.prefix);","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"lyuanww":1,"-":41}},{"path":"src/main/java/seedu/cc/logic/parser/SwitchCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.logic.commands.SwitchCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":" * Parses input arguments and creates a new SwitchCommand object","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"     * Parses the given {@code String} of arguments in the context of the SwitchCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"     * and returns a SwitchCommand object for execution.","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    public SwitchCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"            if (index.getOneBased() \u003c 1 || index.getOneBased() \u003e 3) {","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"                throw new ParseException(","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"            } else {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"                return new SwitchCommand(index);","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"LimJH2002":35}},{"path":"src/main/java/seedu/cc/logic/parser/appointment/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.parser.appointment;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_APPT_DATE;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_APPT_TIME;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.appointmentcommands.AddAppointmentEventCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentMultimap;","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ParserUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":" * Parses input arguments and creates a new AddAppointmentEventCommand object.","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"public class AddAppointmentCommandParser {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"    public AddAppointmentEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_APPT_DATE, PREFIX_APPT_TIME);","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"        Index index;","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"        try {","lastModifiedDate":"2023-10-25"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"                    AddAppointmentEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_APPT_DATE, PREFIX_APPT_TIME);","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"        if (argMultimap.getValue(PREFIX_APPT_DATE).isEmpty() || argMultimap.getValue(PREFIX_APPT_TIME).isEmpty()) {","lastModifiedDate":"2023-10-25"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-25"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"                    AddAppointmentEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"        LocalDate date \u003d ParserUtil.parseLocalDate(argMultimap.getValue(PREFIX_APPT_DATE).get());","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"        LocalTime time \u003d ParserUtil.parseLocalTime(argMultimap.getValue(PREFIX_APPT_TIME).get());","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"        AppointmentEvent appointmentEvent \u003d new AppointmentEvent(date, time);","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"        return new AddAppointmentEventCommand(index, appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2023-10-25"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2023-10-25"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2023-10-25"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2023-10-25"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2023-10-25"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2023-10-25"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-25"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2023-10-25"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2023-10-25"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"pangyyen":76}},{"path":"src/main/java/seedu/cc/logic/parser/appointment/DeleteAppointmentEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.parser.appointment;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.EditCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.appointmentcommands.DeleteAppointmentEventCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentMultimap;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.Parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ParserUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":" * Parses input arguments and creates a new DeleteAppointmentEventCommand object.","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"public class DeleteAppointmentEventCommandParser implements Parser\u003cDeleteAppointmentEventCommand\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentEventCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"     * and returns a DeleteAppointmentEventCommand object for execution.","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"    public DeleteAppointmentEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PATIENT_INDEX);","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_PATIENT_INDEX);","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"        Index eventIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"            eventIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAppointmentEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"        Index patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"        if (argMultimap.getValue(PREFIX_PATIENT_INDEX).isEmpty()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PATIENT_INDEX).get());","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"                    EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"        return new DeleteAppointmentEventCommand(eventIndex, patientIndex);","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":14,"lyuanww":46}},{"path":"src/main/java/seedu/cc/logic/parser/appointment/EditAppointmentEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.parser.appointment;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_APPT_DATE;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_APPT_TIME;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.appointmentcommands.EditAppointmentEventCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentMultimap;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.Parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ParserUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":" * Parses input arguments and creates a new EditAppointmentEventCommand object.","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"public class EditAppointmentEventCommandParser implements Parser\u003cEditAppointmentEventCommand\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"     * Parses the given {@code String} of arguments in the context of the EditAppointmentEventCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"     * and returns a EditAppointmentEventCommand object for execution.","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"    public EditAppointmentEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PATIENT_INDEX, PREFIX_APPT_DATE, PREFIX_APPT_TIME);","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"        Index eventIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"            eventIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"                    EditAppointmentEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_PATIENT_INDEX, PREFIX_APPT_DATE, PREFIX_APPT_TIME);","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"        Index patientIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"        if (argMultimap.getValue(PREFIX_PATIENT_INDEX).isEmpty()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"                    EditAppointmentEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PATIENT_INDEX).get());","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"                    EditAppointmentEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"        EditAppointmentEventCommand.EditAppointmentEventDescriptor editAppointmentEventDescriptor \u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"                new EditAppointmentEventCommand.EditAppointmentEventDescriptor();","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"        if (argMultimap.getValue(PREFIX_APPT_DATE).isPresent()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"            editAppointmentEventDescriptor.setLocalDate(ParserUtil.parseLocalDate(argMultimap","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"                    .getValue(PREFIX_APPT_DATE).get()));","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"        if (argMultimap.getValue(PREFIX_APPT_TIME).isPresent()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"            editAppointmentEventDescriptor.setLocalTime(ParserUtil.parseLocalTime(argMultimap","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"                    .getValue(PREFIX_APPT_TIME).get()));","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"        return new EditAppointmentEventCommand(eventIndex, patientIndex, editAppointmentEventDescriptor);","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"pangyyen":75}},{"path":"src/main/java/seedu/cc/logic/parser/appointment/ListAppointmentEventsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.parser.appointment;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.appointmentcommands.ListAppointmentEventsCommand;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.Parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ParserUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":" * Parses input arguments and creates a new ListAppointmentEventsCommand object.","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"public class ListAppointmentEventsCommandParser implements Parser\u003cListAppointmentEventsCommand\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"     * Parses the given {@code String} of arguments in the context of the ListAppointmentEventsCommand","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"     * and returns a ListAppointmentEventsCommand object for execution.","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"    public ListAppointmentEventsCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"            return new ListAppointmentEventsCommand(index);","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAppointmentEventsCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"pangyyen":31}},{"path":"src/main/java/seedu/cc/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser.exceptions;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"lyuanww":2,"-":15}},{"path":"src/main/java/seedu/cc/logic/parser/medicalhistory/AddMedicalHistoryEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.parser.medicalhistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TREATMENT;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.AddMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentMultimap;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.Parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ParserUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.Prefix;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Date;","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":" * Parses input arguments and creates a new AddMedicalHistoryEventCommand object.","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"public class AddMedicalHistoryEventCommandParser implements Parser\u003cAddMedicalHistoryEventCommand\u003e {","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"     * Returns true if all of the prefixes contain non-empty {@code Optional} values in the given","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMedicalHistoryEventCommand","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"     * and returns an AddMedicalHistoryEventCommand object for execution.","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"    public AddMedicalHistoryEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MEDICAL_CONDITION, PREFIX_TREATMENT, PREFIX_DATE);","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"        Index index;","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"                    AddMedicalHistoryEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_MEDICAL_CONDITION, PREFIX_TREATMENT, PREFIX_DATE)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"                    AddMedicalHistoryEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"        MedicalCondition medicalCondition \u003d ParserUtil.parseMedicalCondition(argMultimap","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"                .getValue(PREFIX_MEDICAL_CONDITION).get());","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"        Treatment treatment \u003d ParserUtil.parseTreatment(argMultimap.getValue(PREFIX_TREATMENT).get());","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"        Date date \u003d ParserUtil.parseMedHisDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_MEDICAL_CONDITION, PREFIX_TREATMENT, PREFIX_DATE);","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent event \u003d new MedicalHistoryEvent(medicalCondition, treatment, date);","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"        return new AddMedicalHistoryEventCommand(event, index);","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":7,"lyuanww":64}},{"path":"src/main/java/seedu/cc/logic/parser/medicalhistory/DeleteMedicalHistoryEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.parser.medicalhistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.EditCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.DeleteMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentMultimap;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.Parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ParserUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":" * Parses input arguments and creates a new DeleteMedicalHistoryEventCommand object.","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"public class DeleteMedicalHistoryEventCommandParser implements Parser\u003cDeleteMedicalHistoryEventCommand\u003e {","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteMedicalHistoryEventCommand","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"     * and returns a DeleteMedicalHistoryEventCommand object for execution.","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    public DeleteMedicalHistoryEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PATIENT_INDEX);","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_PATIENT_INDEX);","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"        Index eventIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"            eventIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMedicalHistoryEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"        Index patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"        if (argMultimap.getValue(PREFIX_PATIENT_INDEX).isEmpty()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PATIENT_INDEX).get());","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"                    EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        return new DeleteMedicalHistoryEventCommand(eventIndex, patientIndex);","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":6,"lyuanww":54}},{"path":"src/main/java/seedu/cc/logic/parser/medicalhistory/EditMedicalHistoryEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.parser.medicalhistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TREATMENT;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.EditMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentMultimap;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ArgumentTokenizer;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.Parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ParserUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":" * Parses input arguments and creates a new EditMedicalHistoryEventCommand object.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"public class EditMedicalHistoryEventCommandParser implements Parser\u003cEditMedicalHistoryEventCommand\u003e {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"     * Parses the given {@code String} of arguments in the context of the EditMedicalHistoryEventCommand","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"     * and returns a EditMedicalHistoryEventCommand object for execution.","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    public EditMedicalHistoryEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PATIENT_INDEX, PREFIX_MEDICAL_CONDITION, PREFIX_TREATMENT,","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"                        PREFIX_DATE);","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"        Index eventIndex;","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"            eventIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"                    EditMedicalHistoryEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_PATIENT_INDEX, PREFIX_MEDICAL_CONDITION, PREFIX_TREATMENT,","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"                PREFIX_DATE);","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        Index patientIndex;","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"        if (argMultimap.getValue(PREFIX_PATIENT_INDEX).isEmpty()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"                    EditMedicalHistoryEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"            patientIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PATIENT_INDEX).get());","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"                    EditMedicalHistoryEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"        EditMedicalHistoryEventCommand.EditMedicalHistoryEventDescriptor editMedicalHistoryEventDescriptor \u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"                new EditMedicalHistoryEventCommand.EditMedicalHistoryEventDescriptor();","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"        if (argMultimap.getValue(PREFIX_MEDICAL_CONDITION).isPresent()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"            editMedicalHistoryEventDescriptor.setMedicalCondition(ParserUtil.parseMedicalCondition(argMultimap","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"                    .getValue(PREFIX_MEDICAL_CONDITION).get()));","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"        if (argMultimap.getValue(PREFIX_TREATMENT).isPresent()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"            editMedicalHistoryEventDescriptor.setTreatment(ParserUtil.parseTreatment(argMultimap","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"                    .getValue(PREFIX_TREATMENT).get()));","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"            editMedicalHistoryEventDescriptor.setDate(ParserUtil.parseMedHisDate(argMultimap","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"                    .getValue(PREFIX_DATE).get()));","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"        return new EditMedicalHistoryEventCommand(eventIndex, patientIndex, editMedicalHistoryEventDescriptor);","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":14,"lyuanww":69}},{"path":"src/main/java/seedu/cc/logic/parser/medicalhistory/ListMedicalHistoryEventsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.logic.parser.medicalhistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.ListMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.Parser;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.parser.ParserUtil;","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":" * Parses input arguments and creates a new ListMedicalHistoryEventCommand object.","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"public class ListMedicalHistoryEventsCommandParser implements Parser\u003cListMedicalHistoryEventCommand\u003e {","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"     * Parses the given {@code String} of arguments in the context of the ListMedicalHistoryEventCommand","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"     * and returns a ListMedicalHistoryEventCommand object for execution.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    public ListMedicalHistoryEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"        try {","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"            return new ListMedicalHistoryEventCommand(index);","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"                            ListMedicalHistoryEventCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":5,"lyuanww":27}},{"path":"src/main/java/seedu/cc/model/ClinicBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.model;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import java.util.List;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.ClinicBookAppointmentList;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.medicalhistory.ClinicBookMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.UniquePatientList;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"public class ClinicBook implements ReadOnlyClinicBook {","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    private final UniquePatientList patients;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"    private final ClinicBookMedicalHistory clinicBookMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"    private final ClinicBookAppointmentList appointmentsUniqueListClinicBook;","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    /*","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"     *   among constructors.","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"    {","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"        patients \u003d new UniquePatientList();","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"        clinicBookMedicalHistory \u003d new ClinicBookMedicalHistory();","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"        appointmentsUniqueListClinicBook \u003d new ClinicBookAppointmentList();","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"    public ClinicBook() {}","lastModifiedDate":"2023-10-16"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"     * Creates an ClinicBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"    public ClinicBook(ReadOnlyClinicBook toBeCopied) {","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"        this();","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"    //// list overwrite operations","lastModifiedDate":"2023-10-16"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"     * Replaces the contents of the patient list with {@code patients}.","lastModifiedDate":"2023-10-16"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2023-10-16"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        this.patients.setPatients(patients);","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"     * Resets the existing data of this {@code ClinicBook} with {@code newData}.","lastModifiedDate":"2023-10-16"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"    public void resetData(ReadOnlyClinicBook newData) {","lastModifiedDate":"2023-10-16"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(newData);","lastModifiedDate":"2023-10-16"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"        setPatients(newData.getPatientList());","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"    //// person-level operations","lastModifiedDate":"2023-10-16"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the clinic book.","lastModifiedDate":"2023-10-16"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"    public boolean hasPatient(Patient person) {","lastModifiedDate":"2023-10-16"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(person);","lastModifiedDate":"2023-10-16"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"        return patients.contains(person);","lastModifiedDate":"2023-10-16"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"     * Adds a patient to the clinic book.","lastModifiedDate":"2023-10-16"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"     * The patient must not already exist in the clinic book.","lastModifiedDate":"2023-10-16"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"    public void addPatient(Patient p) {","lastModifiedDate":"2023-10-16"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"        patients.add(p);","lastModifiedDate":"2023-10-16"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"     * Replaces the given patient {@code target} in the list with {@code editedPatient}.","lastModifiedDate":"2023-10-16"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"     * {@code target} must exist in the clinic book.","lastModifiedDate":"2023-10-16"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another","lastModifiedDate":"2023-10-16"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"     *  existing patient in the clinic book.","lastModifiedDate":"2023-10-16"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-10-16"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(editedPatient);","lastModifiedDate":"2023-10-16"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"        patients.setPatient(target, editedPatient);","lastModifiedDate":"2023-10-16"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":97,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":98,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":99,"author":{"gitId":"LimJH2002"},"content":"     * Removes {@code key} from this {@code ClinicBook}.","lastModifiedDate":"2023-10-16"},{"lineNumber":100,"author":{"gitId":"LimJH2002"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2023-10-16"},{"lineNumber":101,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"    public void removePatient(Patient key) {","lastModifiedDate":"2023-10-16"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"        patients.remove(key);","lastModifiedDate":"2023-10-16"},{"lineNumber":104,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":105,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":106,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dMedical History Operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":108,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"lyuanww"},"content":"     * Adds a medical history event to a patient\u0027s medical history. This method updates both the patient\u0027s","lastModifiedDate":"2023-10-24"},{"lineNumber":110,"author":{"gitId":"lyuanww"},"content":"     * medical history and the list of medical history events.","lastModifiedDate":"2023-10-24"},{"lineNumber":111,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"lyuanww"},"content":"     * @param patient The patient to whom the medical history event should be added.","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"lyuanww"},"content":"     * @param medicalHistoryEvent The medical history event to add to the patient\u0027s history.","lastModifiedDate":"2023-10-24"},{"lineNumber":114,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"lyuanww"},"content":"    public void addMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEvent) {","lastModifiedDate":"2023-10-24"},{"lineNumber":116,"author":{"gitId":"lyuanww"},"content":"        patients.addMedicalHistoryEvent(patient, medicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":117,"author":{"gitId":"pangyyen"},"content":"        clinicBookMedicalHistory.add(medicalHistoryEvent, patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":119,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"lyuanww"},"content":"     * Lists all medical history events associated with a specific patient.","lastModifiedDate":"2023-10-24"},{"lineNumber":122,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":123,"author":{"gitId":"lyuanww"},"content":"     * @param patient The patient for whom to list the medical history events.","lastModifiedDate":"2023-10-24"},{"lineNumber":124,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":125,"author":{"gitId":"lyuanww"},"content":"    public void listMedicalHistoryEvents(Patient patient) {","lastModifiedDate":"2023-10-24"},{"lineNumber":126,"author":{"gitId":"pangyyen"},"content":"        clinicBookMedicalHistory.listMedicalHistoryEvents(patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":127,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":130,"author":{"gitId":"lyuanww"},"content":"     * Deletes a specific medical history event from a patient\u0027s medical history. This method updates both","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"lyuanww"},"content":"     * the patient\u0027s medical history and the list of medical history events.","lastModifiedDate":"2023-10-24"},{"lineNumber":132,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"lyuanww"},"content":"     * @param patient The patient from whose history the event should be deleted.","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"lyuanww"},"content":"     * @param medicalHistoryEventToDelete The medical history event to delete.","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"lyuanww"},"content":"    public void deleteMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEventToDelete) {","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"lyuanww"},"content":"        patients.deleteMedicalHistoryEvent(patient, medicalHistoryEventToDelete);","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"pangyyen"},"content":"        clinicBookMedicalHistory.delete(medicalHistoryEventToDelete, patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":139,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"lyuanww"},"content":"     * Edits a medical history event in a patient\u0027s medical history. This method updates both the patient\u0027s","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"lyuanww"},"content":"     * medical history and the list of medical history events.","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"lyuanww"},"content":"     * @param patient The patient whose medical history should be edited.","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"lyuanww"},"content":"     * @param medicalHistoryEventToEdit The medical history event to be edited.","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"lyuanww"},"content":"     * @param editedMedicalHistoryEvent The edited version of the medical history event.","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"lyuanww"},"content":"    public void setMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEventToEdit,","lastModifiedDate":"2023-10-24"},{"lineNumber":150,"author":{"gitId":"lyuanww"},"content":"                                       MedicalHistoryEvent editedMedicalHistoryEvent) {","lastModifiedDate":"2023-10-24"},{"lineNumber":151,"author":{"gitId":"lyuanww"},"content":"        patients.setMedicalHistoryEvent(patient, medicalHistoryEventToEdit, editedMedicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"pangyyen"},"content":"        clinicBookMedicalHistory.setMedicalHistoryEvent(medicalHistoryEventToEdit, editedMedicalHistoryEvent, patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":153,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":155,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":156,"author":{"gitId":"pangyyen"},"content":"    public ObservableList\u003cMedicalHistoryEvent\u003e getClinicBookMedicalHistory() {","lastModifiedDate":"2023-10-26"},{"lineNumber":157,"author":{"gitId":"pangyyen"},"content":"        return clinicBookMedicalHistory.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-26"},{"lineNumber":158,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":159,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":160,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dAppointmentEvent Operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":161,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":162,"author":{"gitId":"pangyyen"},"content":"     * Adds an appointment event to a patient\u0027s appointment list. This method updates both the patient\u0027s","lastModifiedDate":"2023-10-26"},{"lineNumber":163,"author":{"gitId":"pangyyen"},"content":"     * appointment list and the list of appointment events.","lastModifiedDate":"2023-10-26"},{"lineNumber":164,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":165,"author":{"gitId":"pangyyen"},"content":"     * @param patient The patient to whom the appointment event should be added.","lastModifiedDate":"2023-10-26"},{"lineNumber":166,"author":{"gitId":"pangyyen"},"content":"     * @param appointmentEvent The appointment event to add to the patient\u0027s appointment list.","lastModifiedDate":"2023-10-26"},{"lineNumber":167,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":168,"author":{"gitId":"pangyyen"},"content":"    public void addAppointment(Patient patient, AppointmentEvent appointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":169,"author":{"gitId":"pangyyen"},"content":"        patients.addAppointment(patient, appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":170,"author":{"gitId":"pangyyen"},"content":"        appointmentsUniqueListClinicBook.add(appointmentEvent, patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":171,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":172,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":173,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":174,"author":{"gitId":"pangyyen"},"content":"     * Edits an appointment event in a patient\u0027s appointment list. This method updates both the patient\u0027s","lastModifiedDate":"2023-10-26"},{"lineNumber":175,"author":{"gitId":"pangyyen"},"content":"     * appointment list and the list of appointment events.","lastModifiedDate":"2023-10-26"},{"lineNumber":176,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":177,"author":{"gitId":"pangyyen"},"content":"     * @param patient The patient whose appointment list should be edited.","lastModifiedDate":"2023-10-26"},{"lineNumber":178,"author":{"gitId":"pangyyen"},"content":"     * @param appointmentEventToEdit The appointment event to be edited.","lastModifiedDate":"2023-10-26"},{"lineNumber":179,"author":{"gitId":"pangyyen"},"content":"     * @param editedAppointmentEvent The edited version of the appointment event.","lastModifiedDate":"2023-10-26"},{"lineNumber":180,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":181,"author":{"gitId":"pangyyen"},"content":"    public void setAppointment(Patient patient, AppointmentEvent appointmentEventToEdit,","lastModifiedDate":"2023-10-26"},{"lineNumber":182,"author":{"gitId":"pangyyen"},"content":"                               AppointmentEvent editedAppointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":183,"author":{"gitId":"pangyyen"},"content":"        patients.setAppointment(patient, appointmentEventToEdit, editedAppointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":184,"author":{"gitId":"pangyyen"},"content":"        appointmentsUniqueListClinicBook.setAppointment(appointmentEventToEdit, editedAppointmentEvent, patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":185,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":186,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":187,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":188,"author":{"gitId":"pangyyen"},"content":"     * Deletes a specific appointment event from a patient\u0027s appointment list. This method updates both","lastModifiedDate":"2023-10-26"},{"lineNumber":189,"author":{"gitId":"pangyyen"},"content":"     * the patient\u0027s appointment list and the list of appointment events.","lastModifiedDate":"2023-10-26"},{"lineNumber":190,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":191,"author":{"gitId":"pangyyen"},"content":"     * @param patient The patient from whose appointment list the event should be deleted.","lastModifiedDate":"2023-10-26"},{"lineNumber":192,"author":{"gitId":"pangyyen"},"content":"     * @param appointmentEventToDelete The appointment event to delete.","lastModifiedDate":"2023-10-26"},{"lineNumber":193,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":194,"author":{"gitId":"pangyyen"},"content":"    public void deleteAppointment(Patient patient, AppointmentEvent appointmentEventToDelete) {","lastModifiedDate":"2023-10-26"},{"lineNumber":195,"author":{"gitId":"pangyyen"},"content":"        patients.deleteAppointment(patient, appointmentEventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":196,"author":{"gitId":"pangyyen"},"content":"        appointmentsUniqueListClinicBook.delete(appointmentEventToDelete, patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":197,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":198,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":199,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":200,"author":{"gitId":"pangyyen"},"content":"     * Lists all appointment events associated with a specific patient.","lastModifiedDate":"2023-10-26"},{"lineNumber":201,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":202,"author":{"gitId":"pangyyen"},"content":"     * @param patient The patient for whom to list the appointment events.","lastModifiedDate":"2023-10-26"},{"lineNumber":203,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":204,"author":{"gitId":"pangyyen"},"content":"    public void listAppointments(Patient patient) {","lastModifiedDate":"2023-10-26"},{"lineNumber":205,"author":{"gitId":"pangyyen"},"content":"        appointmentsUniqueListClinicBook.listAppointments(patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":206,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":207,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":208,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":209,"author":{"gitId":"pangyyen"},"content":"    public ObservableList\u003cAppointmentEvent\u003e getClinicBookAppointments() {","lastModifiedDate":"2023-10-26"},{"lineNumber":210,"author":{"gitId":"pangyyen"},"content":"        return appointmentsUniqueListClinicBook.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-26"},{"lineNumber":211,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":212,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":213,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":214,"author":{"gitId":"LimJH2002"},"content":"    public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2023-10-16"},{"lineNumber":215,"author":{"gitId":"LimJH2002"},"content":"        return patients.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-16"},{"lineNumber":216,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":217,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":218,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":219,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":220,"author":{"gitId":"pangyyen"},"content":"    public String toString() {","lastModifiedDate":"2023-10-26"},{"lineNumber":221,"author":{"gitId":"pangyyen"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-26"},{"lineNumber":222,"author":{"gitId":"pangyyen"},"content":"                .add(\"patients\", patients)","lastModifiedDate":"2023-10-26"},{"lineNumber":223,"author":{"gitId":"pangyyen"},"content":"                .toString();","lastModifiedDate":"2023-10-26"},{"lineNumber":224,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":225,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":226,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":227,"author":{"gitId":"LimJH2002"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-16"},{"lineNumber":228,"author":{"gitId":"LimJH2002"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-16"},{"lineNumber":229,"author":{"gitId":"LimJH2002"},"content":"            return true;","lastModifiedDate":"2023-10-16"},{"lineNumber":230,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":231,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":232,"author":{"gitId":"LimJH2002"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-16"},{"lineNumber":233,"author":{"gitId":"LimJH2002"},"content":"        if (!(other instanceof ClinicBook)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":234,"author":{"gitId":"LimJH2002"},"content":"            return false;","lastModifiedDate":"2023-10-16"},{"lineNumber":235,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":236,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":237,"author":{"gitId":"LimJH2002"},"content":"        ClinicBook otherAddressBook \u003d (ClinicBook) other;","lastModifiedDate":"2023-10-16"},{"lineNumber":238,"author":{"gitId":"LimJH2002"},"content":"        return patients.equals(otherAddressBook.patients);","lastModifiedDate":"2023-10-16"},{"lineNumber":239,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":240,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":241,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":242,"author":{"gitId":"LimJH2002"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-16"},{"lineNumber":243,"author":{"gitId":"LimJH2002"},"content":"        return patients.hashCode();","lastModifiedDate":"2023-10-16"},{"lineNumber":244,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":245,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"LimJH2002":125,"pangyyen":73,"lyuanww":47}},{"path":"src/main/java/seedu/cc/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import javafx.beans.property.IntegerProperty;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    void setUserPrefs(ReadOnlyUserPrefs newUserPrefs);","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"    Path getClinicBookFilePath();","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"    void setClinicBookFilePath(Path clinicBookFilePath);","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"    void setClinicBook(ReadOnlyClinicBook clinicBook);","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"    ReadOnlyClinicBook getClinicBook();","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the clinic book.","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"    boolean hasPatient(Patient patient);","lastModifiedDate":"2023-10-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"     * Deletes the given patient.","lastModifiedDate":"2023-10-18"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"     * The patient must exist in the clinic book.","lastModifiedDate":"2023-10-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"    void deletePatient(Patient target);","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"     * Adds the given patient.","lastModifiedDate":"2023-10-18"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"     * {@code patient} must not already exist in the clinic book.","lastModifiedDate":"2023-10-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"    void addPatient(Patient patient);","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"     * Replaces the given patient {@code target} with {@code editedPatient}.","lastModifiedDate":"2023-10-18"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"     * {@code target} must exist in the clinic book.","lastModifiedDate":"2023-10-18"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another","lastModifiedDate":"2023-10-18"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"     *  existing patient in the clinic book.","lastModifiedDate":"2023-10-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"    void setPatient(Patient target, Patient editedPatient);","lastModifiedDate":"2023-10-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"    /** Returns an unmodifiable view of the filtered patient list */","lastModifiedDate":"2023-10-18"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2023-10-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"     * Updates the filter of the filtered patient list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);","lastModifiedDate":"2023-10-18"},{"lineNumber":92,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Medical History Events \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"pangyyen"},"content":"    ObservableList\u003cMedicalHistoryEvent\u003e getFilteredMedicalHistoryEventList();","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"lyuanww"},"content":"    void addMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":99,"author":{"gitId":"lyuanww"},"content":"    void listMedicalHistoryEvents(Patient patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"lyuanww"},"content":"    void setMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEventToEdit,","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"lyuanww"},"content":"                                 MedicalHistoryEvent editedMedicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"lyuanww"},"content":"    void deleteMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEventToDelete);","lastModifiedDate":"2023-10-24"},{"lineNumber":105,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentEvent Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"pangyyen"},"content":"    ObservableList\u003cAppointmentEvent\u003e getFilteredAppointmentList();","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"pangyyen"},"content":"    void addAppointmentEventToPatient(Patient patient, AppointmentEvent appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"pangyyen"},"content":"    void listAppointmentsEventForPatient(Patient patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"pangyyen"},"content":"    void setAppointmentEventForPatient(Patient patient, AppointmentEvent appointmentEventToEdit,","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"pangyyen"},"content":"                                       AppointmentEvent editedAppointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"pangyyen"},"content":"    void deleteAppointmentEventForPatient(Patient patient, AppointmentEvent appointmentEventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"    void setCurrentTab(int tabIndex);","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":121,"author":{"gitId":"LimJH2002"},"content":"    IntegerProperty currentTabProperty();","lastModifiedDate":"2023-10-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"LimJH2002":29,"pangyyen":18,"lyuanww":13,"-":62}},{"path":"src/main/java/seedu/cc/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"import javafx.beans.property.IntegerProperty;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"import javafx.beans.property.SimpleIntegerProperty;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":" * Represents the in-memory model of the clinic book data.","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    private final ClinicBook clinicBook;","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"    private final UserPrefs newUserPrefs;","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;","lastModifiedDate":"2023-10-18"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    private final FilteredList\u003cMedicalHistoryEvent\u003e filteredMedicalHistoryEvents;","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"    private final FilteredList\u003cAppointmentEvent\u003e filteredAppointmentEvents;","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    private final IntegerProperty currentTab \u003d new SimpleIntegerProperty(this, \"currentTab\", 0);","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"     * Initializes a NewModelManager with the given clinicBook and userPrefs.","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"    public ModelManager(ReadOnlyClinicBook clinicBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"        requireAllNonNull(clinicBook, userPrefs);","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"        logger.fine(\"Initializing with clinic book: \" + clinicBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"        this.clinicBook \u003d new ClinicBook(clinicBook);","lastModifiedDate":"2023-10-18"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"        this.newUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"        this.filteredPatients \u003d new FilteredList\u003c\u003e(this.clinicBook.getPatientList());","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"        this.filteredMedicalHistoryEvents \u003d new FilteredList\u003c\u003e(this.clinicBook.getClinicBookMedicalHistory());","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"        this.filteredAppointmentEvents \u003d new FilteredList\u003c\u003e(this.clinicBook.getClinicBookAppointments());","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"        this(new ClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        return newUserPrefs;","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"        this.newUserPrefs.resetData(userPrefs);","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"        return newUserPrefs.getGuiSettings();","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"        newUserPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2023-10-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"    public Path getClinicBookFilePath() {","lastModifiedDate":"2023-10-18"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"        return newUserPrefs.getClinicBookFilePath();","lastModifiedDate":"2023-10-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"    public void setClinicBookFilePath(Path clinicBookFilePath) {","lastModifiedDate":"2023-10-18"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(clinicBookFilePath);","lastModifiedDate":"2023-10-18"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"        newUserPrefs.setClinicBookFilePath(clinicBookFilePath);","lastModifiedDate":"2023-10-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ClinicBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"lyuanww"},"content":"    public ReadOnlyClinicBook getClinicBook() {","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"lyuanww"},"content":"        return this.clinicBook;","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":96,"author":{"gitId":"lyuanww"},"content":"    public void setClinicBook(ReadOnlyClinicBook clinicBook) {","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"lyuanww"},"content":"        this.clinicBook.resetData(clinicBook);","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"LimJH2002"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-18"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-10-18"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"        return clinicBook.hasPatient(patient);","lastModifiedDate":"2023-10-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":107,"author":{"gitId":"LimJH2002"},"content":"    public void deletePatient(Patient target) {","lastModifiedDate":"2023-10-18"},{"lineNumber":108,"author":{"gitId":"LimJH2002"},"content":"        clinicBook.removePatient(target);","lastModifiedDate":"2023-10-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2023-10-18"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"        clinicBook.addPatient(patient);","lastModifiedDate":"2023-10-18"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"        updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-10-18"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2023-10-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":121,"author":{"gitId":"LimJH2002"},"content":"        clinicBook.setPatient(target, editedPatient);","lastModifiedDate":"2023-10-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":124,"author":{"gitId":"lyuanww"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Medical History Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":125,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":126,"author":{"gitId":"lyuanww"},"content":"    public void addMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEvent) {","lastModifiedDate":"2023-10-24"},{"lineNumber":127,"author":{"gitId":"lyuanww"},"content":"        requireAllNonNull(patient, medicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"lyuanww"},"content":"        clinicBook.addMedicalHistoryEvent(patient, medicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":130,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":132,"author":{"gitId":"lyuanww"},"content":"    public void setMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEventToEdit,","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"lyuanww"},"content":"                                       MedicalHistoryEvent editedMedicalHistoryEvent) {","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"lyuanww"},"content":"        requireAllNonNull(patient, medicalHistoryEventToEdit, editedMedicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"lyuanww"},"content":"        clinicBook.setMedicalHistoryEvent(patient, medicalHistoryEventToEdit, editedMedicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"lyuanww"},"content":"    public void listMedicalHistoryEvents(Patient patient) {","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"lyuanww"},"content":"        requireAllNonNull(patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"lyuanww"},"content":"        clinicBook.listMedicalHistoryEvents(patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"lyuanww"},"content":"    public void deleteMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEventToDelete) {","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"lyuanww"},"content":"        requireAllNonNull(patient, medicalHistoryEventToDelete);","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"lyuanww"},"content":"        clinicBook.deleteMedicalHistoryEvent(patient, medicalHistoryEventToDelete);","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":150,"author":{"gitId":"LimJH2002"},"content":"    public IntegerProperty currentTabProperty() {","lastModifiedDate":"2023-10-26"},{"lineNumber":151,"author":{"gitId":"LimJH2002"},"content":"        return currentTab;","lastModifiedDate":"2023-10-26"},{"lineNumber":152,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":153,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":154,"author":{"gitId":"LimJH2002"},"content":"    public void setCurrentTab(int tab) {","lastModifiedDate":"2023-10-26"},{"lineNumber":155,"author":{"gitId":"LimJH2002"},"content":"        this.currentTab.set(tab);","lastModifiedDate":"2023-10-26"},{"lineNumber":156,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":157,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":158,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":159,"author":{"gitId":"lyuanww"},"content":"    public ObservableList\u003cMedicalHistoryEvent\u003e getFilteredMedicalHistoryEventList() {","lastModifiedDate":"2023-10-24"},{"lineNumber":160,"author":{"gitId":"lyuanww"},"content":"        return filteredMedicalHistoryEvents;","lastModifiedDate":"2023-10-24"},{"lineNumber":161,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":162,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":163,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentEvent Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":164,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":165,"author":{"gitId":"pangyyen"},"content":"    public void addAppointmentEventToPatient(Patient patient, AppointmentEvent appointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":166,"author":{"gitId":"pangyyen"},"content":"        requireAllNonNull(patient, appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":167,"author":{"gitId":"pangyyen"},"content":"        clinicBook.addAppointment(patient, appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":168,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":169,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":170,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":171,"author":{"gitId":"pangyyen"},"content":"    public void listAppointmentsEventForPatient(Patient patient) {","lastModifiedDate":"2023-10-26"},{"lineNumber":172,"author":{"gitId":"pangyyen"},"content":"        requireAllNonNull(patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":173,"author":{"gitId":"pangyyen"},"content":"        clinicBook.listAppointments(patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":174,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":175,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":176,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":177,"author":{"gitId":"pangyyen"},"content":"    public void setAppointmentEventForPatient(Patient patient, AppointmentEvent appointmentEventToEdit,","lastModifiedDate":"2023-10-26"},{"lineNumber":178,"author":{"gitId":"pangyyen"},"content":"                                              AppointmentEvent editedAppointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":179,"author":{"gitId":"pangyyen"},"content":"        requireAllNonNull(patient, appointmentEventToEdit, editedAppointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":180,"author":{"gitId":"pangyyen"},"content":"        clinicBook.setAppointment(patient, appointmentEventToEdit, editedAppointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":181,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":182,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":183,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":184,"author":{"gitId":"pangyyen"},"content":"    public void deleteAppointmentEventForPatient(Patient patient, AppointmentEvent appointmentEventToDelete) {","lastModifiedDate":"2023-10-26"},{"lineNumber":185,"author":{"gitId":"pangyyen"},"content":"        requireAllNonNull(patient, appointmentEventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":186,"author":{"gitId":"pangyyen"},"content":"        clinicBook.deleteAppointment(patient, appointmentEventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":187,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":188,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":189,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-31"},{"lineNumber":190,"author":{"gitId":"pangyyen"},"content":"    public ObservableList\u003cAppointmentEvent\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-10-31"},{"lineNumber":191,"author":{"gitId":"pangyyen"},"content":"        return filteredAppointmentEvents;","lastModifiedDate":"2023-10-31"},{"lineNumber":192,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":193,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":197,"author":{"gitId":"LimJH2002"},"content":"     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of","lastModifiedDate":"2023-10-18"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":201,"author":{"gitId":"LimJH2002"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-10-18"},{"lineNumber":202,"author":{"gitId":"LimJH2002"},"content":"        return filteredPatients;","lastModifiedDate":"2023-10-18"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":206,"author":{"gitId":"LimJH2002"},"content":"    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2023-10-18"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":208,"author":{"gitId":"LimJH2002"},"content":"        filteredPatients.setPredicate(predicate);","lastModifiedDate":"2023-10-18"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":223,"author":{"gitId":"LimJH2002"},"content":"        return clinicBook.equals(otherModelManager.clinicBook)","lastModifiedDate":"2023-10-18"},{"lineNumber":224,"author":{"gitId":"LimJH2002"},"content":"                \u0026\u0026 newUserPrefs.equals(otherModelManager.newUserPrefs)","lastModifiedDate":"2023-10-18"},{"lineNumber":225,"author":{"gitId":"LimJH2002"},"content":"                \u0026\u0026 filteredPatients.equals(otherModelManager.filteredPatients);","lastModifiedDate":"2023-10-18"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"LimJH2002":51,"pangyyen":36,"lyuanww":47,"-":94}},{"path":"src/main/java/seedu/cc/model/ReadOnlyClinicBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.model;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"public interface ReadOnlyClinicBook {","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"     * Returns an unmodifiable view of the patient list.","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"     * This list will not contain any duplicate patients.","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    ObservableList\u003cPatient\u003e getPatientList();","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"    ObservableList\u003cMedicalHistoryEvent\u003e getClinicBookMedicalHistory();","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"    ObservableList\u003cAppointmentEvent\u003e getClinicBookAppointments();","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"LimJH2002":16,"pangyyen":3,"lyuanww":2}},{"path":"src/main/java/seedu/cc/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"    Path getClinicBookFilePath();","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"LimJH2002":1,"lyuanww":2,"-":13}},{"path":"src/main/java/seedu/cc/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    private Path clinicBookFilePath \u003d Paths.get(\"data\" , \"clinicbook.json\");","lastModifiedDate":"2023-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"        setClinicBookFilePath(newUserPrefs.getClinicBookFilePath());","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"    public Path getClinicBookFilePath() {","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"        return clinicBookFilePath;","lastModifiedDate":"2023-10-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"    public void setClinicBookFilePath(Path clinicBookFilePath) {","lastModifiedDate":"2023-10-18"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(clinicBookFilePath);","lastModifiedDate":"2023-10-18"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        this.clinicBookFilePath \u003d clinicBookFilePath;","lastModifiedDate":"2023-10-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"                \u0026\u0026 clinicBookFilePath.equals(otherUserPrefs.clinicBookFilePath);","lastModifiedDate":"2023-10-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"        return Objects.hash(guiSettings, clinicBookFilePath);","lastModifiedDate":"2023-10-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"        sb.append(\"\\nLocal data file location : \" + clinicBookFilePath);","lastModifiedDate":"2023-10-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"LimJH2002":10,"lyuanww":2,"-":75}},{"path":"src/main/java/seedu/cc/model/appointment/AppointmentEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.model.appointment;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":" * Represents a Patient\u0027s appointment in the clinic book.","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)} and {@link #isValidTime(String)}","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"public class AppointmentEvent {","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"    public static final String DATE_MESSAGE_CONSTRAINTS \u003d \"Dates should be in the format YYYY-MM-DD.\";","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"    public static final String TIME_MESSAGE_CONSTRAINTS \u003d \"Times should be in the format HH:MM (24-hour-format).\";","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Appointments should have both a date and a time that \"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"            + \"adhere to the following constraints:\\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"            + \"1. \" + DATE_MESSAGE_CONSTRAINTS + \"\\n\"","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"            + \"2. \" + TIME_MESSAGE_CONSTRAINTS + \".\\n\"","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"            + \"The date and time should represent a valid future appointment time.\";","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"    public final LocalDate date;","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"    public final LocalTime time;","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"     * Constructs an {@code AppointmentEvent} with String.","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"     * @param date A valid date String.","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"     * @param time A valid time String.","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"    public AppointmentEvent(String date, String time) {","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(time);","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"        checkArgument(isValidDate(date), DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"        checkArgument(isValidTime(time), TIME_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"        this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"        this.time \u003d LocalTime.parse(time);","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"     * Constructs an {@code AppointmentEvent} with LocalDate and LocalTime.","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"     * @param date A valid LocalDate.","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"     * @param time A valid LocalTime.","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"    public AppointmentEvent(LocalDate date, LocalTime time) {","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-10-25"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"        requireNonNull(time);","lastModifiedDate":"2023-10-25"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"        checkArgument(isValidDate(date), DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"        checkArgument(isValidTime(time), TIME_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"        this.time \u003d time;","lastModifiedDate":"2023-10-25"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"     * Returns true if a given LocalDate is in valid format","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"    public static boolean isValidDate(LocalDate testDate) {","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"            LocalDate.parse(testDate.toString(), DateTimeFormatter.ISO_LOCAL_DATE);","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"            return true;","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"            return false;","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"     * Returns true if a given string is a valid date.","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"    public static boolean isValidDate(String testDate) {","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"        try {","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"            LocalDate.parse(testDate, DateTimeFormatter.ISO_LOCAL_DATE);","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"            return true;","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"pangyyen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"pangyyen"},"content":"            return false;","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":83,"author":{"gitId":"pangyyen"},"content":"     * Returns true if a given string is a valid time.","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":85,"author":{"gitId":"pangyyen"},"content":"    public static boolean isValidTime(LocalTime testTime) {","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"pangyyen"},"content":"        try {","lastModifiedDate":"2023-10-25"},{"lineNumber":87,"author":{"gitId":"pangyyen"},"content":"            LocalTime.parse(testTime.toString(), DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"pangyyen"},"content":"            return true;","lastModifiedDate":"2023-10-25"},{"lineNumber":89,"author":{"gitId":"pangyyen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-25"},{"lineNumber":90,"author":{"gitId":"pangyyen"},"content":"            return false;","lastModifiedDate":"2023-10-25"},{"lineNumber":91,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":92,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":93,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":94,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":95,"author":{"gitId":"pangyyen"},"content":"     * Returns true if a given string is a valid time.","lastModifiedDate":"2023-10-25"},{"lineNumber":96,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":97,"author":{"gitId":"pangyyen"},"content":"    public static boolean isValidTime(String testTime) {","lastModifiedDate":"2023-10-25"},{"lineNumber":98,"author":{"gitId":"pangyyen"},"content":"        try {","lastModifiedDate":"2023-10-25"},{"lineNumber":99,"author":{"gitId":"pangyyen"},"content":"            LocalTime.parse(testTime, DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2023-10-25"},{"lineNumber":100,"author":{"gitId":"pangyyen"},"content":"            return true;","lastModifiedDate":"2023-10-25"},{"lineNumber":101,"author":{"gitId":"pangyyen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-25"},{"lineNumber":102,"author":{"gitId":"pangyyen"},"content":"            return false;","lastModifiedDate":"2023-10-25"},{"lineNumber":103,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":104,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":105,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":106,"author":{"gitId":"pangyyen"},"content":"    public LocalDate getLocalDate() {","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"pangyyen"},"content":"        return date;","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"pangyyen"},"content":"    public LocalTime getLocalTime() {","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"pangyyen"},"content":"        return time;","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":115,"author":{"gitId":"pangyyen"},"content":"    public String toString() {","lastModifiedDate":"2023-10-25"},{"lineNumber":116,"author":{"gitId":"pangyyen"},"content":"        return \"AppointmentEvent Date: \"","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"pangyyen"},"content":"                + date.format(DateTimeFormatter.ISO_LOCAL_DATE) + \" \"","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"pangyyen"},"content":"                + time.format(DateTimeFormatter.ofPattern(\"HH:mm\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":120,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":121,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":122,"author":{"gitId":"pangyyen"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-25"},{"lineNumber":123,"author":{"gitId":"pangyyen"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-25"},{"lineNumber":124,"author":{"gitId":"pangyyen"},"content":"            return true;","lastModifiedDate":"2023-10-25"},{"lineNumber":125,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":126,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":127,"author":{"gitId":"pangyyen"},"content":"        if (!(other instanceof AppointmentEvent)) {","lastModifiedDate":"2023-10-26"},{"lineNumber":128,"author":{"gitId":"pangyyen"},"content":"            return false;","lastModifiedDate":"2023-10-25"},{"lineNumber":129,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":130,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":131,"author":{"gitId":"pangyyen"},"content":"        AppointmentEvent otherAppointmentEvent \u003d (AppointmentEvent) other;","lastModifiedDate":"2023-10-26"},{"lineNumber":132,"author":{"gitId":"pangyyen"},"content":"        return date.equals(otherAppointmentEvent.date) \u0026\u0026 time.equals(otherAppointmentEvent.time);","lastModifiedDate":"2023-10-26"},{"lineNumber":133,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":134,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":135,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":136,"author":{"gitId":"pangyyen"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-25"},{"lineNumber":137,"author":{"gitId":"pangyyen"},"content":"        return date.hashCode() + time.hashCode();","lastModifiedDate":"2023-10-25"},{"lineNumber":138,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":139,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"pangyyen":139}},{"path":"src/main/java/seedu/cc/model/appointment/ClinicBookAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.model.appointment;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":" * A list of medical history events that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":" * A medical history event is considered unique by comparing using {@code AppointmentEvent#equals(Object)}.","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"public class ClinicBookAppointmentList implements Iterable\u003cAppointmentEvent\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"    private final ObservableList\u003cAppointmentEvent\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"    private final ObservableList\u003cAppointmentEvent\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    private Patient currentPatient \u003d null;","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"     * Returns true if the list contains an equivalent medical history event as the given argument.","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"    public boolean contains(AppointmentEvent toCheck) {","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"        return internalList.contains(toCheck);","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"     * Adds a medical history event to the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"     * The event must not already exist in the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"    public void add(AppointmentEvent toAdd, Patient patient) {","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"        if (!patient.equals(currentPatient)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"            return;","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"     * Replaces the given medical history event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"     * The medical history event must not be the same as another existing event in the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"    public void setAppointment(AppointmentEvent target, AppointmentEvent editedEvent, Patient patient) {","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"        if (!target.equals(editedEvent) \u0026\u0026 contains(editedEvent)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"        if (!patient.equals(currentPatient)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"            return;","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"        internalList.set(index, editedEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"     * Deletes the given medical history event.","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"     * The event must exist in the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"pangyyen"},"content":"    public void delete(AppointmentEvent toDelete, Patient patient) {","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"        requireAllNonNull(toDelete, patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"        if (!patient.equals(currentPatient)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"lyuanww"},"content":"            return;","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"lyuanww"},"content":"        if (!internalList.remove(toDelete)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"pangyyen"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"lyuanww"},"content":"     * Lists all medical history events associated with a specific patient.","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"lyuanww"},"content":"     * @param patient The patient for whom to list the medical history events.","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"pangyyen"},"content":"    public void listAppointments(Patient patient) {","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"lyuanww"},"content":"        currentPatient \u003d patient;","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"pangyyen"},"content":"        internalList.setAll(patient.getClinicBookAppointmentList());","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"lyuanww"},"content":"     * Returns a list of all medical history events in this list.","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"pangyyen"},"content":"    public List\u003cAppointmentEvent\u003e getAllAppointments() {","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"lyuanww"},"content":"        return new ArrayList\u003c\u003e(internalList);","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":107,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":108,"author":{"gitId":"pangyyen"},"content":"    public ObservableList\u003cAppointmentEvent\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"lyuanww"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-10-24"},{"lineNumber":110,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":111,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"pangyyen"},"content":"    public Iterator\u003cAppointmentEvent\u003e iterator() {","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"lyuanww"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":116,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":117,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":20,"lyuanww":97}},{"path":"src/main/java/seedu/cc/model/appointment/PatientAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.model.appointment;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":" * Represents a patient\u0027s appointment list.","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"public class PatientAppointmentList {","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"    private final ArrayList\u003cAppointmentEvent\u003e appointmentEventList;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"     * Creates an empty AppointmentEvent List.","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"    public PatientAppointmentList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"        this.appointmentEventList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"     * Creates an Appointments using the Appointments in the {@code toBeCopied}","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"    public void addAppointmentList(AppointmentEvent appt) {","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"        appointmentEventList.add(appt);","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"     * Returns the ArrayList of Appointments.","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"    public ArrayList\u003cAppointmentEvent\u003e getAppointmentList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"        return this.appointmentEventList;","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"     * Sets the AppointmentEvent at the specified index to the edited AppointmentEvent.","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"    public void setAppointment(AppointmentEvent apptToEdit, AppointmentEvent editedAppt) {","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"        int index \u003d appointmentEventList.indexOf(apptToEdit);","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c appointmentEventList.size()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"            appointmentEventList.set(index, editedAppt);","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"     * Deletes the specified AppointmentEvent from the Appointments.","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"    public void deleteAppointment(AppointmentEvent eventToDelete) {","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"        int index \u003d appointmentEventList.indexOf(eventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c appointmentEventList.size()) {","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"            appointmentEventList.remove(index);","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"     * Returns true if the Appointments contains the specified AppointmentEvent.","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"    public boolean hasAppointment(AppointmentEvent event) {","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"        int s \u003d 1;","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"        boolean as \u003d appointmentEventList.get(0).equals(event);","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"        return appointmentEventList.contains(event);","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"pangyyen":62}},{"path":"src/main/java/seedu/cc/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.model.appointment.exceptions;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":" * Signals that the operation is unable to find the specified appointment.","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"public class AppointmentNotFoundException extends RuntimeException {","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"    public AppointmentNotFoundException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"        super(\"AppointmentEvent not found\");","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"pangyyen":10}},{"path":"src/main/java/seedu/cc/model/appointment/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.model.appointment.exceptions;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":" * Signals that the operation will result in duplicate AppointmentEvent","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":" * (Appointments are considered duplicates if they have the same","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":" * identity).","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"        super(\"Operation would result in duplicate appointment\");","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"pangyyen":12}},{"path":"src/main/java/seedu/cc/model/medicalhistory/ClinicBookMedicalHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.medicalhistory;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import java.util.List;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.expections.DuplicateMedicalHistoryEventException;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.expections.MedicalHistoryEventNotFoundException;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":" * A list of medical history events that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":" * A medical history event is considered unique by comparing using {@code MedicalHistoryEvent#equals(Object)}.","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"public class ClinicBookMedicalHistory implements Iterable\u003cMedicalHistoryEvent\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    private final ObservableList\u003cMedicalHistoryEvent\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    private final ObservableList\u003cMedicalHistoryEvent\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    private Patient currentPatient \u003d null;","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"     * Returns true if the list contains an equivalent medical history event as the given argument.","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"    public boolean contains(MedicalHistoryEvent toCheck) {","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"        return internalList.contains(toCheck);","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"     * Adds a medical history event to the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"     * The event must not already exist in the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"    public void add(MedicalHistoryEvent toAdd, Patient patient) {","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"            throw new DuplicateMedicalHistoryEventException();","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"        if (!patient.equals(currentPatient)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"            return;","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"     * Replaces the given medical history event {@code target} in the list with {@code editedEvent}.","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"     * The medical history event must not be the same as another existing event in the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"    public void setMedicalHistoryEvent(MedicalHistoryEvent target, MedicalHistoryEvent editedEvent, Patient patient) {","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"            throw new MedicalHistoryEventNotFoundException();","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"        if (!target.equals(editedEvent) \u0026\u0026 contains(editedEvent)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"            throw new DuplicateMedicalHistoryEventException();","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"        if (!patient.equals(currentPatient)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"            return;","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"        internalList.set(index, editedEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"     * Deletes the given medical history event.","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"     * The event must exist in the list.","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"    public void delete(MedicalHistoryEvent toDelete, Patient patient) {","lastModifiedDate":"2023-10-24"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"        requireAllNonNull(toDelete, patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"        if (!patient.equals(currentPatient)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":82,"author":{"gitId":"lyuanww"},"content":"            return;","lastModifiedDate":"2023-10-24"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":84,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":85,"author":{"gitId":"lyuanww"},"content":"        if (!internalList.remove(toDelete)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":86,"author":{"gitId":"lyuanww"},"content":"            throw new MedicalHistoryEventNotFoundException();","lastModifiedDate":"2023-10-24"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":88,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":89,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":91,"author":{"gitId":"lyuanww"},"content":"     * Lists all medical history events associated with a specific patient.","lastModifiedDate":"2023-10-24"},{"lineNumber":92,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":93,"author":{"gitId":"lyuanww"},"content":"     * @param patient The patient for whom to list the medical history events.","lastModifiedDate":"2023-10-24"},{"lineNumber":94,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":95,"author":{"gitId":"lyuanww"},"content":"    public void listMedicalHistoryEvents(Patient patient) {","lastModifiedDate":"2023-10-24"},{"lineNumber":96,"author":{"gitId":"lyuanww"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":97,"author":{"gitId":"lyuanww"},"content":"        currentPatient \u003d patient;","lastModifiedDate":"2023-10-24"},{"lineNumber":98,"author":{"gitId":"pangyyen"},"content":"        internalList.setAll(patient.getClinicBookMedicalHistory());","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":100,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"lyuanww"},"content":"     * Returns a list of all medical history events in this list.","lastModifiedDate":"2023-10-24"},{"lineNumber":103,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":104,"author":{"gitId":"lyuanww"},"content":"    public List\u003cMedicalHistoryEvent\u003e getAllMedicalHistoryEvents() {","lastModifiedDate":"2023-10-24"},{"lineNumber":105,"author":{"gitId":"lyuanww"},"content":"        return new ArrayList\u003c\u003e(internalList);","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":107,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":108,"author":{"gitId":"lyuanww"},"content":"    public ObservableList\u003cMedicalHistoryEvent\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"lyuanww"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-10-24"},{"lineNumber":110,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":111,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"lyuanww"},"content":"    public Iterator\u003cMedicalHistoryEvent\u003e iterator() {","lastModifiedDate":"2023-10-24"},{"lineNumber":114,"author":{"gitId":"lyuanww"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":116,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":117,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":2,"lyuanww":115}},{"path":"src/main/java/seedu/cc/model/medicalhistory/Date.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.medicalhistory;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":" * Represents a medical history event\u0027s date.","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"public class Date {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"    private LocalDate date;","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"    public Date(String date) {","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"        this.date \u003d LocalDate.parse(date);","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"        return date;","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"        return date.toString();","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"            return true;","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        if (!(other instanceof Date)) {","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"            return false;","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"        Date otherDate \u003d (Date) other;","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"        return date.equals(otherDate.date);","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"lyuanww":39}},{"path":"src/main/java/seedu/cc/model/medicalhistory/MedicalCondition.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.medicalhistory;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":" * Represents a patient\u0027s medical condition.","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"public class MedicalCondition {","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"    public final String value;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"    public MedicalCondition(String medicalCondition) {","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"        this.value \u003d medicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"    public String getMedicalCondition() {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"        return value;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"        return value;","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"            return true;","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        if (!(other instanceof MedicalCondition)) {","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"            return false;","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"        MedicalCondition otherMedicalCondition \u003d (MedicalCondition) other;","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"        return value.equals(otherMedicalCondition.value);","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"lyuanww":36}},{"path":"src/main/java/seedu/cc/model/medicalhistory/MedicalHistoryEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.medicalhistory;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":" * Represents a patient\u0027s medical history event.","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"public class MedicalHistoryEvent {","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"    private final MedicalCondition medicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"    private final Treatment treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"    private final Date date;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"     * Creates a MedicalHistoryEvent with the specified medical condition, treatment and date.","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"     * @param medicalCondition","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"     * @param treatment","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"     * @param date","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEvent(MedicalCondition medicalCondition, Treatment treatment, Date date) {","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"        this.medicalCondition \u003d medicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"        this.treatment \u003d treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    public MedicalCondition getMedicalCondition() {","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"        return medicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"    public Treatment getTreatment() {","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        return treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"    public Date getDate() {","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"        return date;","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"        return \"MedicalHistoryEvent{\"","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"                + \"medicalCondition\u003d\u0027\" + medicalCondition + \u0027\\\u0027\u0027","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"                + \", treatment\u003d\u0027\" + treatment + \u0027\\\u0027\u0027","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"                + \", date\u003d\" + date","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"                + \u0027}\u0027;","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"            return true;","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        if (!(other instanceof MedicalHistoryEvent)) {","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"            return false;","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent otherMedicalHistoryEvent \u003d (MedicalHistoryEvent) other;","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        return medicalCondition.equals(otherMedicalHistoryEvent.medicalCondition)","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"                \u0026\u0026 treatment.equals(otherMedicalHistoryEvent.treatment)","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"                \u0026\u0026 date.equals(otherMedicalHistoryEvent.date);","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"lyuanww":62}},{"path":"src/main/java/seedu/cc/model/medicalhistory/PatientMedicalHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.medicalhistory;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":" * Represents a patient\u0027s medical history.","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"public class PatientMedicalHistory {","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"    private final ArrayList\u003cMedicalHistoryEvent\u003e medicalHistoryEvents;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"    public PatientMedicalHistory() {","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"        this.medicalHistoryEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"     * Creates a PatientMedicalHistory using the MedicalHistoryEvents in the {@code toBeCopied}","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"    public void addMedicalHistoryEvent(MedicalHistoryEvent event) {","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"        medicalHistoryEvents.add(event);","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"     * Returns an ArrayList of MedicalHistoryEvents.","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"     * @return ArrayList of MedicalHistoryEvents.","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"    public ArrayList\u003cMedicalHistoryEvent\u003e getMedicalHistoryEvents() {","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        return medicalHistoryEvents;","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"     * Sets the MedicalHistoryEvent at the specified index to the edited MedicalHistoryEvent.","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    public void setMedicalHistoryEvent(MedicalHistoryEvent eventToEdit, MedicalHistoryEvent editedEvent) {","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"        int index \u003d medicalHistoryEvents.indexOf(eventToEdit);","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c medicalHistoryEvents.size()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"            medicalHistoryEvents.set(index, editedEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"     * Deletes the specified MedicalHistoryEvent from the PatientMedicalHistory.","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"    public void deleteMedicalHistoryEvent(MedicalHistoryEvent eventToDelete) {","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"        int index \u003d medicalHistoryEvents.indexOf(eventToDelete);","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c medicalHistoryEvents.size()) {","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"            medicalHistoryEvents.remove(index);","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"     * Returns true if the PatientMedicalHistory contains the specified MedicalHistoryEvent.","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"    public boolean hasMedicalHistoryEvent(MedicalHistoryEvent event) {","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        int s \u003d 1;","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        boolean as \u003d medicalHistoryEvents.get(0).equals(event);","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        return medicalHistoryEvents.contains(event);","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"pangyyen":5,"lyuanww":57}},{"path":"src/main/java/seedu/cc/model/medicalhistory/Treatment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.medicalhistory;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":" * Represents a patient\u0027s treatment.","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"public class Treatment {","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"    public final String value;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"    public Treatment(String treatment) {","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"        this.value \u003d treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"    public String getTreatment() {","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"        return value;","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"    public String toString() {","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"        return value;","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"            return true;","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        if (!(other instanceof Treatment)) {","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"            return false;","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"        Treatment otherTreatment \u003d (Treatment) other;","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"        return value.equals(otherTreatment.value);","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"lyuanww":36}},{"path":"src/main/java/seedu/cc/model/medicalhistory/expections/DuplicateMedicalHistoryEventException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.medicalhistory.expections;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":" * Signals that the operation will result in duplicate MedicalHistoryEvent","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":" * (MedicalHistoryEvents are considered duplicates if they have the same","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":" * identity).","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"public class DuplicateMedicalHistoryEventException extends RuntimeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"    public DuplicateMedicalHistoryEventException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"        super(\"Operation would result in duplicate medical history\");","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"lyuanww":13}},{"path":"src/main/java/seedu/cc/model/medicalhistory/expections/MedicalHistoryEventNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.medicalhistory.expections;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":" * Signals that the operation is unable to find the specified medical history event.","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"public class MedicalHistoryEventNotFoundException extends RuntimeException {","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEventNotFoundException() {","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"        super(\"Medical history not found\");","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"lyuanww":11}},{"path":"src/main/java/seedu/cc/model/patient/Nric.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.model.patient;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":" * Represents a Person\u0027s NRIC in the address book.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"public class Nric {","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"            \"NRIC should contain numbers and letters, and it should be 9 digits long for Singapore \\n\"","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"            + \"Example: S1234567A\";","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    public static final String VALIDATION_REGEX \u003d \"[A-Z]\\\\d{7}[A-Z]\"; // Singapore NRIC format","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"    public final String value;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"     * @param nric A valid nric number.","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"    public Nric(String nric) {","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"        value \u003d nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"    public static boolean isValidNric(String test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"        return value;","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"        if (!(other instanceof Nric)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        Nric otherNric \u003d (Nric) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"        return value.equals(otherNric.value);","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"        return value.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"tanboonkhong":58,"LimJH2002":2,"pangyyen":2,"lyuanww":1}},{"path":"src/main/java/seedu/cc/model/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.patient;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.PatientAppointmentList;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.medicalhistory.PatientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Person;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":" * Represents a Patient in the address book.","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"public class Patient extends Person {","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    private final Nric nric;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"    private PatientAppointmentList patientAppointmentList;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"    private PatientMedicalHistory patientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"     * Every field must be present and not null, except appointment and medical history.","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"    public Patient(Name name, Nric nric, Phone phone, Email email,","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"                   Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"        super(name, phone, email, address, tags);","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"        this.patientAppointmentList \u003d new PatientAppointmentList();","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"        this.patientMedicalHistory \u003d new PatientMedicalHistory();","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"     * Constructor for Patient with PatientMedicalHistory in Storage.","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"    public Patient(Name name, Nric nric, Phone phone, Email email, Address address,","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"                   PatientMedicalHistory patientMedicalHistory, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"        this(name, nric, phone, email, address, tags);","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"        this.patientMedicalHistory \u003d patientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"     * Constructor for Patient with PatientAppointmentList in Storage.","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"    public Patient(Name name, Nric nric, Phone phone, Email email, Address address,","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"                   PatientAppointmentList patientAppointmentList, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"        this(name, nric, phone, email, address, tags);","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"        this.patientAppointmentList \u003d patientAppointmentList;","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"     * Constructor for Patient with PatientAppointmentList and PatientMedicalHistory in Storage.","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"    public Patient(Name name, Nric nric, Phone phone, Email email, Address address,","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"                   PatientAppointmentList patientAppointmentList, PatientMedicalHistory patientMedicalHistory,","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"                   Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"        this(name, nric, phone, email, address, tags);","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"        this.patientAppointmentList \u003d patientAppointmentList;","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"        this.patientMedicalHistory \u003d patientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"    //getters and setters","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"    public Name getName() {","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"        return super.getName();","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"    public Nric getNric() {","lastModifiedDate":"2023-10-16"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"        return this.nric;","lastModifiedDate":"2023-10-16"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"    public Phone getPhone() {","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"        return super.getPhone();","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"    public Email getEmail() {","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"lyuanww"},"content":"        return super.getEmail();","lastModifiedDate":"2023-10-12"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"lyuanww"},"content":"    public Address getAddress() {","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"lyuanww"},"content":"        return super.getAddress();","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"lyuanww"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"        return super.getTags();","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":92,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"pangyyen"},"content":"    public PatientAppointmentList getPatientAppointmentList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"pangyyen"},"content":"        return this.patientAppointmentList;","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"pangyyen"},"content":"    public PatientMedicalHistory getPatientMedicalHistory() {","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"pangyyen"},"content":"        return this.patientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":102,"author":{"gitId":"pangyyen"},"content":"     * Returns true if both patients have the same nric.","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"pangyyen"},"content":"     * This defines a weaker notion of equality between two patients.","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"pangyyen"},"content":"    public boolean isSamePatient(Patient otherPatient) {","lastModifiedDate":"2023-10-25"},{"lineNumber":106,"author":{"gitId":"pangyyen"},"content":"        return super.isSamePerson(otherPatient) \u0026\u0026 this.nric.equals(otherPatient.getNric())","lastModifiedDate":"2023-10-25"},{"lineNumber":107,"author":{"gitId":"pangyyen"},"content":"                \u0026\u0026 this.patientAppointmentList.equals(otherPatient.getAppointmentList())","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"pangyyen"},"content":"                \u0026\u0026 this.patientMedicalHistory.equals(otherPatient.getMedicalHistory());","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"pangyyen"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"pangyyen"},"content":"        return super.equals(other);","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"pangyyen"},"content":"    public String toString() {","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"pangyyen"},"content":"        return super.toString();","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"pangyyen"},"content":"     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":121,"author":{"gitId":"pangyyen"},"content":"     * Methods for Medical History Events","lastModifiedDate":"2023-10-26"},{"lineNumber":122,"author":{"gitId":"pangyyen"},"content":"     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":123,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":124,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":125,"author":{"gitId":"pangyyen"},"content":"    public PatientMedicalHistory getMedicalHistory() {","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"pangyyen"},"content":"        return this.patientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":127,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":128,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":129,"author":{"gitId":"pangyyen"},"content":"    public ArrayList\u003cMedicalHistoryEvent\u003e getClinicBookMedicalHistory() {","lastModifiedDate":"2023-10-26"},{"lineNumber":130,"author":{"gitId":"pangyyen"},"content":"        return this.patientMedicalHistory.getMedicalHistoryEvents();","lastModifiedDate":"2023-10-26"},{"lineNumber":131,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":132,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":133,"author":{"gitId":"lyuanww"},"content":"    public void addMedicalHistoryEvent(MedicalHistoryEvent event) {","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"pangyyen"},"content":"        this.patientMedicalHistory.addMedicalHistoryEvent(event);","lastModifiedDate":"2023-10-26"},{"lineNumber":135,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"lyuanww"},"content":"    public void setMedicalHistoryEvent(MedicalHistoryEvent eventToEdit, MedicalHistoryEvent editedEvent) {","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"pangyyen"},"content":"        this.patientMedicalHistory.setMedicalHistoryEvent(eventToEdit, editedEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":139,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"lyuanww"},"content":"    public void deleteMedicalHistoryEvent(MedicalHistoryEvent eventToDelete) {","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"pangyyen"},"content":"        this.patientMedicalHistory.deleteMedicalHistoryEvent(eventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":143,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"lyuanww"},"content":"    public boolean hasMedicalHistoryEvent(MedicalHistoryEvent event) {","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"pangyyen"},"content":"        return this.patientMedicalHistory.hasMedicalHistoryEvent(event);","lastModifiedDate":"2023-10-26"},{"lineNumber":147,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":150,"author":{"gitId":"pangyyen"},"content":"     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":151,"author":{"gitId":"pangyyen"},"content":"     * Methods for AppointmentEvent","lastModifiedDate":"2023-10-26"},{"lineNumber":152,"author":{"gitId":"pangyyen"},"content":"     * \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":153,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":154,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"pangyyen"},"content":"    public PatientAppointmentList getAppointmentList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":156,"author":{"gitId":"pangyyen"},"content":"        return this.patientAppointmentList;","lastModifiedDate":"2023-10-26"},{"lineNumber":157,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"pangyyen"},"content":"    public ArrayList\u003cAppointmentEvent\u003e getClinicBookAppointmentList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":160,"author":{"gitId":"pangyyen"},"content":"        return this.patientAppointmentList.getAppointmentList();","lastModifiedDate":"2023-10-26"},{"lineNumber":161,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":163,"author":{"gitId":"pangyyen"},"content":"    public boolean hasAppointmentEvent(AppointmentEvent appointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":164,"author":{"gitId":"pangyyen"},"content":"        return this.patientAppointmentList.hasAppointment(appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":165,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":166,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":167,"author":{"gitId":"pangyyen"},"content":"    public void addAppointmentEvent(AppointmentEvent appointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":168,"author":{"gitId":"pangyyen"},"content":"        this.patientAppointmentList.addAppointmentList(appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":169,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":170,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":171,"author":{"gitId":"pangyyen"},"content":"    public void setAppointmentEvent(AppointmentEvent appointmentEventToEdit, AppointmentEvent editedAppointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":172,"author":{"gitId":"pangyyen"},"content":"        this.patientAppointmentList.setAppointment(appointmentEventToEdit, editedAppointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":173,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":174,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":175,"author":{"gitId":"pangyyen"},"content":"    public void deleteAppointmentEvent(AppointmentEvent appointmentEventToDelete) {","lastModifiedDate":"2023-10-26"},{"lineNumber":176,"author":{"gitId":"pangyyen"},"content":"        this.patientAppointmentList.deleteAppointment(appointmentEventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":177,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":178,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"pangyyen":106,"LimJH2002":5,"lyuanww":67}},{"path":"src/main/java/seedu/cc/model/patient/PatientNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.model.patient;","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import java.util.List;","lastModifiedDate":"2023-10-17"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.util.StringUtil;","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-17"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-17"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":" * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"public class PatientNameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2023-10-17"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"    public PatientNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-10-17"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2023-10-17"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"        return keywords.stream()","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"            return true;","lastModifiedDate":"2023-10-17"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-17"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"        if (!(other instanceof PatientNameContainsKeywordsPredicate)) {","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"            return false;","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"        PatientNameContainsKeywordsPredicate otherNameContainsKeywordsPredicate \u003d","lastModifiedDate":"2023-10-17"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"                (PatientNameContainsKeywordsPredicate) other;","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"    @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"    public String toString() {","lastModifiedDate":"2023-10-17"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2023-10-17"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"pangyyen":45}},{"path":"src/main/java/seedu/cc/model/patient/UniquePatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.model.patient;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import static seedu.cc.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import java.util.List;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2023-10-17"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":" * A list of patients that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":" * A patient is considered unique by comparing using {@code Patients#isSamePerson(Patient)}.","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":" * As such, adding and updating of patients uses Patient#isSamePerson(Patient) for equality so as to ensure","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":" * that the patient being added or updated is unique in terms of identity in the UniquePatientList. However,","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":" * the removal of a patient uses Patient#equals(Object) so as to ensure that the patient with exactly the same","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":" * fields will be removed.","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":" *","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":" *","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":" * @see Patient#isSamePerson(Patient)","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"public class UniquePatientList implements Iterable\u003cPatient\u003e {","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"    public boolean contains(Patient toCheck) {","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2023-10-16"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"     * Adds a person to the list.","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"    public void add(Patient toAdd) {","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-10-16"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-10-16"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"     * Replaces the given patient {@code target} in the list with {@code editedPatient}.","lastModifiedDate":"2023-10-16"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another existing patient in the list.","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"    public void setPatient(Patient target, Patient editedPerson) {","lastModifiedDate":"2023-10-16"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2023-10-16"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-16"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-16"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-10-17"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2023-10-17"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2023-10-16"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2023-10-16"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"     * The person must exist in the list.","lastModifiedDate":"2023-10-16"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"    public void remove(Patient toRemove) {","lastModifiedDate":"2023-10-16"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-10-16"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-10-17"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"    public void setPatients(UniquePatientList replacement) {","lastModifiedDate":"2023-10-16"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-10-16"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-10-16"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"     * Replaces the contents of this list with {@code patients}.","lastModifiedDate":"2023-10-16"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2023-10-16"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2023-10-16"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"        requireAllNonNull(patients);","lastModifiedDate":"2023-10-16"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"        if (!patientsAreUnique(patients)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":97,"author":{"gitId":"LimJH2002"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2023-10-17"},{"lineNumber":98,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":99,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":100,"author":{"gitId":"LimJH2002"},"content":"        internalList.setAll(patients);","lastModifiedDate":"2023-10-16"},{"lineNumber":101,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":103,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Medical History Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":106,"author":{"gitId":"lyuanww"},"content":"     * Adds a medical history event to the specified patient.","lastModifiedDate":"2023-10-24"},{"lineNumber":107,"author":{"gitId":"lyuanww"},"content":"     * @param patient","lastModifiedDate":"2023-10-24"},{"lineNumber":108,"author":{"gitId":"lyuanww"},"content":"     * @param medicalHistoryEvent","lastModifiedDate":"2023-10-24"},{"lineNumber":109,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":110,"author":{"gitId":"lyuanww"},"content":"    public void addMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEvent) {","lastModifiedDate":"2023-10-24"},{"lineNumber":111,"author":{"gitId":"lyuanww"},"content":"        requireAllNonNull(patient, medicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":112,"author":{"gitId":"lyuanww"},"content":"        int index \u003d internalList.indexOf(patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":113,"author":{"gitId":"lyuanww"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-24"},{"lineNumber":114,"author":{"gitId":"lyuanww"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-10-24"},{"lineNumber":115,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":116,"author":{"gitId":"lyuanww"},"content":"        patient.addMedicalHistoryEvent(medicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":117,"author":{"gitId":"lyuanww"},"content":"        internalList.set(index, patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":118,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":119,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":120,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":121,"author":{"gitId":"lyuanww"},"content":"     * Sets the MedicalHistoryEvent at the specified index to the edited MedicalHistoryEvent.","lastModifiedDate":"2023-10-24"},{"lineNumber":122,"author":{"gitId":"lyuanww"},"content":"     * @param patient","lastModifiedDate":"2023-10-24"},{"lineNumber":123,"author":{"gitId":"lyuanww"},"content":"     * @param medicalHistoryEventToEdit","lastModifiedDate":"2023-10-24"},{"lineNumber":124,"author":{"gitId":"lyuanww"},"content":"     * @param editedMedicalHistoryEvent","lastModifiedDate":"2023-10-24"},{"lineNumber":125,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":126,"author":{"gitId":"lyuanww"},"content":"    public void setMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEventToEdit,","lastModifiedDate":"2023-10-24"},{"lineNumber":127,"author":{"gitId":"lyuanww"},"content":"                                       MedicalHistoryEvent editedMedicalHistoryEvent) {","lastModifiedDate":"2023-10-24"},{"lineNumber":128,"author":{"gitId":"lyuanww"},"content":"        requireAllNonNull(patient, medicalHistoryEventToEdit, editedMedicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":129,"author":{"gitId":"lyuanww"},"content":"        int index \u003d internalList.indexOf(patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":130,"author":{"gitId":"lyuanww"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-24"},{"lineNumber":131,"author":{"gitId":"lyuanww"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-10-24"},{"lineNumber":132,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":133,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":134,"author":{"gitId":"lyuanww"},"content":"        patient.setMedicalHistoryEvent(medicalHistoryEventToEdit, editedMedicalHistoryEvent);","lastModifiedDate":"2023-10-24"},{"lineNumber":135,"author":{"gitId":"lyuanww"},"content":"        internalList.set(index, patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":136,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":137,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":138,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":139,"author":{"gitId":"lyuanww"},"content":"     * Lists all medical history events associated with a specific patient.","lastModifiedDate":"2023-10-24"},{"lineNumber":140,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":141,"author":{"gitId":"lyuanww"},"content":"     * @param patient The patient for whom to list the medical history events.","lastModifiedDate":"2023-10-24"},{"lineNumber":142,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":143,"author":{"gitId":"lyuanww"},"content":"    public void deleteMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEventToDelete) {","lastModifiedDate":"2023-10-24"},{"lineNumber":144,"author":{"gitId":"lyuanww"},"content":"        requireAllNonNull(patient, medicalHistoryEventToDelete);","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"lyuanww"},"content":"        int index \u003d internalList.indexOf(patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":146,"author":{"gitId":"lyuanww"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-24"},{"lineNumber":147,"author":{"gitId":"lyuanww"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-10-24"},{"lineNumber":148,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":149,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":150,"author":{"gitId":"lyuanww"},"content":"        patient.deleteMedicalHistoryEvent(medicalHistoryEventToDelete);","lastModifiedDate":"2023-10-24"},{"lineNumber":151,"author":{"gitId":"lyuanww"},"content":"        internalList.set(index, patient);","lastModifiedDate":"2023-10-24"},{"lineNumber":152,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":153,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":154,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003dAppointmentEvent Operations\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":155,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":156,"author":{"gitId":"pangyyen"},"content":"     * Adds an appointmentEvent to the specified patient.","lastModifiedDate":"2023-10-26"},{"lineNumber":157,"author":{"gitId":"pangyyen"},"content":"     * @param patient","lastModifiedDate":"2023-10-26"},{"lineNumber":158,"author":{"gitId":"pangyyen"},"content":"     * @param appointmentEvent","lastModifiedDate":"2023-10-26"},{"lineNumber":159,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":160,"author":{"gitId":"pangyyen"},"content":"    public void addAppointment(Patient patient, AppointmentEvent appointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":161,"author":{"gitId":"pangyyen"},"content":"        requireAllNonNull(patient, appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":162,"author":{"gitId":"pangyyen"},"content":"        int index \u003d internalList.indexOf(patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":163,"author":{"gitId":"pangyyen"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-26"},{"lineNumber":164,"author":{"gitId":"pangyyen"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-10-26"},{"lineNumber":165,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":166,"author":{"gitId":"pangyyen"},"content":"        patient.addAppointmentEvent(appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":167,"author":{"gitId":"pangyyen"},"content":"        internalList.set(index, patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":168,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":169,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":170,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":171,"author":{"gitId":"pangyyen"},"content":"     * Sets the AppointmentEvent at the specified index to the edited AppointmentEvent.","lastModifiedDate":"2023-10-26"},{"lineNumber":172,"author":{"gitId":"pangyyen"},"content":"     * @param patient","lastModifiedDate":"2023-10-26"},{"lineNumber":173,"author":{"gitId":"pangyyen"},"content":"     * @param appointmentEventToEdit","lastModifiedDate":"2023-10-26"},{"lineNumber":174,"author":{"gitId":"pangyyen"},"content":"     * @param editedAppointmentEvent","lastModifiedDate":"2023-10-26"},{"lineNumber":175,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":176,"author":{"gitId":"pangyyen"},"content":"    public void setAppointment(Patient patient, AppointmentEvent appointmentEventToEdit,","lastModifiedDate":"2023-10-26"},{"lineNumber":177,"author":{"gitId":"pangyyen"},"content":"                               AppointmentEvent editedAppointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":178,"author":{"gitId":"pangyyen"},"content":"        requireAllNonNull(patient, appointmentEventToEdit, editedAppointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":179,"author":{"gitId":"pangyyen"},"content":"        int index \u003d internalList.indexOf(patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":180,"author":{"gitId":"pangyyen"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-26"},{"lineNumber":181,"author":{"gitId":"pangyyen"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-10-26"},{"lineNumber":182,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":183,"author":{"gitId":"pangyyen"},"content":"        patient.setAppointmentEvent(appointmentEventToEdit, editedAppointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":184,"author":{"gitId":"pangyyen"},"content":"        internalList.set(index, patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":185,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":186,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":187,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":188,"author":{"gitId":"pangyyen"},"content":"     * Deletes the specified AppointmentEvent from the Appointments.","lastModifiedDate":"2023-10-26"},{"lineNumber":189,"author":{"gitId":"pangyyen"},"content":"     * @param patient","lastModifiedDate":"2023-10-26"},{"lineNumber":190,"author":{"gitId":"pangyyen"},"content":"     * @param appointmentEventToDelete","lastModifiedDate":"2023-10-26"},{"lineNumber":191,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":192,"author":{"gitId":"pangyyen"},"content":"    public void deleteAppointment(Patient patient, AppointmentEvent appointmentEventToDelete) {","lastModifiedDate":"2023-10-26"},{"lineNumber":193,"author":{"gitId":"pangyyen"},"content":"        requireAllNonNull(patient, appointmentEventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":194,"author":{"gitId":"pangyyen"},"content":"        int index \u003d internalList.indexOf(patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":195,"author":{"gitId":"pangyyen"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-26"},{"lineNumber":196,"author":{"gitId":"pangyyen"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-10-26"},{"lineNumber":197,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":198,"author":{"gitId":"pangyyen"},"content":"        patient.deleteAppointmentEvent(appointmentEventToDelete);","lastModifiedDate":"2023-10-26"},{"lineNumber":199,"author":{"gitId":"pangyyen"},"content":"        internalList.set(index, patient);","lastModifiedDate":"2023-10-26"},{"lineNumber":200,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":201,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":202,"author":{"gitId":"pangyyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":203,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":204,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":205,"author":{"gitId":"LimJH2002"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-10-16"},{"lineNumber":206,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":207,"author":{"gitId":"LimJH2002"},"content":"    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-16"},{"lineNumber":208,"author":{"gitId":"LimJH2002"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-10-16"},{"lineNumber":209,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":210,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":211,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":212,"author":{"gitId":"LimJH2002"},"content":"    public Iterator\u003cPatient\u003e iterator() {","lastModifiedDate":"2023-10-16"},{"lineNumber":213,"author":{"gitId":"LimJH2002"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-10-16"},{"lineNumber":214,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":215,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":216,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":217,"author":{"gitId":"LimJH2002"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-16"},{"lineNumber":218,"author":{"gitId":"LimJH2002"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-16"},{"lineNumber":219,"author":{"gitId":"LimJH2002"},"content":"            return true;","lastModifiedDate":"2023-10-16"},{"lineNumber":220,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":221,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":222,"author":{"gitId":"LimJH2002"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-16"},{"lineNumber":223,"author":{"gitId":"LimJH2002"},"content":"        if (!(other instanceof UniquePatientList)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":224,"author":{"gitId":"LimJH2002"},"content":"            return false;","lastModifiedDate":"2023-10-16"},{"lineNumber":225,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":226,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":227,"author":{"gitId":"LimJH2002"},"content":"        UniquePatientList otherUniquePersonList \u003d (UniquePatientList) other;","lastModifiedDate":"2023-10-16"},{"lineNumber":228,"author":{"gitId":"LimJH2002"},"content":"        return internalList.equals(otherUniquePersonList.internalList);","lastModifiedDate":"2023-10-16"},{"lineNumber":229,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":230,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":231,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":232,"author":{"gitId":"LimJH2002"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-16"},{"lineNumber":233,"author":{"gitId":"LimJH2002"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-10-16"},{"lineNumber":234,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":235,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":236,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":237,"author":{"gitId":"LimJH2002"},"content":"    public String toString() {","lastModifiedDate":"2023-10-16"},{"lineNumber":238,"author":{"gitId":"LimJH2002"},"content":"        return internalList.toString();","lastModifiedDate":"2023-10-16"},{"lineNumber":239,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":240,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":241,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":242,"author":{"gitId":"LimJH2002"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2023-10-16"},{"lineNumber":243,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":244,"author":{"gitId":"LimJH2002"},"content":"    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {","lastModifiedDate":"2023-10-16"},{"lineNumber":245,"author":{"gitId":"LimJH2002"},"content":"        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {","lastModifiedDate":"2023-10-16"},{"lineNumber":246,"author":{"gitId":"LimJH2002"},"content":"            for (int j \u003d i + 1; j \u003c patients.size(); j++) {","lastModifiedDate":"2023-10-16"},{"lineNumber":247,"author":{"gitId":"LimJH2002"},"content":"                if (patients.get(i).isSamePerson(patients.get(j))) {","lastModifiedDate":"2023-10-16"},{"lineNumber":248,"author":{"gitId":"LimJH2002"},"content":"                    return false;","lastModifiedDate":"2023-10-16"},{"lineNumber":249,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-10-16"},{"lineNumber":250,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-10-16"},{"lineNumber":251,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":252,"author":{"gitId":"LimJH2002"},"content":"        return true;","lastModifiedDate":"2023-10-16"},{"lineNumber":253,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":254,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"LimJH2002":151,"pangyyen":53,"lyuanww":50}},{"path":"src/main/java/seedu/cc/model/patient/exceptions/DuplicatePatientException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.model.patient.exceptions;","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-17"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":" * Signals that the operation will result in duplicate Patients (Patients are considered duplicates","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":" * if they have the same identity).","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"public class DuplicatePatientException extends RuntimeException {","lastModifiedDate":"2023-10-17"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"    public DuplicatePatientException() {","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"        super(\"Operation would result in duplicate patients\");","lastModifiedDate":"2023-10-17"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"LimJH2002":11}},{"path":"src/main/java/seedu/cc/model/patient/exceptions/PatientNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.model.patient.exceptions;","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-17"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":" * Signals that the operation is unable to find the specified patient.","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"public class PatientNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"LimJH2002":6}},{"path":"src/main/java/seedu/cc/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof Address)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Address otherAddress \u003d (Address) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return value.equals(otherAddress.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":2,"-":63}},{"path":"src/main/java/seedu/cc/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof Email)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Email otherEmail \u003d (Email) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return value.equals(otherEmail.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":2,"-":77}},{"path":"src/main/java/seedu/cc/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!(other instanceof Name)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Name otherName \u003d (Name) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return fullName.equals(otherName.fullName);","lastModifiedDate":"2023-07-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":2,"-":65}},{"path":"src/main/java/seedu/cc/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.StringUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!(other instanceof NameContainsKeywordsPredicate)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate otherNameContainsKeywordsPredicate \u003d (NameContainsKeywordsPredicate) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"lyuanww":3,"-":41}},{"path":"src/main/java/seedu/cc/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"     * Alternate constructor for Person class.","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"    public Person(Name name, Phone phone, Email email) {","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"        requireAllNonNull(name, phone, email);","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"        this.email \u003d email;","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"        this.address \u003d new Address(\"NIL\");","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"        this.tags.addAll(Collections.emptySet());","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                \u0026\u0026 address.equals(otherPerson.address)","lastModifiedDate":"2023-07-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                \u0026\u0026 tags.equals(otherPerson.tags);","lastModifiedDate":"2023-07-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2019-02-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .add(\"address\", address)","lastModifiedDate":"2019-02-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .add(\"tags\", tags)","lastModifiedDate":"2019-02-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tanboonkhong":13,"lyuanww":4,"-":113}},{"path":"src/main/java/seedu/cc/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!(other instanceof Phone)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Phone otherPhone \u003d (Phone) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return value.equals(otherPhone.value);","lastModifiedDate":"2023-07-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":2,"-":59}},{"path":"src/main/java/seedu/cc/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!(other instanceof UniquePersonList)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        UniquePersonList otherUniquePersonList \u003d (UniquePersonList) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return internalList.equals(otherUniquePersonList.internalList);","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return internalList.toString();","lastModifiedDate":"2019-02-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":4,"-":146}},{"path":"src/main/java/seedu/cc/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person.exceptions;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"lyuanww":1,"-":10}},{"path":"src/main/java/seedu/cc/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person.exceptions;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2017-06-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class PersonNotFoundException extends RuntimeException {}","lastModifiedDate":"2018-08-07"}],"authorContributionMap":{"lyuanww":1,"-":5}},{"path":"src/main/java/seedu/cc/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!(other instanceof Tag)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Tag otherTag \u003d (Tag) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return tagName.equals(otherTag.tagName);","lastModifiedDate":"2023-07-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"lyuanww":2,"-":60}},{"path":"src/main/java/seedu/cc/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-18"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-18"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Date;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.medicalhistory.PatientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.Nric;","lastModifiedDate":"2023-10-18"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"    public static PatientMedicalHistory getSampleMedicalHistory() {","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"        PatientMedicalHistory samplePatientMedicalHistory \u003d new PatientMedicalHistory();","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"        samplePatientMedicalHistory","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"                .addMedicalHistoryEvent(new MedicalHistoryEvent(new MedicalCondition(\"Insomia\"),","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"                        new Treatment(\"Medication\"), new Date(\"2023-10-23\")));","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"        return samplePatientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"    public static Patient[] getSamplePatients() {","lastModifiedDate":"2023-10-18"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"        return new Patient[]{","lastModifiedDate":"2023-10-18"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"            new Patient(new Name(\"Alex Yeoh\"), new Nric(\"S5323891B\"), new Phone(\"87438807\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"                new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"            new Patient(new Name(\"Bernice Yu\"), new Nric(\"S5323891B\"), new Phone(\"99272758\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"                new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"            new Patient(new Name(\"Charlotte Oliveiro\"), new Nric(\"S5323891B\"), new Phone(\"93210283\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"                new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"            new Patient(new Name(\"David Li\"), new Nric(\"S5323891B\"), new Phone(\"91031282\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"                new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"            new Patient(new Name(\"Irfan Ibrahim\"), new Nric(\"S5323891B\"), new Phone(\"92492021\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"                new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"            new Patient(new Name(\"Roy Balakrishnan\"), new Nric(\"S5323891B\"), new Phone(\"92624417\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"                new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2023-10-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"    public static ReadOnlyClinicBook getSampleClinicBook() {","lastModifiedDate":"2023-10-18"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"        ClinicBook sampleAb \u003d new ClinicBook();","lastModifiedDate":"2023-10-18"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"        for (Patient samplePatient : getSamplePatients()) {","lastModifiedDate":"2023-10-18"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"            sampleAb.addPatient(samplePatient);","lastModifiedDate":"2023-10-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"LimJH2002":22,"pangyyen":5,"lyuanww":15,"-":33}},{"path":"src/main/java/seedu/cc/storage/ClinicBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"/**","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":" * Represents a storage for {@link seedu.cc.model.ClinicBook}.","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":" */","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"public interface ClinicBookStorage {","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"    Path getClinicBookFilePath();","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"     * Returns ClinicBook data as a {@link ReadOnlyClinicBook}.","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"    Optional\u003cReadOnlyClinicBook\u003e readClinicBook() throws DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"     * @see #getClinicBookFilePath()","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"    Optional\u003cReadOnlyClinicBook\u003e readClinicBook(Path filePath) throws DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"     * Saves the given {@link ReadOnlyClinicBook} to the storage.","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"     * @param clinicBook cannot be null.","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"    void saveClinicBook(ReadOnlyClinicBook clinicBook) throws IOException;","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"     * @see #saveClinicBook(ReadOnlyClinicBook)","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"    void saveClinicBook(ReadOnlyClinicBook clinicBook, Path filePath) throws IOException;","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"tanboonkhong":45}},{"path":"src/main/java/seedu/cc/storage/JsonAdaptedAppointmentEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"/**","lastModifiedDate":"2023-10-26"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":" * Jackson-friendly version of {@link AppointmentEvent}.","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":" * Jackson-friendly version of {@link AppointmentEvent}.","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":" */","lastModifiedDate":"2023-10-26"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"public class JsonAdaptedAppointmentEvent {","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment event\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"    private final LocalDate localDate;","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"    private final LocalTime localTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"     * Constructs a {@code JsonAdaptedAppointmentEvent} with the given medical history event details.","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"    public JsonAdaptedAppointmentEvent(@JsonProperty(\"localDate\") LocalDate localDate,","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"                                           @JsonProperty(\"localTime\") LocalTime localTime) {","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"        this.localDate \u003d localDate;","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"        this.localTime \u003d localTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"     * Converts a given {@code AppointmentEvent} into this class for Jackson use.","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"    public JsonAdaptedAppointmentEvent(AppointmentEvent source) {","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"        localDate \u003d source.getLocalDate();","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"        localTime \u003d source.getLocalTime();","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"    /**","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"     * Converts this Jackson-friendly adapted appointment event object into the model\u0027s {@code AppointmentEvent}","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"     * object.","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"     *","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted medical history event.","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"     */","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"    public AppointmentEvent toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"        if (localDate \u003d\u003d null) {","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Local Date\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"        if (localTime \u003d\u003d null) {","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Local Time\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"        return new AppointmentEvent(localDate, localTime);","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"pangyyen":58}},{"path":"src/main/java/seedu/cc/storage/JsonAdaptedMedicalHistoryEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Date;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":" * Jackson-friendly version of {@link MedicalHistoryEvent}.","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"public class JsonAdaptedMedicalHistoryEvent {","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Medical history event\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"    private final String medicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    private final String treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    private final String date;","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"     * Constructs a {@code JsonAdaptedMedicalHistoryEvent} with the given medical history event details.","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    public JsonAdaptedMedicalHistoryEvent(@JsonProperty(\"medicalCondition\") String medicalCondition,","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"                                          @JsonProperty(\"treatment\") String treatment,","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"                                          @JsonProperty(\"date\") String date) {","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"        this.medicalCondition \u003d medicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        this.treatment \u003d treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"     * Converts a given {@code MedicalHistoryEvent} into this class for Jackson use.","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"    public JsonAdaptedMedicalHistoryEvent(MedicalHistoryEvent source) {","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"        medicalCondition \u003d source.getMedicalCondition().value;","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"        treatment \u003d source.getTreatment().value;","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"        date \u003d source.getDate().toString(); // Convert LocalDateTime to String","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"     * Converts this Jackson-friendly adapted medical history event object into the model\u0027s {@code MedicalHistoryEvent}","lastModifiedDate":"2023-10-24"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"     * object.","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted medical history event.","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEvent toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-24"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"        if (medicalCondition \u003d\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Medical Condition\"));","lastModifiedDate":"2023-10-24"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"        MedicalCondition modelMedicalCondition \u003d new MedicalCondition(this.medicalCondition);","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        if (treatment \u003d\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Treatment\"));","lastModifiedDate":"2023-10-24"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"        Treatment modelTreatment \u003d new Treatment(this.treatment);","lastModifiedDate":"2023-10-24"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"        if (date \u003d\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Date\"));","lastModifiedDate":"2023-10-24"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"        Date modelDate \u003d new Date(this.date);","lastModifiedDate":"2023-10-24"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"        return new MedicalHistoryEvent(modelMedicalCondition, modelTreatment, modelDate);","lastModifiedDate":"2023-10-24"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"lyuanww":70}},{"path":"src/main/java/seedu/cc/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.PatientAppointmentList;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.medicalhistory.PatientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Nric;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.person.Person;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"/**","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":" */","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"class JsonAdaptedPatient {","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"    private final String name;","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"    private final String nric;","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"    private final String phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"    private final String email;","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"    private final String address;","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    private final List\u003cJsonAdaptedMedicalHistoryEvent\u003e medicalHistoryEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"    private final List\u003cJsonAdaptedAppointmentEvent\u003e appointmentEvents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"nric\") String nric,","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"                              @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"                              @JsonProperty(\"address\") String address,","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"                              @JsonProperty(\"medicalHistory\") List\u003cJsonAdaptedMedicalHistoryEvent\u003e medicalHistoryEvents,","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"                              @JsonProperty(\"appointment\") List\u003cJsonAdaptedAppointmentEvent\u003e appointmentEvents,","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"                              @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {","lastModifiedDate":"2023-10-16"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-16"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-10-16"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        this.email \u003d email;","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"        this.address \u003d address;","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"        if (medicalHistoryEvents !\u003d null) {","lastModifiedDate":"2023-10-24"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"            this.medicalHistoryEvents.addAll(medicalHistoryEvents);","lastModifiedDate":"2023-10-24"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"        if (appointmentEvents !\u003d null) {","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"            this.appointmentEvents.addAll(appointmentEvents);","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"        if (tags !\u003d null) {","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"            this.tags.addAll(tags);","lastModifiedDate":"2023-10-16"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2023-10-16"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"    public JsonAdaptedPatient(Patient source) {","lastModifiedDate":"2023-10-16"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2023-10-16"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"        nric \u003d source.getNric().value;","lastModifiedDate":"2023-10-16"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2023-10-16"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2023-10-16"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2023-10-16"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"        medicalHistoryEvents.addAll(source.getMedicalHistory().getMedicalHistoryEvents().stream()","lastModifiedDate":"2023-10-24"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"                .map(JsonAdaptedMedicalHistoryEvent::new)","lastModifiedDate":"2023-10-24"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-10-24"},{"lineNumber":78,"author":{"gitId":"pangyyen"},"content":"        appointmentEvents.addAll(source.getAppointmentList().getAppointmentList().stream()","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"pangyyen"},"content":"                .map(JsonAdaptedAppointmentEvent::new)","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"tanboonkhong"},"content":"        tags.addAll(source.getTags().stream()","lastModifiedDate":"2023-10-16"},{"lineNumber":82,"author":{"gitId":"tanboonkhong"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2023-10-16"},{"lineNumber":83,"author":{"gitId":"tanboonkhong"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-10-16"},{"lineNumber":84,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":85,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":86,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":87,"author":{"gitId":"tanboonkhong"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Patient} object.","lastModifiedDate":"2023-10-16"},{"lineNumber":88,"author":{"gitId":"tanboonkhong"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":89,"author":{"gitId":"tanboonkhong"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted patient.","lastModifiedDate":"2023-10-16"},{"lineNumber":90,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"    public Patient toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-16"},{"lineNumber":92,"author":{"gitId":"tanboonkhong"},"content":"        final List\u003cTag\u003e patientTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-16"},{"lineNumber":93,"author":{"gitId":"tanboonkhong"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-10-16"},{"lineNumber":94,"author":{"gitId":"tanboonkhong"},"content":"            patientTags.add(tag.toModelType());","lastModifiedDate":"2023-10-16"},{"lineNumber":95,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":96,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":97,"author":{"gitId":"pangyyen"},"content":"        final PatientMedicalHistory modelPatientMedicalHistory \u003d new PatientMedicalHistory();","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"lyuanww"},"content":"        for (JsonAdaptedMedicalHistoryEvent event : medicalHistoryEvents) {","lastModifiedDate":"2023-10-24"},{"lineNumber":99,"author":{"gitId":"pangyyen"},"content":"            modelPatientMedicalHistory.addMedicalHistoryEvent(event.toModelType());","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":101,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":102,"author":{"gitId":"pangyyen"},"content":"        final PatientAppointmentList modelPatientAppointmentList \u003d new PatientAppointmentList();","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"pangyyen"},"content":"        for (JsonAdaptedAppointmentEvent event : appointmentEvents) {","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"pangyyen"},"content":"            modelPatientAppointmentList.addAppointmentList(event.toModelType());","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"tanboonkhong"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2023-10-16"},{"lineNumber":107,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-10-16"},{"lineNumber":108,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":109,"author":{"gitId":"tanboonkhong"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":110,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-16"},{"lineNumber":111,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":112,"author":{"gitId":"tanboonkhong"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2023-10-16"},{"lineNumber":113,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":114,"author":{"gitId":"tanboonkhong"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2023-10-16"},{"lineNumber":115,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2023-10-16"},{"lineNumber":116,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":117,"author":{"gitId":"tanboonkhong"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":118,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-16"},{"lineNumber":119,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":120,"author":{"gitId":"tanboonkhong"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2023-10-16"},{"lineNumber":121,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":122,"author":{"gitId":"tanboonkhong"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2023-10-16"},{"lineNumber":123,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2023-10-16"},{"lineNumber":124,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":125,"author":{"gitId":"tanboonkhong"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":126,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-16"},{"lineNumber":127,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":128,"author":{"gitId":"tanboonkhong"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2023-10-16"},{"lineNumber":129,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":130,"author":{"gitId":"tanboonkhong"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2023-10-16"},{"lineNumber":131,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2023-10-16"},{"lineNumber":132,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":133,"author":{"gitId":"tanboonkhong"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":134,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-16"},{"lineNumber":135,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":136,"author":{"gitId":"tanboonkhong"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2023-10-16"},{"lineNumber":137,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":138,"author":{"gitId":"tanboonkhong"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2023-10-16"},{"lineNumber":139,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2023-10-16"},{"lineNumber":140,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":141,"author":{"gitId":"tanboonkhong"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":142,"author":{"gitId":"tanboonkhong"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-16"},{"lineNumber":143,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":144,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":145,"author":{"gitId":"pangyyen"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2023-10-26"},{"lineNumber":146,"author":{"gitId":"tanboonkhong"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(patientTags);","lastModifiedDate":"2023-10-16"},{"lineNumber":147,"author":{"gitId":"pangyyen"},"content":"        return new Patient(modelName, modelNric, modelPhone, modelEmail,","lastModifiedDate":"2023-10-26"},{"lineNumber":148,"author":{"gitId":"pangyyen"},"content":"                modelAddress, modelPatientAppointmentList, modelPatientMedicalHistory, modelTags);","lastModifiedDate":"2023-10-31"},{"lineNumber":149,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":150,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":151,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"tanboonkhong":119,"pangyyen":19,"lyuanww":13}},{"path":"src/main/java/seedu/cc/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"lyuanww":3,"-":45}},{"path":"src/main/java/seedu/cc/storage/JsonClinicBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.util.FileUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.util.JsonUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"/**","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":" */","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"public class JsonClinicBookStorage implements ClinicBookStorage {","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonClinicBookStorage.class);","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"    private Path filePath;","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"    public JsonClinicBookStorage(Path filePath) {","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"    public Path getClinicBookFilePath() {","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"        return filePath;","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"    public Optional\u003cReadOnlyClinicBook\u003e readClinicBook() throws DataLoadingException {","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"        return readClinicBook(filePath);","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"     * Similar to {@link #readClinicBook()}.","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"    public Optional\u003cReadOnlyClinicBook\u003e readClinicBook(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-16"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"        Optional\u003cJsonSerializableClinicBook\u003e jsonClinicBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-10-16"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"                filePath, JsonSerializableClinicBook.class);","lastModifiedDate":"2023-10-16"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"        if (!jsonClinicBook.isPresent()) {","lastModifiedDate":"2023-10-16"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-16"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"        try {","lastModifiedDate":"2023-10-16"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"            return Optional.of(jsonClinicBook.get().toModelType());","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2023-10-16"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2023-10-16"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"    @Override","lastModifiedDate":"2023-10-16"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"    public void saveClinicBook(ReadOnlyClinicBook addressBook) throws IOException {","lastModifiedDate":"2023-10-16"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"        saveClinicBook(addressBook, filePath);","lastModifiedDate":"2023-10-16"},{"lineNumber":66,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"     * Similar to {@link #saveClinicBook(ReadOnlyClinicBook)}.","lastModifiedDate":"2023-10-16"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-10-16"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"    public void saveClinicBook(ReadOnlyClinicBook clinicBook, Path filePath) throws IOException {","lastModifiedDate":"2023-10-16"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"        requireNonNull(clinicBook);","lastModifiedDate":"2023-10-16"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-16"},{"lineNumber":76,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":77,"author":{"gitId":"tanboonkhong"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2023-10-16"},{"lineNumber":78,"author":{"gitId":"tanboonkhong"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableClinicBook(clinicBook), filePath);","lastModifiedDate":"2023-10-16"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":80,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":81,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"tanboonkhong":81}},{"path":"src/main/java/seedu/cc/storage/JsonSerializableClinicBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"/**","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":" * An Immutable ClinicBook that is serializable to JSON format.","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":" */","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"@JsonRootName(value \u003d \"clinicbook\")","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"class JsonSerializableClinicBook {","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Patient list contains duplicate person(s).\";","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"     * Constructs a {@code JsonSerializableClinicBook} with the given persons.","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"    public JsonSerializableClinicBook(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients) {","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        this.patients.addAll(patients);","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"    public JsonSerializableClinicBook(ReadOnlyClinicBook source) {","lastModifiedDate":"2023-10-16"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"     * Converts this address book into the model\u0027s {@code ClinicBook} object.","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"     *","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-16"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"    public ClinicBook toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-16"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook clinicBook \u003d new ClinicBook();","lastModifiedDate":"2023-10-16"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"            Patient patient \u003d jsonAdaptedPatient.toModelType();","lastModifiedDate":"2023-10-16"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"            if (clinicBook.hasPatient(patient)) {","lastModifiedDate":"2023-10-16"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"            }","lastModifiedDate":"2023-10-16"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"            clinicBook.addPatient(patient);","lastModifiedDate":"2023-10-16"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"        return clinicBook;","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-16"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-16"}],"authorContributionMap":{"tanboonkhong":55,"LimJH2002":1,"lyuanww":4}},{"path":"src/main/java/seedu/cc/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.JsonUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if the file format is not as expected.","lastModifiedDate":"2023-06-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"lyuanww":5,"-":42}},{"path":"src/main/java/seedu/cc/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"public interface Storage extends ClinicBookStorage, UserPrefsStorage {","lastModifiedDate":"2023-10-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"    Path getClinicBookFilePath();","lastModifiedDate":"2023-10-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"    Optional\u003cReadOnlyClinicBook\u003e readClinicBook() throws DataLoadingException;","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"    void saveClinicBook(ReadOnlyClinicBook addressBook) throws IOException;","lastModifiedDate":"2023-10-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"tanboonkhong":4,"LimJH2002":1,"lyuanww":4,"-":23}},{"path":"src/main/java/seedu/cc/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"    private ClinicBookStorage clinicBookStorage;","lastModifiedDate":"2023-10-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"    public StorageManager(ClinicBookStorage clinicBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2023-10-18"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"        this.clinicBookStorage \u003d clinicBookStorage;","lastModifiedDate":"2023-10-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"    public Path getClinicBookFilePath() {","lastModifiedDate":"2023-10-18"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        return clinicBookStorage.getClinicBookFilePath();","lastModifiedDate":"2023-10-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"    public Optional\u003cReadOnlyClinicBook\u003e readClinicBook() throws DataLoadingException {","lastModifiedDate":"2023-10-18"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"        return readClinicBook(clinicBookStorage.getClinicBookFilePath());","lastModifiedDate":"2023-10-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"    public Optional\u003cReadOnlyClinicBook\u003e readClinicBook(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-10-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"        return clinicBookStorage.readClinicBook(filePath);","lastModifiedDate":"2023-10-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"    public void saveClinicBook(ReadOnlyClinicBook clinicBook) throws IOException {","lastModifiedDate":"2023-10-18"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"        saveClinicBook(clinicBook, clinicBookStorage.getClinicBookFilePath());","lastModifiedDate":"2023-10-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"    public void saveClinicBook(ReadOnlyClinicBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2023-10-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"        clinicBookStorage.saveClinicBook(addressBook, filePath);","lastModifiedDate":"2023-10-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tanboonkhong":14,"LimJH2002":1,"lyuanww":5,"-":58}},{"path":"src/main/java/seedu/cc/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":" * Represents a storage for {@link UserPrefs}.","lastModifiedDate":"2023-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataLoadingException if the loading of data from preference file failed.","lastModifiedDate":"2023-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;","lastModifiedDate":"2023-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"     * Saves the given {@link ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2023-10-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"tanboonkhong":2,"lyuanww":4,"-":30}},{"path":"src/main/java/seedu/cc/ui/AppointmentEventCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":" * An UI component that displays information of a {@code Appointment Event}.","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"public class AppointmentEventCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"    private static final String FXML \u003d \"AppointmentEventCard.fxml\";","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    public final AppointmentEvent appointmentEvent;","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"    private Label appointmentDate;","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"    private Label time;","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"     * Creates a {@code PatientCode} with the given {@code Patient} and index to display.","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"    public AppointmentEventCard(AppointmentEvent appointmentEvent, int displayedIndex) {","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"        super(FXML);","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"        this.appointmentEvent \u003d appointmentEvent;","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"        appointmentDate.setText(appointmentEvent.getLocalDate().toString());","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"        time.setText(appointmentEvent.getLocalTime().toString());","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"LimJH2002":41}},{"path":"src/main/java/seedu/cc/ui/AppointmentPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":" * Panel containing the appointments.","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-10-27"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"public class AppointmentPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    private static final String FXML \u003d \"AppointmentPanel.fxml\";","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentPanel.class);","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    private ListView\u003cAppointmentEvent\u003e appointmentEventListView;","lastModifiedDate":"2023-10-27"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"     * Creates a {@code AppointmentPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-10-27"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    public AppointmentPanel(ObservableList\u003cAppointmentEvent\u003e appointments) {","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"        super(FXML);","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"        appointmentEventListView.setItems(appointments);","lastModifiedDate":"2023-10-27"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"        appointmentEventListView.setCellFactory(listView -\u003e new AppointmentPanel","lastModifiedDate":"2023-10-27"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"                .AppointmentEventListViewCell());","lastModifiedDate":"2023-10-27"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using a {@code AppointmentEventCard}.","lastModifiedDate":"2023-10-27"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"    class AppointmentEventListViewCell extends ListCell\u003cAppointmentEvent\u003e {","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"        @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"        protected void updateItem(AppointmentEvent appointment, boolean empty) {","lastModifiedDate":"2023-10-27"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"                setGraphic(null);","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"                setText(null);","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"            } else {","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"                setGraphic(new AppointmentEventCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2023-10-27"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-27"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"LimJH2002":48}},{"path":"src/main/java/seedu/cc/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"         * @see seedu.cc.logic.Logic#execute(String)","lastModifiedDate":"2023-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"lyuanww":5,"-":80}},{"path":"src/main/java/seedu/cc/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";","lastModifiedDate":"2019-08-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"lyuanww":2,"-":100}},{"path":"src/main/java/seedu/cc/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.TabPane;","lastModifiedDate":"2023-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.commons.core.tabs.Tabs;","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.Logic;","lastModifiedDate":"2023-10-18"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2023-10-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"    private PatientListPanel patientListPanel;","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"    private MedicalHistoryPanel medicalHistoryPanel;","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"    private AppointmentPanel appointmentPanel;","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"    private int tab;","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"    private StackPane patientListPanelPlaceholder;","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"    private StackPane medicalHistoryListPanelPlaceholder;","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-10-27"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"    private StackPane appointmentListPanelPlaceholder;","lastModifiedDate":"2023-10-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"    private Label tabInfoLabel;","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"    private TabPane mainTabPane;","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2023-10-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"        this.tab \u003d logic.getCurrentTab();","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"        //setAccelerators();","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"    //    private void setAccelerators() {","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"    //        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"    //    }","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"LimJH2002"},"content":"        logic.currentTabProperty().addListener((observable, oldValue, newValue) -\u003e {","lastModifiedDate":"2023-10-26"},{"lineNumber":130,"author":{"gitId":"LimJH2002"},"content":"            changeTabs(newValue.intValue());","lastModifiedDate":"2023-10-26"},{"lineNumber":131,"author":{"gitId":"LimJH2002"},"content":"        });","lastModifiedDate":"2023-10-26"},{"lineNumber":132,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":133,"author":{"gitId":"LimJH2002"},"content":"        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());","lastModifiedDate":"2023-10-26"},{"lineNumber":134,"author":{"gitId":"lyuanww"},"content":"        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());","lastModifiedDate":"2023-10-28"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"LimJH2002"},"content":"        medicalHistoryPanel \u003d new MedicalHistoryPanel(logic.getFilteredMedicalHistoryEventList());","lastModifiedDate":"2023-10-26"},{"lineNumber":137,"author":{"gitId":"LimJH2002"},"content":"        medicalHistoryListPanelPlaceholder.getChildren().add(medicalHistoryPanel.getRoot());","lastModifiedDate":"2023-10-26"},{"lineNumber":138,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":139,"author":{"gitId":"pangyyen"},"content":"        appointmentPanel \u003d new AppointmentPanel(logic.getFilteredAppointmentList());","lastModifiedDate":"2023-10-31"},{"lineNumber":140,"author":{"gitId":"LimJH2002"},"content":"        appointmentListPanelPlaceholder.getChildren().add(appointmentPanel.getRoot());","lastModifiedDate":"2023-10-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"lyuanww"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getClinicBookFilePath());","lastModifiedDate":"2023-10-17"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":192,"author":{"gitId":"lyuanww"},"content":"    public PatientListPanel getPatientListPanel() {","lastModifiedDate":"2023-10-17"},{"lineNumber":193,"author":{"gitId":"LimJH2002"},"content":"        return patientListPanel;","lastModifiedDate":"2023-10-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"lyuanww"},"content":"     * @see seedu.cc.logic.Logic#execute(String)","lastModifiedDate":"2023-10-16"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);","lastModifiedDate":"2023-06-13"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":223,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":224,"author":{"gitId":"LimJH2002"},"content":"     * Switches to the Patients tab.","lastModifiedDate":"2023-10-27"},{"lineNumber":225,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":226,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":227,"author":{"gitId":"LimJH2002"},"content":"    public void showPatientsTab() {","lastModifiedDate":"2023-10-26"},{"lineNumber":228,"author":{"gitId":"LimJH2002"},"content":"        mainTabPane.getSelectionModel().select(0);","lastModifiedDate":"2023-10-26"},{"lineNumber":229,"author":{"gitId":"LimJH2002"},"content":"        tabInfoLabel.setText(\"Patients\");","lastModifiedDate":"2023-10-26"},{"lineNumber":230,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":231,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":232,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":233,"author":{"gitId":"LimJH2002"},"content":"     * Switches to the Medical History tab.","lastModifiedDate":"2023-10-27"},{"lineNumber":234,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":235,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":236,"author":{"gitId":"LimJH2002"},"content":"    public void showMedicalHistoryTab() {","lastModifiedDate":"2023-10-26"},{"lineNumber":237,"author":{"gitId":"LimJH2002"},"content":"        mainTabPane.getSelectionModel().select(1);","lastModifiedDate":"2023-10-26"},{"lineNumber":238,"author":{"gitId":"LimJH2002"},"content":"        tabInfoLabel.setText(\"Medical History\");","lastModifiedDate":"2023-10-26"},{"lineNumber":239,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":240,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":241,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":242,"author":{"gitId":"LimJH2002"},"content":"     * Switches to the Appointments tab.","lastModifiedDate":"2023-10-27"},{"lineNumber":243,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":244,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-10-26"},{"lineNumber":245,"author":{"gitId":"LimJH2002"},"content":"    public void showAppointmentsTab() {","lastModifiedDate":"2023-10-26"},{"lineNumber":246,"author":{"gitId":"LimJH2002"},"content":"        mainTabPane.getSelectionModel().select(2);","lastModifiedDate":"2023-10-26"},{"lineNumber":247,"author":{"gitId":"LimJH2002"},"content":"        tabInfoLabel.setText(\"Appointments\");","lastModifiedDate":"2023-10-26"},{"lineNumber":248,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":249,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":250,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-10-27"},{"lineNumber":251,"author":{"gitId":"LimJH2002"},"content":"     * Changes the tab to the specified tab index.","lastModifiedDate":"2023-10-27"},{"lineNumber":252,"author":{"gitId":"LimJH2002"},"content":"     * @param tabIndex the index of the tab to change to","lastModifiedDate":"2023-10-27"},{"lineNumber":253,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-10-27"},{"lineNumber":254,"author":{"gitId":"LimJH2002"},"content":"    public void changeTabs(int tabIndex) {","lastModifiedDate":"2023-10-26"},{"lineNumber":255,"author":{"gitId":"LimJH2002"},"content":"        mainTabPane.getSelectionModel().select(tabIndex);","lastModifiedDate":"2023-10-26"},{"lineNumber":256,"author":{"gitId":"LimJH2002"},"content":"        switch (tabIndex) {","lastModifiedDate":"2023-10-26"},{"lineNumber":257,"author":{"gitId":"LimJH2002"},"content":"        case 0:","lastModifiedDate":"2023-10-26"},{"lineNumber":258,"author":{"gitId":"LimJH2002"},"content":"            tabInfoLabel.setText(Tabs.PATIENTS.toString());","lastModifiedDate":"2023-10-26"},{"lineNumber":259,"author":{"gitId":"LimJH2002"},"content":"            break;","lastModifiedDate":"2023-10-26"},{"lineNumber":260,"author":{"gitId":"LimJH2002"},"content":"        case 1:","lastModifiedDate":"2023-10-26"},{"lineNumber":261,"author":{"gitId":"LimJH2002"},"content":"            tabInfoLabel.setText(Tabs.MEDICAL_HISTORY.toString());","lastModifiedDate":"2023-10-26"},{"lineNumber":262,"author":{"gitId":"LimJH2002"},"content":"            break;","lastModifiedDate":"2023-10-26"},{"lineNumber":263,"author":{"gitId":"LimJH2002"},"content":"        case 2:","lastModifiedDate":"2023-10-26"},{"lineNumber":264,"author":{"gitId":"LimJH2002"},"content":"            tabInfoLabel.setText(Tabs.APPOINTMENTS.toString());","lastModifiedDate":"2023-10-26"},{"lineNumber":265,"author":{"gitId":"LimJH2002"},"content":"            break;","lastModifiedDate":"2023-10-26"},{"lineNumber":266,"author":{"gitId":"LimJH2002"},"content":"        default:","lastModifiedDate":"2023-10-27"},{"lineNumber":267,"author":{"gitId":"LimJH2002"},"content":"            tabInfoLabel.setText(\"Unknown Tab\");","lastModifiedDate":"2023-10-27"},{"lineNumber":268,"author":{"gitId":"LimJH2002"},"content":"            break;","lastModifiedDate":"2023-10-27"},{"lineNumber":269,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":270,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-10-26"},{"lineNumber":271,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"LimJH2002":82,"pangyyen":2,"lyuanww":11,"-":177}},{"path":"src/main/java/seedu/cc/ui/MedicalHistoryEventCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":" * An UI component that displays information of a {@code Medical History Event}.","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"public class MedicalHistoryEventCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"    private static final String FXML \u003d \"MedicalHistoryEventCard.fxml\";","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"     *","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    public final MedicalHistoryEvent medicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    @FXML","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"    private Label date;","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    @FXML","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"    private Label medicalCondition;","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"    @FXML","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"    private Label treatment;","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"     * Creates a {@code MedicalHistoryEventCard} with the given {@code MedicalHistoryEvent} and index to display.","lastModifiedDate":"2023-10-27"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEventCard(MedicalHistoryEvent medicalHistoryEvent, int displayedIndex) {","lastModifiedDate":"2023-10-24"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"        super(FXML);","lastModifiedDate":"2023-10-24"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"        this.medicalHistoryEvent \u003d medicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"        date.setText(medicalHistoryEvent.getDate().toString());","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"        medicalCondition.setText(medicalHistoryEvent.getMedicalCondition().toString());","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"        treatment.setText(medicalHistoryEvent.getTreatment().toString());","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"LimJH2002":1,"lyuanww":44}},{"path":"src/main/java/seedu/cc/ui/MedicalHistoryPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-24"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":" * Panel containing the medical history.","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"public class MedicalHistoryPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-24"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"    private static final String FXML \u003d \"MedicalHistoryPanel.fxml\";","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(MedicalHistoryPanel.class);","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2023-10-24"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    private ListView\u003cMedicalHistoryEvent\u003e medicalHistoryEventListView;","lastModifiedDate":"2023-10-24"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"     * Creates a {@code MedicalHistoryPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryPanel(ObservableList\u003cMedicalHistoryEvent\u003e medicalHistory) {","lastModifiedDate":"2023-10-24"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"        super(FXML);","lastModifiedDate":"2023-10-24"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"        medicalHistoryEventListView.setItems(medicalHistory);","lastModifiedDate":"2023-10-24"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        medicalHistoryEventListView.setCellFactory(listView -\u003e new MedicalHistoryPanel","lastModifiedDate":"2023-10-24"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"                .MedicalHistoryEventListViewCell());","lastModifiedDate":"2023-10-24"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-24"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}.","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-24"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    class MedicalHistoryEventListViewCell extends ListCell\u003cMedicalHistoryEvent\u003e {","lastModifiedDate":"2023-10-24"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-24"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"        protected void updateItem(MedicalHistoryEvent medicalHistory, boolean empty) {","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"            super.updateItem(medicalHistory, empty);","lastModifiedDate":"2023-10-27"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"            if (empty || medicalHistory \u003d\u003d null) {","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"                setGraphic(null);","lastModifiedDate":"2023-10-24"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"                setText(null);","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"            } else {","lastModifiedDate":"2023-10-24"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"                setGraphic(new MedicalHistoryEventCard(medicalHistory, getIndex() + 1).getRoot());","lastModifiedDate":"2023-10-27"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"            }","lastModifiedDate":"2023-10-24"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-24"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"LimJH2002":6,"lyuanww":43}},{"path":"src/main/java/seedu/cc/ui/PatientCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-10-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2023-10-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-17"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-10-17"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":" * An UI component that displays information of a {@code Patient}.","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-10-17"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"public class PatientCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"    private static final String FXML \u003d \"PatientListCard.fxml\";","lastModifiedDate":"2023-10-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-10-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-10-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    public final Patient patient;","lastModifiedDate":"2023-10-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-10-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-10-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2023-10-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-10-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2023-10-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2023-10-17"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"    private Label nric;","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2023-10-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"     * Creates a {@code PatientCode} with the given {@code Patient} and index to display.","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"    public PatientCard(Patient patient, int displayedIndex) {","lastModifiedDate":"2023-10-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2023-10-17"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2023-10-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-10-17"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"        name.setText(patient.getName().fullName);","lastModifiedDate":"2023-10-28"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        phone.setText(patient.getPhone().value);","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        address.setText(patient.getAddress().value);","lastModifiedDate":"2023-10-28"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        email.setText(patient.getEmail().value);","lastModifiedDate":"2023-10-28"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"        nric.setText(patient.getNric().value);","lastModifiedDate":"2023-10-30"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"        patient.getTags().stream()","lastModifiedDate":"2023-10-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2023-10-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2023-10-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"tanboonkhong":2,"LimJH2002":3,"lyuanww":14,"-":45}},{"path":"src/main/java/seedu/cc/ui/PatientListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-17"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-10-17"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-17"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":" * Panel containing the list of patients.","lastModifiedDate":"2023-10-28"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"public class PatientListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-17"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"    private static final String FXML \u003d \"PatientListPanel.fxml\";","lastModifiedDate":"2023-10-17"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PatientListPanel.class);","lastModifiedDate":"2023-10-17"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    @FXML","lastModifiedDate":"2023-10-17"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    private ListView\u003cPatient\u003e patientListView;","lastModifiedDate":"2023-10-28"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"     * Creates a {@code PatientListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {","lastModifiedDate":"2023-10-28"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"        super(FXML);","lastModifiedDate":"2023-10-17"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"        patientListView.setItems(patientList);","lastModifiedDate":"2023-10-28"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());","lastModifiedDate":"2023-10-28"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using a {@code PatientCard}.","lastModifiedDate":"2023-10-17"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-17"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    class PatientListViewCell extends ListCell\u003cPatient\u003e {","lastModifiedDate":"2023-10-17"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-17"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"        protected void updateItem(Patient patient, boolean empty) {","lastModifiedDate":"2023-10-28"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"            super.updateItem(patient, empty);","lastModifiedDate":"2023-10-28"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"            if (empty || patient \u003d\u003d null) {","lastModifiedDate":"2023-10-28"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"                setGraphic(null);","lastModifiedDate":"2023-10-17"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"                setText(null);","lastModifiedDate":"2023-10-17"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"            } else {","lastModifiedDate":"2023-10-17"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());","lastModifiedDate":"2023-10-28"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"            }","lastModifiedDate":"2023-10-17"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-17"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-17"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"lyuanww":49}},{"path":"src/main/java/seedu/cc/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"lyuanww":1,"-":27}},{"path":"src/main/java/seedu/cc/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":1,"-":27}},{"path":"src/main/java/seedu/cc/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"lyuanww":1,"-":12}},{"path":"src/main/java/seedu/cc/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.MainApp;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.LogsCenter;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.StringUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Logic;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2023-10-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2023-10-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"lyuanww":5,"-":83}},{"path":"src/main/java/seedu/cc/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.MainApp;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"lyuanww":2,"-":86}},{"path":"src/main/resources/view/AppointmentEventCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" spacing\u003d\"10\" alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" style\u003d\"-fx-background-color: #F4F4F4; -fx-border-color: #CCCCCC; -fx-border-radius: 10; -fx-background-radius: 10;\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"                \u003cInsets bottom\u003d\"15\" left\u003d\"15\" right\u003d\"15\" top\u003d\"15\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"            \u003cHBox spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"                \u003cImageView fx:id\u003d\"appointmentDateIcon\" fitHeight\u003d\"16\" fitWidth\u003d\"16\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"                    \u003cImage url\u003d\"@../images/MedicalHistoryCardIcons/Date.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"                \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"                \u003cLabel fx:id\u003d\"appointmentDate\" text\u003d\"\\$first\" underline\u003d\"true\"\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"                    \u003cfont\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"                        \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"                    \u003c/font\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"            \u003cHBox spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"                \u003cImageView fx:id\u003d\"timeIcon\" fitHeight\u003d\"14\" fitWidth\u003d\"14\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"                    \u003cImage url\u003d\"@../images/AppointmentCardIcons/Time.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"                \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"                \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"        \u003crowConstraints\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"            \u003cRowConstraints /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"        \u003c/rowConstraints\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"LimJH2002":44}},{"path":"src/main/resources/view/AppointmentPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"    \u003cListView fx:id\u003d\"appointmentEventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-27"}],"authorContributionMap":{"LimJH2002":1,"-":7}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"/* General Appearance */","lastModifiedDate":"2023-10-26"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #D0E6FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":".label, .label-bright, .label-header, .table-view .column-header .label, .dialog-pane \u003e *.label.content, .menu-bar .label {","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #FFFFFF;","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":".tab-pane, .table-view, .split-pane, .list-view, .stack-pane, .pane-with-border, .status-bar, .grid-pane, .grid-pane .stack-pane, .menu-bar {","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #D0E6FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    -fx-border-color: transparent transparent #004080 transparent;","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #D0E6FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"    -fx-border-color: transparent transparent transparent #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #E0F0FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #C2D6EC;","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":44,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #A8C5A2;","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":".cell_big_label, .cell_small_label {","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":".status-bar .label, .status-bar-with-border .label {","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":".context-menu, .dialog-pane, .dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #E0F0FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"/* Button Stylings */","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #FFFFFF;","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #A0B9E9;","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #002750;","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #FFFFFF;","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"/* Scroll Bar Stylings */","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #D0E6FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":86,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"/* Text Field */","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: transparent #E0F0FF transparent #E0F0FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"    -fx-border-color: #E0F0FF #E0F0FF #004080 #E0F0FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #A8C5A2;","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"/* Sidebar Styles */","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"LimJH2002"},"content":".sidebar {","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #E0F0FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"LimJH2002"},"content":".sidebar-button {","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"LimJH2002"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2023-10-26"},{"lineNumber":111,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #D0E6FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"    -fx-border-color: #d8d8d8;","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"    -fx-alignment: CENTER_LEFT;","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-alignment: LEFT;","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":".sidebar-button:hover {","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #BFD8E9;","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":122,"author":{"gitId":"LimJH2002"},"content":".sidebar-button:pressed, .sidebar-button:focused {","lastModifiedDate":"2023-10-26"},{"lineNumber":123,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #4f9fff;","lastModifiedDate":"2023-10-26"},{"lineNumber":124,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #D0E6FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":127,"author":{"gitId":"LimJH2002"},"content":".sidebar-button .graphic {","lastModifiedDate":"2023-10-26"},{"lineNumber":128,"author":{"gitId":"LimJH2002"},"content":"    -fx-padding: 0 10 0 0; /* Top, Right, Bottom, Left */","lastModifiedDate":"2023-10-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":131,"author":{"gitId":"LimJH2002"},"content":"/* Icons */","lastModifiedDate":"2023-10-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":133,"author":{"gitId":"LimJH2002"},"content":"#patientsIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":134,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/patient_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":137,"author":{"gitId":"LimJH2002"},"content":"#historyIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":138,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/history_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":141,"author":{"gitId":"LimJH2002"},"content":"#appointmentsIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":142,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/appointment_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":145,"author":{"gitId":"LimJH2002"},"content":"#exitIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":146,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/exit_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":149,"author":{"gitId":"LimJH2002"},"content":"#helpIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":150,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/helpp_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":153,"author":{"gitId":"LimJH2002"},"content":"/* Hide Tabs */","lastModifiedDate":"2023-10-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":155,"author":{"gitId":"LimJH2002"},"content":".tab-pane .tab-header-background,","lastModifiedDate":"2023-10-26"},{"lineNumber":156,"author":{"gitId":"LimJH2002"},"content":".tab-pane .tab-header-area .headers-region {","lastModifiedDate":"2023-10-26"},{"lineNumber":157,"author":{"gitId":"LimJH2002"},"content":"    -fx-opacity: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":158,"author":{"gitId":"LimJH2002"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":159,"author":{"gitId":"LimJH2002"},"content":"    -fx-pref-height: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":160,"author":{"gitId":"LimJH2002"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":163,"author":{"gitId":"LimJH2002"},"content":"/* Sidebar Styles */","lastModifiedDate":"2023-10-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":165,"author":{"gitId":"LimJH2002"},"content":".sidebar {","lastModifiedDate":"2023-10-26"},{"lineNumber":166,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #E0F0FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":169,"author":{"gitId":"LimJH2002"},"content":".sidebar-button {","lastModifiedDate":"2023-10-26"},{"lineNumber":170,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #D0E6FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":171,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #004080;","lastModifiedDate":"2023-10-26"},{"lineNumber":172,"author":{"gitId":"LimJH2002"},"content":"    -fx-border-color: #d8d8d8;","lastModifiedDate":"2023-10-26"},{"lineNumber":173,"author":{"gitId":"LimJH2002"},"content":"    -fx-alignment: CENTER_LEFT;","lastModifiedDate":"2023-10-26"},{"lineNumber":174,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-alignment: LEFT;","lastModifiedDate":"2023-10-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":177,"author":{"gitId":"LimJH2002"},"content":".sidebar-button:hover {","lastModifiedDate":"2023-10-26"},{"lineNumber":178,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #BFD8E9;","lastModifiedDate":"2023-10-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":181,"author":{"gitId":"LimJH2002"},"content":".sidebar-button:pressed, .sidebar-button:focused {","lastModifiedDate":"2023-10-26"},{"lineNumber":182,"author":{"gitId":"LimJH2002"},"content":"    -fx-background-color: #4fa8ff;","lastModifiedDate":"2023-10-27"},{"lineNumber":183,"author":{"gitId":"LimJH2002"},"content":"    -fx-text-fill: #D0E6FF;","lastModifiedDate":"2023-10-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":186,"author":{"gitId":"LimJH2002"},"content":".sidebar-button .graphic {","lastModifiedDate":"2023-10-26"},{"lineNumber":187,"author":{"gitId":"LimJH2002"},"content":"    -fx-padding: 0 10 0 0; /* Top, Right, Bottom, Left */","lastModifiedDate":"2023-10-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":190,"author":{"gitId":"LimJH2002"},"content":"/* Icons */","lastModifiedDate":"2023-10-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":192,"author":{"gitId":"LimJH2002"},"content":"#patientsIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":193,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/patient_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":196,"author":{"gitId":"LimJH2002"},"content":"#historyIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":197,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/history_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":200,"author":{"gitId":"LimJH2002"},"content":"#appointmentsIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":201,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/appointment_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":204,"author":{"gitId":"LimJH2002"},"content":"#exitIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":205,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/exit_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":208,"author":{"gitId":"LimJH2002"},"content":"#helpIcon {","lastModifiedDate":"2023-10-26"},{"lineNumber":209,"author":{"gitId":"LimJH2002"},"content":"    -fx-image: url(\u0027../images/helpp_icon.png\u0027);","lastModifiedDate":"2023-10-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":212,"author":{"gitId":"LimJH2002"},"content":"/* Hide Tabs */","lastModifiedDate":"2023-10-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":214,"author":{"gitId":"LimJH2002"},"content":".tab-pane .tab-header-background,","lastModifiedDate":"2023-10-26"},{"lineNumber":215,"author":{"gitId":"LimJH2002"},"content":".tab-pane .tab-header-area .headers-region {","lastModifiedDate":"2023-10-26"},{"lineNumber":216,"author":{"gitId":"LimJH2002"},"content":"    -fx-opacity: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":217,"author":{"gitId":"LimJH2002"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":218,"author":{"gitId":"LimJH2002"},"content":"    -fx-pref-height: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":219,"author":{"gitId":"LimJH2002"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2023-10-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-10-26"}],"authorContributionMap":{"LimJH2002":106,"-":114}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"    -fx-background: #D0E6FF;","lastModifiedDate":"2023-10-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"LimJH2002":1,"-":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.Separator?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.TabPane?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.Tab?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"CareCentral\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    \u003cImage url\u003d\"@/images/HospitalLogo.png\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"      \u003c!-- Main SplitPane --\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"      \u003cSplitPane dividerPositions\u003d\"0\" orientation\u003d\"HORIZONTAL\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"        \u003c!-- Sidebar --\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"        \u003cVBox styleClass\u003d\"sidebar\" spacing\u003d\"15\" minWidth\u003d\"350\" maxWidth\u003d\"350\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"            \u003cInsets bottom\u003d\"25\" left\u003d\"25\" right\u003d\"25\" top\u003d\"25\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"          \u003cStackPane maxWidth\u003d\"Infinity\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"            \u003cImageView fx:id\u003d\"logoImage\" fitHeight\u003d\"125\" fitWidth\u003d\"125\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"              \u003cImage url\u003d\"@/images/HospitalLogo.png\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"            \u003c/ImageView\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"          \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"          \u003c!-- Adjustments for each button below --\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"          \u003cButton graphicTextGap\u003d\"15.0\" onAction\u003d\"#showPatientsTab\" maxWidth\u003d\"Infinity\" minHeight\u003d\"70\" styleClass\u003d\"sidebar-button\" text\u003d\"Patients\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"            \u003cgraphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"              \u003cImageView fx:id\u003d\"patientsIcon\" fitHeight\u003d\"40\" fitWidth\u003d\"40\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"            \u003c/graphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"          \u003c/Button\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"          \u003cButton graphicTextGap\u003d\"15.0\" maxWidth\u003d\"Infinity\" minHeight\u003d\"70\" onAction\u003d\"#showMedicalHistoryTab\" styleClass\u003d\"sidebar-button\" text\u003d\"Medical History\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"            \u003cgraphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"              \u003cImageView fx:id\u003d\"historyIcon\" fitHeight\u003d\"40\" fitWidth\u003d\"40\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"            \u003c/graphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"          \u003c/Button\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"          \u003cButton graphicTextGap\u003d\"15.0\" maxWidth\u003d\"Infinity\" minHeight\u003d\"70\" onAction\u003d\"#showAppointmentsTab\" styleClass\u003d\"sidebar-button\" text\u003d\"Appointments\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"            \u003cgraphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"              \u003cImageView fx:id\u003d\"appointmentsIcon\" fitHeight\u003d\"40\" fitWidth\u003d\"40\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"            \u003c/graphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"          \u003c/Button\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"          \u003cSeparator /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"          \u003cButton graphicTextGap\u003d\"15.0\" maxWidth\u003d\"Infinity\" minHeight\u003d\"70\" onAction\u003d\"#handleHelp\" styleClass\u003d\"sidebar-button\" text\u003d\"Help\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"            \u003cgraphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"              \u003cImageView fx:id\u003d\"helpIcon\" fitHeight\u003d\"40\" fitWidth\u003d\"40\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"            \u003c/graphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"          \u003c/Button\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"          \u003cButton graphicTextGap\u003d\"15.0\" maxWidth\u003d\"Infinity\" minHeight\u003d\"70\" onAction\u003d\"#handleExit\" styleClass\u003d\"sidebar-button\" text\u003d\"Exit\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"            \u003cgraphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"              \u003cImageView fx:id\u003d\"exitIcon\" fitHeight\u003d\"40\" fitWidth\u003d\"40\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"            \u003c/graphic\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"          \u003c/Button\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"        \u003cVBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"          \u003cVBox alignment\u003d\"CENTER\" spacing\u003d\"10\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"            \u003cLabel fx:id\u003d\"tabInfoLabel\" style\u003d\"-fx-font-size: 24px; -fx-padding: 10px; -fx-font-weight: bold;\" text\u003d\"Patients\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"          \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"              \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"          \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"              \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"          \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"          \u003cTabPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"mainTabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"            \u003cTab text\u003d\"Patients\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"              \u003ccontent\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"                \u003cStackPane fx:id\u003d\"patientsContentPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":95,"author":{"gitId":"lyuanww"},"content":"                  \u003cVBox fx:id\u003d\"patientList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-28"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":97,"author":{"gitId":"LimJH2002"},"content":"                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":98,"author":{"gitId":"LimJH2002"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":99,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":100,"author":{"gitId":"lyuanww"},"content":"                    \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-28"},{"lineNumber":101,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":104,"author":{"gitId":"LimJH2002"},"content":"              \u003c/content\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":105,"author":{"gitId":"LimJH2002"},"content":"            \u003c/Tab\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":106,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":107,"author":{"gitId":"LimJH2002"},"content":"            \u003cTab text\u003d\"Medical History\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":108,"author":{"gitId":"LimJH2002"},"content":"              \u003ccontent\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"LimJH2002"},"content":"                \u003cStackPane fx:id\u003d\"medicalHistoryContentPlaceholder\"\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":110,"author":{"gitId":"LimJH2002"},"content":"                  \u003cVBox fx:id\u003d\"medicalHistoryList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-30"},{"lineNumber":111,"author":{"gitId":"LimJH2002"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"                    \u003cStackPane fx:id\u003d\"medicalHistoryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":115,"author":{"gitId":"LimJH2002"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"LimJH2002"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"LimJH2002"},"content":"              \u003c/content\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"            \u003c/Tab\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"LimJH2002"},"content":"            \u003cTab text\u003d\"Appointments\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":121,"author":{"gitId":"LimJH2002"},"content":"              \u003ccontent\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":122,"author":{"gitId":"LimJH2002"},"content":"                \u003cStackPane fx:id\u003d\"appointmentContentPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":123,"author":{"gitId":"LimJH2002"},"content":"                  \u003cVBox fx:id\u003d\"appointmentList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":124,"author":{"gitId":"LimJH2002"},"content":"                    \u003cpadding\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":125,"author":{"gitId":"LimJH2002"},"content":"                      \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":126,"author":{"gitId":"LimJH2002"},"content":"                    \u003c/padding\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":127,"author":{"gitId":"LimJH2002"},"content":"                    \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":128,"author":{"gitId":"LimJH2002"},"content":"                  \u003c/VBox\u003e","lastModifiedDate":"2023-10-27"},{"lineNumber":129,"author":{"gitId":"LimJH2002"},"content":"                \u003c/StackPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":130,"author":{"gitId":"LimJH2002"},"content":"              \u003c/content\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":131,"author":{"gitId":"LimJH2002"},"content":"            \u003c/Tab\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":132,"author":{"gitId":"LimJH2002"},"content":"          \u003c/TabPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":133,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":134,"author":{"gitId":"LimJH2002"},"content":"          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":135,"author":{"gitId":"LimJH2002"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":136,"author":{"gitId":"LimJH2002"},"content":"      \u003c/SplitPane\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"tanboonkhong":2,"LimJH2002":107,"lyuanww":2,"-":28}},{"path":"src/main/resources/view/MedicalHistoryEventCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" spacing\u003d\"10\" alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" style\u003d\"-fx-background-color: #F4F4F4; -fx-border-color: #CCCCCC; -fx-border-radius: 10; -fx-background-radius: 10;\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"                \u003cInsets bottom\u003d\"15\" left\u003d\"15\" right\u003d\"15\" top\u003d\"15\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"            \u003cHBox spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"                \u003cImageView fx:id\u003d\"dateIcon\" fitHeight\u003d\"16\" fitWidth\u003d\"16\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"                    \u003cImage url\u003d\"@../images/MedicalHistoryCardIcons/Date.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"                \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"                \u003cLabel fx:id\u003d\"date\" text\u003d\"\\$first\" underline\u003d\"true\"\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"                    \u003cfont\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"                        \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"                    \u003c/font\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"            \u003cHBox spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"                \u003cImageView fx:id\u003d\"treatmentIcon\" fitHeight\u003d\"14\" fitWidth\u003d\"14\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"                    \u003cImage url\u003d\"@../images/MedicalHistoryCardIcons/Treatment.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"                \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"                \u003cLabel fx:id\u003d\"treatment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$treatment\" /\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"            \u003cHBox spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"                \u003cImageView fx:id\u003d\"medicalConditionIcon\" fitHeight\u003d\"14\" fitWidth\u003d\"14\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"                    \u003cImage url\u003d\"@../images/MedicalHistoryCardIcons/Condition.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"                \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"                \u003cLabel fx:id\u003d\"medicalCondition\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$medicalCondition\" /\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"        \u003crowConstraints\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"            \u003cRowConstraints /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"        \u003c/rowConstraints\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"LimJH2002":34,"lyuanww":15}},{"path":"src/main/resources/view/MedicalHistoryPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-24"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"    \u003cListView fx:id\u003d\"medicalHistoryEventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-24"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-24"}],"authorContributionMap":{"lyuanww":8}},{"path":"src/main/resources/view/PatientListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.geometry.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.text.*?\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" spacing\u003d\"10\" alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/17.0.2-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" style\u003d\"-fx-background-color: #F4F4F4; -fx-border-color: #CCCCCC; -fx-border-radius: 10; -fx-background-radius: 10;\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"        \u003cInsets bottom\u003d\"15\" left\u003d\"15\" right\u003d\"15\" top\u003d\"15\" /\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"4\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"        \u003cImageView fx:id\u003d\"idIcon\" fitHeight\u003d\"16\" fitWidth\u003d\"16\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"          \u003cImage url\u003d\"@../images/PatientCardIcons/Person.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" style\u003d\"-fx-font-weight: bold;\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" style\u003d\"-fx-font-size: 18;\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"          \u003cfont\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"            \u003cFont name\u003d\"System Font\" size\u003d\"16.0\" /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"          \u003c/font\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" hgap\u003d\"10\" vgap\u003d\"10\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"      \u003cHBox spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"        \u003cImageView fx:id\u003d\"nricIcon\" fitHeight\u003d\"14\" fitWidth\u003d\"14\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"          \u003cImage url\u003d\"@../images/PatientCardIcons/NRIC.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"        \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" style\u003d\"-fx-font-size: 14;\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"      \u003cHBox spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"        \u003cImageView fx:id\u003d\"phoneIcon\" fitHeight\u003d\"14\" fitWidth\u003d\"14\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"          \u003cImage url\u003d\"@../images/PatientCardIcons/Phone.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"        \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" style\u003d\"-fx-font-size: 14;\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"      \u003cHBox spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"        \u003cImageView fx:id\u003d\"addressIcon\" fitHeight\u003d\"14\" fitWidth\u003d\"14\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"            \u003cImage url\u003d\"@../images/PatientCardIcons/Address.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"        \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" style\u003d\"-fx-font-size: 14;\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"      \u003cHBox spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"        \u003cImageView fx:id\u003d\"emailIcon\" fitHeight\u003d\"14\" fitWidth\u003d\"14\"\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"          \u003cImage url\u003d\"@../images/PatientCardIcons/Alias.png\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" style\u003d\"-fx-font-size: 14;\"/\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"    \u003crowConstraints\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"      \u003cRowConstraints /\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"    \u003c/rowConstraints\u003e","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"LimJH2002":46,"lyuanww":17}},{"path":"src/main/resources/view/PatientListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.*?\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.layout.*?\u003e","lastModifiedDate":"2023-10-29"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-17"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-17"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-28"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-30"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-17"}],"authorContributionMap":{"tanboonkhong":1,"LimJH2002":2,"lyuanww":7}},{"path":"src/test/java/seedu/cc/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-02-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expected \u003d AppParameters.class.getCanonicalName() + \"{configPath\u003d\" + appParameters.getConfigPath() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(expected, appParameters.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(appParameters.equals(new AppParameters()));","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(appParameters.equals(appParameters));","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(appParameters.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(appParameters.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different config path -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d new AppParameters();","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        otherAppParameters.setConfigPath(Paths.get(\"configPath\"));","lastModifiedDate":"2019-02-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(appParameters.equals(otherAppParameters));","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"lyuanww":1,"-":88}},{"path":"src/test/java/seedu/cc/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.core;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2019-02-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        String expected \u003d Config.class.getCanonicalName() + \"{logLevel\u003d\" + config.getLogLevel()","lastModifiedDate":"2019-02-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"                + \", userPrefsFilePath\u003d\" + config.getUserPrefsFilePath() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(expected, config.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"lyuanww":1,"-":26}},{"path":"src/test/java/seedu/cc/commons/core/GuiSettingsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.core;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-02-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class GuiSettingsTest {","lastModifiedDate":"2019-02-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        String expected \u003d GuiSettings.class.getCanonicalName() + \"{windowWidth\u003d\" + guiSettings.getWindowWidth()","lastModifiedDate":"2019-02-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"                + \", windowHeight\u003d\" + guiSettings.getWindowHeight() + \", windowCoordinates\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"                + guiSettings.getWindowCoordinates() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertEquals(expected, guiSettings.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-23"}],"authorContributionMap":{"lyuanww":1,"-":15}},{"path":"src/test/java/seedu/cc/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.core;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":2,"-":133}},{"path":"src/test/java/seedu/cc/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.core.index;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromZeroBased(0);","lastModifiedDate":"2019-02-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expected \u003d Index.class.getCanonicalName() + \"{zeroBasedIndex\u003d\" + index.getZeroBased() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(expected, index.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"lyuanww":2,"-":65}},{"path":"src/test/java/seedu/cc/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"lyuanww":2,"-":34}},{"path":"src/test/java/seedu/cc/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"lyuanww":3,"-":105}},{"path":"src/test/java/seedu/cc/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.Config;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataLoadingException, IOException {","lastModifiedDate":"2023-06-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"lyuanww":4,"-":112}},{"path":"src/test/java/seedu/cc/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":2,"-":21}},{"path":"src/test/java/seedu/cc/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.testutil.SerializableTestClass;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.testutil.TestUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":3,"-":42}},{"path":"src/test/java/seedu/cc/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.commons.util;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"lyuanww":2,"-":141}},{"path":"src/test/java/seedu/cc/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;","lastModifiedDate":"2023-10-28"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"//import static seedu.cc.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.AddCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.ListCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.storage.JsonClinicBookStorage;","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.storage.JsonUserPrefsStorage;","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.storage.StorageManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"        JsonClinicBookStorage clinicBookStorage \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"                new JsonClinicBookStorage(temporaryFolder.resolve(\"clinicBook.json\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"        StorageManager storage \u003d new StorageManager(clinicBookStorage, userPrefsStorage);","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"        String deleteCommand \u003d \"delete-patient 9\";","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"pangyyen"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"pangyyen"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"pangyyen"},"content":"        Model expectedModel \u003d new ModelManager(model.getClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component.","lastModifiedDate":"2023-06-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"pangyyen"},"content":"        // Inject LogicManager with an ClinicBookStorage that throws the IOException e when saving","lastModifiedDate":"2023-10-20"},{"lineNumber":155,"author":{"gitId":"pangyyen"},"content":"        JsonClinicBookStorage addressBookStorage \u003d new JsonClinicBookStorage(prefPath) {","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"pangyyen"},"content":"            public void saveClinicBook(ReadOnlyClinicBook addressBook, Path filePath)","lastModifiedDate":"2023-10-20"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-06-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":169,"author":{"gitId":"pangyyen"},"content":"        // Triggers the saveClinicBook method by executing an add command","lastModifiedDate":"2023-10-20"},{"lineNumber":170,"author":{"gitId":"lyuanww"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2023-10-20"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;","lastModifiedDate":"2023-06-13"},{"lineNumber":172,"author":{"gitId":"pangyyen"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":174,"author":{"gitId":"pangyyen"},"content":"        expectedModel.addPatient(expectedPatient);","lastModifiedDate":"2023-10-20"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"tanboonkhong":3,"pangyyen":16,"lyuanww":21,"-":137}},{"path":"src/test/java/seedu/cc/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"        model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_newPatient_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"        Model expectedModel \u003d new ModelManager(model.getClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel.addPatient(validPatient);","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"        assertCommandSuccess(new AddCommand(validPatient), model,","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPatient)),","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                expectedModel);","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"        Patient patientInList \u003d model.getClinicBook().getPatientList().get(0);","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"        assertCommandFailure(new AddCommand(patientInList), model,","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"                AddCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-10-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"tanboonkhong":13,"lyuanww":8,"-":27}},{"path":"src/test/java/seedu/cc/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"import javafx.beans.property.IntegerProperty;","lastModifiedDate":"2023-10-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"        CommandResult commandResult \u003d new AddCommand(validPatient).execute(modelStub);","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPatient)),","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        AddCommand addCommand \u003d new AddCommand(validPatient);","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2023-10-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"tanboonkhong"},"content":"        public Path getClinicBookFilePath() {","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"tanboonkhong"},"content":"        public void setClinicBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"tanboonkhong"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"tanboonkhong"},"content":"        public void setClinicBook(ReadOnlyClinicBook newData) {","lastModifiedDate":"2023-10-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"tanboonkhong"},"content":"        public ReadOnlyClinicBook getClinicBook() {","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"tanboonkhong"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"tanboonkhong"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2023-10-20"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"tanboonkhong"},"content":"        public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-10-20"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"tanboonkhong"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"tanboonkhong"},"content":"        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2023-10-20"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":164,"author":{"gitId":"pangyyen"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Medical History Events \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":165,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":166,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":167,"author":{"gitId":"pangyyen"},"content":"        public ObservableList\u003cMedicalHistoryEvent\u003e getFilteredMedicalHistoryEventList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":168,"author":{"gitId":"lyuanww"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-25"},{"lineNumber":169,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":170,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":171,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":172,"author":{"gitId":"pangyyen"},"content":"        public void addMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":173,"author":{"gitId":"lyuanww"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-25"},{"lineNumber":174,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":175,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":176,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":177,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":178,"author":{"gitId":"pangyyen"},"content":"        public void deleteMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":179,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":180,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":181,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":182,"author":{"gitId":"LimJH2002"},"content":"        public void setCurrentTab(int tabIndex) {","lastModifiedDate":"2023-10-27"},{"lineNumber":183,"author":{"gitId":"LimJH2002"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-27"},{"lineNumber":184,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":185,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":186,"author":{"gitId":"LimJH2002"},"content":"        @Override","lastModifiedDate":"2023-10-27"},{"lineNumber":187,"author":{"gitId":"LimJH2002"},"content":"        public IntegerProperty currentTabProperty() {","lastModifiedDate":"2023-10-27"},{"lineNumber":188,"author":{"gitId":"LimJH2002"},"content":"            return null;","lastModifiedDate":"2023-10-27"},{"lineNumber":189,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-10-27"},{"lineNumber":190,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-10-27"},{"lineNumber":191,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":192,"author":{"gitId":"lyuanww"},"content":"        public void listMedicalHistoryEvents(Patient patient) {","lastModifiedDate":"2023-10-25"},{"lineNumber":193,"author":{"gitId":"lyuanww"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-25"},{"lineNumber":194,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":195,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":196,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":197,"author":{"gitId":"lyuanww"},"content":"        public void setMedicalHistoryEvent(Patient patient, MedicalHistoryEvent medicalHistoryEventToEdit,","lastModifiedDate":"2023-10-25"},{"lineNumber":198,"author":{"gitId":"lyuanww"},"content":"                                           MedicalHistoryEvent editedMedicalHistoryEvent) {","lastModifiedDate":"2023-10-25"},{"lineNumber":199,"author":{"gitId":"lyuanww"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-25"},{"lineNumber":200,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":201,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":202,"author":{"gitId":"pangyyen"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AppointmentEvent Operations \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":203,"author":{"gitId":"pangyyen"},"content":"        public ObservableList\u003cAppointmentEvent\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":204,"author":{"gitId":"pangyyen"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-26"},{"lineNumber":205,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":206,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":207,"author":{"gitId":"pangyyen"},"content":"        public void addAppointmentEventToPatient(Patient patient, AppointmentEvent appointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":208,"author":{"gitId":"pangyyen"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-26"},{"lineNumber":209,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":210,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":211,"author":{"gitId":"pangyyen"},"content":"        public void listAppointmentsEventForPatient(Patient patient) {","lastModifiedDate":"2023-10-26"},{"lineNumber":212,"author":{"gitId":"pangyyen"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-26"},{"lineNumber":213,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":214,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":215,"author":{"gitId":"pangyyen"},"content":"        public void setAppointmentEventForPatient(Patient patient, AppointmentEvent appointmentEventToEdit,","lastModifiedDate":"2023-10-26"},{"lineNumber":216,"author":{"gitId":"pangyyen"},"content":"                                           AppointmentEvent editedAppointmentEvent) {","lastModifiedDate":"2023-10-26"},{"lineNumber":217,"author":{"gitId":"pangyyen"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-26"},{"lineNumber":218,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":219,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":220,"author":{"gitId":"pangyyen"},"content":"        public void deleteAppointmentEventForPatient(Patient patient, AppointmentEvent appointmentEventToDelete) {","lastModifiedDate":"2023-10-26"},{"lineNumber":221,"author":{"gitId":"pangyyen"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-26"},{"lineNumber":222,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":226,"author":{"gitId":"tanboonkhong"},"content":"     * A Model stub that contains a single patient.","lastModifiedDate":"2023-10-20"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":228,"author":{"gitId":"tanboonkhong"},"content":"    private class ModelStubWithPatient extends ModelStub {","lastModifiedDate":"2023-10-20"},{"lineNumber":229,"author":{"gitId":"tanboonkhong"},"content":"        private final Patient patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"tanboonkhong"},"content":"        ModelStubWithPatient(Patient patient) {","lastModifiedDate":"2023-10-20"},{"lineNumber":232,"author":{"gitId":"tanboonkhong"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-10-20"},{"lineNumber":233,"author":{"gitId":"tanboonkhong"},"content":"            this.patient \u003d patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":237,"author":{"gitId":"tanboonkhong"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-20"},{"lineNumber":238,"author":{"gitId":"tanboonkhong"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-10-20"},{"lineNumber":239,"author":{"gitId":"tanboonkhong"},"content":"            return this.patient.isSamePerson(patient);","lastModifiedDate":"2023-10-20"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":244,"author":{"gitId":"tanboonkhong"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2023-10-20"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":246,"author":{"gitId":"tanboonkhong"},"content":"    private class ModelStubAcceptingPatientAdded extends ModelStub {","lastModifiedDate":"2023-10-20"},{"lineNumber":247,"author":{"gitId":"tanboonkhong"},"content":"        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-20"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":250,"author":{"gitId":"tanboonkhong"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-20"},{"lineNumber":251,"author":{"gitId":"tanboonkhong"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-10-20"},{"lineNumber":252,"author":{"gitId":"tanboonkhong"},"content":"            return patientsAdded.stream().anyMatch(patient::isSamePerson);","lastModifiedDate":"2023-10-20"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":256,"author":{"gitId":"tanboonkhong"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-10-20"},{"lineNumber":257,"author":{"gitId":"tanboonkhong"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-10-20"},{"lineNumber":258,"author":{"gitId":"tanboonkhong"},"content":"            patientsAdded.add(patient);","lastModifiedDate":"2023-10-20"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":262,"author":{"gitId":"tanboonkhong"},"content":"        public ReadOnlyClinicBook getClinicBook() {","lastModifiedDate":"2023-10-20"},{"lineNumber":263,"author":{"gitId":"tanboonkhong"},"content":"            return new ClinicBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"tanboonkhong":49,"LimJH2002":14,"pangyyen":28,"lyuanww":29,"-":147}},{"path":"src/test/java/seedu/cc/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_emptyClinicBook_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_nonEmptyClinicBook_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"        Model model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel.setClinicBook(new ClinicBook());","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"tanboonkhong":7,"lyuanww":5,"-":20}},{"path":"src/test/java/seedu/cc/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expected \u003d CommandResult.class.getCanonicalName() + \"{feedbackToUser\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                + commandResult.getFeedbackToUser() + \", showHelp\u003d\" + commandResult.isShowHelp()","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + \", exit\u003d\" + commandResult.isExit() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, commandResult.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"lyuanww":1,"-":62}},{"path":"src/test/java/seedu/cc/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PATIENT_INDEX;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TREATMENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"//import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.EditMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.testutil.EditMedicalHistoryEventDescriptorBuilder;","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"    public static final String VALID_NRIC_AMY \u003d \"S1234568A\";","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S1234568B\";","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"    public static final String VALID_MEDICAL_CONDITION_CANCER \u003d \"Cancer\";","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"    public static final String VALID_TREATMENT_CANCER \u003d \"Chemotherapy\";","lastModifiedDate":"2023-10-31"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"    public static final String VALID_DATE_CANCER \u003d \"2020-10-10\";","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"    public static final String VALID_MEDICAL_CONDITION_DIABETES \u003d \"Diabetes\";","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"    public static final String VALID_TREATMENT_DIABETES \u003d \"Insulin\";","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"    public static final String VALID_DATE_DIABETES \u003d \"2020-10-11\";","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"    public static final String VALID_PATIENT_INDEX \u003d \"1\";","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"    public static final String MEDICAL_CONDITION_DESC_CANCER \u003d \" \" + PREFIX_MEDICAL_CONDITION","lastModifiedDate":"2023-10-31"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"            + VALID_MEDICAL_CONDITION_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"    public static final String TREATMENT_DESC_CANCER \u003d \" \" + PREFIX_TREATMENT + VALID_TREATMENT_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"    public static final String DATE_DESC_CANCER \u003d \" \" + PREFIX_DATE + VALID_DATE_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":82,"author":{"gitId":"lyuanww"},"content":"    public static final String MEDICAL_CONDITION_DESC_DIABETES \u003d \" \" + PREFIX_MEDICAL_CONDITION","lastModifiedDate":"2023-10-31"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"            + VALID_MEDICAL_CONDITION_DIABETES;","lastModifiedDate":"2023-10-31"},{"lineNumber":84,"author":{"gitId":"lyuanww"},"content":"    public static final String TREATMENT_DESC_DIABETES \u003d \" \" + PREFIX_TREATMENT + VALID_TREATMENT_DIABETES;","lastModifiedDate":"2023-10-31"},{"lineNumber":85,"author":{"gitId":"lyuanww"},"content":"    public static final String DATE_DESC_DIABETES \u003d \" \" + PREFIX_DATE + VALID_DATE_DIABETES;","lastModifiedDate":"2023-10-31"},{"lineNumber":86,"author":{"gitId":"lyuanww"},"content":"    public static final String PATIENT_INDEX_DESC \u003d \" \" + PREFIX_PATIENT_INDEX + VALID_PATIENT_INDEX;","lastModifiedDate":"2023-10-31"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":88,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"    public static final EditMedicalHistoryEventCommand.EditMedicalHistoryEventDescriptor MEDICAL_CONDITION_DESC;","lastModifiedDate":"2023-10-25"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"    public static final EditCommand.EditPatientDescriptor DESC_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"tanboonkhong"},"content":"    public static final EditCommand.EditPatientDescriptor DESC_BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":95,"author":{"gitId":"lyuanww"},"content":"        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"lyuanww"},"content":"        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_AMY)","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":101,"author":{"gitId":"lyuanww"},"content":"        MEDICAL_CONDITION_DESC \u003d new EditMedicalHistoryEventDescriptorBuilder()","lastModifiedDate":"2023-10-25"},{"lineNumber":102,"author":{"gitId":"lyuanww"},"content":"                .withMedicalCondition(VALID_MEDICAL_CONDITION_CANCER)","lastModifiedDate":"2023-10-31"},{"lineNumber":103,"author":{"gitId":"lyuanww"},"content":"                .withTreatment(VALID_TREATMENT_CANCER).withDate(VALID_DATE_CANCER).build();","lastModifiedDate":"2023-10-31"},{"lineNumber":104,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook expectedClinicBook \u003d new ClinicBook(actualModel.getClinicBook());","lastModifiedDate":"2023-10-20"},{"lineNumber":143,"author":{"gitId":"tanboonkhong"},"content":"        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());","lastModifiedDate":"2023-10-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":146,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expectedClinicBook, actualModel.getClinicBook());","lastModifiedDate":"2023-10-20"},{"lineNumber":147,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());","lastModifiedDate":"2023-10-20"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":154,"author":{"gitId":"tanboonkhong"},"content":"    public static void showPatientAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2023-10-20"},{"lineNumber":155,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":157,"author":{"gitId":"tanboonkhong"},"content":"        Patient person \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":159,"author":{"gitId":"lyuanww"},"content":"        model.updateFilteredPatientList(new PatientNameContainsKeywordsPredicate(Collections","lastModifiedDate":"2023-10-20"},{"lineNumber":160,"author":{"gitId":"lyuanww"},"content":"                .singletonList(splitName[0])));","lastModifiedDate":"2023-10-20"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":162,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(1, model.getFilteredPatientList().size());","lastModifiedDate":"2023-10-20"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"tanboonkhong":18,"lyuanww":47,"-":100}},{"path":"src/test/java/seedu/cc/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"    private Model model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"        Patient personToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel.deletePatient(personToDelete);","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"        Patient personToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                Messages.format(personToDelete));","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"        Model expectedModel \u003d new ModelManager(model.getClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel.deletePatient(personToDelete);","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"        showNoPatient(expectedModel);","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getClinicBook().getPatientList().size());","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"tanboonkhong"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"tanboonkhong"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(targetIndex);","lastModifiedDate":"2019-02-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expected \u003d DeleteCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expected, deleteCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"tanboonkhong"},"content":"    private void showNoPatient(Model model) {","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"tanboonkhong"},"content":"        model.updateFilteredPatientList(p -\u003e false);","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(model.getFilteredPatientList().isEmpty());","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"tanboonkhong":26,"lyuanww":11,"-":84}},{"path":"src/test/java/seedu/cc/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"    private Model model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"        Patient editedPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, descriptor);","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient));","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"        Model expectedModel \u003d new ModelManager(new ClinicBook(model.getClinicBook()), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"        Index indexLastPatient \u003d Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPatient.getZeroBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"        PatientBuilder personInList \u003d new PatientBuilder(lastPatient);","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"        Patient editedPatient \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPatient, descriptor);","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient));","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"        Model expectedModel \u003d new ModelManager(new ClinicBook(model.getClinicBook()), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel.setPatient(lastPatient, editedPatient);","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, new EditPatientDescriptor());","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"tanboonkhong"},"content":"        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"tanboonkhong"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient));","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"tanboonkhong"},"content":"        Model expectedModel \u003d new ModelManager(new ClinicBook(model.getClinicBook()), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"tanboonkhong"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"tanboonkhong"},"content":"        Patient personInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"tanboonkhong"},"content":"        Patient editedPatient \u003d new PatientBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"tanboonkhong"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"tanboonkhong"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPatient));","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"tanboonkhong"},"content":"        Model expectedModel \u003d new ModelManager(new ClinicBook(model.getClinicBook()), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_duplicatePatientUnfilteredList_failure() {","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"tanboonkhong"},"content":"        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"tanboonkhong"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"tanboonkhong"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PATIENT, descriptor);","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_duplicatePatientFilteredList_failure() {","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"tanboonkhong"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"tanboonkhong"},"content":"        Patient personInList \u003d model.getClinicBook().getPatientList().get(INDEX_SECOND_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"tanboonkhong"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PATIENT,","lastModifiedDate":"2023-10-20"},{"lineNumber":118,"author":{"gitId":"tanboonkhong"},"content":"                new EditPatientDescriptorBuilder(personInList).build());","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_invalidPatientIndexUnfilteredList_failure() {","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"tanboonkhong"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"tanboonkhong"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"lyuanww"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_invalidPatientIndexFilteredList_failure() {","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"tanboonkhong"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"tanboonkhong"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getClinicBook().getPatientList().size());","lastModifiedDate":"2023-10-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"tanboonkhong"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2023-10-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"lyuanww"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"tanboonkhong"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PATIENT, DESC_AMY);","lastModifiedDate":"2023-10-20"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"tanboonkhong"},"content":"        EditPatientDescriptor copyDescriptor \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2023-10-20"},{"lineNumber":155,"author":{"gitId":"tanboonkhong"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PATIENT, copyDescriptor);","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PATIENT, DESC_AMY)));","lastModifiedDate":"2023-10-20"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PATIENT, DESC_BOB)));","lastModifiedDate":"2023-10-20"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":177,"author":{"gitId":"tanboonkhong"},"content":"        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2023-10-20"},{"lineNumber":178,"author":{"gitId":"tanboonkhong"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPatientDescriptor);","lastModifiedDate":"2023-10-20"},{"lineNumber":179,"author":{"gitId":"tanboonkhong"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPatientDescriptor\u003d\"","lastModifiedDate":"2023-10-20"},{"lineNumber":180,"author":{"gitId":"tanboonkhong"},"content":"                + editPatientDescriptor + \"}\";","lastModifiedDate":"2023-10-20"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"tanboonkhong":63,"lyuanww":15,"-":106}},{"path":"src/test/java/seedu/cc/logic/commands/EditPatientDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"public class EditPatientDescriptorTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"        EditPatientDescriptor descriptorWithSameValues \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"        EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"        EditPatientDescriptor editPatientDescriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"        String expected \u003d EditPatientDescriptor.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"                + editPatientDescriptor.getNric().orElse(null) + \", nric\u003d\"","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"                + editPatientDescriptor.getName().orElse(null) + \", phone\u003d\"","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"tanboonkhong"},"content":"                + editPatientDescriptor.getPhone().orElse(null) + \", email\u003d\"","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"                + editPatientDescriptor.getEmail().orElse(null) + \", address\u003d\"","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"                + editPatientDescriptor.getAddress().orElse(null) + \", tags\u003d\"","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"                + editPatientDescriptor.getTags().orElse(null) + \"}\";","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expected, editPatientDescriptor.toString());","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"tanboonkhong":18,"lyuanww":8,"-":46}},{"path":"src/test/java/seedu/cc/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"lyuanww":5,"-":15}},{"path":"src/test/java/seedu/cc/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.CARL;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.ELLE;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.FIONA;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"    private Model model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"        PatientNameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"                new PatientNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"        PatientNameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"                new PatientNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_zeroKeywords_noPatientFound() {","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"        PatientNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPatientList());","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"    public void execute_multipleKeywords_multiplePatientsFound() {","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"        PatientNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"        PatientNameContainsKeywordsPredicate predicate \u003d new PatientNameContainsKeywordsPredicate(Arrays","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"                .asList(\"keyword\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        FindCommand findCommand \u003d new FindCommand(predicate);","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expected \u003d FindCommand.class.getCanonicalName() + \"{predicate\u003d\" + predicate + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expected, findCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":89,"author":{"gitId":"tanboonkhong"},"content":"    private PatientNameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"tanboonkhong"},"content":"        return new PatientNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"tanboonkhong":21,"lyuanww":8,"-":63}},{"path":"src/test/java/seedu/cc/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"lyuanww":5,"-":15}},{"path":"src/test/java/seedu/cc/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.showPatientAtIndex;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"        model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"        expectedModel \u003d new ModelManager(model.getClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"        showPatientAtIndex(model, INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"tanboonkhong":6,"lyuanww":5,"-":28}},{"path":"src/test/java/seedu/cc/logic/commands/medhisteventcommands/AddPatientMedicalHistoryEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands.medhisteventcommands;","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.CommandResult;","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-26"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.testutil.MedicalHistoryEventBuilder;","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"public class AddPatientMedicalHistoryEventCommandTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    private final Model model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"    public void constructor_nullEventToAdd_throwsNullPointerException() {","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddMedicalHistoryEventCommand(null,","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"                Index.fromOneBased(1)));","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"    public void constructor_nullPatientIndex_throwsNullPointerException() {","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent validEvent \u003d new MedicalHistoryEventBuilder().build();","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddMedicalHistoryEventCommand(validEvent, null));","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"    public void execute_medicalHistoryEventAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent validEvent \u003d new MedicalHistoryEventBuilder().build();","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"        CommandResult commandResult \u003d new AddMedicalHistoryEventCommand(validEvent, INDEX_FIRST_PATIENT).execute(model);","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"        Patient resultPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"        assertEquals(String.format(AddMedicalHistoryEventCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"                        Messages.format(validEvent, resultPatient)),","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"pangyyen":6,"lyuanww":44}},{"path":"src/test/java/seedu/cc/logic/commands/medhisteventcommands/DeletePatientMedicalHistoryEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands.medhisteventcommands;","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_MEDHISTEVENT;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"class DeletePatientMedicalHistoryEventCommandTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    private final Model model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        model.listMedicalHistoryEvents(patient);","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent eventToDelete \u003d model.getFilteredMedicalHistoryEventList().get(INDEX_FIRST_MEDHISTEVENT","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"                .getZeroBased());","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        DeleteMedicalHistoryEventCommand deleteCommand \u003d new DeleteMedicalHistoryEventCommand(INDEX_FIRST_MEDHISTEVENT,","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"                INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"        String expectedMessage \u003d String.format(DeleteMedicalHistoryEventCommand.MESSAGE_DELETE_MEDICAL_HISTORY_SUCCESS,","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"                Messages.format(eventToDelete, patient));","lastModifiedDate":"2023-10-26"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"        Patient expectedPatient \u003d expectedModel.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"        expectedModel.listMedicalHistoryEvents(expectedPatient);","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"    public void execute_invalidPatientIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"        DeleteMedicalHistoryEventCommand deleteCommand \u003d new DeleteMedicalHistoryEventCommand(INDEX_FIRST_MEDHISTEVENT,","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"                outOfBoundIndex);","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"    public void execute_invalidEventIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-25"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        model.listMedicalHistoryEvents(patient);","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMedicalHistoryEventList().size() + 1);","lastModifiedDate":"2023-10-25"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        DeleteMedicalHistoryEventCommand deleteCommand \u003d new DeleteMedicalHistoryEventCommand(outOfBoundIndex,","lastModifiedDate":"2023-10-25"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"                INDEX_FIRST_PATIENT);","lastModifiedDate":"2023-10-25"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MEDICAL_HISTORY_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-25"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"    public void equals() {","lastModifiedDate":"2023-10-25"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"        DeleteMedicalHistoryEventCommand deleteFirstCommand \u003d new DeleteMedicalHistoryEventCommand(INDEX_FIRST_PATIENT,","lastModifiedDate":"2023-10-25"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"                INDEX_FIRST_MEDHISTEVENT);","lastModifiedDate":"2023-10-25"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"        DeleteMedicalHistoryEventCommand deleteSecondCommand \u003d","lastModifiedDate":"2023-10-25"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"                new DeleteMedicalHistoryEventCommand(INDEX_SECOND_PATIENT, INDEX_FIRST_MEDHISTEVENT);","lastModifiedDate":"2023-10-25"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-25"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommand);","lastModifiedDate":"2023-10-25"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-25"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"        DeleteMedicalHistoryEventCommand deleteFirstCommandCopy \u003d","lastModifiedDate":"2023-10-25"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"                new DeleteMedicalHistoryEventCommand(INDEX_FIRST_PATIENT, INDEX_FIRST_MEDHISTEVENT);","lastModifiedDate":"2023-10-25"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);","lastModifiedDate":"2023-10-25"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-25"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"        assertNotEquals(1, deleteFirstCommand);","lastModifiedDate":"2023-10-25"},{"lineNumber":82,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":83,"author":{"gitId":"lyuanww"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-25"},{"lineNumber":84,"author":{"gitId":"lyuanww"},"content":"        assertNotEquals(null, deleteFirstCommand);","lastModifiedDate":"2023-10-25"},{"lineNumber":85,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":86,"author":{"gitId":"lyuanww"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-25"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"        assertNotEquals(deleteFirstCommand, deleteSecondCommand);","lastModifiedDate":"2023-10-25"},{"lineNumber":88,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":89,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":90,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":91,"author":{"gitId":"lyuanww"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-25"},{"lineNumber":92,"author":{"gitId":"lyuanww"},"content":"        Index eventIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-25"},{"lineNumber":93,"author":{"gitId":"lyuanww"},"content":"        Index patientIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-25"},{"lineNumber":94,"author":{"gitId":"lyuanww"},"content":"        DeleteMedicalHistoryEventCommand deleteCommand \u003d new DeleteMedicalHistoryEventCommand(eventIndex, patientIndex);","lastModifiedDate":"2023-10-25"},{"lineNumber":95,"author":{"gitId":"lyuanww"},"content":"        String expected \u003d DeleteMedicalHistoryEventCommand.class.getCanonicalName() + \"{eventIndex\u003d\" + eventIndex","lastModifiedDate":"2023-10-25"},{"lineNumber":96,"author":{"gitId":"lyuanww"},"content":"                + \", patientIndex\u003d\" + patientIndex + \"}\";","lastModifiedDate":"2023-10-25"},{"lineNumber":97,"author":{"gitId":"lyuanww"},"content":"        assertEquals(expected, deleteCommand.toString());","lastModifiedDate":"2023-10-25"},{"lineNumber":98,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":99,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"pangyyen":2,"lyuanww":97}},{"path":"src/test/java/seedu/cc/logic/commands/medhisteventcommands/EditPatientMedicalHistoryEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands.medhisteventcommands;","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"//import static seedu.cc.logic.commands.CommandTestUtil.VALID_DATE;","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_MEDHISTEVENT;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.EditMedicalHistoryEventCommand.EditMedicalHistoryEventDescriptor;","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.testutil.EditMedicalHistoryEventDescriptorBuilder;","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.testutil.MedicalHistoryEventBuilder;","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"//import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"public class EditPatientMedicalHistoryEventCommandTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"    private final Model model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent editedMedicalHistoryEvent \u003d new MedicalHistoryEventBuilder().build();","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"        EditMedicalHistoryEventDescriptor descriptor \u003d","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"                new EditMedicalHistoryEventDescriptorBuilder(editedMedicalHistoryEvent).build();","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"        EditMedicalHistoryEventCommand editCommand \u003d new EditMedicalHistoryEventCommand(INDEX_FIRST_MEDHISTEVENT,","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"                INDEX_FIRST_PATIENT, descriptor);","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-25"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"        model.listMedicalHistoryEvents(patient);","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"        String expectedMessage \u003d String.format(EditMedicalHistoryEventCommand.MESSAGE_EDIT_EVENT_SUCCESS,","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"                Messages.format(editedMedicalHistoryEvent, patient));","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        Model expectedModel \u003d new ModelManager(new ClinicBook(model.getClinicBook()), new UserPrefs());","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"        expectedModel.listMedicalHistoryEvents(patient);","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"        expectedModel.setMedicalHistoryEvent(patient, model.getFilteredMedicalHistoryEventList().get(0),","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"                editedMedicalHistoryEvent);","lastModifiedDate":"2023-10-25"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-25"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"    public void execute_invalidMedicalHistoryEventIndexUnfilteredList_failure() {","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        model.listMedicalHistoryEvents(patient);","lastModifiedDate":"2023-10-25"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMedicalHistoryEventList().size() + 1);","lastModifiedDate":"2023-10-25"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"        EditMedicalHistoryEventDescriptor descriptor \u003d new EditMedicalHistoryEventDescriptorBuilder()","lastModifiedDate":"2023-10-25"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"                .withMedicalCondition(VALID_MEDICAL_CONDITION_CANCER).build();","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"        EditMedicalHistoryEventCommand editCommand \u003d new EditMedicalHistoryEventCommand(outOfBoundIndex,","lastModifiedDate":"2023-10-25"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"                INDEX_FIRST_PATIENT, descriptor);","lastModifiedDate":"2023-10-25"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MEDICAL_HISTORY_EVENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-25"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-25"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"pangyyen":4,"lyuanww":66}},{"path":"src/test/java/seedu/cc/logic/commands/medhisteventcommands/ListPatientMedicalHistoryEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.commands.medhisteventcommands;","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.ModelManager;","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"public class ListPatientMedicalHistoryEventCommandTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    private Model model;","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    private Model expectedModel;","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    public void setUp() {","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"        model \u003d new ModelManager(getTypicalClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"        expectedModel \u003d new ModelManager(model.getClinicBook(), new UserPrefs());","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"    public void execute_showsEverything() {","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PATIENT.getZeroBased());","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        model.listMedicalHistoryEvents(patient);","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"        String expectedMessage \u003d String.format(ListMedicalHistoryEventCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2023-10-26"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"                Messages.format(patient));","lastModifiedDate":"2023-10-26"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"        assertCommandSuccess(new ListMedicalHistoryEventCommand(INDEX_FIRST_PATIENT), model,","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"                expectedMessage, expectedModel);","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2023-10-25"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"        ListMedicalHistoryEventCommand listMedicalHistoryEventCommand \u003d","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"                new ListMedicalHistoryEventCommand(outOfBoundIndex);","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        assertCommandFailure(listMedicalHistoryEventCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-28"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"pangyyen":5,"lyuanww":44}},{"path":"src/test/java/seedu/cc/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-16"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.AddCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"    private final AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"        Patient expectedPatient \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPatient));","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"        Patient expectedPatientMultipleTags \u003d new PatientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"                new AddCommand(expectedPatientMultipleTags));","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"        String validExpectedPatientString \u003d NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND;","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPatientString,","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // multiple phones","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPatientString,","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // multiple emails","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPatientString,","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // multiple addresses","lastModifiedDate":"2023-07-14"},{"lineNumber":89,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, ADDRESS_DESC_AMY + validExpectedPatientString,","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":94,"author":{"gitId":"lyuanww"},"content":"                validExpectedPatientString + NRIC_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + NAME_DESC_AMY","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"lyuanww"},"content":"                        + ADDRESS_DESC_AMY + validExpectedPatientString,","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":101,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPatientString,","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":105,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC + validExpectedPatientString,","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":109,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPatientString,","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":113,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, INVALID_ADDRESS_DESC + validExpectedPatientString,","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":119,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, validExpectedPatientString + INVALID_NAME_DESC,","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":123,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, validExpectedPatientString + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":127,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, validExpectedPatientString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-07-14"},{"lineNumber":131,"author":{"gitId":"pangyyen"},"content":"        assertParseFailure(parser, validExpectedPatientString + INVALID_ADDRESS_DESC,","lastModifiedDate":"2023-10-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":138,"author":{"gitId":"pangyyen"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).withTags().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"lyuanww"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-10-20"},{"lineNumber":140,"author":{"gitId":"lyuanww"},"content":"                + ADDRESS_DESC_AMY, new AddCommand(expectedPatient));","lastModifiedDate":"2023-10-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":171,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-10-20"},{"lineNumber":172,"author":{"gitId":"lyuanww"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":175,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB","lastModifiedDate":"2023-10-20"},{"lineNumber":176,"author":{"gitId":"lyuanww"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":179,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC","lastModifiedDate":"2023-10-20"},{"lineNumber":180,"author":{"gitId":"lyuanww"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":183,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-10-20"},{"lineNumber":184,"author":{"gitId":"lyuanww"},"content":"                + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":186,"author":{"gitId":"pangyyen"},"content":"        // invalid tag`","lastModifiedDate":"2023-10-20"},{"lineNumber":187,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-10-20"},{"lineNumber":188,"author":{"gitId":"lyuanww"},"content":"                + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":191,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-10-20"},{"lineNumber":192,"author":{"gitId":"lyuanww"},"content":"                        + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-20"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                        + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"tanboonkhong":2,"pangyyen":18,"lyuanww":64,"-":115}},{"path":"src/test/java/seedu/cc/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"lyuanww":1,"-":149}},{"path":"src/test/java/seedu/cc/logic/parser/ClinicBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.AddCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.ClearCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.DeleteCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.EditCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.ExitCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.FindCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.HelpCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.ListCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.testutil.PatientUtil;","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"public class ClinicBookParserTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"    private final ClinicBookParser parser \u003d new ClinicBookParser();","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"        Patient person \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PatientUtil.getAddCommand(person));","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PATIENT.getOneBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PATIENT), command);","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"        Patient person \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(person).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"                + INDEX_FIRST_PATIENT.getOneBased() + \" \" + PatientUtil.getEditPatientDescriptorDetails(descriptor));","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PATIENT, descriptor), command);","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"        assertEquals(new FindCommand(new PatientNameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"tanboonkhong":1,"pangyyen":16,"lyuanww":14,"-":70}},{"path":"src/test/java/seedu/cc/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.Command;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput,","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            Command expectedCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"lyuanww":3,"-":36}},{"path":"src/test/java/seedu/cc/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.DeleteCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PATIENT));","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"pangyyen":2,"lyuanww":5,"-":25}},{"path":"src/test/java/seedu/cc/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-16"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-16"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-16"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-16"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_SECOND_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.EditCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"    private final EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"tanboonkhong"},"content":"        Index targetIndex \u003d INDEX_SECOND_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"pangyyen"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":122,"author":{"gitId":"pangyyen"},"content":"        Index targetIndex \u003d INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"pangyyen"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"pangyyen"},"content":"        Index targetIndex \u003d INDEX_THIRD_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":137,"author":{"gitId":"pangyyen"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":143,"author":{"gitId":"tanboonkhong"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":149,"author":{"gitId":"tanboonkhong"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":155,"author":{"gitId":"tanboonkhong"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":161,"author":{"gitId":"tanboonkhong"},"content":"        descriptor \u003d new EditPatientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // More extensive testing of duplicate parameter detections is done in","lastModifiedDate":"2023-07-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // AddCommandParserTest#parse_repeatedNonTagValue_failure()","lastModifiedDate":"2023-07-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-07-14"},{"lineNumber":172,"author":{"gitId":"pangyyen"},"content":"        Index targetIndex \u003d INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2023-07-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-07-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + INVALID_PHONE_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        // mulltiple valid fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-07-14"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // multiple invalid values","lastModifiedDate":"2023-07-14"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC","lastModifiedDate":"2023-07-14"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                + INVALID_PHONE_DESC + INVALID_ADDRESS_DESC + INVALID_EMAIL_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS));","lastModifiedDate":"2023-07-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":200,"author":{"gitId":"pangyyen"},"content":"        Index targetIndex \u003d INDEX_THIRD_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"pangyyen"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withTags().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"tanboonkhong":6,"pangyyen":9,"lyuanww":42,"-":151}},{"path":"src/test/java/seedu/cc/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.FindCommand;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.patient.PatientNameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"                new FindCommand(new PatientNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"pangyyen":2,"lyuanww":5,"-":27}},{"path":"src/test/java/seedu/cc/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_THIRD_PATIENT;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(INDEX_THIRD_PATIENT, ParserUtil.parseIndex(\"3\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(INDEX_THIRD_PATIENT, ParserUtil.parseIndex(\"  3  \"));","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"tanboonkhong":2,"pangyyen":1,"lyuanww":9,"-":184}},{"path":"src/test/java/seedu/cc/logic/parser/medicalhistory/AddMedicalHistoryEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser.medicalhistory;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.DATE_DESC_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.MEDICAL_CONDITION_DESC_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.TREATMENT_DESC_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_DATE_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TREATMENT_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_MEDICAL_CONDITION;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TREATMENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalMedicalHistoryEvents.CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.Messages;","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.AddMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.testutil.MedicalHistoryEventBuilder;","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"class AddMedicalHistoryEventCommandParserTest {","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"    private final AddMedicalHistoryEventCommandParser parser \u003d new AddMedicalHistoryEventCommandParser();","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"        MedicalHistoryEvent expectedMedicalHistoryEvent \u003d new MedicalHistoryEventBuilder(CANCER).build();","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        assertParseSuccess(parser, \"1\" + MEDICAL_CONDITION_DESC_CANCER + TREATMENT_DESC_CANCER","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"                + DATE_DESC_CANCER,","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"                        new AddMedicalHistoryEventCommand(expectedMedicalHistoryEvent, INDEX_FIRST_PATIENT));","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"        String validExpectedMedicalHistoryEventString \u003d MEDICAL_CONDITION_DESC_CANCER + TREATMENT_DESC_CANCER","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"                + DATE_DESC_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"        // repeated medical condition","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"1\" + validExpectedMedicalHistoryEventString","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"                        + MEDICAL_CONDITION_DESC_CANCER,","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"                                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_MEDICAL_CONDITION));","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"        // repeated treatment","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"1\" + validExpectedMedicalHistoryEventString + TREATMENT_DESC_CANCER,","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_TREATMENT));","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"        // repeated date","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"1\" + validExpectedMedicalHistoryEventString + DATE_DESC_CANCER,","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DATE));","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"                AddMedicalHistoryEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"        // missing medical condition prefix","lastModifiedDate":"2023-10-31"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"1\" + VALID_MEDICAL_CONDITION_CANCER + TREATMENT_DESC_CANCER","lastModifiedDate":"2023-10-31"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"                        + DATE_DESC_CANCER,","lastModifiedDate":"2023-10-31"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-31"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"        // missing treatment prefix","lastModifiedDate":"2023-10-31"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"1\" + MEDICAL_CONDITION_DESC_CANCER + VALID_TREATMENT_CANCER","lastModifiedDate":"2023-10-31"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"                        + DATE_DESC_CANCER,","lastModifiedDate":"2023-10-31"},{"lineNumber":69,"author":{"gitId":"lyuanww"},"content":"                            expectedMessage);","lastModifiedDate":"2023-10-31"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":71,"author":{"gitId":"lyuanww"},"content":"        // missing date prefix","lastModifiedDate":"2023-10-31"},{"lineNumber":72,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"1\" + MEDICAL_CONDITION_DESC_CANCER + TREATMENT_DESC_CANCER + VALID_DATE_CANCER,","lastModifiedDate":"2023-10-31"},{"lineNumber":73,"author":{"gitId":"lyuanww"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-31"},{"lineNumber":74,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":77,"author":{"gitId":"lyuanww"},"content":"    //TODO: add test for invalid fields","lastModifiedDate":"2023-10-31"},{"lineNumber":78,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":79,"author":{"gitId":"lyuanww"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-31"},{"lineNumber":80,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":81,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"lyuanww":81}},{"path":"src/test/java/seedu/cc/logic/parser/medicalhistory/DeleteMedicalHistoryEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser.medicalhistory;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.PATIENT_INDEX_DESC;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_MEDHISTEVENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.DeleteMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"class DeleteMedicalHistoryEventCommandParserTest {","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"    private final DeleteMedicalHistoryEventCommandParser parser \u003d new DeleteMedicalHistoryEventCommandParser();","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"        assertParseSuccess(parser, \"1\" + PATIENT_INDEX_DESC,","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"                new DeleteMedicalHistoryEventCommand(INDEX_FIRST_MEDHISTEVENT, INDEX_FIRST_PATIENT));","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"                DeleteMedicalHistoryEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"a\" + PATIENT_INDEX_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"                DeleteMedicalHistoryEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"lyuanww":32}},{"path":"src/test/java/seedu/cc/logic/parser/medicalhistory/EditMedicalHistoryEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser.medicalhistory;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.DATE_DESC_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.MEDICAL_CONDITION_DESC_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.PATIENT_INDEX_DESC;","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.TREATMENT_DESC_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_DATE_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_MEDICAL_CONDITION_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TREATMENT_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_MEDHISTEVENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.EditMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.testutil.EditMedicalHistoryEventDescriptorBuilder;","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"class EditMedicalHistoryEventCommandParserTest {","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMedicalHistoryEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-31"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    private final EditMedicalHistoryEventCommandParser parser \u003d new EditMedicalHistoryEventCommandParser();","lastModifiedDate":"2023-10-31"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-10-31"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        // negative index","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"        // zero index","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-10-31"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-10-31"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2023-10-31"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"        Index targetIndex \u003d INDEX_FIRST_MEDHISTEVENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        Index patientIndex \u003d INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"        String userInput \u003d targetIndex.getOneBased() + PATIENT_INDEX_DESC + MEDICAL_CONDITION_DESC_CANCER","lastModifiedDate":"2023-10-31"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"                + TREATMENT_DESC_CANCER + DATE_DESC_CANCER;","lastModifiedDate":"2023-10-31"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"        EditMedicalHistoryEventCommand.EditMedicalHistoryEventDescriptor descriptor \u003d","lastModifiedDate":"2023-10-31"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"                new EditMedicalHistoryEventDescriptorBuilder()","lastModifiedDate":"2023-10-31"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"                        .withMedicalCondition(VALID_MEDICAL_CONDITION_CANCER).withTreatment(VALID_TREATMENT_CANCER)","lastModifiedDate":"2023-10-31"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"                        .withDate(VALID_DATE_CANCER).build();","lastModifiedDate":"2023-10-31"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"        EditMedicalHistoryEventCommand expectedCommand \u003d new EditMedicalHistoryEventCommand(targetIndex,","lastModifiedDate":"2023-10-31"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"                patientIndex, descriptor);","lastModifiedDate":"2023-10-31"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-31"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"lyuanww":61}},{"path":"src/test/java/seedu/cc/logic/parser/medicalhistory/ListMedicalHistoryEventsCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.logic.parser.medicalhistory;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.TypicalIndexes.INDEX_FIRST_PATIENT;","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.ListMedicalHistoryEventCommand;","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"class ListMedicalHistoryEventsCommandParserTest {","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"    private final ListMedicalHistoryEventsCommandParser parser \u003d new ListMedicalHistoryEventsCommandParser();","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2023-10-31"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"        assertParseSuccess(parser, \"1\", new ListMedicalHistoryEventCommand(","lastModifiedDate":"2023-10-31"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"                INDEX_FIRST_PATIENT));","lastModifiedDate":"2023-10-31"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-31"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-31"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-31"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"                ListMedicalHistoryEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-31"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"lyuanww":26}},{"path":"src/test/java/seedu/cc/model/ClinicBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.model;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"public class ClinicBookTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"    private final ClinicBook clinicBook \u003d new ClinicBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"    public void constructor() {","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(Collections.emptyList(), clinicBook.getPatientList());","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e clinicBook.resetData(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"    public void resetData_withValidReadOnlyClinicBook_replacesData() {","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook newData \u003d getTypicalClinicBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"        clinicBook.resetData(newData);","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(newData, clinicBook);","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"    public void resetData_withDuplicatePatients_throwsDuplicatePatientException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"                .build();","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBookStub newData \u003d new ClinicBookStub(newPatients);","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e clinicBook.resetData(newData));","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e clinicBook.hasPatient(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"    public void hasPatient_personNotInClinicBook_returnsFalse() {","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(clinicBook.hasPatient(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"    public void hasPatient_personInClinicBook_returnsTrue() {","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"        clinicBook.addPatient(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(clinicBook.hasPatient(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"tanboonkhong"},"content":"    public void hasPatient_personWithSameIdentityFieldsInClinicBook_returnsTrue() {","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"tanboonkhong"},"content":"        clinicBook.addPatient(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"tanboonkhong"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"                .build();","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(clinicBook.hasPatient(editedAlice));","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"tanboonkhong"},"content":"    public void getPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e clinicBook.getPatientList().remove(0));","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"tanboonkhong"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"tanboonkhong"},"content":"        String expected \u003d ClinicBook.class.getCanonicalName() + \"{patients\u003d\" + clinicBook.getPatientList() + \"}\";","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expected, clinicBook.toString());","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"tanboonkhong"},"content":"     * A stub ReadOnlyClinicBook whose persons list can violate interface constraints.","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"tanboonkhong"},"content":"    private static class ClinicBookStub implements ReadOnlyClinicBook {","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"lyuanww"},"content":"        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-28"},{"lineNumber":99,"author":{"gitId":"lyuanww"},"content":"        private final ObservableList\u003cMedicalHistoryEvent\u003e medicalHistoryEvents \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-25"},{"lineNumber":100,"author":{"gitId":"pangyyen"},"content":"        private final ObservableList\u003cAppointmentEvent\u003e appointmentEvents \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-26"},{"lineNumber":101,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"lyuanww"},"content":"        ClinicBookStub(Collection\u003cPatient\u003e patients) {","lastModifiedDate":"2023-10-28"},{"lineNumber":103,"author":{"gitId":"lyuanww"},"content":"            this.patients.setAll(patients);","lastModifiedDate":"2023-10-28"},{"lineNumber":104,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"tanboonkhong"},"content":"        @Override","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"tanboonkhong"},"content":"        public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"lyuanww"},"content":"            return patients;","lastModifiedDate":"2023-10-28"},{"lineNumber":109,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":111,"author":{"gitId":"lyuanww"},"content":"        @Override","lastModifiedDate":"2023-10-25"},{"lineNumber":112,"author":{"gitId":"pangyyen"},"content":"        public ObservableList\u003cMedicalHistoryEvent\u003e getClinicBookMedicalHistory() {","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"lyuanww"},"content":"            return medicalHistoryEvents;","lastModifiedDate":"2023-10-25"},{"lineNumber":114,"author":{"gitId":"lyuanww"},"content":"        }","lastModifiedDate":"2023-10-25"},{"lineNumber":115,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":116,"author":{"gitId":"pangyyen"},"content":"        @Override","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"pangyyen"},"content":"        public ObservableList\u003cAppointmentEvent\u003e getClinicBookAppointments() {","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"pangyyen"},"content":"            return appointmentEvents;","lastModifiedDate":"2023-10-26"},{"lineNumber":119,"author":{"gitId":"pangyyen"},"content":"        }","lastModifiedDate":"2023-10-26"},{"lineNumber":120,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"tanboonkhong":104,"pangyyen":8,"lyuanww":10}},{"path":"src/test/java/seedu/cc/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.ClinicBookBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(new ClinicBook(), new ClinicBook(modelManager.getClinicBook()));","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"        userPrefs.setClinicBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"        userPrefs.setClinicBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"    public void setClinicBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setClinicBookFilePath(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"    public void setClinicBookFilePath_validPath_setsClinicBookFilePath() {","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"        modelManager.setClinicBookFilePath(path);","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(path, modelManager.getClinicBookFilePath());","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"    public void hasPatient_personNotInClinicBook_returnsFalse() {","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(modelManager.hasPatient(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"tanboonkhong"},"content":"    public void hasPatient_personInClinicBook_returnsTrue() {","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"tanboonkhong"},"content":"        modelManager.addPatient(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(modelManager.hasPatient(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"tanboonkhong"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook addressBook \u003d new ClinicBookBuilder().withPatient(ALICE).withPatient(BENSON).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook differentClinicBook \u003d new ClinicBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentClinicBook, userPrefs)));","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"        //String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"        //modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"LimJH2002"},"content":"        //assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":123,"author":{"gitId":"tanboonkhong"},"content":"        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"tanboonkhong"},"content":"        differentUserPrefs.setClinicBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"tanboonkhong":25,"LimJH2002":3,"lyuanww":4,"-":98}},{"path":"src/test/java/seedu/cc/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"    public void setClinicBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setClinicBookFilePath(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"    public void equals_sameValues_returnsTrue() {","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"        UserPrefs userPrefsA \u003d new UserPrefs();","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"        UserPrefs userPrefsB \u003d new UserPrefs();","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(userPrefsA, userPrefsB);","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"    public void equals_differentGuiSettings_returnsFalse() {","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"        UserPrefs userPrefsA \u003d new UserPrefs();","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"        userPrefsA.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"        UserPrefs userPrefsB \u003d new UserPrefs();","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"        userPrefsB.setGuiSettings(new GuiSettings(5, 6, 7, 8));","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"        assertNotEquals(userPrefsA, userPrefsB);","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"    public void equals_differentFilePath_returnsFalse() {","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"        UserPrefs userPrefsA \u003d new UserPrefs();","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"        userPrefsA.setClinicBookFilePath(Paths.get(\"pathA\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"        UserPrefs userPrefsB \u003d new UserPrefs();","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"        userPrefsB.setClinicBookFilePath(Paths.get(\"pathB\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"        assertNotEquals(userPrefsA, userPrefsB);","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"    public void equals_otherObject_returnsFalse() {","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"        String notAUserPrefs \u003d \"I am not a UserPrefs object\";","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"        assertNotEquals(userPrefs, notAUserPrefs);","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"tanboonkhong"},"content":"    public void hashCode_sameUserPrefs_sameHashCode() {","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"        UserPrefs userPrefsA \u003d new UserPrefs();","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"        UserPrefs userPrefsB \u003d new UserPrefs();","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(userPrefsA.hashCode(), userPrefsB.hashCode());","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"tanboonkhong":56,"LimJH2002":1,"lyuanww":2,"-":16}},{"path":"src/test/java/seedu/cc/model/patient/AppointmentEventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pangyyen"},"content":"package seedu.cc.model.patient;","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"pangyyen"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"pangyyen"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-10-26"},{"lineNumber":10,"author":{"gitId":"pangyyen"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-10-26"},{"lineNumber":11,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":12,"author":{"gitId":"pangyyen"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.AppointmentEvent;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"pangyyen"},"content":"class AppointmentEventTest {","lastModifiedDate":"2023-10-26"},{"lineNumber":17,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"pangyyen"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"pangyyen"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-26"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentEvent(null, \"12:00\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"pangyyen"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentEvent(\"2023-12-01\", null));","lastModifiedDate":"2023-10-26"},{"lineNumber":22,"author":{"gitId":"pangyyen"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentEvent(null, LocalTime.NOON));","lastModifiedDate":"2023-10-26"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentEvent(LocalDate.now(), null));","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"pangyyen"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"pangyyen"},"content":"        String invalidDate \u003d \"\";","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"pangyyen"},"content":"        String invalidTime \u003d \"25:00\";","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"pangyyen"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new AppointmentEvent(\"2023-12-01\", invalidTime));","lastModifiedDate":"2023-10-26"},{"lineNumber":31,"author":{"gitId":"pangyyen"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new AppointmentEvent(invalidDate, \"12:00\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"pangyyen"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"pangyyen"},"content":"    void isValidDate() {","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"        // null date","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppointmentEvent.isValidDate((LocalDate) null));","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"        // invalid dates","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"        assertFalse(AppointmentEvent.isValidDate(\"\")); // empty string","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"        assertFalse(AppointmentEvent.isValidDate(\"20231001\")); // missing hyphens","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"pangyyen"},"content":"        assertFalse(AppointmentEvent.isValidDate(\"01-10-2023\")); // missing wrong format","lastModifiedDate":"2023-10-26"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"        assertFalse(AppointmentEvent.isValidDate(\"2023-10-1\")); // missing leading zeros","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"        // valid dates","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"        assertTrue(AppointmentEvent.isValidDate(\"2023-10-01\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"        assertTrue(AppointmentEvent.isValidDate(\"2023-12-31\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"pangyyen"},"content":"        assertTrue(AppointmentEvent.isValidDate(\"2020-02-29\")); // leap year","lastModifiedDate":"2023-10-26"},{"lineNumber":50,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"    void isValidTime() {","lastModifiedDate":"2023-10-25"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"        // null time","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppointmentEvent.isValidTime((LocalTime) null));","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"        // invalid times","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"        assertFalse(AppointmentEvent.isValidTime(\"\")); // empty string","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"        assertFalse(AppointmentEvent.isValidTime(\"1200\")); // missing colon","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"        assertFalse(AppointmentEvent.isValidTime(\"25:00\")); // invalid hour","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"        assertFalse(AppointmentEvent.isValidTime(\"12:60\")); // invalid minutes","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"        // valid times","lastModifiedDate":"2023-10-25"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"        assertTrue(AppointmentEvent.isValidTime(\"00:00\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"        assertTrue(AppointmentEvent.isValidTime(\"23:59\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":67,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":68,"author":{"gitId":"pangyyen"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"    void testEquals() {","lastModifiedDate":"2023-10-25"},{"lineNumber":70,"author":{"gitId":"pangyyen"},"content":"        AppointmentEvent appointmentEvent \u003d new AppointmentEvent(\"2023-10-01\", \"12:00\");","lastModifiedDate":"2023-10-26"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-25"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"        assertEquals(appointmentEvent, new AppointmentEvent(\"2023-10-01\", \"12:00\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":75,"author":{"gitId":"pangyyen"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-25"},{"lineNumber":76,"author":{"gitId":"pangyyen"},"content":"        assertEquals(appointmentEvent, appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":77,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":78,"author":{"gitId":"pangyyen"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-25"},{"lineNumber":79,"author":{"gitId":"pangyyen"},"content":"        assertNotEquals(null, appointmentEvent);","lastModifiedDate":"2023-10-26"},{"lineNumber":80,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":81,"author":{"gitId":"pangyyen"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-25"},{"lineNumber":82,"author":{"gitId":"pangyyen"},"content":"        assertFalse(appointmentEvent.equals(5.0f));","lastModifiedDate":"2023-10-26"},{"lineNumber":83,"author":{"gitId":"pangyyen"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":84,"author":{"gitId":"pangyyen"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-25"},{"lineNumber":85,"author":{"gitId":"pangyyen"},"content":"        assertNotEquals(appointmentEvent, new AppointmentEvent(\"2023-10-02\", \"12:00\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":86,"author":{"gitId":"pangyyen"},"content":"        assertNotEquals(appointmentEvent, new AppointmentEvent(\"2023-10-01\", \"13:00\"));","lastModifiedDate":"2023-10-26"},{"lineNumber":87,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":88,"author":{"gitId":"pangyyen"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"pangyyen":88}},{"path":"src/test/java/seedu/cc/model/patient/NricTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package seedu.cc.model.patient;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"class NricTest {","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"    void isValidNric() {","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"        // valid NRIC numbers","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(Nric.isValidNric(\"M1234567P\"));","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(Nric.isValidNric(\"M8765432P\"));","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"        // invalid NRIC numbers","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"        assertFalse(Nric.isValidNric(\"12345678\"));","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"        assertFalse(Nric.isValidNric(\"87654321\"));","lastModifiedDate":"2023-10-16"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(Nric.isValidNric(\"1234\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(Nric.isValidNric(\"12345678901234567\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(Nric.isValidNric(\"abcdefg\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(Nric.isValidNric(\"1234567a\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(Nric.isValidNric(\"\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(Nric.isValidNric(\" \"));","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"    void testToString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(\"M1234567P\", new Nric(\"M1234567P\").toString());","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(\"M8765432P\", new Nric(\"M8765432P\").toString());","lastModifiedDate":"2023-10-16"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"    void testEquals() {","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"        // equal Nric objects","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(new Nric(\"M1234567P\"), new Nric(\"M1234567P\"));","lastModifiedDate":"2023-10-16"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(new Nric(\"M8765432P\"), new Nric(\"M8765432P\"));","lastModifiedDate":"2023-10-16"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"        // unequal Nric objects","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"        assertNotEquals(new Nric(\"M1234567P\"), new Nric(\"M8765432P\"));","lastModifiedDate":"2023-10-16"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"        assertNotEquals(new Nric(\"M8765432P\"), new Nric(\"M1234567P\"));","lastModifiedDate":"2023-10-16"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"        // comparing with null","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        assertNotEquals(new Nric(\"M8765432P\"), null);","lastModifiedDate":"2023-10-16"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"    void testHashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"        // equal hash codes for equal objects","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(new Nric(\"M1234567P\").hashCode(), new Nric(\"M1234567P\").hashCode());","lastModifiedDate":"2023-10-16"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(new Nric(\"M8765432P\").hashCode(), new Nric(\"M8765432P\").hashCode());","lastModifiedDate":"2023-10-16"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"        // unequal hash codes for unequal objects","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        assertNotEquals(new Nric(\"M1234567P\").hashCode(), new Nric(\"M8765432P\").hashCode());","lastModifiedDate":"2023-10-16"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"        assertNotEquals(new Nric(\"M8765432P\").hashCode(), new Nric(\"M1234567P\").hashCode());","lastModifiedDate":"2023-10-16"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"tanboonkhong":44,"LimJH2002":16}},{"path":"src/test/java/seedu/cc/model/patient/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.patient;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"pangyyen"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;x","lastModifiedDate":"2023-10-26"},{"lineNumber":4,"author":{"gitId":"pangyyen"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-26"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.appointment.PatientAppointmentList;","lastModifiedDate":"2023-10-26"},{"lineNumber":14,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.medicalhistory.PatientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"public class PatientTest {","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    private Patient patient;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"pangyyen"},"content":"    private Patient patientEmptyAppointment;","lastModifiedDate":"2023-10-26"},{"lineNumber":24,"author":{"gitId":"pangyyen"},"content":"    private Patient patientEmptyMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":25,"author":{"gitId":"pangyyen"},"content":"    private final PatientAppointmentList patientAppointmentList \u003d new PatientAppointmentList();","lastModifiedDate":"2023-10-26"},{"lineNumber":26,"author":{"gitId":"pangyyen"},"content":"    private final PatientMedicalHistory patientMedicalHistory \u003d new PatientMedicalHistory();","lastModifiedDate":"2023-10-26"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    public void setUp() {","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"        Name name \u003d new Name(\"John Doe\");","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"        Nric nric \u003d new Nric(\"M1234567A\");","lastModifiedDate":"2023-10-16"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"        Phone phone \u003d new Phone(\"98765432\");","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"        Email email \u003d new Email(\"johndoe@example.com\");","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"        Address address \u003d new Address(\"123, Jurong West Ave 6, #08-111\");","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"pangyyen"},"content":"        // TODO: Add appointment and medical history","lastModifiedDate":"2023-10-26"},{"lineNumber":38,"author":{"gitId":"pangyyen"},"content":"        patient \u003d new Patient(name, nric, phone, email, address, patientAppointmentList, patientMedicalHistory, tags);","lastModifiedDate":"2023-10-26"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"        patientEmptyAppointment \u003d new Patient(name, nric, phone, email, address, patientAppointmentList, tags);","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"        patientEmptyMedicalHistory \u003d new Patient(name, nric, phone, email, address, patientMedicalHistory, tags);","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"    public void isSamePatient_sameNric_returnsTrue() {","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"pangyyen"},"content":"        Patient anotherPatient \u003d new Patient(patient.getName(), patient.getNric(), patient.getPhone(),","lastModifiedDate":"2023-10-26"},{"lineNumber":46,"author":{"gitId":"pangyyen"},"content":"                patient.getEmail(), patient.getAddress(),","lastModifiedDate":"2023-10-26"},{"lineNumber":47,"author":{"gitId":"pangyyen"},"content":"                patientAppointmentList, patientMedicalHistory, patient.getTags());","lastModifiedDate":"2023-10-26"},{"lineNumber":48,"author":{"gitId":"pangyyen"},"content":"        assertTrue(patient.isSamePatient(anotherPatient));","lastModifiedDate":"2023-10-26"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"pangyyen"},"content":"    @Test","lastModifiedDate":"2023-10-25"},{"lineNumber":52,"author":{"gitId":"pangyyen"},"content":"    public void isSamePatient_differentNric_returnsFalse() {","lastModifiedDate":"2023-10-26"},{"lineNumber":53,"author":{"gitId":"pangyyen"},"content":"        Nric diffNric \u003d new Nric(\"M7654321B\");","lastModifiedDate":"2023-10-26"},{"lineNumber":54,"author":{"gitId":"pangyyen"},"content":"        Patient anotherPatient \u003d new Patient(patient.getName(), diffNric, patient.getPhone(),","lastModifiedDate":"2023-10-26"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"                patient.getEmail(), patient.getAddress(), patient.getTags());","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"        assertFalse(patient.isSamePatient(anotherPatient));","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"pangyyen"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"pangyyen"},"content":"    //    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":59,"author":{"gitId":"pangyyen"},"content":"    //    public void getMedicalHistory_returnsCorrectMedicalHistory() {","lastModifiedDate":"2023-10-26"},{"lineNumber":60,"author":{"gitId":"pangyyen"},"content":"    //        assertEquals(patientAppointmentList, patientEmptyMedicalHistory.getPatientMedicalHistory());","lastModifiedDate":"2023-10-26"},{"lineNumber":61,"author":{"gitId":"pangyyen"},"content":"    //    }","lastModifiedDate":"2023-10-26"},{"lineNumber":62,"author":{"gitId":"pangyyen"},"content":"    //","lastModifiedDate":"2023-10-26"},{"lineNumber":63,"author":{"gitId":"pangyyen"},"content":"    //    @Test","lastModifiedDate":"2023-10-26"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"    //    public void getAppointmentList_returnsCorrectAppointmentList() {","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"pangyyen"},"content":"    //        assertEquals(patientMedicalHistory, patientEmptyAppointment.getPatientAppointmentList());","lastModifiedDate":"2023-10-26"},{"lineNumber":66,"author":{"gitId":"pangyyen"},"content":"    //    }","lastModifiedDate":"2023-10-26"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"pangyyen":33,"LimJH2002":1,"lyuanww":33}},{"path":"src/test/java/seedu/cc/model/patient/UniquePatientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.model.patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"public class UniquePatientListTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"    public void contains_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"    public void contains_patientNotInList_returnsFalse() {","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(uniquePatientList.contains(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"    public void contains_patientInList_returnsTrue() {","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(uniquePatientList.contains(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"    public void add_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"    public void add_duplicatePatient_throwsDuplicatePatientException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatient_nullTargetPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatient_nullEditedPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALICE, null));","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatient_targetPatientNotInList_throwsPatientNotFoundException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALICE, ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatient_editedPatientIsSamePatient_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.setPatient(ALICE, ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"        expectedUniquePatientList.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatient_editedPatientHasDifferentIdentity_success() {","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.setPatient(ALICE, BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"tanboonkhong"},"content":"        expectedUniquePatientList.add(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"tanboonkhong"},"content":"    public void remove_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"tanboonkhong"},"content":"    public void remove_patientDoesNotExist_throwsPatientNotFoundException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"tanboonkhong"},"content":"    public void remove_existingPatient_removesPatient() {","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.remove(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatients_nullUniquePatientList_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatients_uniquePatientList_replacesOwnListWithProvidedUniquePatientList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":111,"author":{"gitId":"tanboonkhong"},"content":"        expectedUniquePatientList.add(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":112,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.setPatients(expectedUniquePatientList);","lastModifiedDate":"2023-10-20"},{"lineNumber":113,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-20"},{"lineNumber":114,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":115,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatients_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":118,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));","lastModifiedDate":"2023-10-20"},{"lineNumber":119,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":120,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":121,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":122,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatients_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2023-10-20"},{"lineNumber":123,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"tanboonkhong"},"content":"        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientList.setPatients(patientList);","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"tanboonkhong"},"content":"        expectedUniquePatientList.add(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":130,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":131,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":132,"author":{"gitId":"tanboonkhong"},"content":"    public void setPatients_listWithDuplicatePatients_throwsDuplicatePatientException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":133,"author":{"gitId":"tanboonkhong"},"content":"        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":134,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));","lastModifiedDate":"2023-10-20"},{"lineNumber":135,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":136,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":137,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":138,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":139,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":140,"author":{"gitId":"tanboonkhong"},"content":"    public void equals() {","lastModifiedDate":"2023-10-20"},{"lineNumber":141,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList uniquePatientListFirst \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":142,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList uniquePatientListSecond \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":143,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":144,"author":{"gitId":"tanboonkhong"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-20"},{"lineNumber":145,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(uniquePatientListFirst.equals(uniquePatientListFirst));","lastModifiedDate":"2023-10-20"},{"lineNumber":146,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":147,"author":{"gitId":"tanboonkhong"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-20"},{"lineNumber":148,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(uniquePatientListFirst.equals(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":149,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":150,"author":{"gitId":"tanboonkhong"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-20"},{"lineNumber":151,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(uniquePatientListFirst.equals(5));","lastModifiedDate":"2023-10-20"},{"lineNumber":152,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":153,"author":{"gitId":"tanboonkhong"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-20"},{"lineNumber":154,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientListFirst.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":155,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientListSecond.add(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":156,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(uniquePatientListFirst.equals(uniquePatientListSecond));","lastModifiedDate":"2023-10-20"},{"lineNumber":157,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":158,"author":{"gitId":"tanboonkhong"},"content":"        // same persons -\u003e returns true","lastModifiedDate":"2023-10-20"},{"lineNumber":159,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientListSecond.setPatients(Arrays.asList(ALICE));","lastModifiedDate":"2023-10-20"},{"lineNumber":160,"author":{"gitId":"tanboonkhong"},"content":"        assertTrue(uniquePatientListFirst.equals(uniquePatientListSecond));","lastModifiedDate":"2023-10-20"},{"lineNumber":161,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":162,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":163,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":164,"author":{"gitId":"tanboonkhong"},"content":"    public void hashCode_sameList_sameHashCode() {","lastModifiedDate":"2023-10-20"},{"lineNumber":165,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList uniquePatientListFirst \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":166,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList uniquePatientListSecond \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":167,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":168,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientListFirst.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":169,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientListFirst.add(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":170,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":171,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientListSecond.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":172,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientListSecond.add(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":173,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":174,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(uniquePatientListFirst.hashCode(), uniquePatientListSecond.hashCode());","lastModifiedDate":"2023-10-20"},{"lineNumber":175,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":176,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":177,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":178,"author":{"gitId":"tanboonkhong"},"content":"    public void hashCode_differentList_differentHashCode() {","lastModifiedDate":"2023-10-20"},{"lineNumber":179,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList uniquePatientListFirst \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":180,"author":{"gitId":"tanboonkhong"},"content":"        UniquePatientList uniquePatientListSecond \u003d new UniquePatientList();","lastModifiedDate":"2023-10-20"},{"lineNumber":181,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":182,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientListFirst.add(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":183,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":184,"author":{"gitId":"tanboonkhong"},"content":"        uniquePatientListSecond.add(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":185,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":186,"author":{"gitId":"tanboonkhong"},"content":"        assertNotEquals(uniquePatientListFirst.hashCode(), uniquePatientListSecond.hashCode());","lastModifiedDate":"2023-10-20"},{"lineNumber":187,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":188,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"tanboonkhong":188}},{"path":"src/test/java/seedu/cc/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Address address \u003d new Address(\"Valid Address\");","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(address.equals(new Address(\"Valid Address\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(address.equals(address));","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(address.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(address.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(address.equals(new Address(\"Other Valid Address\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"lyuanww":2,"-":54}},{"path":"src/test/java/seedu/cc/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Email email \u003d new Email(\"valid@email\");","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(email.equals(new Email(\"valid@email\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(email.equals(email));","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(email.equals(new Email(\"other.valid@email\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"lyuanww":2,"-":86}},{"path":"src/test/java/seedu/cc/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expected \u003d NameContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"LimJH2002":8,"lyuanww":1,"-":76}},{"path":"src/test/java/seedu/cc/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Name name \u003d new Name(\"Valid Name\");","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(new Name(\"Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(name.equals(name));","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(name.equals(new Name(\"Other Valid Name\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"lyuanww":2,"-":58}},{"path":"src/test/java/seedu/cc/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"        Person person \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"        Person editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        Person editedBob \u003d new PatientBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"        editedBob \u003d new PatientBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"        Person aliceCopy \u003d new PatientBuilder(ALICE).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"        Person editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"        String expected \u003d Patient.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                + \", email\u003d\" + ALICE.getEmail() + \", address\u003d\" + ALICE.getAddress() + \", tags\u003d\" + ALICE.getTags() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":100,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":101,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":102,"author":{"gitId":"tanboonkhong"},"content":"    void constructor_allFieldsNonNull_constructsSuccessfully() {","lastModifiedDate":"2023-10-12"},{"lineNumber":103,"author":{"gitId":"tanboonkhong"},"content":"        // Assume Name, Phone, and Email are classes with a single String argument constructor","lastModifiedDate":"2023-10-12"},{"lineNumber":104,"author":{"gitId":"tanboonkhong"},"content":"        Name testName \u003d new Name(\"John Doe\");","lastModifiedDate":"2023-10-12"},{"lineNumber":105,"author":{"gitId":"tanboonkhong"},"content":"        Phone testPhone \u003d new Phone(\"12345678\");","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"tanboonkhong"},"content":"        Email testEmail \u003d new Email(\"john@example.com\");","lastModifiedDate":"2023-10-12"},{"lineNumber":107,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"tanboonkhong"},"content":"        // Creating a Person using constructor","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"tanboonkhong"},"content":"        Person testPerson \u003d new Person(testName, testPhone, testEmail);","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"tanboonkhong"},"content":"        // Check that fields are correctly initialized","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(testName, testPerson.getName());","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(testPhone, testPerson.getPhone());","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(testEmail, testPerson.getEmail());","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"tanboonkhong"},"content":"        // Check that default/alternative values are set","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(\"NIL\", testPerson.getAddress().toString());","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(0, testPerson.getTags().size());","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"tanboonkhong"},"content":"    void constructor_nullName_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"tanboonkhong"},"content":"        // Assume Phone and Email are classes with a single String argument constructor","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"tanboonkhong"},"content":"        Phone testPhone \u003d new Phone(\"12345678\");","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"tanboonkhong"},"content":"        Email testEmail \u003d new Email(\"john@example.com\");","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"tanboonkhong"},"content":"        // Assert that passing a null Name triggers a NullPointerException","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Person(null, testPhone, testEmail));","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"tanboonkhong":32,"LimJH2002":14,"lyuanww":7,"-":77}},{"path":"src/test/java/seedu/cc/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d new Phone(\"999\");","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(phone.equals(new Phone(\"999\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(phone.equals(phone));","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(null));","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(5.0f));","lastModifiedDate":"2019-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2019-02-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(phone.equals(new Phone(\"995\")));","lastModifiedDate":"2019-02-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"lyuanww":2,"-":58}},{"path":"src/test/java/seedu/cc/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.person;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-16"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"import seedu.cc.testutil.PatientBuilder;","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"        Person editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"        Person editedAlice \u003d new PatientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList().toString(), uniquePersonList.toString());","lastModifiedDate":"2019-02-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"tanboonkhong":2,"LimJH2002":3,"lyuanww":6,"-":164}},{"path":"src/test/java/seedu/cc/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.model.tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"lyuanww":2,"-":24}},{"path":"src/test/java/seedu/cc/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Nric;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"    private static final String INVALID_NRIC \u003d \"S \";","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"    private static final List\u003cJsonAdaptedMedicalHistoryEvent\u003e VALID_MEDICAL_HISTORY_EVENTS \u003d","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"            BENSON.getMedicalHistory().getMedicalHistoryEvents().stream()","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"                    .map(JsonAdaptedMedicalHistoryEvent::new)","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"                    .collect(Collectors.toList());","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"pangyyen"},"content":"    private static final List\u003cJsonAdaptedAppointmentEvent\u003e VALID_APPOINTMENT_EVENTS \u003d","lastModifiedDate":"2023-10-26"},{"lineNumber":40,"author":{"gitId":"pangyyen"},"content":"            BENSON.getAppointmentList().getAppointmentList().stream()","lastModifiedDate":"2023-10-26"},{"lineNumber":41,"author":{"gitId":"pangyyen"},"content":"                    .map(JsonAdaptedAppointmentEvent::new)","lastModifiedDate":"2023-10-26"},{"lineNumber":42,"author":{"gitId":"pangyyen"},"content":"                    .collect(Collectors.toList());","lastModifiedDate":"2023-10-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"    public void toModelType_validPatientDetails_returnsPatient() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(BENSON);","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"pangyyen"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(INVALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-10-26"},{"lineNumber":56,"author":{"gitId":"pangyyen"},"content":"                VALID_ADDRESS, VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(null, VALID_NRIC, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"pangyyen"},"content":"                VALID_ADDRESS, VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"                new JsonAdaptedPatient(VALID_NAME, INVALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2023-10-27"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"                        VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-27"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"tanboonkhong"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"                new JsonAdaptedPatient(VALID_NAME, null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-10-27"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"                        VALID_ADDRESS, VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-27"},{"lineNumber":83,"author":{"gitId":"tanboonkhong"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"pangyyen"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-10-26"},{"lineNumber":91,"author":{"gitId":"pangyyen"},"content":"                VALID_ADDRESS, VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"lyuanww"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, null, VALID_EMAIL,","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"pangyyen"},"content":"                VALID_ADDRESS, VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"tanboonkhong"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"lyuanww"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2023-10-25"},{"lineNumber":108,"author":{"gitId":"pangyyen"},"content":"                        VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"lyuanww"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, null,","lastModifiedDate":"2023-10-20"},{"lineNumber":116,"author":{"gitId":"pangyyen"},"content":"                VALID_ADDRESS, VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"tanboonkhong"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"lyuanww"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,","lastModifiedDate":"2023-10-25"},{"lineNumber":125,"author":{"gitId":"pangyyen"},"content":"                        VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"lyuanww"},"content":"        JsonAdaptedPatient person \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2023-10-20"},{"lineNumber":133,"author":{"gitId":"pangyyen"},"content":"            null, VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, VALID_TAGS);","lastModifiedDate":"2023-10-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"tanboonkhong"},"content":"        JsonAdaptedPatient person \u003d","lastModifiedDate":"2023-10-20"},{"lineNumber":143,"author":{"gitId":"lyuanww"},"content":"                new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2023-10-25"},{"lineNumber":144,"author":{"gitId":"pangyyen"},"content":"                        VALID_MEDICAL_HISTORY_EVENTS, VALID_APPOINTMENT_EVENTS, invalidTags);","lastModifiedDate":"2023-10-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tanboonkhong":26,"pangyyen":15,"LimJH2002":4,"lyuanww":19,"-":83}},{"path":"src/test/java/seedu/cc/storage/JsonClinicBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.ALICE;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.HOON;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.IDA;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"public class JsonClinicBookStorageTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonClinicBookStorageTest\");","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"    @TempDir","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"    public Path testFolder;","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"    public void readClinicBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e readClinicBook(null));","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"    private java.util.Optional\u003cReadOnlyClinicBook\u003e readClinicBook(String filePath) throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"        return new JsonClinicBookStorage(Paths.get(filePath)).readClinicBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"                : null;","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"        assertFalse(readClinicBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readClinicBook(\"notJsonFormatClinicBook.json\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"    public void readClinicBook_invalidPatientClinicBook_throwDataLoadingException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readClinicBook(\"invalidPatientClinicBook.json\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"    public void readClinicBook_invalidAndValidPatientClinicBook_throwDataLoadingException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readClinicBook(\"invalidAndValidPatientClinicBook.json\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"    public void readAndSaveClinicBook_allInOrder_success() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"        Path filePath \u003d testFolder.resolve(\"TempClinicBook.json\");","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook original \u003d getTypicalClinicBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"        JsonClinicBookStorage jsonClinicBookStorage \u003d new JsonClinicBookStorage(filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"        // Save in new file and read back","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"        jsonClinicBookStorage.saveClinicBook(original, filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"        ReadOnlyClinicBook readBack \u003d jsonClinicBookStorage.readClinicBook(filePath).get();","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(original, new ClinicBook(readBack));","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"        original.addPatient(HOON);","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"tanboonkhong"},"content":"        original.removePatient(ALICE);","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"tanboonkhong"},"content":"        jsonClinicBookStorage.saveClinicBook(original, filePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"tanboonkhong"},"content":"        readBack \u003d jsonClinicBookStorage.readClinicBook(filePath).get();","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(original, new ClinicBook(readBack));","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"tanboonkhong"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"tanboonkhong"},"content":"        original.addPatient(IDA);","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"tanboonkhong"},"content":"        jsonClinicBookStorage.saveClinicBook(original); // file path not specified","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"tanboonkhong"},"content":"        readBack \u003d jsonClinicBookStorage.readClinicBook().get(); // file path not specified","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(original, new ClinicBook(readBack));","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"tanboonkhong"},"content":"    public void saveClinicBook_nullClinicBook_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveClinicBook(null, \"SomeFile.json\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"tanboonkhong"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"tanboonkhong"},"content":"    private void saveClinicBook(ReadOnlyClinicBook addressBook, String filePath) {","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"tanboonkhong"},"content":"        try {","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"tanboonkhong"},"content":"            new JsonClinicBookStorage(Paths.get(filePath))","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"tanboonkhong"},"content":"                    .saveClinicBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"tanboonkhong"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"tanboonkhong"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":105,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":106,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":107,"author":{"gitId":"tanboonkhong"},"content":"    public void saveClinicBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-20"},{"lineNumber":108,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveClinicBook(new ClinicBook(), null));","lastModifiedDate":"2023-10-20"},{"lineNumber":109,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":110,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"tanboonkhong":110}},{"path":"src/test/java/seedu/cc/storage/JsonSerializableClinicBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.util.JsonUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.testutil.TypicalPatients;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"public class JsonSerializableClinicBookTest {","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableClinicBookTest\");","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"    private static final Path TYPICAL_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientClinicBook.json\");","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientClinicBook.json\");","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonClinicBook.json\");","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    public void toModelType_typicalPatientFile_success() throws Exception {","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"        JsonSerializableClinicBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENT_FILE,","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"                JsonSerializableClinicBook.class).get();","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook typicalPersonsClinicBook \u003d TypicalPatients.getTypicalClinicBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(addressBookFromFile, typicalPersonsClinicBook);","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"        JsonSerializableClinicBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"                JsonSerializableClinicBook.class).get();","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"        JsonSerializableClinicBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"                JsonSerializableClinicBook.class).get();","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableClinicBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"tanboonkhong":13,"LimJH2002":5,"lyuanww":4,"-":25}},{"path":"src/test/java/seedu/cc/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataLoadingException {","lastModifiedDate":"2023-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"        userPrefs.setClinicBookFilePath(Paths.get(\"data/clinicbook.json\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataLoadingException, IOException {","lastModifiedDate":"2023-06-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"tanboonkhong"},"content":"    @Test","lastModifiedDate":"2023-10-20"},{"lineNumber":124,"author":{"gitId":"tanboonkhong"},"content":"    public void getUserPrefsFilePath_checkFilePath_correctFilePathReturned() {","lastModifiedDate":"2023-10-20"},{"lineNumber":125,"author":{"gitId":"tanboonkhong"},"content":"        Path expectedFilePath \u003d Paths.get(\"test\", \"path\", \"to\", \"userprefs.json\");","lastModifiedDate":"2023-10-20"},{"lineNumber":126,"author":{"gitId":"tanboonkhong"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(expectedFilePath);","lastModifiedDate":"2023-10-20"},{"lineNumber":127,"author":{"gitId":"tanboonkhong"},"content":"        Path actualFilePath \u003d jsonUserPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2023-10-20"},{"lineNumber":128,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(expectedFilePath, actualFilePath, \"File paths should be the same.\");","lastModifiedDate":"2023-10-20"},{"lineNumber":129,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":130,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"tanboonkhong":8,"LimJH2002":1,"lyuanww":5,"-":117}},{"path":"src/test/java/seedu/cc/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.storage;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.testutil.TypicalPatients.getTypicalClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.GuiSettings;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ReadOnlyClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.UserPrefs;","lastModifiedDate":"2023-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"        JsonClinicBookStorage addressBookStorage \u003d new JsonClinicBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"         * {@link JsonClinicBookStorage} class.","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonClinicBookStorageTest} class.","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook original \u003d getTypicalClinicBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"        storageManager.saveClinicBook(original);","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"        ReadOnlyClinicBook retrieved \u003d storageManager.readClinicBook().get();","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"        assertEquals(original, new ClinicBook(retrieved));","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"    public void getClinicBookFilePath() {","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"        assertNotNull(storageManager.getClinicBookFilePath());","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tanboonkhong":12,"lyuanww":3,"-":53}},{"path":"src/test/java/seedu/cc/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"lyuanww":1,"-":33}},{"path":"src/test/java/seedu/cc/testutil/ClinicBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":" * A utility class to help with building Clinicbook objects.","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":" *     {@code ClinicBook ab \u003d new ClinicBookBuilder().withPatient(\"John\", \"Doe\").build();}","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"public class ClinicBookBuilder {","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"    private ClinicBook clinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"    public ClinicBookBuilder() {","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"        clinicBook \u003d new ClinicBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"    public ClinicBookBuilder(ClinicBook clinicBook) {","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"        this.clinicBook \u003d clinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"     * Adds a new {@code Patient} to the {@code ClinicBook} that we are building.","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"    public ClinicBookBuilder withPatient(Patient person) {","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"        clinicBook.addPatient(person);","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"        return this;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"    public ClinicBook build() {","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"        return clinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"tanboonkhong":34}},{"path":"src/test/java/seedu/cc/testutil/EditMedicalHistoryEventDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.medhisteventcommands.EditMedicalHistoryEventCommand.EditMedicalHistoryEventDescriptor;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Date;","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalCondition;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-25"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Treatment;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":" * A utility class to help with building EditMedicalHistoryEventDescriptor objects.","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"public class EditMedicalHistoryEventDescriptorBuilder {","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"    private final EditMedicalHistoryEventDescriptor descriptor;","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"    public EditMedicalHistoryEventDescriptorBuilder() {","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"        descriptor \u003d new EditMedicalHistoryEventDescriptor();","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    public EditMedicalHistoryEventDescriptorBuilder(EditMedicalHistoryEventDescriptor descriptor) {","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"        this.descriptor \u003d new EditMedicalHistoryEventDescriptor(descriptor);","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"     * Returns an {@code EditMedicalHistoryEventDescriptor} with fields containing {@code event}\u0027s details","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"    public EditMedicalHistoryEventDescriptorBuilder(MedicalHistoryEvent event) {","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"        descriptor \u003d new EditMedicalHistoryEventDescriptor();","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"        descriptor.setTreatment(event.getTreatment());","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"        descriptor.setDate(event.getDate());","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"        descriptor.setMedicalCondition(event.getMedicalCondition());","lastModifiedDate":"2023-10-25"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"     * Sets the {@code Treatment} of the {@code EditMedicalHistoryEventDescriptor} that we are building.","lastModifiedDate":"2023-10-25"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"    public EditMedicalHistoryEventDescriptorBuilder withTreatment(String treatment) {","lastModifiedDate":"2023-10-25"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"        descriptor.setTreatment(new Treatment(treatment));","lastModifiedDate":"2023-10-25"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"        return this;","lastModifiedDate":"2023-10-25"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"     * Sets the {@code Date} of the {@code EditMedicalHistoryEventDescriptor} that we are building.","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"    public EditMedicalHistoryEventDescriptorBuilder withDate(String date) {","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"        descriptor.setDate(new Date(date));","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"        return this;","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"     * Sets the {@code MedicalCondition} of the {@code EditMedicalHistoryEventDescriptor} that we are building.","lastModifiedDate":"2023-10-25"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"    public EditMedicalHistoryEventDescriptorBuilder withMedicalCondition(String medicalCondition) {","lastModifiedDate":"2023-10-25"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"        descriptor.setMedicalCondition(new MedicalCondition(medicalCondition));","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"        return this;","lastModifiedDate":"2023-10-25"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"    public EditMedicalHistoryEventDescriptor build() {","lastModifiedDate":"2023-10-25"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"        return descriptor;","lastModifiedDate":"2023-10-25"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"lyuanww":61}},{"path":"src/test/java/seedu/cc/testutil/EditPatientDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Nric;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"public class EditPatientDescriptorBuilder {","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"    private final EditPatientDescriptor descriptor;","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptorBuilder() {","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"        descriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptorBuilder(EditPatientDescriptor descriptor) {","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"        this.descriptor \u003d new EditPatientDescriptor(descriptor);","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"     * Returns an {@code EditPatientDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptorBuilder(Patient person) {","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"        descriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"        descriptor.setNric(person.getNric());","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptorBuilder withName(String name) {","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"tanboonkhong"},"content":"        return this;","lastModifiedDate":"2023-10-20"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"     * Sets the {@code Nric} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptorBuilder withNric(String nric) {","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setNric(new Nric(nric));","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"        return this;","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"     * Sets the {@code Phone} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"        return this;","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"     * Sets the {@code Email} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"        return this;","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"tanboonkhong"},"content":"     * Sets the {@code Address} of the {@code EditPatientDescriptor} that we are building.","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"tanboonkhong"},"content":"        return this;","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"tanboonkhong"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPatientDescriptor}","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"tanboonkhong"},"content":"     * that we are building.","lastModifiedDate":"2023-10-20"},{"lineNumber":87,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"tanboonkhong"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"tanboonkhong"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"        return this;","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"tanboonkhong"},"content":"    public EditPatientDescriptor build() {","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"tanboonkhong"},"content":"        return descriptor;","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"tanboonkhong":93,"lyuanww":4}},{"path":"src/test/java/seedu/cc/testutil/MedicalHistoryEventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-25"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Date;","lastModifiedDate":"2023-10-25"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalCondition;","lastModifiedDate":"2023-10-25"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-25"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.medicalhistory.PatientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.Treatment;","lastModifiedDate":"2023-10-25"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-25"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":" * A utility class to help with building MedicalHistoryEvent objects.","lastModifiedDate":"2023-10-25"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-25"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"public class MedicalHistoryEventBuilder {","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"    private static final String DEFAULT_DATE \u003d \"2023-10-23\";","lastModifiedDate":"2023-10-25"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"    private static final String DEFAULT_MEDICAL_CONDITION \u003d \"Heart Attack\";","lastModifiedDate":"2023-10-25"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"    private static final String DEFAULT_TREATMENT \u003d \"Heart Surgery\";","lastModifiedDate":"2023-10-25"},{"lineNumber":17,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":18,"author":{"gitId":"lyuanww"},"content":"    private Date date;","lastModifiedDate":"2023-10-25"},{"lineNumber":19,"author":{"gitId":"lyuanww"},"content":"    private MedicalCondition medicalCondition;","lastModifiedDate":"2023-10-25"},{"lineNumber":20,"author":{"gitId":"lyuanww"},"content":"    private Treatment treatment;","lastModifiedDate":"2023-10-25"},{"lineNumber":21,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":22,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":23,"author":{"gitId":"lyuanww"},"content":"     * Creates a {@code MedicalHistoryEventBuilder} with the default details.","lastModifiedDate":"2023-10-25"},{"lineNumber":24,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":25,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEventBuilder() {","lastModifiedDate":"2023-10-25"},{"lineNumber":26,"author":{"gitId":"lyuanww"},"content":"        date \u003d new Date(DEFAULT_DATE);","lastModifiedDate":"2023-10-25"},{"lineNumber":27,"author":{"gitId":"lyuanww"},"content":"        medicalCondition \u003d new MedicalCondition(DEFAULT_MEDICAL_CONDITION);","lastModifiedDate":"2023-10-25"},{"lineNumber":28,"author":{"gitId":"lyuanww"},"content":"        treatment \u003d new Treatment(DEFAULT_TREATMENT);","lastModifiedDate":"2023-10-25"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":31,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-31"},{"lineNumber":32,"author":{"gitId":"lyuanww"},"content":"     * Initializes the MedicalHistoryEventBuilder with the data of {@code medicalHistoryEventToCopy}.","lastModifiedDate":"2023-10-31"},{"lineNumber":33,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-31"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEventBuilder(MedicalHistoryEvent medicalHistoryEventToCopy) {","lastModifiedDate":"2023-10-31"},{"lineNumber":35,"author":{"gitId":"lyuanww"},"content":"        date \u003d medicalHistoryEventToCopy.getDate();","lastModifiedDate":"2023-10-31"},{"lineNumber":36,"author":{"gitId":"lyuanww"},"content":"        medicalCondition \u003d medicalHistoryEventToCopy.getMedicalCondition();","lastModifiedDate":"2023-10-31"},{"lineNumber":37,"author":{"gitId":"lyuanww"},"content":"        treatment \u003d medicalHistoryEventToCopy.getTreatment();","lastModifiedDate":"2023-10-31"},{"lineNumber":38,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-31"},{"lineNumber":39,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":40,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":41,"author":{"gitId":"lyuanww"},"content":"     * Sets the {@code Date} of the {@code MedicalHistoryEvent} that we are building.","lastModifiedDate":"2023-10-25"},{"lineNumber":42,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":43,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEventBuilder withDate(String date) {","lastModifiedDate":"2023-10-25"},{"lineNumber":44,"author":{"gitId":"lyuanww"},"content":"        this.date \u003d new Date(date);","lastModifiedDate":"2023-10-25"},{"lineNumber":45,"author":{"gitId":"lyuanww"},"content":"        return this;","lastModifiedDate":"2023-10-25"},{"lineNumber":46,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":47,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"     * Sets the {@code MedicalCondition} of the {@code MedicalHistoryEvent} that we are building.","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEventBuilder withMedicalCondition(String medicalCondition) {","lastModifiedDate":"2023-10-25"},{"lineNumber":52,"author":{"gitId":"lyuanww"},"content":"        this.medicalCondition \u003d new MedicalCondition(medicalCondition);","lastModifiedDate":"2023-10-25"},{"lineNumber":53,"author":{"gitId":"lyuanww"},"content":"        return this;","lastModifiedDate":"2023-10-25"},{"lineNumber":54,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":55,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":56,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":57,"author":{"gitId":"lyuanww"},"content":"     * Sets the {@code Treatment} of the {@code MedicalHistoryEvent} that we are building.","lastModifiedDate":"2023-10-25"},{"lineNumber":58,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":59,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEventBuilder withTreatment(String treatment) {","lastModifiedDate":"2023-10-25"},{"lineNumber":60,"author":{"gitId":"lyuanww"},"content":"        this.treatment \u003d new Treatment(treatment);","lastModifiedDate":"2023-10-25"},{"lineNumber":61,"author":{"gitId":"lyuanww"},"content":"        return this;","lastModifiedDate":"2023-10-25"},{"lineNumber":62,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":63,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":64,"author":{"gitId":"lyuanww"},"content":"    public MedicalHistoryEvent build() {","lastModifiedDate":"2023-10-25"},{"lineNumber":65,"author":{"gitId":"lyuanww"},"content":"        return new MedicalHistoryEvent(medicalCondition, treatment, date);","lastModifiedDate":"2023-10-25"},{"lineNumber":66,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":67,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":68,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":69,"author":{"gitId":"pangyyen"},"content":"     * Builds a {@code PatientMedicalHistory} with the {@code MedicalHistoryEvent} that we are building.","lastModifiedDate":"2023-10-26"},{"lineNumber":70,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":71,"author":{"gitId":"pangyyen"},"content":"    public PatientMedicalHistory buildMedicalHistory() {","lastModifiedDate":"2023-10-26"},{"lineNumber":72,"author":{"gitId":"pangyyen"},"content":"        PatientMedicalHistory patientMedicalHistory \u003d new PatientMedicalHistory();","lastModifiedDate":"2023-10-26"},{"lineNumber":73,"author":{"gitId":"pangyyen"},"content":"        patientMedicalHistory.addMedicalHistoryEvent(new MedicalHistoryEvent(medicalCondition, treatment, date));","lastModifiedDate":"2023-10-26"},{"lineNumber":74,"author":{"gitId":"pangyyen"},"content":"        return patientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":75,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":76,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-25"}],"authorContributionMap":{"pangyyen":6,"lyuanww":70}},{"path":"src/test/java/seedu/cc/testutil/PatientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"pangyyen"},"content":"import seedu.cc.model.medicalhistory.PatientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Nric;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Address;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Email;","lastModifiedDate":"2023-10-16"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Name;","lastModifiedDate":"2023-10-16"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.person.Phone;","lastModifiedDate":"2023-10-16"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-16"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.util.SampleDataUtil;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"public class PatientBuilder {","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"    public static final String DEFAULT_NRIC \u003d \"S2345678Y\";","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"    private Nric nric;","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"pangyyen"},"content":"    private PatientMedicalHistory patientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"    public PatientBuilder() {","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"pangyyen"},"content":"        patientMedicalHistory \u003d new PatientMedicalHistory();","lastModifiedDate":"2023-10-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"    public PatientBuilder(Patient personToCopy) {","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        nric \u003d personToCopy.getNric();","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"    public PatientBuilder withName(String name) {","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"     * Sets the {@code Nric} of the {@code Patient} that we are building.","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"    public PatientBuilder withNric(String nric) {","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"        return this;","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"    public PatientBuilder withTags(String... tags) {","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"tanboonkhong"},"content":"    public PatientBuilder withAddress(String address) {","lastModifiedDate":"2023-10-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"tanboonkhong"},"content":"    public PatientBuilder withPhone(String phone) {","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":103,"author":{"gitId":"tanboonkhong"},"content":"    public PatientBuilder withEmail(String email) {","lastModifiedDate":"2023-10-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"lyuanww"},"content":"    /**","lastModifiedDate":"2023-10-25"},{"lineNumber":109,"author":{"gitId":"pangyyen"},"content":"     * Sets the {@code PatientMedicalHistory} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-26"},{"lineNumber":110,"author":{"gitId":"lyuanww"},"content":"     */","lastModifiedDate":"2023-10-25"},{"lineNumber":111,"author":{"gitId":"pangyyen"},"content":"    public PatientBuilder withMedicalHistory(PatientMedicalHistory patientMedicalHistory) {","lastModifiedDate":"2023-10-26"},{"lineNumber":112,"author":{"gitId":"pangyyen"},"content":"        this.patientMedicalHistory \u003d patientMedicalHistory;","lastModifiedDate":"2023-10-26"},{"lineNumber":113,"author":{"gitId":"lyuanww"},"content":"        return this;","lastModifiedDate":"2023-10-25"},{"lineNumber":114,"author":{"gitId":"lyuanww"},"content":"    }","lastModifiedDate":"2023-10-25"},{"lineNumber":115,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":116,"author":{"gitId":"tanboonkhong"},"content":"    public Patient build() {","lastModifiedDate":"2023-10-20"},{"lineNumber":117,"author":{"gitId":"pangyyen"},"content":"        return new Patient(name, nric, phone, email, address, patientMedicalHistory, tags);","lastModifiedDate":"2023-10-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"tanboonkhong":21,"pangyyen":7,"lyuanww":14,"-":78}},{"path":"src/test/java/seedu/cc/testutil/PatientUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-16"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-16"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.AddCommand;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.tag.Tag;","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":" * A utility class for Patient.","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"tanboonkhong"},"content":"public class PatientUtil {","lastModifiedDate":"2023-10-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"     * Returns an add command string for adding the {@code patient}.","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":"    public static String getAddCommand(Patient patient) {","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"     * Returns the part of command string for the given {@code patient}\u0027s details.","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"    public static String getPatientDetails(Patient patient) {","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"tanboonkhong"},"content":"        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");","lastModifiedDate":"2023-10-20"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"        sb.append(PREFIX_NRIC + patient.getNric().value + \" \");","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"        sb.append(PREFIX_PHONE + patient.getPhone().value + \" \");","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"        sb.append(PREFIX_EMAIL + patient.getEmail().value + \" \");","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"        sb.append(PREFIX_ADDRESS + patient.getAddress().value + \" \");","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"        patient.getTags().stream().forEach(","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"     * Returns the part of command string for the given {@code EditPatientDescriptor}\u0027s details.","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"tanboonkhong"},"content":"    public static String getEditPatientDescriptorDetails(EditPatientDescriptor descriptor) {","lastModifiedDate":"2023-10-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"lyuanww"},"content":"        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.value).append(\" \"));","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"tanboonkhong":16,"lyuanww":14,"-":35}},{"path":"src/test/java/seedu/cc/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"lyuanww":1,"-":71}},{"path":"src/test/java/seedu/cc/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.Model;","lastModifiedDate":"2023-10-16"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"    public static Patient getPatient(Model model, Index index) {","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"        return model.getFilteredPatientList().get(index.getZeroBased());","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tanboonkhong":5,"lyuanww":3,"-":47}},{"path":"src/test/java/seedu/cc/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"    public static final Index INDEX_FIRST_PATIENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"    public static final Index INDEX_SECOND_PATIENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"    public static final Index INDEX_THIRD_PATIENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"    public static final Index INDEX_FIRST_MEDHISTEVENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"tanboonkhong":3,"lyuanww":3,"-":7}},{"path":"src/test/java/seedu/cc/testutil/TypicalMedicalHistoryEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-31"},{"lineNumber":2,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.model.medicalhistory.MedicalHistoryEvent;","lastModifiedDate":"2023-10-31"},{"lineNumber":4,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"/**","lastModifiedDate":"2023-10-31"},{"lineNumber":6,"author":{"gitId":"lyuanww"},"content":" * A utility class containing {@code MedicalHistoryEvent} objects to be used in tests.","lastModifiedDate":"2023-10-31"},{"lineNumber":7,"author":{"gitId":"lyuanww"},"content":" */","lastModifiedDate":"2023-10-31"},{"lineNumber":8,"author":{"gitId":"lyuanww"},"content":"public class TypicalMedicalHistoryEvents {","lastModifiedDate":"2023-10-31"},{"lineNumber":9,"author":{"gitId":"lyuanww"},"content":"    public static final MedicalHistoryEvent CANCER \u003d new MedicalHistoryEventBuilder().withMedicalCondition(\"Cancer\")","lastModifiedDate":"2023-10-31"},{"lineNumber":10,"author":{"gitId":"lyuanww"},"content":"            .withTreatment(\"Chemotherapy\").withDate(\"2020-10-10\").build();","lastModifiedDate":"2023-10-31"},{"lineNumber":11,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-31"},{"lineNumber":12,"author":{"gitId":"lyuanww"},"content":"    public static final MedicalHistoryEvent DIABETES \u003d new MedicalHistoryEventBuilder().withMedicalCondition(\"Diabetes\")","lastModifiedDate":"2023-10-31"},{"lineNumber":13,"author":{"gitId":"lyuanww"},"content":"            .withTreatment(\"Insulin\").withDate(\"2020-10-11\").build();","lastModifiedDate":"2023-10-31"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"}","lastModifiedDate":"2023-10-31"}],"authorContributionMap":{"lyuanww":14}},{"path":"src/test/java/seedu/cc/testutil/TypicalPatients.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tanboonkhong"},"content":"package seedu.cc.testutil;","lastModifiedDate":"2023-10-20"},{"lineNumber":2,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":3,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":4,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":5,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":6,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":7,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":8,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":9,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":10,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":11,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-10-20"},{"lineNumber":12,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-20"},{"lineNumber":13,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-20"},{"lineNumber":14,"author":{"gitId":"tanboonkhong"},"content":"import static seedu.cc.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-20"},{"lineNumber":15,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":16,"author":{"gitId":"tanboonkhong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-20"},{"lineNumber":17,"author":{"gitId":"tanboonkhong"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-20"},{"lineNumber":18,"author":{"gitId":"tanboonkhong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-20"},{"lineNumber":19,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":20,"author":{"gitId":"pangyyen"},"content":"//import seedu.cc.commons.core.index.Index;","lastModifiedDate":"2023-10-26"},{"lineNumber":21,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.ClinicBook;","lastModifiedDate":"2023-10-20"},{"lineNumber":22,"author":{"gitId":"tanboonkhong"},"content":"import seedu.cc.model.patient.Patient;","lastModifiedDate":"2023-10-20"},{"lineNumber":23,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":24,"author":{"gitId":"tanboonkhong"},"content":"/**","lastModifiedDate":"2023-10-20"},{"lineNumber":25,"author":{"gitId":"tanboonkhong"},"content":" * A utility class containing a list of {@code Patient} objects to be used in tests.","lastModifiedDate":"2023-10-20"},{"lineNumber":26,"author":{"gitId":"tanboonkhong"},"content":" */","lastModifiedDate":"2023-10-20"},{"lineNumber":27,"author":{"gitId":"tanboonkhong"},"content":"public class TypicalPatients {","lastModifiedDate":"2023-10-20"},{"lineNumber":28,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":29,"author":{"gitId":"lyuanww"},"content":"","lastModifiedDate":"2023-10-25"},{"lineNumber":30,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient ALICE \u003d new PatientBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2023-10-20"},{"lineNumber":31,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(\"S1234567A\")","lastModifiedDate":"2023-10-20"},{"lineNumber":32,"author":{"gitId":"tanboonkhong"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2023-10-20"},{"lineNumber":33,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2023-10-20"},{"lineNumber":34,"author":{"gitId":"lyuanww"},"content":"            .withMedicalHistory(new MedicalHistoryEventBuilder().buildMedicalHistory())","lastModifiedDate":"2023-10-25"},{"lineNumber":35,"author":{"gitId":"tanboonkhong"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":36,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient BENSON \u003d new PatientBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2023-10-20"},{"lineNumber":37,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(\"S1234567B\")","lastModifiedDate":"2023-10-20"},{"lineNumber":38,"author":{"gitId":"tanboonkhong"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2023-10-20"},{"lineNumber":39,"author":{"gitId":"tanboonkhong"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2023-10-20"},{"lineNumber":40,"author":{"gitId":"tanboonkhong"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":41,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient CARL \u003d new PatientBuilder().withName(\"Carl Kurz\")","lastModifiedDate":"2023-10-20"},{"lineNumber":42,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(\"S1234567C\")","lastModifiedDate":"2023-10-20"},{"lineNumber":43,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(\"95352563\")","lastModifiedDate":"2023-10-20"},{"lineNumber":44,"author":{"gitId":"tanboonkhong"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":45,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient DANIEL \u003d new PatientBuilder().withName(\"Daniel Meier\")","lastModifiedDate":"2023-10-20"},{"lineNumber":46,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(\"S1234567D\")","lastModifiedDate":"2023-10-20"},{"lineNumber":47,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(\"87652533\")","lastModifiedDate":"2023-10-20"},{"lineNumber":48,"author":{"gitId":"lyuanww"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")","lastModifiedDate":"2023-10-25"},{"lineNumber":49,"author":{"gitId":"lyuanww"},"content":"            .withMedicalHistory(new MedicalHistoryEventBuilder().buildMedicalHistory()).withTags(\"friends\").build();","lastModifiedDate":"2023-10-25"},{"lineNumber":50,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient ELLE \u003d new PatientBuilder().withName(\"Elle Meyer\")","lastModifiedDate":"2023-10-20"},{"lineNumber":51,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(\"S1234567E\")","lastModifiedDate":"2023-10-20"},{"lineNumber":52,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(\"9482224\")","lastModifiedDate":"2023-10-20"},{"lineNumber":53,"author":{"gitId":"tanboonkhong"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":54,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient FIONA \u003d new PatientBuilder().withName(\"Fiona Kunz\")","lastModifiedDate":"2023-10-20"},{"lineNumber":55,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(\"S1234567F\")","lastModifiedDate":"2023-10-20"},{"lineNumber":56,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(\"9482427\")","lastModifiedDate":"2023-10-20"},{"lineNumber":57,"author":{"gitId":"tanboonkhong"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":58,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient GEORGE \u003d new PatientBuilder().withName(\"George Best\")","lastModifiedDate":"2023-10-20"},{"lineNumber":59,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(\"S1234567G\")","lastModifiedDate":"2023-10-20"},{"lineNumber":60,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(\"9482442\")","lastModifiedDate":"2023-10-20"},{"lineNumber":61,"author":{"gitId":"tanboonkhong"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":62,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":63,"author":{"gitId":"tanboonkhong"},"content":"    // Manually added","lastModifiedDate":"2023-10-20"},{"lineNumber":64,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\")","lastModifiedDate":"2023-10-20"},{"lineNumber":65,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(\"S1234567H\")","lastModifiedDate":"2023-10-20"},{"lineNumber":66,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(\"8482424\")","lastModifiedDate":"2023-10-20"},{"lineNumber":67,"author":{"gitId":"tanboonkhong"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":68,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\")","lastModifiedDate":"2023-10-20"},{"lineNumber":69,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(\"S1234567I\")","lastModifiedDate":"2023-10-20"},{"lineNumber":70,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(\"8482131\")","lastModifiedDate":"2023-10-20"},{"lineNumber":71,"author":{"gitId":"tanboonkhong"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2023-10-20"},{"lineNumber":72,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":73,"author":{"gitId":"tanboonkhong"},"content":"    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-10-20"},{"lineNumber":74,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-10-20"},{"lineNumber":75,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(VALID_NRIC_AMY)","lastModifiedDate":"2023-10-20"},{"lineNumber":76,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-10-20"},{"lineNumber":77,"author":{"gitId":"tanboonkhong"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-10-20"},{"lineNumber":78,"author":{"gitId":"tanboonkhong"},"content":"    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-20"},{"lineNumber":79,"author":{"gitId":"tanboonkhong"},"content":"            .withNric(VALID_NRIC_BOB)","lastModifiedDate":"2023-10-20"},{"lineNumber":80,"author":{"gitId":"tanboonkhong"},"content":"            .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-20"},{"lineNumber":81,"author":{"gitId":"tanboonkhong"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2023-10-20"},{"lineNumber":82,"author":{"gitId":"tanboonkhong"},"content":"            .build();","lastModifiedDate":"2023-10-20"},{"lineNumber":83,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":84,"author":{"gitId":"tanboonkhong"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2023-10-20"},{"lineNumber":85,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":86,"author":{"gitId":"lyuanww"},"content":"    private TypicalPatients() {","lastModifiedDate":"2023-10-25"},{"lineNumber":87,"author":{"gitId":"lyuanww"},"content":"    } // prevents instantiation","lastModifiedDate":"2023-10-25"},{"lineNumber":88,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":89,"author":{"gitId":"tanboonkhong"},"content":"    /**","lastModifiedDate":"2023-10-20"},{"lineNumber":90,"author":{"gitId":"tanboonkhong"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2023-10-20"},{"lineNumber":91,"author":{"gitId":"tanboonkhong"},"content":"     */","lastModifiedDate":"2023-10-20"},{"lineNumber":92,"author":{"gitId":"tanboonkhong"},"content":"    public static ClinicBook getTypicalClinicBook() {","lastModifiedDate":"2023-10-20"},{"lineNumber":93,"author":{"gitId":"tanboonkhong"},"content":"        ClinicBook cb \u003d new ClinicBook();","lastModifiedDate":"2023-10-20"},{"lineNumber":94,"author":{"gitId":"tanboonkhong"},"content":"        for (Patient person : getTypicalPatients()) {","lastModifiedDate":"2023-10-20"},{"lineNumber":95,"author":{"gitId":"tanboonkhong"},"content":"            cb.addPatient(person);","lastModifiedDate":"2023-10-20"},{"lineNumber":96,"author":{"gitId":"tanboonkhong"},"content":"        }","lastModifiedDate":"2023-10-20"},{"lineNumber":97,"author":{"gitId":"tanboonkhong"},"content":"        return cb;","lastModifiedDate":"2023-10-20"},{"lineNumber":98,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":99,"author":{"gitId":"tanboonkhong"},"content":"","lastModifiedDate":"2023-10-20"},{"lineNumber":100,"author":{"gitId":"tanboonkhong"},"content":"    public static List\u003cPatient\u003e getTypicalPatients() {","lastModifiedDate":"2023-10-20"},{"lineNumber":101,"author":{"gitId":"tanboonkhong"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2023-10-20"},{"lineNumber":102,"author":{"gitId":"tanboonkhong"},"content":"    }","lastModifiedDate":"2023-10-20"},{"lineNumber":103,"author":{"gitId":"tanboonkhong"},"content":"}","lastModifiedDate":"2023-10-20"}],"authorContributionMap":{"tanboonkhong":96,"pangyyen":1,"lyuanww":6}},{"path":"src/test/java/seedu/cc/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!(other instanceof TestFxmlObject)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        TestFxmlObject otherTestFxmlObject \u003d (TestFxmlObject) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return Objects.equals(text, otherTestFxmlObject.text);","lastModifiedDate":"2023-07-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"lyuanww":1,"-":44}},{"path":"src/test/java/seedu/cc/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"lyuanww"},"content":"package seedu.cc.ui;","lastModifiedDate":"2023-10-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"lyuanww"},"content":"import static seedu.cc.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-16"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"lyuanww"},"content":"import seedu.cc.MainApp;","lastModifiedDate":"2023-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"lyuanww":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"\u003c?import seedu.cc.ui.TestFxmlObject?\u003e","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"lyuanww":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"lyuanww"},"content":"\u003cfx:root type\u003d\"seedu.cc.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2023-10-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"lyuanww":1,"-":5}}]
