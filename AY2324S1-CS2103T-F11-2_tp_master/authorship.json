[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"[![Java CI](https://github.com/AY2324S1-CS2103T-F11-2/tp/actions/workflows/gradle.yml/badge.svg?branch\u003dmaster)](https://github.com/AY2324S1-CS2103T-F11-2/tp/actions/workflows/gradle.yml)[![codecov](https://codecov.io/gh/AY2324S1-CS2103T-F11-2/tp/graph/badge.svg?token\u003d6VNUBS5EZI)](https://codecov.io/gh/AY2324S1-CS2103T-F11-2/tp)","lastModifiedDate":"2023-09-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"# WedLog","lastModifiedDate":"2023-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2023-09-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-18"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"## Description","lastModifiedDate":"2023-09-27"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"WedLog is a desktop application created for partners getting married that helps them manage the guests and vendors involved in the wedding.","lastModifiedDate":"2023-09-27"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"While it has a Graphical User Interface (GUI), most of the user interactions occur through the Command Line Interface (CLI).","lastModifiedDate":"2023-09-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"## Features","lastModifiedDate":"2023-09-27"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"- Add \u0026 delete guest information.","lastModifiedDate":"2023-09-27"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"- Add \u0026 delete vendor information.","lastModifiedDate":"2023-09-27"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"- View the full list of guests and vendors.","lastModifiedDate":"2023-09-27"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"- View a single guest/ vendor information.","lastModifiedDate":"2023-09-27"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"- Know the names and other information of guests and vendors.","lastModifiedDate":"2023-09-27"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"## Site Map","lastModifiedDate":"2023-09-27"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"- [Project Website](https://ay2324s1-cs2103t-f11-2.github.io/tp)","lastModifiedDate":"2023-09-27"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"- [User Guide](https://ay2324s1-cs2103t-f11-2.github.io/tp/UserGuide.html)","lastModifiedDate":"2023-09-27"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"- [Developer Guide](https://ay2324s1-cs2103t-f11-2.github.io/tp/DeveloperGuide.html)","lastModifiedDate":"2023-09-27"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"- [About Us](https://ay2324s1-cs2103t-f11-2.github.io/tp/AboutUs.html)","lastModifiedDate":"2023-09-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"## Credits \u0026 Acknowledgements","lastModifiedDate":"2023-09-27"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"- This project was made as part of CS2103T in AY23/24 S1.","lastModifiedDate":"2023-09-27"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"- This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-09-27"}],"authorContributionMap":{"samuelim01":3,"wasjoe1":17,"-":6}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"### Keagan Pang","lastModifiedDate":"2023-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"\u003cimg src\u003d\"images/keaganpzh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"keaganpzh"},"content":"[[github](https://github.com/keaganpzh)] [[portfolio](team/keaganpzh.md)]","lastModifiedDate":"2023-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"p-xp"},"content":"-   Role: Git expert","lastModifiedDate":"2023-09-28"},{"lineNumber":19,"author":{"gitId":"p-xp"},"content":"-   Responsibilities: Integration","lastModifiedDate":"2023-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":"### Pan Xinping","lastModifiedDate":"2023-09-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":"\u003cimg src\u003d\"images/p-xp.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"[[github](http://github.com/p-xp)]","lastModifiedDate":"2023-09-27"},{"lineNumber":26,"author":{"gitId":"p-xp"},"content":"[[portfolio](team/p-xp.md)]","lastModifiedDate":"2023-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"-   Role: Team Lead","lastModifiedDate":"2023-09-28"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"-   Responsibilities: Deliverables \u0026 Deadlines","lastModifiedDate":"2023-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"tllshan"},"content":"### Joe Chua","lastModifiedDate":"2023-09-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"tllshan"},"content":"\u003cimg src\u003d\"images/wasjoe1.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"[[github](http://github.com/wasjoe1)] [[portfolio](team/wasjoe1.md)]","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"- Role: Developer","lastModifiedDate":"2023-09-28"},{"lineNumber":38,"author":{"gitId":"keaganpzh"},"content":"- Responsibilities: Documentation","lastModifiedDate":"2023-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"tllshan"},"content":"### Samuel Lim","lastModifiedDate":"2023-09-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"tllshan"},"content":"\u003cimg src\u003d\"images/samuelim01.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"tllshan"},"content":"[[github](http://github.com/samuelim01)]","lastModifiedDate":"2023-09-27"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"[[portfolio](team/samuelim01.md)]","lastModifiedDate":"2023-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"keaganpzh"},"content":"- Role: IDE/Java expert","lastModifiedDate":"2023-09-29"},{"lineNumber":48,"author":{"gitId":"keaganpzh"},"content":"- Responsibilities: Code Quality","lastModifiedDate":"2023-09-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"tllshan"},"content":"### Shannon Tsou","lastModifiedDate":"2023-09-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"tllshan"},"content":"\u003cimg src\u003d\"images/tllshan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"tllshan"},"content":"[[github](http://github.com/tllshan)]","lastModifiedDate":"2023-09-27"},{"lineNumber":55,"author":{"gitId":"tllshan"},"content":"[[portfolio](team/tllshan.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"tllshan"},"content":"- Role: Code Tester","lastModifiedDate":"2023-10-04"},{"lineNumber":58,"author":{"gitId":"tllshan"},"content":"- Responsibilities: Scheduling \u0026 Tracking","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"tllshan":11,"samuelim01":1,"p-xp":11,"wasjoe1":1,"keaganpzh":4,"-":30}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"# WedLog Developer Guide","lastModifiedDate":"2023-10-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"_{ list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well }_","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"**Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/BetterModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram.puml\" alt\u003d\"UndoSequenceDiagram\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"p-xp"},"content":"A bride or groom who","lastModifiedDate":"2023-10-05"},{"lineNumber":272,"author":{"gitId":"p-xp"},"content":"* Is tech-savvy and is comfortable using CLI","lastModifiedDate":"2023-10-05"},{"lineNumber":273,"author":{"gitId":"p-xp"},"content":"* Can type fast","lastModifiedDate":"2023-10-05"},{"lineNumber":274,"author":{"gitId":"p-xp"},"content":"* Prefers working on a desktop","lastModifiedDate":"2023-10-05"},{"lineNumber":275,"author":{"gitId":"p-xp"},"content":"* Wants to plan their own wedding","lastModifiedDate":"2023-10-05"},{"lineNumber":276,"author":{"gitId":"p-xp"},"content":"* Has a partner who is uninvolved in the planning process","lastModifiedDate":"2023-10-05"},{"lineNumber":277,"author":{"gitId":"p-xp"},"content":"* Values efficiency and having a consolidated wedding planning platform","lastModifiedDate":"2023-10-05"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"p-xp"},"content":"**Value proposition**: consolidate all information related to wedding guests and vendors into 1 platform for ","lastModifiedDate":"2023-10-05"},{"lineNumber":280,"author":{"gitId":"p-xp"},"content":"streamlined planning.","lastModifiedDate":"2023-10-05"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"| Priority | As a …​                         | I want to …​                                          | So that I can…​                                                |","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"tllshan"},"content":"|----------|---------------------------------|-------------------------------------------------------|----------------------------------------------------------------|","lastModifiedDate":"2023-10-05"},{"lineNumber":289,"author":{"gitId":"tllshan"},"content":"| `* * *`  | new user                        | add new guests with name and contact                  | keep track of the people whom I invited to the wedding         |","lastModifiedDate":"2023-10-05"},{"lineNumber":290,"author":{"gitId":"tllshan"},"content":"| `* * *`  | new user                        | remove existing guests                                | remove guests I erroneously added                              |","lastModifiedDate":"2023-10-05"},{"lineNumber":291,"author":{"gitId":"tllshan"},"content":"| `* * *`  | new user                        | record down dietary requirements for guests           | cater correct types of meals for my guests                     |","lastModifiedDate":"2023-10-05"},{"lineNumber":292,"author":{"gitId":"tllshan"},"content":"| `* * *`  | new user                        | update RSVP status of a guest                         | track who is coming                                            |","lastModifiedDate":"2023-10-05"},{"lineNumber":293,"author":{"gitId":"tllshan"},"content":"| `* * *`  | new user                        | save data into local storage                          | keep my data even after I exit the app                         |","lastModifiedDate":"2023-10-05"},{"lineNumber":294,"author":{"gitId":"tllshan"},"content":"| `* * *`  | new user                        | retrieve data from local storage                      | access past data that I have inputed                           |","lastModifiedDate":"2023-10-05"},{"lineNumber":295,"author":{"gitId":"tllshan"},"content":"| `* * *`  | user liaising with many vendors | add new vendor with name and contact                  | keep track of which vendors I am currently in contact with     |","lastModifiedDate":"2023-10-05"},{"lineNumber":296,"author":{"gitId":"tllshan"},"content":"| `* * *`  | user liaising with many vendors | remove existing vendors                               | remove vendors I erroneously added                             |","lastModifiedDate":"2023-10-05"},{"lineNumber":297,"author":{"gitId":"tllshan"},"content":"| `* *`    | user with many guests           | view how many guests have RSVP\u0027d                      | know how many guests are confirmed to be coming                |","lastModifiedDate":"2023-10-05"},{"lineNumber":298,"author":{"gitId":"tllshan"},"content":"| `* *`    | user with many guests           | add a note for a guest                                | take note of any miscellaneous information about a guest       |","lastModifiedDate":"2023-10-05"},{"lineNumber":299,"author":{"gitId":"tllshan"},"content":"| `* *`    | user with many guests           | view a specific guest\u0027s details                       | understand the arrangements I\u0027ve made for a particular guest   |","lastModifiedDate":"2023-10-05"},{"lineNumber":300,"author":{"gitId":"tllshan"},"content":"| `* *`    | user with many guests           | view the total number of each type of diet            | cater the appropriate number and types of meals                |","lastModifiedDate":"2023-10-05"},{"lineNumber":301,"author":{"gitId":"tllshan"},"content":"| `* *`    | user with many guests           | filter guests with dietary restrictions               | cater alternate meals for them                                 |","lastModifiedDate":"2023-10-05"},{"lineNumber":302,"author":{"gitId":"tllshan"},"content":"| `* *`    | user with many guests           | assign a guest to a table number                      | keep track of seating arrangements                             |","lastModifiedDate":"2023-10-05"},{"lineNumber":303,"author":{"gitId":"tllshan"},"content":"| `* *`    | user with many guests           | filter guests by table                                | see who is sitting at each table                               |","lastModifiedDate":"2023-10-05"},{"lineNumber":304,"author":{"gitId":"tllshan"},"content":"| `* *`    | user with many guests           | add guests to a group                                 | know which group a guest belongs to                            |","lastModifiedDate":"2023-10-05"},{"lineNumber":305,"author":{"gitId":"tllshan"},"content":"| `* *`    | user with many guests           | filter guests by groups (eg family, friends)          | access and manage relevant information for each group          |","lastModifiedDate":"2023-10-05"},{"lineNumber":306,"author":{"gitId":"tllshan"},"content":"| `*`      | financially savvy user          | track my total expenses                               | stay within budget                                             |","lastModifiedDate":"2023-10-05"},{"lineNumber":307,"author":{"gitId":"tllshan"},"content":"| `*`      | financially savvy user          | keep track of the costs associated with each vendor   | track how much I have spent on the wedding                     |","lastModifiedDate":"2023-10-05"},{"lineNumber":308,"author":{"gitId":"tllshan"},"content":"| `*`      | financially savvy user          | record gift registry                                  | take note of which gifts are already bought, and by who        |","lastModifiedDate":"2023-10-05"},{"lineNumber":309,"author":{"gitId":"tllshan"},"content":"| `*`      | financially savvy user          | keep track of red packets received from guests        | keep future references on gift exchange                        |","lastModifiedDate":"2023-10-05"},{"lineNumber":310,"author":{"gitId":"tllshan"},"content":"| `*`      | financially savvy user          | view total amount I collected from wedding presents   | know how much cash I have                                      |","lastModifiedDate":"2023-10-05"},{"lineNumber":311,"author":{"gitId":"tllshan"},"content":"| `*`      | user finding a wedding location | record pros and cons of possible locations            | choose the best location                                       |","lastModifiedDate":"2023-10-05"},{"lineNumber":312,"author":{"gitId":"tllshan"},"content":"| `*`      | task-oriented user              | add tasks and track roadmap                           | keep track of the wedding planning progress                    |","lastModifiedDate":"2023-10-05"},{"lineNumber":313,"author":{"gitId":"tllshan"},"content":"| `*`      | task-oriented user              | get reminders to do tasks when deadlines are nearing  | not miss important deadlines                                   |","lastModifiedDate":"2023-10-05"},{"lineNumber":314,"author":{"gitId":"tllshan"},"content":"| `*`      | task-oriented user              | assign tasks and deadlines to guests                  | keep track of when I need to follow-up with them               |","lastModifiedDate":"2023-10-05"},{"lineNumber":315,"author":{"gitId":"samuelim01"},"content":"| `*`      | task-oriented user              | assign tasks and deadlines to vendors                 | keep track of when I need to follow-up with them               |","lastModifiedDate":"2023-10-08"},{"lineNumber":316,"author":{"gitId":"tllshan"},"content":"| `*`      | task-oriented user              | view all the deadlines that have passed               | identify the actions that I need to prioritise                 |","lastModifiedDate":"2023-10-05"},{"lineNumber":317,"author":{"gitId":"tllshan"},"content":"| `*`      | task-oriented user              | view countdown to wedding                             | know the time I have left till the wedding                     |","lastModifiedDate":"2023-10-05"},{"lineNumber":318,"author":{"gitId":"tllshan"},"content":"| `*`      | user planning my reception      | plan the flow of events during the reception          | know when to do what                                           |","lastModifiedDate":"2023-10-05"},{"lineNumber":319,"author":{"gitId":"tllshan"},"content":"| `*`      | experienced user                | view most recent commands                             | look back on what was recorded previously                      |","lastModifiedDate":"2023-10-06"},{"lineNumber":320,"author":{"gitId":"samuelim01"},"content":"| `*`      | experienced user                | undo the last command                                 | undo accidental or erroneous commands                          |","lastModifiedDate":"2023-10-08"},{"lineNumber":321,"author":{"gitId":"tllshan"},"content":"| `*`      | experienced user                | import data from a csv file format onto this platform | easily transfer existing information from other sources        |","lastModifiedDate":"2023-10-06"},{"lineNumber":322,"author":{"gitId":"tllshan"},"content":"| `*`      | experienced user                | export data into an excel format                      | easily send data to vendors                                    |","lastModifiedDate":"2023-10-06"},{"lineNumber":323,"author":{"gitId":"tllshan"},"content":"| `*`      | experienced user                | share my address book with another user               | plan the wedding together with my partner                      |","lastModifiedDate":"2023-10-06"},{"lineNumber":324,"author":{"gitId":"tllshan"},"content":"| `*`      | experienced user                | add custom fields for guests                          | keep track of miscellaneous information specific to my wedding |","lastModifiedDate":"2023-10-06"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":328,"author":{"gitId":"wasjoe1"},"content":"(For all use cases below, the **System** is the `WedLog` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2023-10-05"},{"lineNumber":329,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":330,"author":{"gitId":"wasjoe1"},"content":"\u003cbox\u003eUse case: UC1 - Add a guest\u003c/box\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":331,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":332,"author":{"gitId":"wasjoe1"},"content":"**MSS:**","lastModifiedDate":"2023-10-05"},{"lineNumber":333,"author":{"gitId":"wasjoe1"},"content":"1. User provides guest details.","lastModifiedDate":"2023-10-05"},{"lineNumber":334,"author":{"gitId":"wasjoe1"},"content":"2. WedLog adds the guest to the guest list.","lastModifiedDate":"2023-10-05"},{"lineNumber":335,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003eUse case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":336,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":337,"author":{"gitId":"wasjoe1"},"content":"**Extensions:**","lastModifiedDate":"2023-10-05"},{"lineNumber":338,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e1a. The given input format is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":339,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":340,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1a2. User provides guest details in a different format.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":341,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Steps 1a1-1a2 are repeated until the User input format is valid.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":342,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case resumes from step 2.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":343,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e1b. The guest list has reached maximum capacity.","lastModifiedDate":"2023-10-05"},{"lineNumber":344,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1b1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":345,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case ends.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":346,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e1c. The guest already exists in the guest list.","lastModifiedDate":"2023-10-05"},{"lineNumber":347,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1c1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":348,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case ends.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":349,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e*a. At any time, user inputs an invalid command/syntax","lastModifiedDate":"2023-10-05"},{"lineNumber":350,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":351,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":352,"author":{"gitId":"wasjoe1"},"content":"\u003cbox\u003eUse case: UC2 - Delete a guest\u003c/box\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":353,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":354,"author":{"gitId":"wasjoe1"},"content":"**MSS:**","lastModifiedDate":"2023-10-05"},{"lineNumber":355,"author":{"gitId":"wasjoe1"},"content":"1. User requests to list all guests","lastModifiedDate":"2023-10-05"},{"lineNumber":356,"author":{"gitId":"wasjoe1"},"content":"2. WedLog shows a list of guests","lastModifiedDate":"2023-10-05"},{"lineNumber":357,"author":{"gitId":"wasjoe1"},"content":"3. User requests to delete a specific guest in the list via its index","lastModifiedDate":"2023-10-05"},{"lineNumber":358,"author":{"gitId":"wasjoe1"},"content":"4. WedLog deletes the guest","lastModifiedDate":"2023-10-05"},{"lineNumber":359,"author":{"gitId":"wasjoe1"},"content":"   \u003cbr\u003eUse case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":360,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":361,"author":{"gitId":"wasjoe1"},"content":"**Extensions:**","lastModifiedDate":"2023-10-05"},{"lineNumber":362,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e3a. The given index is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":363,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":364,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3a2. User requests to delete the guest using a different index\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":365,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Steps 3a1-3a2 are repeated until the User provides a valid index.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":366,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case resumes from step 4.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":367,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e*a. At any time, user inputs an invalid command/syntax","lastModifiedDate":"2023-10-05"},{"lineNumber":368,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":369,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":370,"author":{"gitId":"wasjoe1"},"content":"\u003cbox\u003eUse case: UC3 - View all guests\u003c/box\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":371,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":372,"author":{"gitId":"wasjoe1"},"content":"**MSS:**","lastModifiedDate":"2023-10-05"},{"lineNumber":373,"author":{"gitId":"wasjoe1"},"content":"1. User requests to list all guests","lastModifiedDate":"2023-10-05"},{"lineNumber":374,"author":{"gitId":"wasjoe1"},"content":"2. WedLog displays a list of guests","lastModifiedDate":"2023-10-05"},{"lineNumber":375,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003eUse case ends.","lastModifiedDate":"2023-10-06"},{"lineNumber":376,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":377,"author":{"gitId":"wasjoe1"},"content":"**Extensions:**","lastModifiedDate":"2023-10-05"},{"lineNumber":378,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e*a. At any time, user inputs an invalid command/syntax","lastModifiedDate":"2023-10-05"},{"lineNumber":379,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"wasjoe1"},"content":"\u003cbox\u003eUse case: UC4 - View a specific guest\u003c/box\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"wasjoe1"},"content":"**MSS:**","lastModifiedDate":"2023-10-05"},{"lineNumber":384,"author":{"gitId":"wasjoe1"},"content":"1. User requests to list all guests","lastModifiedDate":"2023-10-05"},{"lineNumber":385,"author":{"gitId":"wasjoe1"},"content":"2. WedLog displays a list of guests","lastModifiedDate":"2023-10-05"},{"lineNumber":386,"author":{"gitId":"wasjoe1"},"content":"3. User requests to view a specific person in the list","lastModifiedDate":"2023-10-05"},{"lineNumber":387,"author":{"gitId":"wasjoe1"},"content":"4. WedLog displays the person’s details","lastModifiedDate":"2023-10-05"},{"lineNumber":388,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003eUse case ends.","lastModifiedDate":"2023-10-06"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"wasjoe1"},"content":"**Extensions:**","lastModifiedDate":"2023-10-05"},{"lineNumber":391,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e3a. The given index is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":392,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":393,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case resumes at step 2.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":394,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e*a. At any time, user inputs an invalid command/syntax","lastModifiedDate":"2023-10-05"},{"lineNumber":395,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"wasjoe1"},"content":"\u003cbox\u003eUse case: UC5 - Add a vendor\u003c/box\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"wasjoe1"},"content":"**MSS:**","lastModifiedDate":"2023-10-05"},{"lineNumber":400,"author":{"gitId":"wasjoe1"},"content":"1. User provides vendor details.","lastModifiedDate":"2023-10-05"},{"lineNumber":401,"author":{"gitId":"wasjoe1"},"content":"2. WedLog adds the vendor to the vendor list.","lastModifiedDate":"2023-10-05"},{"lineNumber":402,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003eUse case ends.","lastModifiedDate":"2023-10-06"},{"lineNumber":403,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":404,"author":{"gitId":"wasjoe1"},"content":"**Extensions:**","lastModifiedDate":"2023-10-05"},{"lineNumber":405,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e1a. The given input format is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":406,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":407,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1a2. User provides vendor details in a different format.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":408,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Steps 1a1-1a2 are repeated until the User input format is valid.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":409,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case resumes from step 2.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":410,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e1b. The vendor list has reached maximum capacity.","lastModifiedDate":"2023-10-05"},{"lineNumber":411,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1b1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":412,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case ends.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":413,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e1c. The guest already exists in the vendor list.","lastModifiedDate":"2023-10-05"},{"lineNumber":414,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1c1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":415,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case ends.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":416,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e*a. At any time, user inputs an invalid command/syntax","lastModifiedDate":"2023-10-05"},{"lineNumber":417,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":418,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":419,"author":{"gitId":"wasjoe1"},"content":"\u003cbox\u003eUse case: UC6 - Delete a vendor\u003c/box\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":420,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":421,"author":{"gitId":"wasjoe1"},"content":"**MSS:**","lastModifiedDate":"2023-10-05"},{"lineNumber":422,"author":{"gitId":"wasjoe1"},"content":"1. User requests to list all vendor","lastModifiedDate":"2023-10-05"},{"lineNumber":423,"author":{"gitId":"wasjoe1"},"content":"2. WedLog shows a list of vendors","lastModifiedDate":"2023-10-05"},{"lineNumber":424,"author":{"gitId":"wasjoe1"},"content":"3. User requests to delete a specific vendor in the list via its index","lastModifiedDate":"2023-10-05"},{"lineNumber":425,"author":{"gitId":"wasjoe1"},"content":"4. WedLog deletes the vendor","lastModifiedDate":"2023-10-05"},{"lineNumber":426,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003eUse case ends.","lastModifiedDate":"2023-10-06"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"wasjoe1"},"content":"**Extensions:**","lastModifiedDate":"2023-10-05"},{"lineNumber":429,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e3a. The given index is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":430,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":431,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3a2. User requests to delete the vendor using a different index\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":432,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Steps 3a1-3a2 are repeated until the User provides a valid index.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":433,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case resumes from step 4.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":434,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e*a. At any time, user inputs an invalid command/syntax","lastModifiedDate":"2023-10-05"},{"lineNumber":435,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"wasjoe1"},"content":"\u003cbox\u003eUse case: UC7 - View all vendors\u003c/box\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":438,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":439,"author":{"gitId":"wasjoe1"},"content":"**MSS:**","lastModifiedDate":"2023-10-05"},{"lineNumber":440,"author":{"gitId":"wasjoe1"},"content":"1. User requests to list all vendors","lastModifiedDate":"2023-10-05"},{"lineNumber":441,"author":{"gitId":"wasjoe1"},"content":"2. WedLog displays a list of vendors","lastModifiedDate":"2023-10-05"},{"lineNumber":442,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003eUse case ends.","lastModifiedDate":"2023-10-06"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"wasjoe1"},"content":"**Extensions:**","lastModifiedDate":"2023-10-05"},{"lineNumber":445,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e*a. At any time, user inputs an invalid command/syntax","lastModifiedDate":"2023-10-05"},{"lineNumber":446,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"wasjoe1"},"content":"\u003cbox\u003eUse case: UC8 - View a specific vendor\u003c/box\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"wasjoe1"},"content":"**MSS:**","lastModifiedDate":"2023-10-05"},{"lineNumber":451,"author":{"gitId":"wasjoe1"},"content":"1. User requests to list all vendors","lastModifiedDate":"2023-10-05"},{"lineNumber":452,"author":{"gitId":"wasjoe1"},"content":"2. WedLog displays a list of vendors","lastModifiedDate":"2023-10-05"},{"lineNumber":453,"author":{"gitId":"wasjoe1"},"content":"3. User requests to view a specific person in the list","lastModifiedDate":"2023-10-05"},{"lineNumber":454,"author":{"gitId":"wasjoe1"},"content":"4. WedLog displays the person’s details","lastModifiedDate":"2023-10-05"},{"lineNumber":455,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003eUse case ends.","lastModifiedDate":"2023-10-06"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"wasjoe1"},"content":"**Extensions:**","lastModifiedDate":"2023-10-05"},{"lineNumber":458,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e3a. The given index is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":459,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":460,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;Use case resumes at step 2.\u003c/span\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":461,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e*a. At any time, user inputs an invalid command/syntax","lastModifiedDate":"2023-10-05"},{"lineNumber":462,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e\u003cspan\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;*a1. WedLog shows an error message.\u003c/span\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":463,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"-"},"content":"2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse. ","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"samuelim01"},"content":"4. Should work without internet connection ","lastModifiedDate":"2023-10-05"},{"lineNumber":470,"author":{"gitId":"samuelim01"},"content":"5. For any command, the system should respond within 2 seconds. ","lastModifiedDate":"2023-10-05"},{"lineNumber":471,"author":{"gitId":"samuelim01"},"content":"6. Should be usable for colour-blind users. ","lastModifiedDate":"2023-10-05"},{"lineNumber":472,"author":{"gitId":"samuelim01"},"content":"7. Should provide comprehensive documentation for users to learn how to use the command-line interface effectively. ","lastModifiedDate":"2023-10-05"},{"lineNumber":473,"author":{"gitId":"samuelim01"},"content":"8. Should provide clear and user-friendly error messages, guiding users on how to rectify issues. ","lastModifiedDate":"2023-10-05"},{"lineNumber":474,"author":{"gitId":"samuelim01"},"content":"9. Should log errors for analysis and debugging.","lastModifiedDate":"2023-10-05"},{"lineNumber":475,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"keaganpzh"},"content":"* **Mainstream OS**: Windows, Linux, Unix, MacOS","lastModifiedDate":"2023-10-06"},{"lineNumber":479,"author":{"gitId":"keaganpzh"},"content":"* **CLI**: Command Line Interface","lastModifiedDate":"2023-10-06"},{"lineNumber":480,"author":{"gitId":"keaganpzh"},"content":"* **GUI**: Graphical User Interface","lastModifiedDate":"2023-10-06"},{"lineNumber":481,"author":{"gitId":"keaganpzh"},"content":"* **JSON**: [JavaScript Object Notation](https://www.json.org/json-en.html)","lastModifiedDate":"2023-10-06"},{"lineNumber":482,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":492,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":493,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"keaganpzh"},"content":"   1. Download the `.jar` file and copy into an empty folder","lastModifiedDate":"2023-10-06"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"keaganpzh"},"content":"   1. Double-click the `.jar` file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2023-10-06"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"keaganpzh"},"content":"   1. Re-launch the app by double-clicking the `.jar` file.\u003cbr\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":510,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"keaganpzh"},"content":"Coming soon","lastModifiedDate":"2023-10-06"},{"lineNumber":517,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"keaganpzh"},"content":"Coming soon","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"tllshan":35,"samuelim01":8,"p-xp":9,"wasjoe1":124,"keaganpzh":9,"-":335}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-10-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"# WedLog User Guide","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"1. Download the latest `wedlog.jar` from [here](https://github.com/AY2324S1-CS2103T-F11-2/tp/releases).","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your WedLog.","lastModifiedDate":"2023-10-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar wedlog.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window. ","lastModifiedDate":"2023-10-05"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":36,"author":{"gitId":"keaganpzh"},"content":"**Notes about the command format:** \u003cbr /\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":39,"author":{"gitId":"keaganpzh"},"content":"e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2023-10-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":42,"author":{"gitId":"keaganpzh"},"content":"e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2023-10-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":45,"author":{"gitId":"keaganpzh"},"content":"e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2023-10-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":48,"author":{"gitId":"keaganpzh"},"content":"e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2023-10-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":51,"author":{"gitId":"keaganpzh"},"content":"e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2023-10-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2023-10-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"tllshan"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"tllshan"},"content":"### Adding a guest: `guest add`","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"tllshan"},"content":"Adds a guest to WedLog.","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"tllshan"},"content":"```text","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"tllshan"},"content":"guest add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/RSVP_STATUS] [d/DIETARY REQUIREMENTS] [t/TAG...]","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"tllshan"},"content":"```","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"tllshan"},"content":"A guest must have the following tags: `n/NAME`","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"tllshan"},"content":"The following tags are optional: `p/PHONE_NUMBER e/EMAIL a/ADDRESS r/RSVP_STATUS d/DIETARY_REQUIREMENTS t/TAG...`","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"tllshan"},"content":"Acceptable values for `n/NAME`:","lastModifiedDate":"2023-10-06"},{"lineNumber":68,"author":{"gitId":"tllshan"},"content":"- Alphanumeric word with or without spaces","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"tllshan"},"content":"Acceptable values for `n/PHONE_NUMBER`:","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"tllshan"},"content":"- Numbers with no spaces or special characters","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"tllshan"},"content":"Acceptable values for `e/EMAIL`:","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"tllshan"},"content":"- `local-part@domain`","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"tllshan"},"content":"  - the `local-part` must:","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"tllshan"},"content":"    - contain alphanumeric characters and these special characters, excluding the parentheses (+_.-)","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"tllshan"},"content":"    - not start or end with any special characters","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"tllshan"},"content":"  - the `domain` must:","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"tllshan"},"content":"    - consist of domain labels separated by periods","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"tllshan"},"content":"    - end with a domain label at least 2 characters long","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"tllshan"},"content":"    - have each domain label start and end with alphanumeric characters","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"tllshan"},"content":"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"tllshan"},"content":"Acceptable values for `a/ADDRESS`:","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"tllshan"},"content":"- Word with or without spaces","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"tllshan"},"content":"Acceptable values for `r/RSVP_STATUS`:","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"tllshan"},"content":"- `yes`","lastModifiedDate":"2023-10-07"},{"lineNumber":89,"author":{"gitId":"tllshan"},"content":"- `no`","lastModifiedDate":"2023-10-07"},{"lineNumber":90,"author":{"gitId":"tllshan"},"content":"- `unknown`","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"tllshan"},"content":"Acceptable values for `d/DIETARY_REQUIREMENTS`:","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"tllshan"},"content":"- Word with or without spaces","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"tllshan"},"content":"Acceptable values for `t/tag`:","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"tllshan"},"content":"- Alphanumeric word without spaces","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":98,"author":{"gitId":"tllshan"},"content":"\u003eTips:","lastModifiedDate":"2023-10-06"},{"lineNumber":99,"author":{"gitId":"tllshan"},"content":"\u003e\u003cbr\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":100,"author":{"gitId":"tllshan"},"content":"\u003e- Parameters can be in any order","lastModifiedDate":"2023-10-06"},{"lineNumber":101,"author":{"gitId":"tllshan"},"content":"\u003e\u003cbr\u003e","lastModifiedDate":"2023-10-06"},{"lineNumber":102,"author":{"gitId":"tllshan"},"content":"\u003e- A guest can have any number of tags (including 0)","lastModifiedDate":"2023-10-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-10-06"},{"lineNumber":105,"author":{"gitId":"tllshan"},"content":"- `guest add n/Bob p/91234567 a/Blk 123 r/no`","lastModifiedDate":"2023-10-06"},{"lineNumber":106,"author":{"gitId":"tllshan"},"content":"- `guest add n/John Doe p/98765432 e/john@doe.com a/Street 456 r/unknown d/vegetarian t/friend`","lastModifiedDate":"2023-10-06"},{"lineNumber":107,"author":{"gitId":"tllshan"},"content":"- `guest add n/Jane Tan e/jane@example.com r/yes d/halal t/family t/bridesmaid`","lastModifiedDate":"2023-10-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":109,"author":{"gitId":"tllshan"},"content":"Expected behaviour upon success:","lastModifiedDate":"2023-10-06"},{"lineNumber":110,"author":{"gitId":"tllshan"},"content":"- Adds the guest","lastModifiedDate":"2023-10-06"},{"lineNumber":111,"author":{"gitId":"tllshan"},"content":"- Displays a message showing the added guest.","lastModifiedDate":"2023-10-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":113,"author":{"gitId":"tllshan"},"content":"Expected behaviour upon failure:","lastModifiedDate":"2023-10-06"},{"lineNumber":114,"author":{"gitId":"tllshan"},"content":"- No name specified: Displays error message “Please specify the guest’s name using the format `n/NAME`”","lastModifiedDate":"2023-10-06"},{"lineNumber":115,"author":{"gitId":"tllshan"},"content":"- Phone number format invalid: Displays error message “Please specify the guest’s phone number with only numbers with no spaces or special characters”.","lastModifiedDate":"2023-10-06"},{"lineNumber":116,"author":{"gitId":"tllshan"},"content":"- `r/` tag uses an invalid value: Displays error message “RSVP status can only be `yes`, `no` or `unknown`”.","lastModifiedDate":"2023-10-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":118,"author":{"gitId":"tllshan"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-06"},{"lineNumber":119,"author":{"gitId":"tllshan"},"content":"### Deleting a guest: `guest delete`","lastModifiedDate":"2023-10-06"},{"lineNumber":120,"author":{"gitId":"tllshan"},"content":"Deletes the specified guest from WedLog.","lastModifiedDate":"2023-10-07"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":122,"author":{"gitId":"tllshan"},"content":"```text","lastModifiedDate":"2023-10-06"},{"lineNumber":123,"author":{"gitId":"tllshan"},"content":"guest delete INDEX","lastModifiedDate":"2023-10-06"},{"lineNumber":124,"author":{"gitId":"tllshan"},"content":"```","lastModifiedDate":"2023-10-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":126,"author":{"gitId":"tllshan"},"content":"Acceptable values for `INDEX`:","lastModifiedDate":"2023-10-06"},{"lineNumber":127,"author":{"gitId":"tllshan"},"content":"- A positive integer","lastModifiedDate":"2023-10-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":129,"author":{"gitId":"tllshan"},"content":"Examples:","lastModifiedDate":"2023-10-06"},{"lineNumber":130,"author":{"gitId":"tllshan"},"content":"- `guest delete 2` deletes the 2nd guest on the guest list","lastModifiedDate":"2023-10-06"},{"lineNumber":131,"author":{"gitId":"tllshan"},"content":"- `guest find Betsy` followed by `guest delete 1` deletes the 1st guest in the results of the `find` command","lastModifiedDate":"2023-10-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":133,"author":{"gitId":"tllshan"},"content":"Expected behaviour upon success:","lastModifiedDate":"2023-10-06"},{"lineNumber":134,"author":{"gitId":"tllshan"},"content":"- Deletes the person at the specified `INDEX`","lastModifiedDate":"2023-10-06"},{"lineNumber":135,"author":{"gitId":"tllshan"},"content":"  - If the previous command was `guest filter KEY_WORDS`, the `INDEX` refers to the index number shown in the filtered guest list","lastModifiedDate":"2023-10-06"},{"lineNumber":136,"author":{"gitId":"tllshan"},"content":"  - Otherwise, the `INDEX` refers to the index number on the unfiltered guest list","lastModifiedDate":"2023-10-06"},{"lineNumber":137,"author":{"gitId":"tllshan"},"content":"- Displays a message telling user which guest has been deleted","lastModifiedDate":"2023-10-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":139,"author":{"gitId":"tllshan"},"content":"Expected behaviour upon failure:","lastModifiedDate":"2023-10-06"},{"lineNumber":140,"author":{"gitId":"tllshan"},"content":"- Number out of index range, not a number, or no number: Displays error message “Please input a positive integer as the index.”","lastModifiedDate":"2023-10-06"},{"lineNumber":141,"author":{"gitId":"tllshan"},"content":"- Number does not correspond to any guest: Displays error message “The index you have provided does not correspond to any guest.”","lastModifiedDate":"2023-10-06"},{"lineNumber":142,"author":{"gitId":"tllshan"},"content":"- No input index: Displays error message “Please input an index.”","lastModifiedDate":"2023-10-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":144,"author":{"gitId":"wasjoe1"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-04"},{"lineNumber":145,"author":{"gitId":"samuelim01"},"content":"### Adding a vendor : `vendor add`","lastModifiedDate":"2023-10-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":147,"author":{"gitId":"samuelim01"},"content":"Adds a vendor to WedLog.","lastModifiedDate":"2023-10-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":149,"author":{"gitId":"samuelim01"},"content":"```text","lastModifiedDate":"2023-10-05"},{"lineNumber":150,"author":{"gitId":"samuelim01"},"content":"vendor add n/NAME [p/PHONE_NUMBER]","lastModifiedDate":"2023-10-05"},{"lineNumber":151,"author":{"gitId":"samuelim01"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":153,"author":{"gitId":"samuelim01"},"content":"Acceptable values for PHONE_NUMBER:","lastModifiedDate":"2023-10-05"},{"lineNumber":154,"author":{"gitId":"tllshan"},"content":"- Numbers with no spaces or special characters","lastModifiedDate":"2023-10-07"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":157,"author":{"gitId":"tllshan"},"content":"- `vendor add n/Betsy Crowe`","lastModifiedDate":"2023-10-07"},{"lineNumber":158,"author":{"gitId":"tllshan"},"content":"- `vendor add n/John Doe Floral p/91234567`","lastModifiedDate":"2023-10-07"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":160,"author":{"gitId":"samuelim01"},"content":"Expected behaviour upon success:","lastModifiedDate":"2023-10-05"},{"lineNumber":161,"author":{"gitId":"tllshan"},"content":"- Adds a vendor to the vendor list","lastModifiedDate":"2023-10-07"},{"lineNumber":162,"author":{"gitId":"tllshan"},"content":"- Displays the vendor that has been added","lastModifiedDate":"2023-10-07"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":164,"author":{"gitId":"samuelim01"},"content":"Expected behaviour upon failure:","lastModifiedDate":"2023-10-05"},{"lineNumber":165,"author":{"gitId":"tllshan"},"content":"- No name: Displays error message \"Please specify the vendor’s name using the format n/name.\"","lastModifiedDate":"2023-10-07"},{"lineNumber":166,"author":{"gitId":"tllshan"},"content":"- Phone number format invalid: Displays error message “Please specify the vendor’s phone number with only numbers with no spaces or special characters”.","lastModifiedDate":"2023-10-07"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":168,"author":{"gitId":"samuelim01"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-06"},{"lineNumber":169,"author":{"gitId":"samuelim01"},"content":"### Deleting a vendor : `vendor delete`","lastModifiedDate":"2023-10-05"},{"lineNumber":170,"author":{"gitId":"samuelim01"},"content":"Deletes the specified vendor from WedLog.","lastModifiedDate":"2023-10-05"},{"lineNumber":171,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":172,"author":{"gitId":"samuelim01"},"content":"```text","lastModifiedDate":"2023-10-05"},{"lineNumber":173,"author":{"gitId":"samuelim01"},"content":"vendor delete INDEX","lastModifiedDate":"2023-10-05"},{"lineNumber":174,"author":{"gitId":"samuelim01"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":176,"author":{"gitId":"samuelim01"},"content":"Acceptable values for INDEX","lastModifiedDate":"2023-10-05"},{"lineNumber":177,"author":{"gitId":"tllshan"},"content":"- The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2023-10-07"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":180,"author":{"gitId":"tllshan"},"content":"- `vendor list` followed by `vendor delete 2` deletes the 2nd vendor in WedLog.","lastModifiedDate":"2023-10-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":182,"author":{"gitId":"samuelim01"},"content":"Expected behaviour upon success:","lastModifiedDate":"2023-10-05"},{"lineNumber":183,"author":{"gitId":"tllshan"},"content":"- Deletes the person at the specified `INDEX`. ","lastModifiedDate":"2023-10-07"},{"lineNumber":184,"author":{"gitId":"tllshan"},"content":"- The index refers to the index number shown in the displayed vendor list.","lastModifiedDate":"2023-10-07"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":186,"author":{"gitId":"samuelim01"},"content":"Expected behaviour upon failure:","lastModifiedDate":"2023-10-05"},{"lineNumber":187,"author":{"gitId":"tllshan"},"content":"- Number out of index range, not a number, or no number: Displays error message \"Please input a positive integer as the index.\"","lastModifiedDate":"2023-10-07"},{"lineNumber":188,"author":{"gitId":"tllshan"},"content":"- Number does not correspond to any vendor: Displays error message \"The number you have provided does not correspond to any vendor.\"","lastModifiedDate":"2023-10-07"},{"lineNumber":189,"author":{"gitId":"tllshan"},"content":"- No input number: Displays error message \"Please input an index\"","lastModifiedDate":"2023-10-07"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":191,"author":{"gitId":"keaganpzh"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-05"},{"lineNumber":192,"author":{"gitId":"keaganpzh"},"content":"### Viewing all guests: `guest list`","lastModifiedDate":"2023-10-05"},{"lineNumber":193,"author":{"gitId":"keaganpzh"},"content":"View all guests in a list format.","lastModifiedDate":"2023-10-05"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":195,"author":{"gitId":"keaganpzh"},"content":"```text","lastModifiedDate":"2023-10-05"},{"lineNumber":196,"author":{"gitId":"keaganpzh"},"content":"guest list","lastModifiedDate":"2023-10-05"},{"lineNumber":197,"author":{"gitId":"keaganpzh"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":199,"author":{"gitId":"keaganpzh"},"content":"Expected behaviour upon success:","lastModifiedDate":"2023-10-05"},{"lineNumber":200,"author":{"gitId":"keaganpzh"},"content":"- Displays a list of all guest names and their respective indexes. (Example: 1. Marcus Tan, 2. Jane Lim)","lastModifiedDate":"2023-10-05"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":202,"author":{"gitId":"keaganpzh"},"content":"Expected behaviour upon failure:","lastModifiedDate":"2023-10-05"},{"lineNumber":203,"author":{"gitId":"keaganpzh"},"content":"\u003cbr\u003e(refer to Appendix A: Expected behaviour upon general failure)","lastModifiedDate":"2023-10-05"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":205,"author":{"gitId":"keaganpzh"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-05"},{"lineNumber":206,"author":{"gitId":"keaganpzh"},"content":"### Viewing a specific guest: `guest view`","lastModifiedDate":"2023-10-06"},{"lineNumber":207,"author":{"gitId":"keaganpzh"},"content":"View a specific guest using a specified index.","lastModifiedDate":"2023-10-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":209,"author":{"gitId":"keaganpzh"},"content":"```text","lastModifiedDate":"2023-10-05"},{"lineNumber":210,"author":{"gitId":"keaganpzh"},"content":"guest view INDEX","lastModifiedDate":"2023-10-05"},{"lineNumber":211,"author":{"gitId":"keaganpzh"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":213,"author":{"gitId":"keaganpzh"},"content":"Acceptable values for INDEX","lastModifiedDate":"2023-10-05"},{"lineNumber":214,"author":{"gitId":"keaganpzh"},"content":"- A positive integer","lastModifiedDate":"2023-10-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":216,"author":{"gitId":"keaganpzh"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":217,"author":{"gitId":"keaganpzh"},"content":"`guest view 1`","lastModifiedDate":"2023-10-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":219,"author":{"gitId":"keaganpzh"},"content":"Expected behaviour upon success:","lastModifiedDate":"2023-10-05"},{"lineNumber":220,"author":{"gitId":"keaganpzh"},"content":"- Displays a guest and all the information associated with it. (Example: 1. Marcus Tan)","lastModifiedDate":"2023-10-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":222,"author":{"gitId":"keaganpzh"},"content":"Expected behaviour upon failure:","lastModifiedDate":"2023-10-05"},{"lineNumber":223,"author":{"gitId":"keaganpzh"},"content":"- Number out of index range, not a number, or no number: Displays error message “Please input a positive integer as the index.”","lastModifiedDate":"2023-10-05"},{"lineNumber":224,"author":{"gitId":"keaganpzh"},"content":"- Number does not correspond to any guest: Displays error message “The number you have provided does not correspond to any guest.”","lastModifiedDate":"2023-10-05"},{"lineNumber":225,"author":{"gitId":"keaganpzh"},"content":"- No input number: Displays error message “Please input an index”","lastModifiedDate":"2023-10-05"},{"lineNumber":226,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":227,"author":{"gitId":"wasjoe1"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-04"},{"lineNumber":228,"author":{"gitId":"keaganpzh"},"content":"### Viewing all vendors: `vendor list`","lastModifiedDate":"2023-10-05"},{"lineNumber":229,"author":{"gitId":"wasjoe1"},"content":"View all vendors in a list format.","lastModifiedDate":"2023-10-04"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"keaganpzh"},"content":"```text","lastModifiedDate":"2023-10-05"},{"lineNumber":232,"author":{"gitId":"keaganpzh"},"content":"vendor list","lastModifiedDate":"2023-10-05"},{"lineNumber":233,"author":{"gitId":"keaganpzh"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"wasjoe1"},"content":"Expected behaviour upon success:","lastModifiedDate":"2023-10-04"},{"lineNumber":236,"author":{"gitId":"wasjoe1"},"content":"- Displays a list of all vendor names and their respective indexes. (Example: 1. John FLORAL, 2. Sally Anne PHOTOGRAPHER)","lastModifiedDate":"2023-10-04"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"wasjoe1"},"content":"Expected behaviour upon failure:","lastModifiedDate":"2023-10-04"},{"lineNumber":239,"author":{"gitId":"wasjoe1"},"content":"\u003cbr\u003e(refer to Appendix A: Expected behaviour upon general failure)","lastModifiedDate":"2023-10-04"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"wasjoe1"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-04"},{"lineNumber":242,"author":{"gitId":"keaganpzh"},"content":"### Viewing a specific vendor: `vendor view`","lastModifiedDate":"2023-10-06"},{"lineNumber":243,"author":{"gitId":"wasjoe1"},"content":"View a specific vendor using a specified index.","lastModifiedDate":"2023-10-04"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"keaganpzh"},"content":"```text","lastModifiedDate":"2023-10-05"},{"lineNumber":246,"author":{"gitId":"keaganpzh"},"content":"vendor view INDEX","lastModifiedDate":"2023-10-05"},{"lineNumber":247,"author":{"gitId":"keaganpzh"},"content":"```","lastModifiedDate":"2023-10-05"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"wasjoe1"},"content":"Acceptable values for INDEX","lastModifiedDate":"2023-10-05"},{"lineNumber":250,"author":{"gitId":"wasjoe1"},"content":"- A positive integer","lastModifiedDate":"2023-10-04"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"keaganpzh"},"content":"`vendor view 1`","lastModifiedDate":"2023-10-05"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":255,"author":{"gitId":"wasjoe1"},"content":"Expected behaviour upon success:","lastModifiedDate":"2023-10-04"},{"lineNumber":256,"author":{"gitId":"keaganpzh"},"content":"- Displays a vendor and all the information associated with it. (Example: 1. John FLORAL)","lastModifiedDate":"2023-10-05"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":258,"author":{"gitId":"wasjoe1"},"content":"Expected behaviour upon failure:","lastModifiedDate":"2023-10-04"},{"lineNumber":259,"author":{"gitId":"wasjoe1"},"content":"- Number out of index range, not a number, or no number: Displays error message “Please input a positive integer as the index.”","lastModifiedDate":"2023-10-04"},{"lineNumber":260,"author":{"gitId":"wasjoe1"},"content":"- Number does not correspond to any vendor: Displays error message “The number you have provided does not correspond to any vendor.”","lastModifiedDate":"2023-10-04"},{"lineNumber":261,"author":{"gitId":"wasjoe1"},"content":"- No input number: Displays error message “Please input an index”","lastModifiedDate":"2023-10-04"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"keaganpzh"},"content":"| Action                   | Format                                                                                                        | Example                                                                                       |","lastModifiedDate":"2023-10-05"},{"lineNumber":280,"author":{"gitId":"tllshan"},"content":"|--------------------------|:--------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-06"},{"lineNumber":281,"author":{"gitId":"tllshan"},"content":"| **Add a guest**          | `guest add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [r/RSVP_STATUS] [d/DIETARY REQUIREMENTS] [t/TAG...]` | `guest add n/John Doe p/98765432 e/john@doe.com a/Street 456 r/unknown d/vegetarian t/friend` |","lastModifiedDate":"2023-10-06"},{"lineNumber":282,"author":{"gitId":"tllshan"},"content":"| **Delete a guest**       | `guest delete INDEX`                                                                                          | `guest delete 1`                                                                              |","lastModifiedDate":"2023-10-06"},{"lineNumber":283,"author":{"gitId":"samuelim01"},"content":"| **Add a vendor**         | `vendor add n/NAME [p/PHONE_NUMBER]`                                                                          | `vendor add n/Betsy p/91234567`                                                               |","lastModifiedDate":"2023-10-06"},{"lineNumber":284,"author":{"gitId":"samuelim01"},"content":"| **Delete a vendor**      | `vendor delete INDEX`                                                                                         | `vendor delete 2`                                                                             |","lastModifiedDate":"2023-10-06"},{"lineNumber":285,"author":{"gitId":"keaganpzh"},"content":"| **View all guests**      | `guest list`                                                                                                  |                                                                                               |","lastModifiedDate":"2023-10-05"},{"lineNumber":286,"author":{"gitId":"keaganpzh"},"content":"| **View specific guest**  | `guest view INDEX`                                                                                            | `guest view 1`                                                                                |","lastModifiedDate":"2023-10-05"},{"lineNumber":287,"author":{"gitId":"keaganpzh"},"content":"| **View all vendors**     | `vendor list`                                                                                                 |                                                                                               |","lastModifiedDate":"2023-10-05"},{"lineNumber":288,"author":{"gitId":"keaganpzh"},"content":"| **View specific vendor** | `vendor view INDEX`                                                                                           | `vendor view 1`                                                                               |","lastModifiedDate":"2023-10-05"},{"lineNumber":289,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":290,"author":{"gitId":"p-xp"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-10-05"},{"lineNumber":291,"author":{"gitId":"p-xp"},"content":"## Appendix A: Miscellaneous error messages","lastModifiedDate":"2023-10-05"},{"lineNumber":292,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":293,"author":{"gitId":"p-xp"},"content":"User input is completely invalid (e.g. `abc` or `vsdf`):","lastModifiedDate":"2023-10-05"},{"lineNumber":294,"author":{"gitId":"p-xp"},"content":"- Display error message \"No such command exists.\"","lastModifiedDate":"2023-10-05"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":296,"author":{"gitId":"tllshan"},"content":"User input begins with `vendor` or `guest`, but does not include a valid command word (e.g. `vendor abc` or `guest adddd`):","lastModifiedDate":"2023-10-07"},{"lineNumber":297,"author":{"gitId":"p-xp"},"content":"- Display error message \"Please specify a command.\"","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"tllshan":86,"samuelim01":21,"p-xp":11,"wasjoe1":17,"keaganpzh":48,"-":114}},{"path":"docs/_markbind/layouts/default.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003chead-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \u003clink rel\u003d\"stylesheet\" href\u003d\"{{baseUrl}}/stylesheets/main.css\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c/head-bottom\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003cheader sticky\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  \u003cnavbar type\u003d\"dark\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \u003ca slot\u003d\"brand\" href\u003d\"{{baseUrl}}/index.html\" title\u003d\"Home\" class\u003d\"navbar-brand\"\u003eWedLog\u003c/a\u003e","lastModifiedDate":"2023-09-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/UserGuide.html\" class\u003d\"nav-link\"\u003eUser Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/DeveloperGuide.html\" class\u003d\"nav-link\"\u003eDeveloper Guide\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \u003cli\u003e\u003ca href\u003d\"{{baseUrl}}/AboutUs.html\" class\u003d\"nav-link\"\u003eAbout Us\u003c/a\u003e\u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"keaganpzh"},"content":"    \u003cli\u003e\u003ca href\u003d\"https://github.com/AY2324S1-CS2103T-F11-2/tp/\" target\u003d\"_blank\" class\u003d\"nav-link\"\u003e\u003cmd\u003e:fab-github:\u003c/md\u003e\u003c/a\u003e","lastModifiedDate":"2023-09-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cli slot\u003d\"right\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003cform class\u003d\"navbar-form\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003csearchbar :data\u003d\"searchData\" placeholder\u003d\"Search\" :on-hit\u003d\"searchCallback\" menu-align-right\u003e\u003c/searchbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003c/form\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/li\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/navbar\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/header\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"flex-body\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"site-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"site-nav-top\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003cdiv class\u003d\"fw-bold mb-2\" style\u003d\"font-size: 1.25rem;\"\u003eSite Map\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003csite-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* [Home]({{ baseUrl }}/index.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* [User Guide]({{ baseUrl }}/UserGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * [Quick Start]({{ baseUrl }}/UserGuide.html#quick-start)","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  * [Features]({{ baseUrl }}/UserGuide.html#features)","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  * [FAQ]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * [Command Summary]({{ baseUrl }}/UserGuide.html#faq)","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"* [Developer Guide]({{ baseUrl }}/DeveloperGuide.html) :expanded:","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  * [Acknowledgements]({{ baseUrl }}/DeveloperGuide.html#acknowledgements)","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  * [Setting Up]({{ baseUrl }}/DeveloperGuide.html#setting-up-getting-started)","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * [Design]({{ baseUrl }}/DeveloperGuide.html#design)","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * [Implementation]({{ baseUrl }}/DeveloperGuide.html#implementation)","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * [Documentation, logging, testing, configuration, dev-ops]({{ baseUrl }}/DeveloperGuide.html#documentation-logging-testing-configuration-dev-ops)","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * [Appendix: Requirements]({{ baseUrl }}/DeveloperGuide.html#appendix-requirements)","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * [Appendix: Instructions for manual testing]({{ baseUrl }}/DeveloperGuide.html#appendix-instructions-for-manual-testing)","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Tutorials","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * [Tracing code]({{ baseUrl }}/tutorials/TracingCode.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * [Adding a command]({{ baseUrl }}/tutorials/AddRemark.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  * [Removing Fields]({{ baseUrl }}/tutorials/RemovingFields.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [About Us]({{ baseUrl }}/AboutUs.html)","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"      \u003c/site-nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  \u003cdiv id\u003d\"content-wrapper\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    {{ content }}","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  \u003cnav id\u003d\"page-nav\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \u003cdiv class\u003d\"nav-component slim-scroll\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"      \u003cpage-nav /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  \u003c/nav\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \u003cscroll-top-button\u003e\u003c/scroll-top-button\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003cfooter\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  \u003c!-- Support MarkBind by including a link to us on your landing page! --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  \u003cdiv class\u003d\"text-center\"\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003csmall\u003e[\u003cmd\u003e**Powered by**\u003c/md\u003e \u003cimg src\u003d\"https://markbind.org/favicon.ico\" width\u003d\"30\"\u003e {{MarkBind}}, generated on {{timestamp}}]\u003c/small\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  \u003c/div\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c/footer\u003e","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"keaganpzh":1,"-":65}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"  title: \"WedLog\"","lastModifiedDate":"2023-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"# WedLog","lastModifiedDate":"2023-09-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"[![Java CI](https://github.com/AY2324S1-CS2103T-F11-2/tp/actions/workflows/gradle.yml/badge.svg?branch\u003dmaster)](https://github.com/AY2324S1-CS2103T-F11-2/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2023-09-28"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"[![codecov](https://codecov.io/gh/AY2324S1-CS2103T-F11-2/tp/graph/badge.svg?token\u003d6VNUBS5EZI)](https://codecov.io/gh/AY2324S1-CS2103T-F11-2/tp)","lastModifiedDate":"2023-09-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"**WedLog is a desktop application created for partners getting married that helps them manage the guests and vendors involved in the wedding.**","lastModifiedDate":"2023-09-28"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"While it has a Graphical User Interface (GUI), most of the user interactions occur through the Command Line Interface (CLI).","lastModifiedDate":"2023-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"* If you are interested in using WedLog, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2023-09-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"* If you are interested about developing WedLog, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2023-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-09-28"}],"authorContributionMap":{"samuelim01":9,"-":14}},{"path":"docs/team/keaganpzh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"keaganpzh"},"content":"### Project: WedLog","lastModifiedDate":"2023-09-28"},{"lineNumber":2,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":3,"author":{"gitId":"keaganpzh"},"content":"WedLog is a desktop application created for partners getting married that helps them manage the guests and vendors involved in the wedding. While it has a Graphical User Interface (GUI), most of the user interactions occur through the Command Line Interface (CLI).","lastModifiedDate":"2023-09-28"},{"lineNumber":4,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":5,"author":{"gitId":"keaganpzh"},"content":"### Summary of Contributions","lastModifiedDate":"2023-09-28"},{"lineNumber":6,"author":{"gitId":"keaganpzh"},"content":"\u003e To be added soon!","lastModifiedDate":"2023-09-28"},{"lineNumber":7,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":8,"author":{"gitId":"keaganpzh"},"content":"#### Code Contributed","lastModifiedDate":"2023-09-28"},{"lineNumber":9,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":10,"author":{"gitId":"keaganpzh"},"content":"#### Enhancements Implemented","lastModifiedDate":"2023-09-28"},{"lineNumber":11,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":12,"author":{"gitId":"keaganpzh"},"content":"#### Contributions to the UG","lastModifiedDate":"2023-09-28"},{"lineNumber":13,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":14,"author":{"gitId":"keaganpzh"},"content":"#### Contributions to the DG","lastModifiedDate":"2023-09-28"},{"lineNumber":15,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":16,"author":{"gitId":"keaganpzh"},"content":"#### Contributions to team tasks","lastModifiedDate":"2023-09-28"},{"lineNumber":17,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":18,"author":{"gitId":"keaganpzh"},"content":"#### Reviewing/Mentoring Contributions","lastModifiedDate":"2023-09-28"},{"lineNumber":19,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":20,"author":{"gitId":"keaganpzh"},"content":"#### Contributions beyond the Project Team","lastModifiedDate":"2023-09-28"}],"authorContributionMap":{"keaganpzh":20}},{"path":"docs/team/p-xp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"p-xp"},"content":"# Overview","lastModifiedDate":"2023-09-28"},{"lineNumber":2,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":3,"author":{"gitId":"p-xp"},"content":"WedLog is a desktop application created for partners getting married that helps them manage the guests and vendors involved in the wedding.","lastModifiedDate":"2023-09-28"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":5,"author":{"gitId":"p-xp"},"content":"While it has a Graphical User Interface (GUI), most of the user interactions occur through the Command Line Interface (CLI).","lastModifiedDate":"2023-09-28"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":7,"author":{"gitId":"p-xp"},"content":"# Summary of Contributions","lastModifiedDate":"2023-09-28"},{"lineNumber":8,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":9,"author":{"gitId":"p-xp"},"content":"## Code contributed","lastModifiedDate":"2023-09-28"},{"lineNumber":10,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":11,"author":{"gitId":"p-xp"},"content":"TBC.","lastModifiedDate":"2023-09-28"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":13,"author":{"gitId":"p-xp"},"content":"## Enhancements implemented","lastModifiedDate":"2023-09-28"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":15,"author":{"gitId":"p-xp"},"content":"TBC.","lastModifiedDate":"2023-09-28"},{"lineNumber":16,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":17,"author":{"gitId":"p-xp"},"content":"## Contributions to the UG","lastModifiedDate":"2023-09-28"},{"lineNumber":18,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":19,"author":{"gitId":"p-xp"},"content":"TBC.","lastModifiedDate":"2023-09-28"},{"lineNumber":20,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":"## Contributions to the DG","lastModifiedDate":"2023-09-28"},{"lineNumber":22,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":"TBC.","lastModifiedDate":"2023-09-28"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"## Contributions to team tasks","lastModifiedDate":"2023-09-28"},{"lineNumber":26,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":"TBC.","lastModifiedDate":"2023-09-28"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"## Reviewing/Mentoring Contributions","lastModifiedDate":"2023-09-28"},{"lineNumber":30,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":31,"author":{"gitId":"p-xp"},"content":"TBC.","lastModifiedDate":"2023-09-28"},{"lineNumber":32,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":33,"author":{"gitId":"p-xp"},"content":"## Contributions beyond the Project Team","lastModifiedDate":"2023-09-28"},{"lineNumber":34,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":35,"author":{"gitId":"p-xp"},"content":"TBC.","lastModifiedDate":"2023-09-28"}],"authorContributionMap":{"p-xp":35}},{"path":"docs/team/samuelim01.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"---","lastModifiedDate":"2023-09-28"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"  layout: default.md","lastModifiedDate":"2023-09-28"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"  title: \"Samuel Lim\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-09-28"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"---","lastModifiedDate":"2023-09-28"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"### Project: WedLog","lastModifiedDate":"2023-09-28"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"WedLog is a desktop application created for partners getting married that helps them manage the guests and vendors involved in the wedding. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC. This project is based on [AddressBook - Level 3](https://se-education.org/addressbook-level3/).","lastModifiedDate":"2023-09-28"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-09-28"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"* **New Feature**: `to be added soon`","lastModifiedDate":"2023-09-28"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dsamuelim01\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-09-28"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"* **Project management**: `to be added soon`","lastModifiedDate":"2023-09-28"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"* **Enhancements to existing features**: `to be added soon`","lastModifiedDate":"2023-09-28"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"* **Documentation**:","lastModifiedDate":"2023-09-28"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"  * User Guide: `to be added soon`","lastModifiedDate":"2023-09-28"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"  * Developer Guide: `to be added soon`","lastModifiedDate":"2023-09-28"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"* **Community**: `to be added soon`","lastModifiedDate":"2023-09-28"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-09-28"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"* **Tools**: `to be added soon`","lastModifiedDate":"2023-09-28"}],"authorContributionMap":{"samuelim01":26}},{"path":"docs/team/tllshan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"  layout: default.md","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"  title: \"Shannon Tsou\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"### Project: WedLog","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"WedLog is a desktop application created for partners getting married that helps them manage the guests and vendors involved in the wedding. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC. This project is based on [AddressBook - Level 3](https://se-education.org/addressbook-level3/).","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"* **New Feature**: `to be added soon`","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dtllshan\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"* **Project management**: `to be added soon`","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"* **Enhancements to existing features**: `to be added soon`","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"    * User Guide: `to be added soon`","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"    * Developer Guide: `to be added soon`","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"* **Community**: `to be added soon`","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"* **Tools**: `to be added soon`","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"tllshan":26}},{"path":"docs/team/wasjoe1.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"# Overview","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"WedLog is a desktop application created for partners getting married that helps them manage the guests and vendors involved in the wedding.","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"While it has a Graphical User Interface (GUI), most of the user interactions occur through the Command Line Interface (CLI).","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"# Summary of Contributions","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"`to be added soon`","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"## Code contributed","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"`to be added soon`","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"## Enhancements implemented","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"`to be added soon`","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"## Contributions to the UG","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"- Contributed to 2 vendor commands in the UG","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"## Contributions to the DG","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"- Contributed to the use cases section of the DG","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"## Contributions to team tasks","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"`to be added soon`","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"## Reviewing/Mentoring Contributions","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"`to be added soon`","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"## Contributions beyond the Project Team","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"`to be added soon`","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"wasjoe1":29}},{"path":"src/main/java/seedu/address/logic/commands/GuestAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":" * Adds a Guest to the address book.","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"public class GuestAddCommand extends Command {","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"    // below implementation more or less copied from AddCommand","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a guest to the address book. \";","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New guest added: %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"    public GuestAddCommand(Guest guest) {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"        // temporary empty constructor","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"        throw new CommandException(\"Command not created yet, wait for evolve for better testing\");","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"samuelim01":2,"wasjoe1":23}},{"path":"src/main/java/seedu/address/logic/commands/GuestDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":" * Deletes a Guest from the address book.","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"public class GuestDeleteCommand extends Command {","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"            + \": Deletes the guest identified by the index number used in the displayed guest list.\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    public static final String MESSAGE_DELETE_GUEST_SUCCESS \u003d \"Deleted Guest: %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"    // private final Index targetIndex;","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"    public GuestDeleteCommand(Index targetIndex) {","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"        // temporary empty constructor","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"        // this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-10-08"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"        throw new CommandException(\"Command not created yet, wait for evolve for better testing\");","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"samuelim01":2,"wasjoe1":29}},{"path":"src/main/java/seedu/address/logic/commands/GuestListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":" * Lists all Guests in the address book to the user.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"public class GuestListCommand extends Command {","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"    public GuestListCommand() {","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"        // temporary empty constructor","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"        throw new CommandException(\"Command not created yet, wait for evolve for better testing\");","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"wasjoe1":17}},{"path":"src/main/java/seedu/address/logic/commands/GuestViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":" * View\u0027s a specific Guest in the address book to the user.","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"public class GuestViewCommand extends Command {","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"            + \": Views the Guest identified by the index number used in the displayed guest list.\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"    public GuestViewCommand(Index index) {","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"        // temporary empty constructor","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"        throw new CommandException(\"Command not created yet, wait for evolve for better testing\");","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"samuelim01":1,"wasjoe1":22}},{"path":"src/main/java/seedu/address/logic/commands/VendorAddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":" * Adds a Vendor to the address book.","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"public class VendorAddCommand extends Command {","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"    // implementation more or less copied from AddCommand","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a vendor to the address book. \";","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New vendor added: %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"    public VendorAddCommand(Vendor vendor) {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"        // temporary empty constructor","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"        throw new CommandException(\"Command not created yet, wait for evolve for better testing\");","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"samuelim01":2,"wasjoe1":23}},{"path":"src/main/java/seedu/address/logic/commands/VendorDeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":" * Deletes a Vendor from the address book.","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"public class VendorDeleteCommand extends Command { // this is still the old DeleteCommand Implementation","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"            + \": Deletes the vendor identified by the index number used in the displayed vendor list.\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"    public static final String MESSAGE_DELETE_VENDOR_SUCCESS \u003d \"Deleted Vendor: %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"    // private final Index targetIndex;","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"    public VendorDeleteCommand(Index targetIndex) {","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"        // temporary empty constructor","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"        // this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-10-08"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"        throw new CommandException(\"Command not created yet, wait for evolve for better testing\");","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"samuelim01":2,"wasjoe1":27}},{"path":"src/main/java/seedu/address/logic/commands/VendorListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":" * Lists all Vendors in the address book to the user.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"public class VendorListCommand extends Command {","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"    public VendorListCommand() {","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"        // temporary empty constructor","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"        throw new CommandException(\"Command not created yet, wait for evolve for better testing\");","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"wasjoe1":17}},{"path":"src/main/java/seedu/address/logic/commands/VendorViewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":" * View\u0027s a specific vendor in the address book to the user.","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"public class VendorViewCommand extends Command {","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"    public static final String COMMAND_WORD \u003d \"view\";","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"            + \": Views the Vendor identified by the index number used in the displayed vendor list.\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"    public VendorViewCommand(Index index) {","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"        // temporary empty constructor","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"        throw new CommandException(\"Command not created yet, wait for evolve for better testing\");","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"samuelim01":1,"wasjoe1":23}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"     * Parses user input into guest and vendor commands for execution.","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"     * Old commands are parsed as well to keep the program intact.","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"wasjoe1"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim()); // trims the back and end of the string","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":55,"author":{"gitId":"wasjoe1"},"content":"        // old switch commands are included for now to not break the program","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2023-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-10-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"wasjoe1"},"content":"        // change it from here to split between vendor","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"wasjoe1"},"content":"        case \"vendor\": // there shouldn\u0027t be a need to create an entire new vendor/guest command class","lastModifiedDate":"2023-10-08"},{"lineNumber":82,"author":{"gitId":"wasjoe1"},"content":"            return new VendorCommandParser().parseCommand(arguments);","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"wasjoe1"},"content":"        case \"guest\":","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"wasjoe1"},"content":"            return new GuestCommandParser().parseCommand(arguments);","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"wasjoe1":9,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-07-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"wasjoe1"},"content":"        // creates an ArrayList of all the values inside that prefix","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Throws a {@code ParseException} if any of the prefixes given in {@code prefixes} appeared more than","lastModifiedDate":"2023-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * once among the arguments.","lastModifiedDate":"2023-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void verifyNoDuplicatePrefixesFor(Prefix... prefixes) throws ParseException {","lastModifiedDate":"2023-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Prefix[] duplicatedPrefixes \u003d Stream.of(prefixes).distinct()","lastModifiedDate":"2023-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .filter(prefix -\u003e argMultimap.containsKey(prefix) \u0026\u0026 argMultimap.get(prefix).size() \u003e 1)","lastModifiedDate":"2023-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .toArray(Prefix[]::new);","lastModifiedDate":"2023-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (duplicatedPrefixes.length \u003e 0) {","lastModifiedDate":"2023-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(Messages.getErrorMessageForDuplicatePrefixes(duplicatedPrefixes));","lastModifiedDate":"2023-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"wasjoe1":1,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"keaganpzh"},"content":"    public static final Prefix PREFIX_RSVP \u003d new Prefix(\"r/\");","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"keaganpzh"},"content":"    public static final Prefix PREFIX_DIETARY \u003d new Prefix(\"d/\");","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"keaganpzh":2,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/GuestAddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DIETARY;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RSVP;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestAddCommand;","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.DietaryRequirements;","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.RsvpStatus;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":" * Parses user input for GuestAdd commands.","lastModifiedDate":"2023-10-08"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"public class GuestAddCommandParser {","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"     * Parses the given {@code String} of arguments in the context of the GuestAddCommand","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"     * and returns an GuestAddCommand object for execution.","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"    public GuestAddCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"wasjoe1"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"wasjoe1"},"content":"                        PREFIX_RSVP, PREFIX_DIETARY, PREFIX_TAG);","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"wasjoe1"},"content":"        // check compulsory fields; only name is compulsory","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"wasjoe1"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GuestAddCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"wasjoe1"},"content":"            // message usage is a generic message about the add command for guests","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"wasjoe1"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME); // throws parse exception if have duplicates","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"wasjoe1"},"content":"        // make the empty optional fields null if they are empty","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"wasjoe1"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"wasjoe1"},"content":"        Phone phone \u003d argMultimap.getValue(PREFIX_PHONE).isEmpty()","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"wasjoe1"},"content":"                ? null","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"wasjoe1"},"content":"                : ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"wasjoe1"},"content":"        Email email \u003d argMultimap.getValue(PREFIX_EMAIL).isEmpty()","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"wasjoe1"},"content":"                ? null","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"wasjoe1"},"content":"                : ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"wasjoe1"},"content":"        Address address \u003d argMultimap.getValue(PREFIX_ADDRESS).isEmpty() // this is whether Optional is empty","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"wasjoe1"},"content":"                ? null","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"wasjoe1"},"content":"                : ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"wasjoe1"},"content":"        RsvpStatus rsvpStatus \u003d argMultimap.getValue(PREFIX_RSVP).isEmpty() // this is whether Optional is empty","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"wasjoe1"},"content":"                ? null","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"wasjoe1"},"content":"                : ParserUtil.parseRsvp(argMultimap.getValue(PREFIX_RSVP).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"wasjoe1"},"content":"        DietaryRequirements dietaryRequirements \u003d argMultimap.getValue(PREFIX_DIETARY).isEmpty()","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"wasjoe1"},"content":"                ? null","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"wasjoe1"},"content":"                : ParserUtil.parseDietary(argMultimap.getValue(PREFIX_DIETARY).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"wasjoe1"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"wasjoe1"},"content":"        // throw a ParseException as edits need to be made to Person/Guest/Vendor class first before this is valid","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"wasjoe1"},"content":"        throw new ParseException(\"Guest not created in GuestAddCommand due to un-evolved classes\");","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"wasjoe1"},"content":"        // once Person/Guest/Vendor classes are evolved, can edit \u0026 add this back in","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"wasjoe1"},"content":"        // Person person \u003d new Guest(name, phone, email, address, rsvpStatus, dietaryRequirements, tagList);","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"wasjoe1"},"content":"        // return new GuestAddCommand(person);","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"wasjoe1"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"wasjoe1"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"wasjoe1"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"wasjoe1"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":81,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"wasjoe1":81}},{"path":"src/main/java/seedu/address/logic/parser/GuestCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestAddCommand;","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestDeleteCommand;","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestListCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestViewCommand;","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":" * Parses user input specifically for Guest commands.","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"public class GuestCommandParser {","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"wasjoe1"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim()); // trims the back and end of the string","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"wasjoe1"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"wasjoe1"},"content":"        // any way the \"vendor\" command is removed, should have the same format as previous","lastModifiedDate":"2023-10-08"},{"lineNumber":42,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"wasjoe1"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"wasjoe1"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"wasjoe1"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"wasjoe1"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"wasjoe1"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"wasjoe1"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"wasjoe1"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"wasjoe1"},"content":"        case GuestAddCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"wasjoe1"},"content":"            return new GuestAddCommandParser().parse(arguments);","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"wasjoe1"},"content":"        case GuestDeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"wasjoe1"},"content":"            return new GuestDeleteCommandParser().parse(arguments);","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"wasjoe1"},"content":"        case GuestListCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"wasjoe1"},"content":"            return new GuestListCommand();","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"wasjoe1"},"content":"        case GuestViewCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"wasjoe1"},"content":"            return new GuestViewCommandParser().parse(arguments);","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"wasjoe1"},"content":"        default:","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"wasjoe1"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"wasjoe1":65}},{"path":"src/main/java/seedu/address/logic/parser/GuestDeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestDeleteCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":" * Parses user input specifically for GuestDelete commands.","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"public class GuestDeleteCommandParser implements Parser\u003cGuestDeleteCommand\u003e {","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"    public GuestDeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"        try {","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"            return new GuestDeleteCommand(index);","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GuestDeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"wasjoe1":28}},{"path":"src/main/java/seedu/address/logic/parser/GuestViewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestViewCommand;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":" * Parses user input specifically for GuestView commands.","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"public class GuestViewCommandParser implements Parser\u003cGuestViewCommand\u003e {","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"     * and returns a ViewCommand object for execution.","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"    public GuestViewCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"        try {","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"            return new GuestViewCommand(index);","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GuestViewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"wasjoe1":27}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.DietaryRequirements;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.RsvpStatus;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"wasjoe1"},"content":"     * Parses a {@code String rsvp} into a {@code RsvpStatus}.","lastModifiedDate":"2023-10-07"},{"lineNumber":87,"author":{"gitId":"wasjoe1"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"wasjoe1"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":89,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the given {@code rsvp} is invalid.","lastModifiedDate":"2023-10-07"},{"lineNumber":90,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"wasjoe1"},"content":"    public static RsvpStatus parseRsvp(String rsvp) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":92,"author":{"gitId":"wasjoe1"},"content":"        requireNonNull(rsvp); // passes in yes, no or maybe","lastModifiedDate":"2023-10-07"},{"lineNumber":93,"author":{"gitId":"wasjoe1"},"content":"        String trimmedRsvp \u003d rsvp.trim();","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"wasjoe1"},"content":"        if (!RsvpStatus.isValidRsvpStatus(trimmedRsvp)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":95,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(RsvpStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":96,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"wasjoe1"},"content":"        return new RsvpStatus(trimmedRsvp);","lastModifiedDate":"2023-10-07"},{"lineNumber":98,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":99,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":100,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":101,"author":{"gitId":"wasjoe1"},"content":"     * Parses a {@code String rsvp} into a {@code RsvpStatus}.","lastModifiedDate":"2023-10-07"},{"lineNumber":102,"author":{"gitId":"wasjoe1"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-07"},{"lineNumber":103,"author":{"gitId":"wasjoe1"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":104,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the given {@code rsvp} is invalid.","lastModifiedDate":"2023-10-07"},{"lineNumber":105,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":106,"author":{"gitId":"wasjoe1"},"content":"    public static DietaryRequirements parseDietary(String dietaryRequirements) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":107,"author":{"gitId":"wasjoe1"},"content":"        requireNonNull(dietaryRequirements); // accepts \"\" as \"\" !\u003d null; do we want to change this??","lastModifiedDate":"2023-10-07"},{"lineNumber":108,"author":{"gitId":"wasjoe1"},"content":"        String trimmedDietaryRequirements \u003d dietaryRequirements.trim();","lastModifiedDate":"2023-10-07"},{"lineNumber":109,"author":{"gitId":"wasjoe1"},"content":"        // no need to check isValid \u003d\u003e DR is already valid if its not null","lastModifiedDate":"2023-10-07"},{"lineNumber":110,"author":{"gitId":"wasjoe1"},"content":"        return new DietaryRequirements(trimmedDietaryRequirements);","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":112,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":150,"author":{"gitId":"wasjoe1"},"content":"            tagSet.add(parseTag(tagName)); // takes in a list of strings \u0026 parse then put into a hashset","lastModifiedDate":"2023-10-07"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"wasjoe1":31,"-":123}},{"path":"src/main/java/seedu/address/logic/parser/VendorAddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorAddCommand;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":" * Parses user input specifically for VendorAdd commands.","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"public class VendorAddCommandParser {","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"     * Parses the given {@code String} of arguments in the context of the VendorAddCommand","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"     * and returns an VendorAddCommand object for execution.","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"    public VendorAddCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE);","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"        // check compulsory fields; only name is compulsory","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, VendorAddCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"wasjoe1"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME); // throws parse exception if have duplicates","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"wasjoe1"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"wasjoe1"},"content":"        Phone phone \u003d argMultimap.getValue(PREFIX_PHONE).isEmpty()","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"wasjoe1"},"content":"                ? null","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"wasjoe1"},"content":"                : ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"wasjoe1"},"content":"        Email email \u003d null;","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"wasjoe1"},"content":"        Address address \u003d null;","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"wasjoe1"},"content":"        Set\u003cTag\u003e tagList \u003d null;","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"wasjoe1"},"content":"        // throw a ParseException as edits need to be made to Person/Guest/Vendor class first before this is valid","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"wasjoe1"},"content":"        throw new ParseException(\"Vendor not created in VendorAddCommand due to un-evolved classes\");","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"wasjoe1"},"content":"        // once Person/Guest/Vendor classes are evolved, can edit \u0026 add this back in","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"wasjoe1"},"content":"        // Person person \u003d new Person(name, phone, email, address, tagList);","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"wasjoe1"},"content":"        // return new VendorAddCommand(person);","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"wasjoe1"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"wasjoe1"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"wasjoe1"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"wasjoe1"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"wasjoe1":62}},{"path":"src/main/java/seedu/address/logic/parser/VendorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorAddCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorDeleteCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorListCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorViewCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":" * Parses user input specifically for Vendor commands.","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"public class VendorCommandParser {","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"wasjoe1"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"wasjoe1"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim()); // trims the back and end of the string","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"wasjoe1"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"wasjoe1"},"content":"        // any way the \"vendor command is removed, should have the same format as previous\"","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"wasjoe1"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"wasjoe1"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"wasjoe1"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"wasjoe1"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"wasjoe1"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"wasjoe1"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"wasjoe1"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"wasjoe1"},"content":"        case VendorAddCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"wasjoe1"},"content":"            return new VendorAddCommandParser().parse(arguments);","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"wasjoe1"},"content":"        case VendorDeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"wasjoe1"},"content":"            return new VendorDeleteCommandParser().parse(arguments);","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"wasjoe1"},"content":"        case VendorListCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"wasjoe1"},"content":"            return new VendorListCommand();","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"wasjoe1"},"content":"        case VendorViewCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"wasjoe1"},"content":"            return new VendorViewCommandParser().parse(arguments);","lastModifiedDate":"2023-10-08"},{"lineNumber":61,"author":{"gitId":"wasjoe1"},"content":"        default:","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"wasjoe1"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"wasjoe1":66}},{"path":"src/main/java/seedu/address/logic/parser/VendorDeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorDeleteCommand;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":" * Parses user input specifically for VendorDelete commands.","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"public class VendorDeleteCommandParser implements Parser\u003cVendorDeleteCommand\u003e {","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"    public VendorDeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"        try {","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"            return new VendorDeleteCommand(index);","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, VendorDeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"wasjoe1":27}},{"path":"src/main/java/seedu/address/logic/parser/VendorViewCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorViewCommand;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":" * Parses user input specifically for VendorView commands.","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"public class VendorViewCommandParser implements Parser\u003cVendorViewCommand\u003e {","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"    public VendorViewCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"        try {","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"            return new VendorViewCommand(index);","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, VendorViewCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"wasjoe1":28}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.UniqueGuestList;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.UniqueVendorList;","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"    private final UniqueGuestList guests;","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    private final UniqueVendorList vendors;","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"        guests \u003d new UniqueGuestList();","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"        vendors \u003d new UniqueVendorList();","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"p-xp"},"content":"     * Replaces the contents of the guest list with {@code guests}.","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"p-xp"},"content":"     * {@code guests} must not contain duplicate guests.","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"p-xp"},"content":"    public void setGuests(List\u003cGuest\u003e guests) {","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"p-xp"},"content":"        this.guests.setGuests(guests);","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"     * Replaces the contents of the vendor list with {@code vendors}.","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"     * {@code vendors} must not contain duplicate vendors.","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"    public void setVendors(List\u003cVendor\u003e vendors) {","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"        this.vendors.setVendors(vendors);","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":84,"author":{"gitId":"p-xp"},"content":"        setGuests(newData.getGuestList());","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"        setVendors(newData.getVendorList());","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":126,"author":{"gitId":"p-xp"},"content":"    //// guest-level operations","lastModifiedDate":"2023-10-07"},{"lineNumber":127,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":128,"author":{"gitId":"p-xp"},"content":"     * Returns true if a guest with the same identity as {@code guest} exists in the address book.","lastModifiedDate":"2023-10-07"},{"lineNumber":129,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":130,"author":{"gitId":"p-xp"},"content":"    public boolean hasGuest(Guest guest) {","lastModifiedDate":"2023-10-07"},{"lineNumber":131,"author":{"gitId":"p-xp"},"content":"        requireNonNull(guest);","lastModifiedDate":"2023-10-07"},{"lineNumber":132,"author":{"gitId":"p-xp"},"content":"        return guests.contains(guest);","lastModifiedDate":"2023-10-07"},{"lineNumber":133,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":134,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":135,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":136,"author":{"gitId":"p-xp"},"content":"     * Adds a guest to the address book.","lastModifiedDate":"2023-10-07"},{"lineNumber":137,"author":{"gitId":"p-xp"},"content":"     * The guest must not already exist in the address book.","lastModifiedDate":"2023-10-07"},{"lineNumber":138,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":139,"author":{"gitId":"p-xp"},"content":"    public void addGuest(Guest g) {","lastModifiedDate":"2023-10-07"},{"lineNumber":140,"author":{"gitId":"p-xp"},"content":"        guests.add(g);","lastModifiedDate":"2023-10-07"},{"lineNumber":141,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":142,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":143,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":144,"author":{"gitId":"p-xp"},"content":"     * Replaces the given guest {@code target} in the list with {@code editedGuest}.","lastModifiedDate":"2023-10-07"},{"lineNumber":145,"author":{"gitId":"p-xp"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-10-07"},{"lineNumber":146,"author":{"gitId":"p-xp"},"content":"     * The guest identity of {@code editedGuest} must not be the same as another existing guest in the address book.","lastModifiedDate":"2023-10-07"},{"lineNumber":147,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":148,"author":{"gitId":"p-xp"},"content":"    public void setGuest(Guest target, Guest editedGuest) {","lastModifiedDate":"2023-10-07"},{"lineNumber":149,"author":{"gitId":"p-xp"},"content":"        requireNonNull(editedGuest);","lastModifiedDate":"2023-10-07"},{"lineNumber":150,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":151,"author":{"gitId":"p-xp"},"content":"        guests.setGuest(target, editedGuest);","lastModifiedDate":"2023-10-07"},{"lineNumber":152,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":153,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":154,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":155,"author":{"gitId":"p-xp"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2023-10-07"},{"lineNumber":156,"author":{"gitId":"p-xp"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2023-10-07"},{"lineNumber":157,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":158,"author":{"gitId":"p-xp"},"content":"    public void removeGuest(Guest key) {","lastModifiedDate":"2023-10-07"},{"lineNumber":159,"author":{"gitId":"p-xp"},"content":"        guests.remove(key);","lastModifiedDate":"2023-10-07"},{"lineNumber":160,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":161,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":162,"author":{"gitId":"samuelim01"},"content":"    //// vendor-level operations","lastModifiedDate":"2023-10-06"},{"lineNumber":163,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":164,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":165,"author":{"gitId":"samuelim01"},"content":"     * Returns true if a vendor with the same identity as {@code vendor} exists in the address book.","lastModifiedDate":"2023-10-06"},{"lineNumber":166,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":167,"author":{"gitId":"samuelim01"},"content":"    public boolean hasVendor(Vendor vendor) {","lastModifiedDate":"2023-10-06"},{"lineNumber":168,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(vendor);","lastModifiedDate":"2023-10-06"},{"lineNumber":169,"author":{"gitId":"samuelim01"},"content":"        return vendors.contains(vendor);","lastModifiedDate":"2023-10-06"},{"lineNumber":170,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":171,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":172,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":173,"author":{"gitId":"samuelim01"},"content":"     * Adds a vendor to the address book.","lastModifiedDate":"2023-10-06"},{"lineNumber":174,"author":{"gitId":"samuelim01"},"content":"     * The vendor must not already exist in the address book.","lastModifiedDate":"2023-10-06"},{"lineNumber":175,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":176,"author":{"gitId":"samuelim01"},"content":"    public void addVendor(Vendor v) {","lastModifiedDate":"2023-10-06"},{"lineNumber":177,"author":{"gitId":"samuelim01"},"content":"        vendors.add(v);","lastModifiedDate":"2023-10-06"},{"lineNumber":178,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":179,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":180,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":181,"author":{"gitId":"samuelim01"},"content":"     * Replaces the given vendor {@code target} in the list with {@code editedVendor}.","lastModifiedDate":"2023-10-06"},{"lineNumber":182,"author":{"gitId":"samuelim01"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-10-06"},{"lineNumber":183,"author":{"gitId":"samuelim01"},"content":"     * The vendor identity of {@code editedVendor} must not be the same as another existing vendor in the address book.","lastModifiedDate":"2023-10-06"},{"lineNumber":184,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":185,"author":{"gitId":"samuelim01"},"content":"    public void setVendor(Vendor target, Vendor editedVendor) {","lastModifiedDate":"2023-10-06"},{"lineNumber":186,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(editedVendor);","lastModifiedDate":"2023-10-06"},{"lineNumber":187,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":188,"author":{"gitId":"samuelim01"},"content":"        vendors.setVendor(target, editedVendor);","lastModifiedDate":"2023-10-06"},{"lineNumber":189,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":190,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":191,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":192,"author":{"gitId":"samuelim01"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2023-10-06"},{"lineNumber":193,"author":{"gitId":"samuelim01"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2023-10-06"},{"lineNumber":194,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":195,"author":{"gitId":"samuelim01"},"content":"    public void removeVendor(Vendor key) {","lastModifiedDate":"2023-10-06"},{"lineNumber":196,"author":{"gitId":"samuelim01"},"content":"        vendors.remove(key);","lastModifiedDate":"2023-10-06"},{"lineNumber":197,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":198,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                .add(\"persons\", persons)","lastModifiedDate":"2019-02-23"},{"lineNumber":205,"author":{"gitId":"p-xp"},"content":"                .add(\"guests\", guests)","lastModifiedDate":"2023-10-07"},{"lineNumber":206,"author":{"gitId":"samuelim01"},"content":"                .add(\"vendors\", vendors)","lastModifiedDate":"2023-10-06"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":215,"author":{"gitId":"p-xp"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":216,"author":{"gitId":"p-xp"},"content":"    public ObservableList\u003cGuest\u003e getGuestList() {","lastModifiedDate":"2023-10-07"},{"lineNumber":217,"author":{"gitId":"p-xp"},"content":"        return guests.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-07"},{"lineNumber":218,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":219,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":220,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-06"},{"lineNumber":221,"author":{"gitId":"samuelim01"},"content":"    public ObservableList\u003cVendor\u003e getVendorList() {","lastModifiedDate":"2023-10-06"},{"lineNumber":222,"author":{"gitId":"samuelim01"},"content":"        return vendors.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-06"},{"lineNumber":223,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":224,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddressBook)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        AddressBook otherAddressBook \u003d (AddressBook) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":237,"author":{"gitId":"p-xp"},"content":"        return persons.equals(otherAddressBook.persons) \u0026\u0026 guests.equals(otherAddressBook.guests)","lastModifiedDate":"2023-10-11"},{"lineNumber":238,"author":{"gitId":"p-xp"},"content":"                \u0026\u0026 vendors.equals(otherAddressBook.vendors);","lastModifiedDate":"2023-10-11"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":243,"author":{"gitId":"p-xp"},"content":"        return Objects.hash(persons, guests, vendors);","lastModifiedDate":"2023-10-11"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"samuelim01":56,"p-xp":60,"-":129}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"     * Returns true if a guest with the same identity as {@code guest} exists in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"    boolean hasGuest(Guest guest);","lastModifiedDate":"2023-10-11"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"     * Deletes the given guest.","lastModifiedDate":"2023-10-11"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"     * The guest must exist in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"    void deleteGuest(Guest target);","lastModifiedDate":"2023-10-11"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"     * Adds the given guest.","lastModifiedDate":"2023-10-11"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"     * {@code guest} must not already exist in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":96,"author":{"gitId":"samuelim01"},"content":"    void addGuest(Guest guest);","lastModifiedDate":"2023-10-11"},{"lineNumber":97,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":98,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":99,"author":{"gitId":"samuelim01"},"content":"     * Replaces the given guest {@code target} with {@code editedGuest}.","lastModifiedDate":"2023-10-11"},{"lineNumber":100,"author":{"gitId":"samuelim01"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":101,"author":{"gitId":"samuelim01"},"content":"     * The guest identity of {@code editedGuest} must not be the same as another existing guest in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":102,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":103,"author":{"gitId":"samuelim01"},"content":"    void setGuest(Guest target, Guest editedGuest);","lastModifiedDate":"2023-10-11"},{"lineNumber":104,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":105,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":106,"author":{"gitId":"samuelim01"},"content":"     * Returns true if a vendor with the same identity as {@code vendor} exists in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":107,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":108,"author":{"gitId":"samuelim01"},"content":"    boolean hasVendor(Vendor vendor);","lastModifiedDate":"2023-10-11"},{"lineNumber":109,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":110,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":111,"author":{"gitId":"samuelim01"},"content":"     * Deletes the given vendor.","lastModifiedDate":"2023-10-11"},{"lineNumber":112,"author":{"gitId":"samuelim01"},"content":"     * The vendor must exist in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":113,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":114,"author":{"gitId":"samuelim01"},"content":"    void deleteVendor(Vendor target);","lastModifiedDate":"2023-10-11"},{"lineNumber":115,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":116,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":117,"author":{"gitId":"samuelim01"},"content":"     * Adds the given vendor.","lastModifiedDate":"2023-10-11"},{"lineNumber":118,"author":{"gitId":"samuelim01"},"content":"     * {@code vendor} must not already exist in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":119,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":120,"author":{"gitId":"samuelim01"},"content":"    void addVendor(Vendor vendor);","lastModifiedDate":"2023-10-11"},{"lineNumber":121,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":122,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":123,"author":{"gitId":"samuelim01"},"content":"     * Replaces the given vendor {@code target} with {@code editedVendor}.","lastModifiedDate":"2023-10-11"},{"lineNumber":124,"author":{"gitId":"samuelim01"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":125,"author":{"gitId":"samuelim01"},"content":"     * The vendor identity of {@code editedVendor} must not be the same as another existing vendor in the address book.","lastModifiedDate":"2023-10-11"},{"lineNumber":126,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":127,"author":{"gitId":"samuelim01"},"content":"    void setVendor(Vendor target, Vendor editedVendor);","lastModifiedDate":"2023-10-11"},{"lineNumber":128,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":138,"author":{"gitId":"samuelim01"},"content":"    /** Returns an unmodifiable view of the filtered guest list */","lastModifiedDate":"2023-10-11"},{"lineNumber":139,"author":{"gitId":"samuelim01"},"content":"    ObservableList\u003cGuest\u003e getFilteredGuestList();","lastModifiedDate":"2023-10-11"},{"lineNumber":140,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":141,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":142,"author":{"gitId":"samuelim01"},"content":"     * Updates the filter of the filtered guest list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-11"},{"lineNumber":143,"author":{"gitId":"samuelim01"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-11"},{"lineNumber":144,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":145,"author":{"gitId":"samuelim01"},"content":"    void updateFilteredGuestList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":146,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":147,"author":{"gitId":"samuelim01"},"content":"    /** Returns an unmodifiable view of the filtered vendor list */","lastModifiedDate":"2023-10-11"},{"lineNumber":148,"author":{"gitId":"samuelim01"},"content":"    ObservableList\u003cVendor\u003e getFilteredVendorList();","lastModifiedDate":"2023-10-11"},{"lineNumber":149,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":150,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":151,"author":{"gitId":"samuelim01"},"content":"     * Updates the filter of the filtered vendor list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-11"},{"lineNumber":152,"author":{"gitId":"samuelim01"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-11"},{"lineNumber":153,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":154,"author":{"gitId":"samuelim01"},"content":"    void updateFilteredVendorList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"samuelim01":68,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    private final FilteredList\u003cGuest\u003e filteredGuests;","lastModifiedDate":"2023-10-11"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    private final FilteredList\u003cVendor\u003e filteredVendors;","lastModifiedDate":"2023-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"        filteredGuests \u003d new FilteredList\u003c\u003e(this.addressBook.getGuestList());","lastModifiedDate":"2023-10-11"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"        filteredVendors \u003d new FilteredList\u003c\u003e(this.addressBook.getVendorList());","lastModifiedDate":"2023-10-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":120,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":121,"author":{"gitId":"samuelim01"},"content":"    public boolean hasGuest(Guest guest) {","lastModifiedDate":"2023-10-11"},{"lineNumber":122,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(guest);","lastModifiedDate":"2023-10-11"},{"lineNumber":123,"author":{"gitId":"samuelim01"},"content":"        return addressBook.hasGuest(guest);","lastModifiedDate":"2023-10-11"},{"lineNumber":124,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":125,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":126,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":127,"author":{"gitId":"samuelim01"},"content":"    public void deleteGuest(Guest target) {","lastModifiedDate":"2023-10-11"},{"lineNumber":128,"author":{"gitId":"samuelim01"},"content":"        addressBook.removeGuest(target);","lastModifiedDate":"2023-10-11"},{"lineNumber":129,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":130,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":131,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":132,"author":{"gitId":"samuelim01"},"content":"    public void addGuest(Guest guest) {","lastModifiedDate":"2023-10-11"},{"lineNumber":133,"author":{"gitId":"samuelim01"},"content":"        addressBook.addGuest(guest);","lastModifiedDate":"2023-10-11"},{"lineNumber":134,"author":{"gitId":"samuelim01"},"content":"        updateFilteredGuestList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":136,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":137,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":138,"author":{"gitId":"samuelim01"},"content":"    public void setGuest(Guest target, Guest editedGuest) {","lastModifiedDate":"2023-10-11"},{"lineNumber":139,"author":{"gitId":"samuelim01"},"content":"        requireAllNonNull(target, editedGuest);","lastModifiedDate":"2023-10-11"},{"lineNumber":140,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":141,"author":{"gitId":"samuelim01"},"content":"        addressBook.setGuest(target, editedGuest);","lastModifiedDate":"2023-10-11"},{"lineNumber":142,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":143,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":144,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":145,"author":{"gitId":"samuelim01"},"content":"    public boolean hasVendor(Vendor vendor) {","lastModifiedDate":"2023-10-11"},{"lineNumber":146,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(vendor);","lastModifiedDate":"2023-10-11"},{"lineNumber":147,"author":{"gitId":"samuelim01"},"content":"        return addressBook.hasVendor(vendor);","lastModifiedDate":"2023-10-11"},{"lineNumber":148,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":149,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":150,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":151,"author":{"gitId":"samuelim01"},"content":"    public void deleteVendor(Vendor target) {","lastModifiedDate":"2023-10-11"},{"lineNumber":152,"author":{"gitId":"samuelim01"},"content":"        addressBook.removeVendor(target);","lastModifiedDate":"2023-10-11"},{"lineNumber":153,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":154,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":155,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":156,"author":{"gitId":"samuelim01"},"content":"    public void addVendor(Vendor vendor) {","lastModifiedDate":"2023-10-11"},{"lineNumber":157,"author":{"gitId":"samuelim01"},"content":"        addressBook.addVendor(vendor);","lastModifiedDate":"2023-10-11"},{"lineNumber":158,"author":{"gitId":"samuelim01"},"content":"        updateFilteredVendorList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":160,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":161,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":162,"author":{"gitId":"samuelim01"},"content":"    public void setVendor(Vendor target, Vendor editedVendor) {","lastModifiedDate":"2023-10-11"},{"lineNumber":163,"author":{"gitId":"samuelim01"},"content":"        requireAllNonNull(target, editedVendor);","lastModifiedDate":"2023-10-11"},{"lineNumber":164,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":165,"author":{"gitId":"samuelim01"},"content":"        addressBook.setVendor(target, editedVendor);","lastModifiedDate":"2023-10-11"},{"lineNumber":166,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":167,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":185,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":186,"author":{"gitId":"samuelim01"},"content":"     * Returns an unmodifiable view of the list of {@code Guest} backed by the internal list of","lastModifiedDate":"2023-10-11"},{"lineNumber":187,"author":{"gitId":"samuelim01"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2023-10-11"},{"lineNumber":188,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":189,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":190,"author":{"gitId":"samuelim01"},"content":"    public ObservableList\u003cGuest\u003e getFilteredGuestList() {","lastModifiedDate":"2023-10-11"},{"lineNumber":191,"author":{"gitId":"samuelim01"},"content":"        return filteredGuests;","lastModifiedDate":"2023-10-11"},{"lineNumber":192,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":193,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":194,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":195,"author":{"gitId":"samuelim01"},"content":"    public void updateFilteredGuestList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":196,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-11"},{"lineNumber":197,"author":{"gitId":"samuelim01"},"content":"        filteredGuests.setPredicate(predicate);","lastModifiedDate":"2023-10-11"},{"lineNumber":198,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":199,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":200,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-11"},{"lineNumber":201,"author":{"gitId":"samuelim01"},"content":"     * Returns an unmodifiable view of the list of {@code Vendor} backed by the internal list of","lastModifiedDate":"2023-10-11"},{"lineNumber":202,"author":{"gitId":"samuelim01"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2023-10-11"},{"lineNumber":203,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-11"},{"lineNumber":204,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":205,"author":{"gitId":"samuelim01"},"content":"    public ObservableList\u003cVendor\u003e getFilteredVendorList() {","lastModifiedDate":"2023-10-11"},{"lineNumber":206,"author":{"gitId":"samuelim01"},"content":"        return filteredVendors;","lastModifiedDate":"2023-10-11"},{"lineNumber":207,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":208,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":209,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":210,"author":{"gitId":"samuelim01"},"content":"    public void updateFilteredVendorList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":211,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-11"},{"lineNumber":212,"author":{"gitId":"samuelim01"},"content":"        filteredVendors.setPredicate(predicate);","lastModifiedDate":"2023-10-11"},{"lineNumber":213,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":214,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        return addressBook.equals(otherModelManager.addressBook)","lastModifiedDate":"2023-07-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":229,"author":{"gitId":"samuelim01"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons)","lastModifiedDate":"2023-10-11"},{"lineNumber":230,"author":{"gitId":"samuelim01"},"content":"                \u0026\u0026 filteredGuests.equals(otherModelManager.filteredGuests)","lastModifiedDate":"2023-10-11"},{"lineNumber":231,"author":{"gitId":"samuelim01"},"content":"                \u0026\u0026 filteredVendors.equals(otherModelManager.filteredVendors);","lastModifiedDate":"2023-10-11"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"samuelim01":87,"-":147}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"p-xp"},"content":"     * Returns an unmodifiable view of the guest list.","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":"     * This list will not contain any duplicate guests.","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":"    ObservableList\u003cGuest\u003e getGuestList();","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"     * Returns an unmodifiable view of the vendors list.","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"     * This list will not contain any duplicate vendors.","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    ObservableList\u003cVendor\u003e getVendorList();","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"samuelim01":6,"p-xp":7,"-":17}},{"path":"src/main/java/seedu/address/model/person/DietaryRequirements.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"keaganpzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-02"},{"lineNumber":2,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":3,"author":{"gitId":"keaganpzh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-02"},{"lineNumber":4,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"keaganpzh"},"content":"/**","lastModifiedDate":"2023-10-02"},{"lineNumber":6,"author":{"gitId":"keaganpzh"},"content":" * Represents a Guest\u0027s dietary requirements in WedLog.","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"keaganpzh"},"content":" * Guarantees: immutable; is always valid","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"keaganpzh"},"content":" */","lastModifiedDate":"2023-10-02"},{"lineNumber":9,"author":{"gitId":"keaganpzh"},"content":"public class DietaryRequirements {","lastModifiedDate":"2023-10-02"},{"lineNumber":10,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"p-xp"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"            \"Dietary requirements should not be blank\";","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"keaganpzh"},"content":"    public final String value;","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":16,"author":{"gitId":"keaganpzh"},"content":"    /**","lastModifiedDate":"2023-10-02"},{"lineNumber":17,"author":{"gitId":"keaganpzh"},"content":"     * Constructs a {@code DietaryRequirements}.","lastModifiedDate":"2023-10-02"},{"lineNumber":18,"author":{"gitId":"keaganpzh"},"content":"     *","lastModifiedDate":"2023-10-02"},{"lineNumber":19,"author":{"gitId":"keaganpzh"},"content":"     * @param remark A dietary requirement.","lastModifiedDate":"2023-10-02"},{"lineNumber":20,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"keaganpzh"},"content":"    public DietaryRequirements(String remark) {","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"keaganpzh"},"content":"        requireNonNull(remark);","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"keaganpzh"},"content":"        value \u003d remark;","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":"     * Returns true if a given string is a valid dietary requirement.","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"    public static boolean isValidDietaryRequirement(String test) {","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"p-xp"},"content":"        return test.trim().length() \u003e 0;","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"keaganpzh"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"keaganpzh"},"content":"    public String toString() {","lastModifiedDate":"2023-10-02"},{"lineNumber":35,"author":{"gitId":"keaganpzh"},"content":"        return value;","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":38,"author":{"gitId":"keaganpzh"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":39,"author":{"gitId":"keaganpzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-02"},{"lineNumber":40,"author":{"gitId":"keaganpzh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-10-02"},{"lineNumber":41,"author":{"gitId":"keaganpzh"},"content":"                || (other instanceof DietaryRequirements // instanceof handles nulls","lastModifiedDate":"2023-10-02"},{"lineNumber":42,"author":{"gitId":"keaganpzh"},"content":"                \u0026\u0026 value.equals(((DietaryRequirements) other).value)); // state check","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":45,"author":{"gitId":"keaganpzh"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":46,"author":{"gitId":"keaganpzh"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-02"},{"lineNumber":47,"author":{"gitId":"keaganpzh"},"content":"        return value.hashCode();","lastModifiedDate":"2023-10-02"},{"lineNumber":48,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":49,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":50,"author":{"gitId":"keaganpzh"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"p-xp":10,"keaganpzh":40}},{"path":"src/main/java/seedu/address/model/person/Guest.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"keaganpzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-02"},{"lineNumber":2,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":3,"author":{"gitId":"keaganpzh"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-02"},{"lineNumber":4,"author":{"gitId":"keaganpzh"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":6,"author":{"gitId":"keaganpzh"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"keaganpzh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":9,"author":{"gitId":"keaganpzh"},"content":"/**","lastModifiedDate":"2023-10-02"},{"lineNumber":10,"author":{"gitId":"keaganpzh"},"content":" * Represents a Guest in the address book. Inherits from Person.","lastModifiedDate":"2023-10-02"},{"lineNumber":11,"author":{"gitId":"keaganpzh"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2023-10-02"},{"lineNumber":12,"author":{"gitId":"keaganpzh"},"content":" */","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"keaganpzh"},"content":"public class Guest extends Person {","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"keaganpzh"},"content":"    // Additional data fields","lastModifiedDate":"2023-10-02"},{"lineNumber":16,"author":{"gitId":"keaganpzh"},"content":"    private final RsvpStatus rsvpStatus;","lastModifiedDate":"2023-10-02"},{"lineNumber":17,"author":{"gitId":"keaganpzh"},"content":"    private final DietaryRequirements dietaryRequirements;","lastModifiedDate":"2023-10-02"},{"lineNumber":18,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":19,"author":{"gitId":"keaganpzh"},"content":"    /**","lastModifiedDate":"2023-10-02"},{"lineNumber":20,"author":{"gitId":"keaganpzh"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"keaganpzh"},"content":"    public Guest(Name name, Phone phone, Email email, Address address, RsvpStatus rsvpStatus,","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"keaganpzh"},"content":"                 DietaryRequirements dietaryRequirements, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"keaganpzh"},"content":"        super(name, phone, email, address, tags);","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"keaganpzh"},"content":"        this.rsvpStatus \u003d rsvpStatus;","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"keaganpzh"},"content":"        this.dietaryRequirements \u003d dietaryRequirements;","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":28,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":29,"author":{"gitId":"keaganpzh"},"content":"    public RsvpStatus getRsvpStatus() {","lastModifiedDate":"2023-10-02"},{"lineNumber":30,"author":{"gitId":"keaganpzh"},"content":"        return rsvpStatus;","lastModifiedDate":"2023-10-02"},{"lineNumber":31,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":32,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"keaganpzh"},"content":"    public DietaryRequirements getDietaryRequirements() {","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"keaganpzh"},"content":"        return dietaryRequirements;","lastModifiedDate":"2023-10-02"},{"lineNumber":35,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"keaganpzh"},"content":"    /**","lastModifiedDate":"2023-10-02"},{"lineNumber":38,"author":{"gitId":"keaganpzh"},"content":"     * Returns true if both guests have the same identity and data fields.","lastModifiedDate":"2023-10-02"},{"lineNumber":39,"author":{"gitId":"keaganpzh"},"content":"     * This defines a stronger notion of equality between two guests.","lastModifiedDate":"2023-10-02"},{"lineNumber":40,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-02"},{"lineNumber":41,"author":{"gitId":"keaganpzh"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":42,"author":{"gitId":"keaganpzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"keaganpzh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"keaganpzh"},"content":"            return true;","lastModifiedDate":"2023-10-02"},{"lineNumber":45,"author":{"gitId":"keaganpzh"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":46,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":47,"author":{"gitId":"keaganpzh"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-02"},{"lineNumber":48,"author":{"gitId":"keaganpzh"},"content":"        if (!(other instanceof Guest)) {","lastModifiedDate":"2023-10-02"},{"lineNumber":49,"author":{"gitId":"keaganpzh"},"content":"            return false;","lastModifiedDate":"2023-10-02"},{"lineNumber":50,"author":{"gitId":"keaganpzh"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":51,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":52,"author":{"gitId":"keaganpzh"},"content":"        Guest otherGuest \u003d (Guest) other;","lastModifiedDate":"2023-10-02"},{"lineNumber":53,"author":{"gitId":"keaganpzh"},"content":"        return super.equals(otherGuest)","lastModifiedDate":"2023-10-02"},{"lineNumber":54,"author":{"gitId":"keaganpzh"},"content":"                \u0026\u0026 otherGuest.getRsvpStatus().equals(getRsvpStatus())","lastModifiedDate":"2023-10-02"},{"lineNumber":55,"author":{"gitId":"keaganpzh"},"content":"                \u0026\u0026 otherGuest.getDietaryRequirements().equals(getDietaryRequirements());","lastModifiedDate":"2023-10-02"},{"lineNumber":56,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":57,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":58,"author":{"gitId":"keaganpzh"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":59,"author":{"gitId":"keaganpzh"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-02"},{"lineNumber":60,"author":{"gitId":"keaganpzh"},"content":"        return Objects.hash(getName(), getPhone(), getEmail(), getAddress(), getTags(),","lastModifiedDate":"2023-10-02"},{"lineNumber":61,"author":{"gitId":"keaganpzh"},"content":"                rsvpStatus, dietaryRequirements);","lastModifiedDate":"2023-10-02"},{"lineNumber":62,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":63,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":64,"author":{"gitId":"keaganpzh"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":65,"author":{"gitId":"keaganpzh"},"content":"    public String toString() {","lastModifiedDate":"2023-10-02"},{"lineNumber":66,"author":{"gitId":"keaganpzh"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-02"},{"lineNumber":67,"author":{"gitId":"keaganpzh"},"content":"                .add(\"name\", getName())","lastModifiedDate":"2023-10-02"},{"lineNumber":68,"author":{"gitId":"keaganpzh"},"content":"                .add(\"phone\", getPhone())","lastModifiedDate":"2023-10-02"},{"lineNumber":69,"author":{"gitId":"keaganpzh"},"content":"                .add(\"email\", getEmail())","lastModifiedDate":"2023-10-02"},{"lineNumber":70,"author":{"gitId":"keaganpzh"},"content":"                .add(\"address\", getAddress())","lastModifiedDate":"2023-10-02"},{"lineNumber":71,"author":{"gitId":"keaganpzh"},"content":"                .add(\"rsvpStatus\", getRsvpStatus())","lastModifiedDate":"2023-10-02"},{"lineNumber":72,"author":{"gitId":"keaganpzh"},"content":"                .add(\"dietaryRequirements\", getDietaryRequirements())","lastModifiedDate":"2023-10-02"},{"lineNumber":73,"author":{"gitId":"keaganpzh"},"content":"                .add(\"tags\", getTags())","lastModifiedDate":"2023-10-02"},{"lineNumber":74,"author":{"gitId":"keaganpzh"},"content":"                .toString();","lastModifiedDate":"2023-10-02"},{"lineNumber":75,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":76,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":77,"author":{"gitId":"keaganpzh"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"keaganpzh":77}},{"path":"src/main/java/seedu/address/model/person/RsvpStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"keaganpzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-02"},{"lineNumber":2,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":3,"author":{"gitId":"keaganpzh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-02"},{"lineNumber":4,"author":{"gitId":"keaganpzh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":6,"author":{"gitId":"keaganpzh"},"content":"/**","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"keaganpzh"},"content":" * Represents a Guest\u0027s RsvpStatus status in the address book.","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"keaganpzh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRsvpStatus(String)}","lastModifiedDate":"2023-10-02"},{"lineNumber":9,"author":{"gitId":"keaganpzh"},"content":" */","lastModifiedDate":"2023-10-02"},{"lineNumber":10,"author":{"gitId":"keaganpzh"},"content":"public class RsvpStatus {","lastModifiedDate":"2023-10-02"},{"lineNumber":11,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":12,"author":{"gitId":"keaganpzh"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"keaganpzh"},"content":"            \"RsvpStatus Status should only have one of three values. yes, no, or unknown.\";","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"keaganpzh"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"keaganpzh"},"content":"     * RSVP status can only be one of the following values.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"keaganpzh"},"content":"    public enum PossibleRsvpStatus {","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"keaganpzh"},"content":"        YES, NO, UNKNOWN","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"keaganpzh"},"content":"    /*","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"keaganpzh"},"content":"     * RSVP status should only consist of yes, no, or unknown values. Not case-sensitive.","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"keaganpzh"},"content":"    public static final String VALIDATION_REGEX \u003d \"^(?i)(yes|no|unknown)$\";","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"keaganpzh"},"content":"    public static final String RSVP_YES_REGEX \u003d \"^(?i)(yes)$\";","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":29,"author":{"gitId":"keaganpzh"},"content":"    public static final String RSVP_NO_REGEX \u003d \"^(?i)(no)$\";","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"keaganpzh"},"content":"    public final PossibleRsvpStatus rsvpStatus;","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"keaganpzh"},"content":"    /*","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"keaganpzh"},"content":"     * Value is stored in lower case.","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"     * Possible values are: \"yes\", \"no\", \"unknown\".","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"keaganpzh"},"content":"    public final String value;","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":39,"author":{"gitId":"keaganpzh"},"content":"    /**","lastModifiedDate":"2023-10-02"},{"lineNumber":40,"author":{"gitId":"keaganpzh"},"content":"     * Constructs a {@code RsvpStatus}.","lastModifiedDate":"2023-10-02"},{"lineNumber":41,"author":{"gitId":"keaganpzh"},"content":"     *","lastModifiedDate":"2023-10-02"},{"lineNumber":42,"author":{"gitId":"keaganpzh"},"content":"     * @param rsvp A valid RSVP status.","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"keaganpzh"},"content":"    public RsvpStatus(String rsvp) {","lastModifiedDate":"2023-10-02"},{"lineNumber":45,"author":{"gitId":"keaganpzh"},"content":"        requireNonNull(rsvp);","lastModifiedDate":"2023-10-02"},{"lineNumber":46,"author":{"gitId":"keaganpzh"},"content":"        checkArgument(isValidRsvpStatus(rsvp), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-02"},{"lineNumber":47,"author":{"gitId":"keaganpzh"},"content":"        this.rsvpStatus \u003d rsvp.matches(RSVP_YES_REGEX)","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"keaganpzh"},"content":"            ? PossibleRsvpStatus.YES","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"keaganpzh"},"content":"            : rsvp.matches(RSVP_NO_REGEX)","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"keaganpzh"},"content":"            ? PossibleRsvpStatus.NO","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"keaganpzh"},"content":"            : PossibleRsvpStatus.UNKNOWN;","lastModifiedDate":"2023-10-04"},{"lineNumber":52,"author":{"gitId":"keaganpzh"},"content":"        this.value \u003d rsvp.toLowerCase();","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":54,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":55,"author":{"gitId":"keaganpzh"},"content":"    /**","lastModifiedDate":"2023-10-02"},{"lineNumber":56,"author":{"gitId":"keaganpzh"},"content":"     * Returns true if a given string is a valid RSVP status.","lastModifiedDate":"2023-10-02"},{"lineNumber":57,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-02"},{"lineNumber":58,"author":{"gitId":"keaganpzh"},"content":"    public static boolean isValidRsvpStatus(String test) {","lastModifiedDate":"2023-10-02"},{"lineNumber":59,"author":{"gitId":"keaganpzh"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-02"},{"lineNumber":60,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":61,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":62,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":63,"author":{"gitId":"keaganpzh"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":64,"author":{"gitId":"keaganpzh"},"content":"    public String toString() {","lastModifiedDate":"2023-10-02"},{"lineNumber":65,"author":{"gitId":"keaganpzh"},"content":"        return this.value;","lastModifiedDate":"2023-10-03"},{"lineNumber":66,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":67,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":68,"author":{"gitId":"keaganpzh"},"content":"    @Override","lastModifiedDate":"2023-10-02"},{"lineNumber":69,"author":{"gitId":"keaganpzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-02"},{"lineNumber":70,"author":{"gitId":"keaganpzh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-02"},{"lineNumber":71,"author":{"gitId":"keaganpzh"},"content":"            return true;","lastModifiedDate":"2023-10-02"},{"lineNumber":72,"author":{"gitId":"keaganpzh"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":73,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":74,"author":{"gitId":"keaganpzh"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-02"},{"lineNumber":75,"author":{"gitId":"keaganpzh"},"content":"        if (!(other instanceof RsvpStatus)) {","lastModifiedDate":"2023-10-02"},{"lineNumber":76,"author":{"gitId":"keaganpzh"},"content":"            return false;","lastModifiedDate":"2023-10-02"},{"lineNumber":77,"author":{"gitId":"keaganpzh"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":78,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":79,"author":{"gitId":"keaganpzh"},"content":"        RsvpStatus otherName \u003d (RsvpStatus) other;","lastModifiedDate":"2023-10-02"},{"lineNumber":80,"author":{"gitId":"keaganpzh"},"content":"        return rsvpStatus \u003d\u003d (otherName.rsvpStatus);","lastModifiedDate":"2023-10-02"},{"lineNumber":81,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":82,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":83,"author":{"gitId":"keaganpzh"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"wasjoe1":1,"keaganpzh":82}},{"path":"src/main/java/seedu/address/model/person/UniqueGuestList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"p-xp"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"p-xp"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"p-xp"},"content":"import java.util.List;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"p-xp"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"p-xp"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.exceptions.DuplicateGuestException;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.exceptions.GuestNotFoundException;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"p-xp"},"content":" * A list of guests that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"p-xp"},"content":" * A guest is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"p-xp"},"content":" * guests uses Person#isSamePerson(Person) for equality to ensure that the guest being added or updated is","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"p-xp"},"content":" * unique in terms of identity in the UniqueGuestList. However, the removal of a guest uses Guest#equals(Object)","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"p-xp"},"content":" * to ensure that the guest with exactly the same fields will be removed.","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"p-xp"},"content":" *","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"p-xp"},"content":" *","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"public class UniqueGuestList implements Iterable\u003cGuest\u003e {","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":"    private final ObservableList\u003cGuest\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"    private final ObservableList\u003cGuest\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"p-xp"},"content":"     * Returns true if the list contains an equivalent guest as the given argument.","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"p-xp"},"content":"    public boolean contains(Guest toCheck) {","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"p-xp"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"p-xp"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"p-xp"},"content":"     * Adds a guest to the list.","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"p-xp"},"content":"     * The guest must not already exist in the list.","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"p-xp"},"content":"    public void add(Guest toAdd) {","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"p-xp"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"p-xp"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"p-xp"},"content":"            throw new DuplicateGuestException();","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"p-xp"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"p-xp"},"content":"     * Replaces the guest {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"p-xp"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"p-xp"},"content":"     * The guest identity of {@code editedPerson} must not be the same as another existing guest in the list.","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"p-xp"},"content":"    public void setGuest(Guest target, Guest editedPerson) {","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"p-xp"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"p-xp"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"p-xp"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"p-xp"},"content":"            throw new GuestNotFoundException();","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"p-xp"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"p-xp"},"content":"            throw new DuplicateGuestException();","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"p-xp"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"p-xp"},"content":"     * Removes the equivalent guest from the list.","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"p-xp"},"content":"     * The guest must exist in the list.","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"p-xp"},"content":"    public void remove(Guest toRemove) {","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"p-xp"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"p-xp"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"p-xp"},"content":"            throw new GuestNotFoundException();","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":81,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":82,"author":{"gitId":"p-xp"},"content":"    public void setGuests(UniqueGuestList replacement) {","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"p-xp"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"p-xp"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":87,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"p-xp"},"content":"     * Replaces the contents of this list with {@code guests}.","lastModifiedDate":"2023-10-07"},{"lineNumber":89,"author":{"gitId":"p-xp"},"content":"     * {@code guests} must not contain duplicate guests.","lastModifiedDate":"2023-10-07"},{"lineNumber":90,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"p-xp"},"content":"    public void setGuests(List\u003cGuest\u003e guests) {","lastModifiedDate":"2023-10-07"},{"lineNumber":92,"author":{"gitId":"p-xp"},"content":"        requireAllNonNull(guests);","lastModifiedDate":"2023-10-07"},{"lineNumber":93,"author":{"gitId":"p-xp"},"content":"        if (!guestsAreUnique(guests)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"p-xp"},"content":"            throw new DuplicateGuestException();","lastModifiedDate":"2023-10-07"},{"lineNumber":95,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":96,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"p-xp"},"content":"        internalList.setAll(guests);","lastModifiedDate":"2023-10-07"},{"lineNumber":98,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":99,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":100,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":101,"author":{"gitId":"p-xp"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-10-07"},{"lineNumber":102,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":103,"author":{"gitId":"p-xp"},"content":"    public ObservableList\u003cGuest\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-07"},{"lineNumber":104,"author":{"gitId":"p-xp"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-10-07"},{"lineNumber":105,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":106,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":107,"author":{"gitId":"p-xp"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":108,"author":{"gitId":"p-xp"},"content":"    public Iterator\u003cGuest\u003e iterator() {","lastModifiedDate":"2023-10-07"},{"lineNumber":109,"author":{"gitId":"p-xp"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-10-07"},{"lineNumber":110,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":112,"author":{"gitId":"p-xp"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"p-xp"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-07"},{"lineNumber":114,"author":{"gitId":"p-xp"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-07"},{"lineNumber":115,"author":{"gitId":"p-xp"},"content":"            return true;","lastModifiedDate":"2023-10-07"},{"lineNumber":116,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":117,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":118,"author":{"gitId":"p-xp"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-07"},{"lineNumber":119,"author":{"gitId":"p-xp"},"content":"        if (!(other instanceof UniqueGuestList)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":120,"author":{"gitId":"p-xp"},"content":"            return false;","lastModifiedDate":"2023-10-07"},{"lineNumber":121,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":122,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":123,"author":{"gitId":"p-xp"},"content":"        UniqueGuestList otherUniqueGuestList \u003d (UniqueGuestList) other;","lastModifiedDate":"2023-10-07"},{"lineNumber":124,"author":{"gitId":"p-xp"},"content":"        return internalList.equals(otherUniqueGuestList.internalList);","lastModifiedDate":"2023-10-07"},{"lineNumber":125,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":126,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":127,"author":{"gitId":"p-xp"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":128,"author":{"gitId":"p-xp"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-07"},{"lineNumber":129,"author":{"gitId":"p-xp"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-10-07"},{"lineNumber":130,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":131,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":132,"author":{"gitId":"p-xp"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":133,"author":{"gitId":"p-xp"},"content":"    public String toString() {","lastModifiedDate":"2023-10-07"},{"lineNumber":134,"author":{"gitId":"p-xp"},"content":"        return internalList.toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":135,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":136,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":137,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":138,"author":{"gitId":"p-xp"},"content":"     * Returns true if {@code guests} contains only unique guests.","lastModifiedDate":"2023-10-07"},{"lineNumber":139,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":140,"author":{"gitId":"p-xp"},"content":"    private boolean guestsAreUnique(List\u003cGuest\u003e guests) {","lastModifiedDate":"2023-10-07"},{"lineNumber":141,"author":{"gitId":"p-xp"},"content":"        for (int i \u003d 0; i \u003c guests.size() - 1; i++) {","lastModifiedDate":"2023-10-07"},{"lineNumber":142,"author":{"gitId":"p-xp"},"content":"            for (int j \u003d i + 1; j \u003c guests.size(); j++) {","lastModifiedDate":"2023-10-07"},{"lineNumber":143,"author":{"gitId":"p-xp"},"content":"                if (guests.get(i).isSamePerson(guests.get(j))) {","lastModifiedDate":"2023-10-07"},{"lineNumber":144,"author":{"gitId":"p-xp"},"content":"                    return false;","lastModifiedDate":"2023-10-07"},{"lineNumber":145,"author":{"gitId":"p-xp"},"content":"                }","lastModifiedDate":"2023-10-07"},{"lineNumber":146,"author":{"gitId":"p-xp"},"content":"            }","lastModifiedDate":"2023-10-07"},{"lineNumber":147,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":148,"author":{"gitId":"p-xp"},"content":"        return true;","lastModifiedDate":"2023-10-07"},{"lineNumber":149,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":150,"author":{"gitId":"p-xp"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"p-xp":150}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"    // use this observable list so that this list will notify the FX when changes are made and allow for event listeners","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (!(other instanceof UniquePersonList)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        UniquePersonList otherUniquePersonList \u003d (UniquePersonList) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return internalList.equals(otherUniquePersonList.internalList);","lastModifiedDate":"2023-07-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return internalList.toString();","lastModifiedDate":"2019-02-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"wasjoe1":1,"-":150}},{"path":"src/main/java/seedu/address/model/person/UniqueVendorList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import java.util.List;","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.DuplicateVendorException;","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.VendorNotFoundException;","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":" * A list of vendors that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":" * A vendor is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":" * vendors uses Person#isSamePerson(Person) for equality so as to ensure that the vendor being added or updated is","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":" * unique in terms of identity in the UniqueVendorList. However, the removal of a vendor uses Vendor#equals(Object) so","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":" * as to ensure that the vendor with exactly the same fields will be removed.","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":" *","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":" *","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"public class UniqueVendorList implements Iterable\u003cVendor\u003e {","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    private final ObservableList\u003cVendor\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    private final ObservableList\u003cVendor\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"     * Returns true if the list contains an equivalent vendor as the given argument.","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"    public boolean contains(Vendor toCheck) {","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"     * Adds a vendor to the list.","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"     * The vendor must not already exist in the list.","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"    public void add(Vendor toAdd) {","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"            throw new DuplicateVendorException();","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"     * Replaces the vendor {@code target} in the list with {@code editedVendor}.","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"     * The vendor identity of {@code editedVendor} must not be the same as another existing vendor in the list.","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"    public void setVendor(Vendor target, Vendor editedVendor) {","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"        requireAllNonNull(target, editedVendor);","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"            throw new VendorNotFoundException();","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"        if (!target.isSamePerson(editedVendor) \u0026\u0026 contains(editedVendor)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"            throw new DuplicateVendorException();","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"        internalList.set(index, editedVendor);","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"     * Removes the equivalent vendor from the list.","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"     * The vendor must exist in the list.","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"    public void remove(Vendor toRemove) {","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"            throw new VendorNotFoundException();","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"    public void setVendors(UniqueVendorList replacement) {","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"     * Replaces the contents of this list with {@code vendors}.","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"     * {@code vendors} must not contain duplicate vendors.","lastModifiedDate":"2023-10-06"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"    public void setVendors(List\u003cVendor\u003e vendors) {","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"        requireAllNonNull(vendors);","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"        if (!vendorsAreUnique(vendors)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"            throw new DuplicateVendorException();","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":97,"author":{"gitId":"samuelim01"},"content":"        internalList.setAll(vendors);","lastModifiedDate":"2023-10-06"},{"lineNumber":98,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":99,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":100,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":101,"author":{"gitId":"samuelim01"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-10-06"},{"lineNumber":102,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":103,"author":{"gitId":"samuelim01"},"content":"    public ObservableList\u003cVendor\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-06"},{"lineNumber":104,"author":{"gitId":"samuelim01"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-10-06"},{"lineNumber":105,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":106,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":107,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-06"},{"lineNumber":108,"author":{"gitId":"samuelim01"},"content":"    public Iterator\u003cVendor\u003e iterator() {","lastModifiedDate":"2023-10-06"},{"lineNumber":109,"author":{"gitId":"samuelim01"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-10-06"},{"lineNumber":110,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":111,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":112,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-06"},{"lineNumber":113,"author":{"gitId":"samuelim01"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-06"},{"lineNumber":114,"author":{"gitId":"samuelim01"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-06"},{"lineNumber":115,"author":{"gitId":"samuelim01"},"content":"            return true;","lastModifiedDate":"2023-10-06"},{"lineNumber":116,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":117,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":118,"author":{"gitId":"samuelim01"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-06"},{"lineNumber":119,"author":{"gitId":"samuelim01"},"content":"        if (!(other instanceof UniqueVendorList)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":120,"author":{"gitId":"samuelim01"},"content":"            return false;","lastModifiedDate":"2023-10-06"},{"lineNumber":121,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":122,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":123,"author":{"gitId":"samuelim01"},"content":"        UniqueVendorList otherUniqueVendorList \u003d (UniqueVendorList) other;","lastModifiedDate":"2023-10-06"},{"lineNumber":124,"author":{"gitId":"samuelim01"},"content":"        return internalList.equals(otherUniqueVendorList.internalList);","lastModifiedDate":"2023-10-06"},{"lineNumber":125,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":126,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":127,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-06"},{"lineNumber":128,"author":{"gitId":"samuelim01"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-06"},{"lineNumber":129,"author":{"gitId":"samuelim01"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-10-06"},{"lineNumber":130,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":131,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":132,"author":{"gitId":"samuelim01"},"content":"    @Override","lastModifiedDate":"2023-10-06"},{"lineNumber":133,"author":{"gitId":"samuelim01"},"content":"    public String toString() {","lastModifiedDate":"2023-10-06"},{"lineNumber":134,"author":{"gitId":"samuelim01"},"content":"        return internalList.toString();","lastModifiedDate":"2023-10-06"},{"lineNumber":135,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":136,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":137,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":138,"author":{"gitId":"samuelim01"},"content":"     * Returns true if {@code vendors} contains only unique vendors.","lastModifiedDate":"2023-10-06"},{"lineNumber":139,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":140,"author":{"gitId":"samuelim01"},"content":"    private boolean vendorsAreUnique(List\u003cVendor\u003e vendors) {","lastModifiedDate":"2023-10-06"},{"lineNumber":141,"author":{"gitId":"samuelim01"},"content":"        for (int i \u003d 0; i \u003c vendors.size() - 1; i++) {","lastModifiedDate":"2023-10-06"},{"lineNumber":142,"author":{"gitId":"samuelim01"},"content":"            for (int j \u003d i + 1; j \u003c vendors.size(); j++) {","lastModifiedDate":"2023-10-06"},{"lineNumber":143,"author":{"gitId":"samuelim01"},"content":"                if (vendors.get(i).isSamePerson(vendors.get(j))) {","lastModifiedDate":"2023-10-06"},{"lineNumber":144,"author":{"gitId":"samuelim01"},"content":"                    return false;","lastModifiedDate":"2023-10-06"},{"lineNumber":145,"author":{"gitId":"samuelim01"},"content":"                }","lastModifiedDate":"2023-10-06"},{"lineNumber":146,"author":{"gitId":"samuelim01"},"content":"            }","lastModifiedDate":"2023-10-06"},{"lineNumber":147,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":148,"author":{"gitId":"samuelim01"},"content":"        return true;","lastModifiedDate":"2023-10-06"},{"lineNumber":149,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":150,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"samuelim01":150}},{"path":"src/main/java/seedu/address/model/person/Vendor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":" * Represents a Vendor in the address book.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"public class Vendor extends Person {","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"    public Vendor(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"        super(name, phone, email, address, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"     * Returns true if both vendors have the same identity and data fields.","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"     * This defines a stronger notion of equality between two vendors.","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"tllshan"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"tllshan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"tllshan"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"tllshan"},"content":"            return true;","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"tllshan"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"tllshan"},"content":"        if (!(other instanceof Vendor)) {","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"tllshan"},"content":"            return false;","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"tllshan"},"content":"        Vendor otherVendor \u003d (Vendor) other;","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"tllshan"},"content":"        return super.equals(otherVendor);","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"tllshan"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"tllshan"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"tllshan"},"content":"        return Objects.hash(getName(), getPhone(), getEmail(), getAddress(), getTags());","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"tllshan"},"content":"    @Override","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"tllshan"},"content":"    public String toString() {","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"tllshan"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"tllshan"},"content":"                .add(\"name\", getName())","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"tllshan"},"content":"                .add(\"phone\", getPhone())","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"tllshan"},"content":"                .add(\"email\", getEmail())","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"tllshan"},"content":"                .add(\"address\", getAddress())","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"tllshan"},"content":"                .add(\"tags\", getTags())","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"tllshan"},"content":"                .toString();","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"tllshan":58}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateGuestException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"p-xp"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"p-xp"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":" * Signals that the operation will result in duplicate Guests (Guests are considered duplicates if they have the same","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"p-xp"},"content":" * identity).","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"p-xp"},"content":"public class DuplicateGuestException extends RuntimeException {","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"p-xp"},"content":"    public DuplicateGuestException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"p-xp"},"content":"        super(\"Operation would result in duplicate guests\");","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"p-xp"},"content":"}","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"p-xp":12}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateVendorException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Signals that the operation will result in duplicate Vendors (Vendors are considered duplicates if they have the same","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" * identity).","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"public class DuplicateVendorException extends RuntimeException {","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"    public DuplicateVendorException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"        super(\"Operation would result in duplicate vendors\");","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"samuelim01":11}},{"path":"src/main/java/seedu/address/model/person/exceptions/GuestNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"p-xp"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"p-xp"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"p-xp"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":"public class GuestNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"p-xp":6}},{"path":"src/main/java/seedu/address/model/person/exceptions/VendorNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":" * Signals that the operation is unable to find the specified vendor.","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"public class VendorNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"samuelim01":6}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedGuest.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"p-xp"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"p-xp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"p-xp"},"content":"import java.util.List;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"p-xp"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"p-xp"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"p-xp"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.DietaryRequirements;","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.RsvpStatus;","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"p-xp"},"content":" * Jackson-friendly version of {@link Guest}.","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":"class JsonAdaptedGuest extends JsonAdaptedPerson {","lastModifiedDate":"2023-10-11"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"p-xp"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Guest\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"    private final String rsvpStatus;","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"    private final String dietaryRequirements;","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"p-xp"},"content":"     * Constructs a {@code JsonAdaptedGuest} with the given guest details.","lastModifiedDate":"2023-10-11"},{"lineNumber":33,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"p-xp"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"p-xp"},"content":"    public JsonAdaptedGuest(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"p-xp"},"content":"                            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"                            @JsonProperty(\"rsvpStatus\") String rsvpStatus,","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"p-xp"},"content":"                            @JsonProperty(\"dietaryRequirements\") String dietaryRequirements,","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"p-xp"},"content":"                            @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"p-xp"},"content":"        super(name, phone, email, address, tags);","lastModifiedDate":"2023-10-11"},{"lineNumber":41,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":42,"author":{"gitId":"p-xp"},"content":"        this.rsvpStatus \u003d rsvpStatus;","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"p-xp"},"content":"        this.dietaryRequirements \u003d dietaryRequirements;","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"p-xp"},"content":"     * Converts a given {@code Guest} into this class for Jackson use.","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"p-xp"},"content":"    public JsonAdaptedGuest(Guest source) {","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"p-xp"},"content":"        super(source);","lastModifiedDate":"2023-10-11"},{"lineNumber":51,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":52,"author":{"gitId":"p-xp"},"content":"        rsvpStatus \u003d source.getRsvpStatus().value;","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"p-xp"},"content":"        dietaryRequirements \u003d source.getDietaryRequirements().value;","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"p-xp"},"content":"     * Converts this Jackson-friendly adapted guest object into the model\u0027s {@code Guest} object.","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"p-xp"},"content":"     *","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"p-xp"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"p-xp"},"content":"    public Guest toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"p-xp"},"content":"        final List\u003cTag\u003e guestTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"p-xp"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"p-xp"},"content":"            guestTags.add(tag.toModelType());","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"p-xp"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"p-xp"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"p-xp"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"p-xp"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"p-xp"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":81,"author":{"gitId":"p-xp"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2023-10-07"},{"lineNumber":82,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"p-xp"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"p-xp"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":87,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":89,"author":{"gitId":"p-xp"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2023-10-07"},{"lineNumber":90,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"p-xp"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2023-10-07"},{"lineNumber":92,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2023-10-07"},{"lineNumber":93,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"p-xp"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":95,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":96,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"p-xp"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2023-10-07"},{"lineNumber":98,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":99,"author":{"gitId":"p-xp"},"content":"        if (rsvpStatus \u003d\u003d null) {","lastModifiedDate":"2023-10-07"},{"lineNumber":100,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-07"},{"lineNumber":101,"author":{"gitId":"p-xp"},"content":"                    RsvpStatus.class.getSimpleName()));","lastModifiedDate":"2023-10-07"},{"lineNumber":102,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":103,"author":{"gitId":"p-xp"},"content":"        if (!RsvpStatus.isValidRsvpStatus(rsvpStatus)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":104,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(RsvpStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":105,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":106,"author":{"gitId":"p-xp"},"content":"        final RsvpStatus modelRsvpStatus \u003d new RsvpStatus(rsvpStatus);","lastModifiedDate":"2023-10-07"},{"lineNumber":107,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":108,"author":{"gitId":"p-xp"},"content":"        if (dietaryRequirements \u003d\u003d null) {","lastModifiedDate":"2023-10-07"},{"lineNumber":109,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-07"},{"lineNumber":110,"author":{"gitId":"p-xp"},"content":"                    DietaryRequirements.class.getSimpleName()));","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":112,"author":{"gitId":"p-xp"},"content":"        if (!DietaryRequirements.isValidDietaryRequirement(dietaryRequirements)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"p-xp"},"content":"            throw new IllegalValueException(DietaryRequirements.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":114,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":115,"author":{"gitId":"p-xp"},"content":"        final DietaryRequirements modelDietaryRequirements \u003d new DietaryRequirements(dietaryRequirements);","lastModifiedDate":"2023-10-07"},{"lineNumber":116,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":117,"author":{"gitId":"p-xp"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(guestTags);","lastModifiedDate":"2023-10-07"},{"lineNumber":118,"author":{"gitId":"p-xp"},"content":"        return new Guest(modelName, modelPhone, modelEmail, modelAddress, modelRsvpStatus,","lastModifiedDate":"2023-10-07"},{"lineNumber":119,"author":{"gitId":"p-xp"},"content":"                modelDietaryRequirements, modelTags);","lastModifiedDate":"2023-10-07"},{"lineNumber":120,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":121,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":122,"author":{"gitId":"p-xp"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"p-xp":122}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    protected final String name;","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    protected final String phone;","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    protected final String email;","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    protected final String address;","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"    protected final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {","lastModifiedDate":"2023-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (tags !\u003d null) {","lastModifiedDate":"2023-01-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            this.tags.addAll(tags);","lastModifiedDate":"2023-01-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tags.addAll(source.getTags().stream()","lastModifiedDate":"2023-01-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-01-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"samuelim01":5,"-":104}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedVendor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import java.util.List;","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":" * Jackson-friendly version of {@link Vendor}.","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"class JsonAdaptedVendor extends JsonAdaptedPerson {","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Vendor\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"     * Constructs a {@code JsonAdaptedVendor} with the given person details.","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    public JsonAdaptedVendor(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"                             @JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"        super(name, phone, email, address, tags);","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"     * Converts a given {@code Vendor} into this class for Jackson use.","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    public JsonAdaptedVendor(Vendor source) {","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"        super(source);","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Vendor} object.","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"    public Vendor toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"        for (JsonAdaptedTag tag : tags) {","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"        return new Vendor(modelName, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"samuelim01":90}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"    public static final String MESSAGE_DUPLICATE_GUEST \u003d \"Guests list contains duplicate guest(s).\";","lastModifiedDate":"2023-10-11"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    public static final String MESSAGE_DUPLICATE_VENDOR \u003d \"Vendors list contains duplicate vendor(s).\";","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"    private final List\u003cJsonAdaptedGuest\u003e guests \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    private final List\u003cJsonAdaptedVendor\u003e vendors \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"p-xp"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons, guests and vendors.","lastModifiedDate":"2023-10-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"p-xp"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"                                       @JsonProperty(\"guests\") List\u003cJsonAdaptedGuest\u003e guests,","lastModifiedDate":"2023-10-11"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"                                       @JsonProperty(\"vendors\") List\u003cJsonAdaptedVendor\u003e vendors) {","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"p-xp"},"content":"        this.guests.addAll(guests);","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"        this.vendors.addAll(vendors);","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"p-xp"},"content":"        guests.addAll(source.getGuestList().stream().map(JsonAdaptedGuest::new).collect(Collectors.toList()));","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"        vendors.addAll(source.getVendorList().stream().map(JsonAdaptedVendor::new).collect(Collectors.toList()));","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"p-xp"},"content":"        for (JsonAdaptedGuest jsonAdaptedGuest : guests) {","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"p-xp"},"content":"            Guest guest \u003d jsonAdaptedGuest.toModelType();","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"p-xp"},"content":"            if (addressBook.hasGuest(guest)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"p-xp"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_GUEST);","lastModifiedDate":"2023-10-11"},{"lineNumber":73,"author":{"gitId":"p-xp"},"content":"            }","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"p-xp"},"content":"            addressBook.addGuest(guest);","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"        for (JsonAdaptedVendor jsonAdaptedVendor : vendors) {","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"            Vendor vendor \u003d jsonAdaptedVendor.toModelType();","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"            if (addressBook.hasVendor(vendor)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_VENDOR);","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"            }","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"            addressBook.addVendor(vendor);","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"samuelim01":13,"p-xp":15,"-":58}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":154,"author":{"gitId":"samuelim01"},"content":"        public boolean hasGuest(Guest guest) {","lastModifiedDate":"2023-10-11"},{"lineNumber":155,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":156,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":157,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":158,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":159,"author":{"gitId":"samuelim01"},"content":"        public void deleteGuest(Guest target) {","lastModifiedDate":"2023-10-11"},{"lineNumber":160,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":161,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":162,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":163,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":164,"author":{"gitId":"samuelim01"},"content":"        public void addGuest(Guest guest) {","lastModifiedDate":"2023-10-11"},{"lineNumber":165,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":166,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":167,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":168,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":169,"author":{"gitId":"samuelim01"},"content":"        public void setGuest(Guest target, Guest editedGuest) {","lastModifiedDate":"2023-10-11"},{"lineNumber":170,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":171,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":172,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":173,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":174,"author":{"gitId":"samuelim01"},"content":"        public boolean hasVendor(Vendor vendor) {","lastModifiedDate":"2023-10-11"},{"lineNumber":175,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":176,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":177,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":178,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":179,"author":{"gitId":"samuelim01"},"content":"        public void deleteVendor(Vendor target) {","lastModifiedDate":"2023-10-11"},{"lineNumber":180,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":181,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":182,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":183,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":184,"author":{"gitId":"samuelim01"},"content":"        public void addVendor(Vendor vendor) {","lastModifiedDate":"2023-10-11"},{"lineNumber":185,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":186,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":187,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":188,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":189,"author":{"gitId":"samuelim01"},"content":"        public void setVendor(Vendor target, Vendor editedVendor) {","lastModifiedDate":"2023-10-11"},{"lineNumber":190,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":191,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":192,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":203,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":204,"author":{"gitId":"samuelim01"},"content":"        public ObservableList\u003cGuest\u003e getFilteredGuestList() {","lastModifiedDate":"2023-10-11"},{"lineNumber":205,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":206,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":207,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":208,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":209,"author":{"gitId":"samuelim01"},"content":"        public void updateFilteredGuestList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":210,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":211,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":212,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":213,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":214,"author":{"gitId":"samuelim01"},"content":"        public ObservableList\u003cVendor\u003e getFilteredVendorList() {","lastModifiedDate":"2023-10-11"},{"lineNumber":215,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":216,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":217,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":218,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-11"},{"lineNumber":219,"author":{"gitId":"samuelim01"},"content":"        public void updateFilteredVendorList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":220,"author":{"gitId":"samuelim01"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-11"},{"lineNumber":221,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-11"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":244,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":266,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"samuelim01":62,"-":204}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"    public static final String VALID_RSVP_STATUS_AMY \u003d \"no\";","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"p-xp"},"content":"    public static final String VALID_RSVP_STATUS_BOB \u003d \"unknown\";","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"p-xp"},"content":"    public static final String VALID_DIETARY_REQUIREMENTS_AMY \u003d \"none\";","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"p-xp"},"content":"    public static final String VALID_DIETARY_REQUIREMENTS_BOB \u003d \"no beef\";","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"p-xp":4,"-":128}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_vendor() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"wasjoe1"},"content":"        String input \u003d \"vendor list\"; // a valid command","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"wasjoe1"},"content":"        // no split between Vendor \u0026 Guest type, so just test that the output is a command","lastModifiedDate":"2023-10-08"},{"lineNumber":41,"author":{"gitId":"wasjoe1"},"content":"        Command command \u003d parser.parseCommand(input);","lastModifiedDate":"2023-10-08"},{"lineNumber":42,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(command instanceof Command, true);","lastModifiedDate":"2023-10-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_guest() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":47,"author":{"gitId":"wasjoe1"},"content":"        String input \u003d \"guest list\"; // a valid command","lastModifiedDate":"2023-10-08"},{"lineNumber":48,"author":{"gitId":"wasjoe1"},"content":"        // no split between Vendor \u0026 Guest type, so just test that the output is a command","lastModifiedDate":"2023-10-08"},{"lineNumber":49,"author":{"gitId":"wasjoe1"},"content":"        Command command \u003d parser.parseCommand(input);","lastModifiedDate":"2023-10-08"},{"lineNumber":50,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(command instanceof Command, true);","lastModifiedDate":"2023-10-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"wasjoe1":12,"-":106}},{"path":"src/test/java/seedu/address/logic/parser/GuestAddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"public class GuestAddCommandParserTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"    private GuestAddCommandParser parser \u003d new GuestAddCommandParser();","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"    // parse all field present test success","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"    // parse optional fields missing test success","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"    // parse compulsory fields missing test fail","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"    // parse invalid values test fail","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"wasjoe1":10}},{"path":"src/test/java/seedu/address/logic/parser/GuestCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestDeleteCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestListCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestViewCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"public class GuestCommandParserTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"    private static final String GUEST_ADD_PARSE_EXCEPTION_MSG \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"            \"Guest not created in GuestAddCommand due to un-evolved classes\";","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"    private GuestCommandParser parser \u003d new GuestCommandParser();","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_guestAdd() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"        String input \u003d \"add n/guest p/102391\";","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"        // expected type, expected string, executable","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"        assertThrows(ParseException.class, GUEST_ADD_PARSE_EXCEPTION_MSG, () -\u003e parser.parseCommand(input));","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"        // test for when Guest/Vendor/Person is evolved","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"        // Command command \u003d parser.parseCommand(input);","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"        // assertTrue(command instanceof GuestAddCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_guestDelete() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"        String input \u003d \"delete 1\";","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"        Command command \u003d parser.parseCommand(input);","lastModifiedDate":"2023-10-08"},{"lineNumber":37,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(command instanceof GuestDeleteCommand);","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":41,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_guestList() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":42,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(parser.parseCommand(\"list\") instanceof GuestListCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":44,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":45,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":46,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_view() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":47,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(parser.parseCommand(\"view 3\") instanceof GuestViewCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":49,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":50,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":51,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":52,"author":{"gitId":"wasjoe1"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2023-10-08"},{"lineNumber":53,"author":{"gitId":"wasjoe1"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2023-10-08"},{"lineNumber":54,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":55,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":56,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":57,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":58,"author":{"gitId":"wasjoe1"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2023-10-08"},{"lineNumber":59,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"wasjoe1":60}},{"path":"src/test/java/seedu/address/logic/parser/GuestDeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestDeleteCommand;","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":" * outside of the GuestDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":" * same path through the GuestDeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"public class GuestDeleteCommandParserTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"    private GuestDeleteCommandParser parser \u003d new GuestDeleteCommandParser();","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"    public void parse_validArgs_returnsGuestDeleteCommand() throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(parser.parse(\"1\") instanceof GuestDeleteCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"        // code below invalid due to un-evolved GuestDeleteCommand (equals method)","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"        // assertParseSuccess(parser, \"1\", new GuestDeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"                GuestDeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"wasjoe1":36}},{"path":"src/test/java/seedu/address/logic/parser/GuestViewCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.GuestViewCommand;","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":" * outside of the GuestViewCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":" * same path through the GuestViewCommand, and therefore we test only one of them.","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"public class GuestViewCommandParserTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"    private GuestViewCommandParser parser \u003d new GuestViewCommandParser();","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"    public void parse_validArgs_returnsGuestViewCommand() throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(parser.parse(\"1\") instanceof GuestViewCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"        // code below invalid due to un-evolved VendorViewCommand (equals method)","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"        // assertParseSuccess(parser, \"1\", new GuestViewCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"                GuestViewCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"wasjoe1":36}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.DietaryRequirements;","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.model.person.RsvpStatus;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"    private static final String VALID_RSVP_YES \u003d \"yes\";","lastModifiedDate":"2023-10-08"},{"lineNumber":37,"author":{"gitId":"wasjoe1"},"content":"    private static final String VALID_RSVP_NO \u003d \"no\";","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"wasjoe1"},"content":"    private static final String VALID_RSVP_UNKNOWN \u003d \"unknown\";","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"wasjoe1"},"content":"    private static final String INVALID_RSVP \u003d \"gibberish\";","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"wasjoe1"},"content":"    private static final String VALID_DIETARY_REQUIREMENTS \u003d \"anything\";","lastModifiedDate":"2023-10-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":136,"author":{"gitId":"wasjoe1"},"content":"    public void parseRsvp_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":137,"author":{"gitId":"wasjoe1"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRsvp((String) null));","lastModifiedDate":"2023-10-08"},{"lineNumber":138,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":139,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":140,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":141,"author":{"gitId":"wasjoe1"},"content":"    public void parseRsvp_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":142,"author":{"gitId":"wasjoe1"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRsvp(INVALID_RSVP));","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":144,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":145,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":146,"author":{"gitId":"wasjoe1"},"content":"    public void parseRsvp_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":147,"author":{"gitId":"wasjoe1"},"content":"        String rsvpYesWithWhitespace \u003d WHITESPACE + VALID_RSVP_YES + WHITESPACE;","lastModifiedDate":"2023-10-08"},{"lineNumber":148,"author":{"gitId":"wasjoe1"},"content":"        String rsvpNoWithWhitespace \u003d WHITESPACE + VALID_RSVP_NO + WHITESPACE;","lastModifiedDate":"2023-10-08"},{"lineNumber":149,"author":{"gitId":"wasjoe1"},"content":"        String rsvpUnknownWithWhitespace \u003d WHITESPACE + VALID_RSVP_UNKNOWN + WHITESPACE;","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"wasjoe1"},"content":"        RsvpStatus expectedYesRsvp \u003d new RsvpStatus(VALID_RSVP_YES);","lastModifiedDate":"2023-10-08"},{"lineNumber":151,"author":{"gitId":"wasjoe1"},"content":"        RsvpStatus expectedNoRsvp \u003d new RsvpStatus(VALID_RSVP_NO);","lastModifiedDate":"2023-10-08"},{"lineNumber":152,"author":{"gitId":"wasjoe1"},"content":"        RsvpStatus expectedUnknownRsvp \u003d new RsvpStatus(VALID_RSVP_UNKNOWN);","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(expectedYesRsvp, ParserUtil.parseRsvp(rsvpYesWithWhitespace));","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(expectedNoRsvp, ParserUtil.parseRsvp(rsvpNoWithWhitespace));","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(expectedUnknownRsvp, ParserUtil.parseRsvp(rsvpUnknownWithWhitespace));","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":157,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":158,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":159,"author":{"gitId":"wasjoe1"},"content":"    public void parseRsvp_validValueWithoutWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":160,"author":{"gitId":"wasjoe1"},"content":"        RsvpStatus expectedYesRsvp \u003d new RsvpStatus(VALID_RSVP_YES);","lastModifiedDate":"2023-10-08"},{"lineNumber":161,"author":{"gitId":"wasjoe1"},"content":"        RsvpStatus expectedNoRsvp \u003d new RsvpStatus(VALID_RSVP_NO);","lastModifiedDate":"2023-10-08"},{"lineNumber":162,"author":{"gitId":"wasjoe1"},"content":"        RsvpStatus expectedUnknownRsvp \u003d new RsvpStatus(VALID_RSVP_UNKNOWN);","lastModifiedDate":"2023-10-12"},{"lineNumber":163,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(expectedYesRsvp, ParserUtil.parseRsvp(VALID_RSVP_YES));","lastModifiedDate":"2023-10-12"},{"lineNumber":164,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(expectedNoRsvp, ParserUtil.parseRsvp(VALID_RSVP_NO));","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(expectedUnknownRsvp, ParserUtil.parseRsvp(VALID_RSVP_UNKNOWN));","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":167,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":168,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":169,"author":{"gitId":"wasjoe1"},"content":"    public void parseDietary_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":170,"author":{"gitId":"wasjoe1"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDietary((String) null));","lastModifiedDate":"2023-10-08"},{"lineNumber":171,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":172,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":173,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":174,"author":{"gitId":"wasjoe1"},"content":"    public void parseDietary_validValueWithWhitespace_returnsDietaryRequirements() throws Exception {","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"wasjoe1"},"content":"        String dietaryRequirementsWithWhiteSpace \u003d WHITESPACE + VALID_DIETARY_REQUIREMENTS + WHITESPACE;","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"wasjoe1"},"content":"        DietaryRequirements expectedDietaryRequirements \u003d new DietaryRequirements(VALID_DIETARY_REQUIREMENTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(expectedDietaryRequirements, ParserUtil.parseDietary(dietaryRequirementsWithWhiteSpace));","lastModifiedDate":"2023-10-12"},{"lineNumber":178,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":179,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":180,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":181,"author":{"gitId":"wasjoe1"},"content":"    public void parseDietary_validValueWithoutWhitespace_returnsDietaryRequirements() throws Exception {","lastModifiedDate":"2023-10-12"},{"lineNumber":182,"author":{"gitId":"wasjoe1"},"content":"        DietaryRequirements expectedDietaryRequirements \u003d new DietaryRequirements(VALID_DIETARY_REQUIREMENTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":183,"author":{"gitId":"wasjoe1"},"content":"        assertEquals(expectedDietaryRequirements, ParserUtil.parseDietary(VALID_DIETARY_REQUIREMENTS));","lastModifiedDate":"2023-10-12"},{"lineNumber":184,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":185,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":254,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"wasjoe1":58,"-":196}},{"path":"src/test/java/seedu/address/logic/parser/VendorAddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"public class VendorAddCommandParserTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"    private VendorAddCommandParser parser \u003d new VendorAddCommandParser();","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"    // parse all field present test success","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"    // parse optional fields missing test success","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"    // parse compulsory fields missing test fail","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"    // parse invalid values test fail","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"wasjoe1":10}},{"path":"src/test/java/seedu/address/logic/parser/VendorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorDeleteCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorListCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorViewCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":"public class VendorCommandParserTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":"    private static final String VENDOR_ADD_PARSE_EXCEPTION_MSG \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"            \"Vendor not created in VendorAddCommand due to un-evolved classes\";","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"    private VendorCommandParser parser \u003d new VendorCommandParser();","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"    // test vendor add","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_vendorAdd() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"        String input \u003d \"add n/vendor p/102391\";","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"        // expected type, expected string, executable","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"        assertThrows(ParseException.class, VENDOR_ADD_PARSE_EXCEPTION_MSG, () -\u003e parser.parseCommand(input));","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"        // test for when Guest/Vendor/Person is evolved","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"        // Command command \u003d parser.parseCommand(input);","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"        // assertTrue(command instanceof VendorAddCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_vendorDelete() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"        String input \u003d \"delete 1\";","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"wasjoe1"},"content":"        Command command \u003d parser.parseCommand(input);","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(command instanceof VendorDeleteCommand);","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":41,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":42,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_vendorList() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":43,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(parser.parseCommand(\"list\") instanceof VendorListCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":45,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":46,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":47,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_view() throws Exception {","lastModifiedDate":"2023-10-08"},{"lineNumber":48,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(parser.parseCommand(\"view 3\") instanceof VendorViewCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":50,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":51,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":52,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":53,"author":{"gitId":"wasjoe1"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2023-10-08"},{"lineNumber":54,"author":{"gitId":"wasjoe1"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2023-10-08"},{"lineNumber":55,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":56,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":57,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":58,"author":{"gitId":"wasjoe1"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":59,"author":{"gitId":"wasjoe1"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":61,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"wasjoe1":61}},{"path":"src/test/java/seedu/address/logic/parser/VendorDeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorDeleteCommand;","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":" * outside of the VendorDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":" * same path through the VendorDeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"public class VendorDeleteCommandParserTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"    private VendorDeleteCommandParser parser \u003d new VendorDeleteCommandParser();","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"    public void parse_validArgs_returnsVendorDeleteCommand() throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(parser.parse(\"1\") instanceof VendorDeleteCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"        // code below invalid due to un-evolved VendorDeleteCommand (equals method)","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"        // assertParseSuccess(parser, \"1\", new VendorDeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"                VendorDeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"wasjoe1":36}},{"path":"src/test/java/seedu/address/logic/parser/VendorViewCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wasjoe1"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"wasjoe1"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"wasjoe1"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"wasjoe1"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.commands.VendorViewCommand;","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"wasjoe1"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"wasjoe1"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"wasjoe1"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"wasjoe1"},"content":" * outside of the VendorViewCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"wasjoe1"},"content":" * same path through the VendorViewCommand, and therefore we test only one of them.","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"wasjoe1"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"wasjoe1"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"wasjoe1"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"wasjoe1"},"content":"public class VendorViewCommandParserTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"wasjoe1"},"content":"    private VendorViewCommandParser parser \u003d new VendorViewCommandParser();","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"wasjoe1"},"content":"    public void parse_validArgs_returnsVendorViewCommand() throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"wasjoe1"},"content":"        assertTrue(parser.parse(\"1\") instanceof VendorViewCommand);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"wasjoe1"},"content":"        // code below invalid due to un-evolved VendorViewCommand (equals method)","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"wasjoe1"},"content":"        // assertParseSuccess(parser, \"1\", new VendorViewCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"wasjoe1"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"wasjoe1"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"wasjoe1"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"wasjoe1"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"wasjoe1"},"content":"             VendorViewCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"wasjoe1"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"wasjoe1"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"wasjoe1":36}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"p-xp"},"content":"import static seedu.address.testutil.TypicalGuests.GINA;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalVendors.ANNE;","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.exceptions.DuplicateGuestException;","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.DuplicateVendorException;","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.exceptions.GuestNotFoundException;","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"p-xp"},"content":"import seedu.address.testutil.GuestBuilder;","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"import seedu.address.testutil.VendorBuilder;","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"p-xp"},"content":"    // person-tests","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"p-xp"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e());","lastModifiedDate":"2023-10-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"p-xp"},"content":"    // guest-tests","lastModifiedDate":"2023-10-07"},{"lineNumber":99,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":100,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":101,"author":{"gitId":"p-xp"},"content":"    public void resetData_withDuplicateGuests_throwsDuplicateGuestException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":102,"author":{"gitId":"p-xp"},"content":"        // Two guests with the same identity fields","lastModifiedDate":"2023-10-07"},{"lineNumber":103,"author":{"gitId":"p-xp"},"content":"        Guest editedGina \u003d new GuestBuilder(GINA).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2023-10-07"},{"lineNumber":104,"author":{"gitId":"p-xp"},"content":"                .build();","lastModifiedDate":"2023-10-07"},{"lineNumber":105,"author":{"gitId":"p-xp"},"content":"        List\u003cGuest\u003e newGuests \u003d Arrays.asList(GINA, editedGina);","lastModifiedDate":"2023-10-07"},{"lineNumber":106,"author":{"gitId":"p-xp"},"content":"        AddressBookStub newData \u003d new AddressBookStub(new ArrayList\u003c\u003e(), newGuests, new ArrayList\u003c\u003e());","lastModifiedDate":"2023-10-11"},{"lineNumber":107,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":108,"author":{"gitId":"p-xp"},"content":"        assertThrows(DuplicateGuestException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2023-10-07"},{"lineNumber":109,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":110,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":112,"author":{"gitId":"p-xp"},"content":"    public void hasGuest_nullGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasGuest(null));","lastModifiedDate":"2023-10-07"},{"lineNumber":114,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":115,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":116,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":117,"author":{"gitId":"p-xp"},"content":"    public void hasGuest_guestNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-10-07"},{"lineNumber":118,"author":{"gitId":"p-xp"},"content":"        assertFalse(addressBook.hasGuest(GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":119,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":120,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":121,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":122,"author":{"gitId":"p-xp"},"content":"    public void hasGuest_guestInAddressBook_returnsTrue() {","lastModifiedDate":"2023-10-07"},{"lineNumber":123,"author":{"gitId":"p-xp"},"content":"        addressBook.addGuest(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":124,"author":{"gitId":"p-xp"},"content":"        assertTrue(addressBook.hasGuest(GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":125,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":126,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":127,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":128,"author":{"gitId":"p-xp"},"content":"    public void hasGuest_guestWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2023-10-07"},{"lineNumber":129,"author":{"gitId":"p-xp"},"content":"        addressBook.addGuest(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":130,"author":{"gitId":"p-xp"},"content":"        Guest editedGina \u003d new GuestBuilder(GINA).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2023-10-07"},{"lineNumber":131,"author":{"gitId":"p-xp"},"content":"                .build();","lastModifiedDate":"2023-10-07"},{"lineNumber":132,"author":{"gitId":"p-xp"},"content":"        assertTrue(addressBook.hasGuest(editedGina));","lastModifiedDate":"2023-10-07"},{"lineNumber":133,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":134,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":135,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":136,"author":{"gitId":"p-xp"},"content":"    public void setGuest_nullTargetGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":137,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.setGuest(null, GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":138,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":139,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":140,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":141,"author":{"gitId":"p-xp"},"content":"    public void setGuest_nullEditedGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":142,"author":{"gitId":"p-xp"},"content":"        addressBook.addGuest(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":143,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.setGuest(GINA, null));","lastModifiedDate":"2023-10-07"},{"lineNumber":144,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":145,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":146,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":147,"author":{"gitId":"p-xp"},"content":"    public void setGuest_targetGuestNotInList_throwsGuestNotFoundException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":148,"author":{"gitId":"p-xp"},"content":"        assertThrows(GuestNotFoundException.class, () -\u003e addressBook.setGuest(GINA, GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":149,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":150,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":151,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":152,"author":{"gitId":"p-xp"},"content":"    public void setGuest_editedGuestHasSameIdentity_success() {","lastModifiedDate":"2023-10-07"},{"lineNumber":153,"author":{"gitId":"p-xp"},"content":"        addressBook.addGuest(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":154,"author":{"gitId":"p-xp"},"content":"        Guest editedGina \u003d new GuestBuilder(GINA).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-07"},{"lineNumber":155,"author":{"gitId":"p-xp"},"content":"                .build();","lastModifiedDate":"2023-10-07"},{"lineNumber":156,"author":{"gitId":"p-xp"},"content":"        addressBook.setGuest(GINA, editedGina);","lastModifiedDate":"2023-10-07"},{"lineNumber":157,"author":{"gitId":"p-xp"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook();","lastModifiedDate":"2023-10-07"},{"lineNumber":158,"author":{"gitId":"p-xp"},"content":"        expectedAddressBook.addGuest(editedGina);","lastModifiedDate":"2023-10-07"},{"lineNumber":159,"author":{"gitId":"p-xp"},"content":"        assertEquals(expectedAddressBook, addressBook);","lastModifiedDate":"2023-10-07"},{"lineNumber":160,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":161,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":162,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":163,"author":{"gitId":"p-xp"},"content":"    public void removeGuest_nullGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":164,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.removeGuest(null));","lastModifiedDate":"2023-10-07"},{"lineNumber":165,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":166,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":167,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":168,"author":{"gitId":"p-xp"},"content":"    public void removeGuest_guestExists_success() {","lastModifiedDate":"2023-10-07"},{"lineNumber":169,"author":{"gitId":"p-xp"},"content":"        addressBook.addGuest(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":170,"author":{"gitId":"p-xp"},"content":"        addressBook.removeGuest(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":171,"author":{"gitId":"p-xp"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook();","lastModifiedDate":"2023-10-07"},{"lineNumber":172,"author":{"gitId":"p-xp"},"content":"        assertEquals(expectedAddressBook, addressBook);","lastModifiedDate":"2023-10-07"},{"lineNumber":173,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":174,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":175,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":176,"author":{"gitId":"p-xp"},"content":"    public void getGuestList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":177,"author":{"gitId":"p-xp"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getGuestList().remove(0));","lastModifiedDate":"2023-10-07"},{"lineNumber":178,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":179,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":180,"author":{"gitId":"p-xp"},"content":"    // vendor-tests","lastModifiedDate":"2023-10-11"},{"lineNumber":181,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":182,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":183,"author":{"gitId":"samuelim01"},"content":"    public void resetData_withDuplicateVendors_throwsDuplicateVendorException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":184,"author":{"gitId":"samuelim01"},"content":"        // Two vendors with the same identity fields","lastModifiedDate":"2023-10-06"},{"lineNumber":185,"author":{"gitId":"samuelim01"},"content":"        Vendor editedAnne \u003d new VendorBuilder(ANNE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-06"},{"lineNumber":186,"author":{"gitId":"samuelim01"},"content":"                .build();","lastModifiedDate":"2023-10-06"},{"lineNumber":187,"author":{"gitId":"samuelim01"},"content":"        List\u003cVendor\u003e newVendors \u003d Arrays.asList(ANNE, editedAnne);","lastModifiedDate":"2023-10-06"},{"lineNumber":188,"author":{"gitId":"p-xp"},"content":"        AddressBookStub newData \u003d new AddressBookStub(new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), newVendors);","lastModifiedDate":"2023-10-11"},{"lineNumber":189,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":190,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DuplicateVendorException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2023-10-06"},{"lineNumber":191,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":192,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":193,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":194,"author":{"gitId":"samuelim01"},"content":"    public void hasVendor_nullVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":195,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasVendor(null));","lastModifiedDate":"2023-10-06"},{"lineNumber":196,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":197,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":198,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":199,"author":{"gitId":"samuelim01"},"content":"    public void hasVendor_vendorNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-10-06"},{"lineNumber":200,"author":{"gitId":"samuelim01"},"content":"        assertFalse(addressBook.hasVendor(ANNE));","lastModifiedDate":"2023-10-06"},{"lineNumber":201,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":202,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":203,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":204,"author":{"gitId":"samuelim01"},"content":"    public void hasVendor_vendorInAddressBook_returnsTrue() {","lastModifiedDate":"2023-10-06"},{"lineNumber":205,"author":{"gitId":"samuelim01"},"content":"        addressBook.addVendor(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":206,"author":{"gitId":"samuelim01"},"content":"        assertTrue(addressBook.hasVendor(ANNE));","lastModifiedDate":"2023-10-06"},{"lineNumber":207,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":208,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":209,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":210,"author":{"gitId":"samuelim01"},"content":"    public void hasVendor_vendorWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2023-10-06"},{"lineNumber":211,"author":{"gitId":"samuelim01"},"content":"        addressBook.addVendor(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":212,"author":{"gitId":"samuelim01"},"content":"        Vendor editedAlice \u003d new VendorBuilder(ANNE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-06"},{"lineNumber":213,"author":{"gitId":"samuelim01"},"content":"                .build();","lastModifiedDate":"2023-10-06"},{"lineNumber":214,"author":{"gitId":"samuelim01"},"content":"        assertTrue(addressBook.hasVendor(editedAlice));","lastModifiedDate":"2023-10-06"},{"lineNumber":215,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":216,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":217,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":218,"author":{"gitId":"samuelim01"},"content":"    public void getVendorList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":219,"author":{"gitId":"samuelim01"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getVendorList().remove(0));","lastModifiedDate":"2023-10-06"},{"lineNumber":220,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":221,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":224,"author":{"gitId":"p-xp"},"content":"        String expected \u003d AddressBook.class.getCanonicalName()","lastModifiedDate":"2023-10-07"},{"lineNumber":225,"author":{"gitId":"p-xp"},"content":"                + \"{persons\u003d\" + addressBook.getPersonList()","lastModifiedDate":"2023-10-07"},{"lineNumber":226,"author":{"gitId":"p-xp"},"content":"                + \", guests\u003d\" + addressBook.getGuestList()","lastModifiedDate":"2023-10-11"},{"lineNumber":227,"author":{"gitId":"samuelim01"},"content":"                + \", vendors\u003d\" + addressBook.getVendorList() + \"}\";","lastModifiedDate":"2023-10-06"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        assertEquals(expected, addressBook.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":232,"author":{"gitId":"p-xp"},"content":"     * A stub ReadOnlyAddressBook whose persons list, guests list and vendors list can violate interface constraints.","lastModifiedDate":"2023-10-11"},{"lineNumber":233,"author":{"gitId":"samuelim01"},"content":"     * violate interface constraints.","lastModifiedDate":"2023-10-06"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":237,"author":{"gitId":"p-xp"},"content":"        private final ObservableList\u003cGuest\u003e guests \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-07"},{"lineNumber":238,"author":{"gitId":"samuelim01"},"content":"        private final ObservableList\u003cVendor\u003e vendors \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-06"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":240,"author":{"gitId":"p-xp"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cGuest\u003e guests, Collection\u003cVendor\u003e vendors) {","lastModifiedDate":"2023-10-11"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":242,"author":{"gitId":"p-xp"},"content":"            this.guests.setAll(guests);","lastModifiedDate":"2023-10-07"},{"lineNumber":243,"author":{"gitId":"samuelim01"},"content":"            this.vendors.setAll(vendors);","lastModifiedDate":"2023-10-06"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":250,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":251,"author":{"gitId":"p-xp"},"content":"        @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":252,"author":{"gitId":"p-xp"},"content":"        public ObservableList\u003cGuest\u003e getGuestList() {","lastModifiedDate":"2023-10-07"},{"lineNumber":253,"author":{"gitId":"p-xp"},"content":"            return guests;","lastModifiedDate":"2023-10-07"},{"lineNumber":254,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":255,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":256,"author":{"gitId":"samuelim01"},"content":"        @Override","lastModifiedDate":"2023-10-06"},{"lineNumber":257,"author":{"gitId":"samuelim01"},"content":"        public ObservableList\u003cVendor\u003e getVendorList() {","lastModifiedDate":"2023-10-06"},{"lineNumber":258,"author":{"gitId":"samuelim01"},"content":"            return vendors;","lastModifiedDate":"2023-10-06"},{"lineNumber":259,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":262,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"samuelim01":51,"p-xp":107,"-":104}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalGuests.GEORGE;","lastModifiedDate":"2023-10-11"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalGuests.GREG;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalVendors.ANNE;","lastModifiedDate":"2023-10-11"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalVendors.BRYAN;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.DuplicateGuestException;","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.DuplicateVendorException;","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.GuestNotFoundException;","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.VendorNotFoundException;","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"import seedu.address.testutil.GuestBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"import seedu.address.testutil.VendorBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"samuelim01"},"content":"    public void deletePerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deletePerson(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"samuelim01"},"content":"    public void deletePerson_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"samuelim01"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e modelManager.deletePerson(ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"samuelim01"},"content":"    public void deletePerson_existingPerson_deletesPerson() {","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"samuelim01"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"samuelim01"},"content":"        modelManager.deletePerson(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"samuelim01"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPerson(null, ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":131,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":132,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"samuelim01"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":134,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPerson(ALICE, null));","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":137,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"samuelim01"},"content":"    public void setPerson_targetPersonDoesNotExist_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"samuelim01"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e modelManager.setPerson(ALICE, ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":140,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"samuelim01"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"samuelim01"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":145,"author":{"gitId":"samuelim01"},"content":"        modelManager.setPerson(ALICE, ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":146,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"samuelim01"},"content":"        expectedModelManager.addPerson(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":148,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":149,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"samuelim01"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"samuelim01"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"samuelim01"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"samuelim01"},"content":"        modelManager.setPerson(ALICE, editedAlice);","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"samuelim01"},"content":"        expectedModelManager.addPerson(editedAlice);","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":160,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":161,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"samuelim01"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2023-10-12"},{"lineNumber":163,"author":{"gitId":"samuelim01"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":164,"author":{"gitId":"samuelim01"},"content":"        modelManager.setPerson(ALICE, BOB);","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"samuelim01"},"content":"        expectedModelManager.addPerson(BOB);","lastModifiedDate":"2023-10-12"},{"lineNumber":167,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":168,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":169,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":170,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":171,"author":{"gitId":"samuelim01"},"content":"    public void setPerson_editedPersonIsNonUnique_throwsDuplicatePersonException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":172,"author":{"gitId":"samuelim01"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":173,"author":{"gitId":"samuelim01"},"content":"        modelManager.addPerson(BOB);","lastModifiedDate":"2023-10-12"},{"lineNumber":174,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e modelManager.setPerson(ALICE, BOB));","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":178,"author":{"gitId":"samuelim01"},"content":"    public void hasGuest_nullGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-11"},{"lineNumber":179,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasGuest(null));","lastModifiedDate":"2023-10-11"},{"lineNumber":180,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":181,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":182,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":183,"author":{"gitId":"samuelim01"},"content":"    public void hasGuest_guestNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-10-11"},{"lineNumber":184,"author":{"gitId":"samuelim01"},"content":"        assertFalse(modelManager.hasGuest(GEORGE));","lastModifiedDate":"2023-10-11"},{"lineNumber":185,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":186,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":187,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":188,"author":{"gitId":"samuelim01"},"content":"    public void hasGuest_guestInAddressBook_returnsTrue() {","lastModifiedDate":"2023-10-11"},{"lineNumber":189,"author":{"gitId":"samuelim01"},"content":"        modelManager.addGuest(GEORGE);","lastModifiedDate":"2023-10-11"},{"lineNumber":190,"author":{"gitId":"samuelim01"},"content":"        assertTrue(modelManager.hasGuest(GEORGE));","lastModifiedDate":"2023-10-11"},{"lineNumber":191,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":192,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":193,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":194,"author":{"gitId":"samuelim01"},"content":"    public void deleteGuest_nullGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":195,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteGuest(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":196,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":197,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":198,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":199,"author":{"gitId":"samuelim01"},"content":"    public void deleteGuest_vendorDoesNotExist_throwsGuestNotFoundException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":200,"author":{"gitId":"samuelim01"},"content":"        assertThrows(GuestNotFoundException.class, () -\u003e modelManager.deleteGuest(GEORGE));","lastModifiedDate":"2023-10-12"},{"lineNumber":201,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":202,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":203,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":204,"author":{"gitId":"samuelim01"},"content":"    public void deleteGuest_existingGuest_deletesGuest() {","lastModifiedDate":"2023-10-12"},{"lineNumber":205,"author":{"gitId":"samuelim01"},"content":"        modelManager.addGuest(GEORGE);","lastModifiedDate":"2023-10-12"},{"lineNumber":206,"author":{"gitId":"samuelim01"},"content":"        modelManager.deleteGuest(GEORGE);","lastModifiedDate":"2023-10-12"},{"lineNumber":207,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":208,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":209,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":210,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":211,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":212,"author":{"gitId":"samuelim01"},"content":"    public void setGuest_nullTargetGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":213,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuest(null, GEORGE));","lastModifiedDate":"2023-10-12"},{"lineNumber":214,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":215,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":216,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":217,"author":{"gitId":"samuelim01"},"content":"    public void setGuest_nullEditedGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":218,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuest(GEORGE, null));","lastModifiedDate":"2023-10-12"},{"lineNumber":219,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":220,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":221,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":222,"author":{"gitId":"samuelim01"},"content":"    public void setGuest_targetGuestDoesNotExist_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":223,"author":{"gitId":"samuelim01"},"content":"        assertThrows(GuestNotFoundException.class, () -\u003e modelManager.setGuest(GEORGE, GEORGE));","lastModifiedDate":"2023-10-12"},{"lineNumber":224,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":225,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":226,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":227,"author":{"gitId":"samuelim01"},"content":"    public void setGuest_editedGuestIsSameGuest_success() {","lastModifiedDate":"2023-10-12"},{"lineNumber":228,"author":{"gitId":"samuelim01"},"content":"        modelManager.addGuest(GEORGE);","lastModifiedDate":"2023-10-12"},{"lineNumber":229,"author":{"gitId":"samuelim01"},"content":"        modelManager.setGuest(GEORGE, GEORGE);","lastModifiedDate":"2023-10-12"},{"lineNumber":230,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":231,"author":{"gitId":"samuelim01"},"content":"        expectedModelManager.addGuest(GEORGE);","lastModifiedDate":"2023-10-12"},{"lineNumber":232,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":233,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":234,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":235,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":236,"author":{"gitId":"samuelim01"},"content":"    public void setGuest_editedGuestHasSameIdentity_success() {","lastModifiedDate":"2023-10-12"},{"lineNumber":237,"author":{"gitId":"samuelim01"},"content":"        modelManager.addGuest(GEORGE);","lastModifiedDate":"2023-10-12"},{"lineNumber":238,"author":{"gitId":"samuelim01"},"content":"        Guest editedGeorge \u003d new GuestBuilder(GEORGE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":239,"author":{"gitId":"samuelim01"},"content":"        modelManager.setGuest(GEORGE, editedGeorge);","lastModifiedDate":"2023-10-12"},{"lineNumber":240,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":241,"author":{"gitId":"samuelim01"},"content":"        expectedModelManager.addGuest(editedGeorge);","lastModifiedDate":"2023-10-12"},{"lineNumber":242,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":243,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":244,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":245,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":246,"author":{"gitId":"samuelim01"},"content":"    public void setGuest_editedGuestHasDifferentIdentity_success() {","lastModifiedDate":"2023-10-12"},{"lineNumber":247,"author":{"gitId":"samuelim01"},"content":"        modelManager.addGuest(GEORGE);","lastModifiedDate":"2023-10-12"},{"lineNumber":248,"author":{"gitId":"samuelim01"},"content":"        modelManager.setGuest(GEORGE, GREG);","lastModifiedDate":"2023-10-12"},{"lineNumber":249,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":250,"author":{"gitId":"samuelim01"},"content":"        expectedModelManager.addGuest(GREG);","lastModifiedDate":"2023-10-12"},{"lineNumber":251,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":252,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":253,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":254,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":255,"author":{"gitId":"samuelim01"},"content":"    public void setGuest_editedGuestIsNonUnique_throwsDuplicateGuestException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":256,"author":{"gitId":"samuelim01"},"content":"        modelManager.addGuest(GEORGE);","lastModifiedDate":"2023-10-12"},{"lineNumber":257,"author":{"gitId":"samuelim01"},"content":"        modelManager.addGuest(GREG);","lastModifiedDate":"2023-10-12"},{"lineNumber":258,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DuplicateGuestException.class, () -\u003e modelManager.setGuest(GEORGE, GREG));","lastModifiedDate":"2023-10-12"},{"lineNumber":259,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":260,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":261,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":262,"author":{"gitId":"samuelim01"},"content":"    public void hasVendor_nullVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-11"},{"lineNumber":263,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasVendor(null));","lastModifiedDate":"2023-10-11"},{"lineNumber":264,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":265,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":266,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":267,"author":{"gitId":"samuelim01"},"content":"    public void hasVendor_vendorNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-10-11"},{"lineNumber":268,"author":{"gitId":"samuelim01"},"content":"        assertFalse(modelManager.hasVendor(ANNE));","lastModifiedDate":"2023-10-11"},{"lineNumber":269,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":270,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":271,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":272,"author":{"gitId":"samuelim01"},"content":"    public void hasVendor_vendorInAddressBook_returnsTrue() {","lastModifiedDate":"2023-10-11"},{"lineNumber":273,"author":{"gitId":"samuelim01"},"content":"        modelManager.addVendor(ANNE);","lastModifiedDate":"2023-10-11"},{"lineNumber":274,"author":{"gitId":"samuelim01"},"content":"        assertTrue(modelManager.hasVendor(ANNE));","lastModifiedDate":"2023-10-11"},{"lineNumber":275,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":276,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":277,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":278,"author":{"gitId":"samuelim01"},"content":"    public void deleteVendor_nullVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":279,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteVendor(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":280,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":281,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":282,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":283,"author":{"gitId":"samuelim01"},"content":"    public void deleteVendor_vendorDoesNotExist_throwsVendorNotFoundException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":284,"author":{"gitId":"samuelim01"},"content":"        assertThrows(VendorNotFoundException.class, () -\u003e modelManager.deleteVendor(ANNE));","lastModifiedDate":"2023-10-12"},{"lineNumber":285,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":286,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":287,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":288,"author":{"gitId":"samuelim01"},"content":"    public void deleteVendor_existingVendor_deletesVendor() {","lastModifiedDate":"2023-10-12"},{"lineNumber":289,"author":{"gitId":"samuelim01"},"content":"        modelManager.addVendor(ANNE);","lastModifiedDate":"2023-10-12"},{"lineNumber":290,"author":{"gitId":"samuelim01"},"content":"        modelManager.deleteVendor(ANNE);","lastModifiedDate":"2023-10-12"},{"lineNumber":291,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":292,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":293,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":294,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":295,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":296,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_nullTargetVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":297,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setVendor(null, ANNE));","lastModifiedDate":"2023-10-12"},{"lineNumber":298,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":299,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":300,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":301,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_nullEditedVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":302,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setVendor(ANNE, null));","lastModifiedDate":"2023-10-12"},{"lineNumber":303,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":304,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":305,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":306,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_targetVendorDoesNotExist_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":307,"author":{"gitId":"samuelim01"},"content":"        assertThrows(VendorNotFoundException.class, () -\u003e modelManager.setVendor(ANNE, ANNE));","lastModifiedDate":"2023-10-12"},{"lineNumber":308,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":309,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":310,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":311,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_editedVendorIsSameVendor_success() {","lastModifiedDate":"2023-10-12"},{"lineNumber":312,"author":{"gitId":"samuelim01"},"content":"        modelManager.addVendor(ANNE);","lastModifiedDate":"2023-10-12"},{"lineNumber":313,"author":{"gitId":"samuelim01"},"content":"        modelManager.setVendor(ANNE, ANNE);","lastModifiedDate":"2023-10-12"},{"lineNumber":314,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":315,"author":{"gitId":"samuelim01"},"content":"        expectedModelManager.addVendor(ANNE);","lastModifiedDate":"2023-10-12"},{"lineNumber":316,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":317,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":318,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":319,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":320,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_editedVendorHasSameIdentity_success() {","lastModifiedDate":"2023-10-12"},{"lineNumber":321,"author":{"gitId":"samuelim01"},"content":"        modelManager.addVendor(ANNE);","lastModifiedDate":"2023-10-12"},{"lineNumber":322,"author":{"gitId":"samuelim01"},"content":"        Vendor editedAnne \u003d new VendorBuilder(ANNE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":323,"author":{"gitId":"samuelim01"},"content":"        modelManager.setVendor(ANNE, editedAnne);","lastModifiedDate":"2023-10-12"},{"lineNumber":324,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":325,"author":{"gitId":"samuelim01"},"content":"        expectedModelManager.addVendor(editedAnne);","lastModifiedDate":"2023-10-12"},{"lineNumber":326,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":327,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":328,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":329,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":330,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_editedVendorHasDifferentIdentity_success() {","lastModifiedDate":"2023-10-12"},{"lineNumber":331,"author":{"gitId":"samuelim01"},"content":"        modelManager.addVendor(ANNE);","lastModifiedDate":"2023-10-12"},{"lineNumber":332,"author":{"gitId":"samuelim01"},"content":"        modelManager.setVendor(ANNE, BRYAN);","lastModifiedDate":"2023-10-12"},{"lineNumber":333,"author":{"gitId":"samuelim01"},"content":"        ModelManager expectedModelManager \u003d new ModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":334,"author":{"gitId":"samuelim01"},"content":"        expectedModelManager.addVendor(BRYAN);","lastModifiedDate":"2023-10-12"},{"lineNumber":335,"author":{"gitId":"samuelim01"},"content":"        assertEquals(modelManager, expectedModelManager);","lastModifiedDate":"2023-10-12"},{"lineNumber":336,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":337,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":338,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":339,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_editedVendorIsNonUnique_throwsDuplicateVendorException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":340,"author":{"gitId":"samuelim01"},"content":"        modelManager.addVendor(ANNE);","lastModifiedDate":"2023-10-12"},{"lineNumber":341,"author":{"gitId":"samuelim01"},"content":"        modelManager.addVendor(BRYAN);","lastModifiedDate":"2023-10-12"},{"lineNumber":342,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DuplicateVendorException.class, () -\u003e modelManager.setVendor(ANNE, BRYAN));","lastModifiedDate":"2023-10-12"},{"lineNumber":343,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":344,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":350,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":351,"author":{"gitId":"samuelim01"},"content":"    public void getFilteredGuestList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-11"},{"lineNumber":352,"author":{"gitId":"samuelim01"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredGuestList().remove(0));","lastModifiedDate":"2023-10-11"},{"lineNumber":353,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":354,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":355,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":356,"author":{"gitId":"samuelim01"},"content":"    public void getFilteredVendorList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-11"},{"lineNumber":357,"author":{"gitId":"samuelim01"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredVendorList().remove(0));","lastModifiedDate":"2023-10-11"},{"lineNumber":358,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":359,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":362,"author":{"gitId":"samuelim01"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder()","lastModifiedDate":"2023-10-12"},{"lineNumber":363,"author":{"gitId":"samuelim01"},"content":"                .withPerson(ALICE).withPerson(BENSON)","lastModifiedDate":"2023-10-12"},{"lineNumber":364,"author":{"gitId":"samuelim01"},"content":"                .withGuest(GEORGE).withGuest(GREG)","lastModifiedDate":"2023-10-12"},{"lineNumber":365,"author":{"gitId":"samuelim01"},"content":"                .withVendor(ANNE).withVendor(BRYAN)","lastModifiedDate":"2023-10-12"},{"lineNumber":366,"author":{"gitId":"samuelim01"},"content":"                .build();","lastModifiedDate":"2023-10-12"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":368,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":370,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":378,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":382,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":387,"author":{"gitId":"samuelim01"},"content":"        // different person filteredList -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":388,"author":{"gitId":"samuelim01"},"content":"        String[] personKeywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2023-10-12"},{"lineNumber":389,"author":{"gitId":"samuelim01"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(personKeywords)));","lastModifiedDate":"2023-10-12"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":395,"author":{"gitId":"samuelim01"},"content":"        // different guest filteredList -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":396,"author":{"gitId":"samuelim01"},"content":"        String[] guestKeywords \u003d GEORGE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2023-10-12"},{"lineNumber":397,"author":{"gitId":"samuelim01"},"content":"        modelManager.updateFilteredGuestList(new NameContainsKeywordsPredicate(Arrays.asList(guestKeywords)));","lastModifiedDate":"2023-10-12"},{"lineNumber":398,"author":{"gitId":"samuelim01"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2023-10-12"},{"lineNumber":399,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":400,"author":{"gitId":"samuelim01"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2023-10-12"},{"lineNumber":401,"author":{"gitId":"samuelim01"},"content":"        modelManager.updateFilteredGuestList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-12"},{"lineNumber":402,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":403,"author":{"gitId":"samuelim01"},"content":"        // different vendor filteredList -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":404,"author":{"gitId":"samuelim01"},"content":"        String[] vendorKeywords \u003d ANNE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2023-10-12"},{"lineNumber":405,"author":{"gitId":"samuelim01"},"content":"        modelManager.updateFilteredVendorList(new NameContainsKeywordsPredicate(Arrays.asList(vendorKeywords)));","lastModifiedDate":"2023-10-12"},{"lineNumber":406,"author":{"gitId":"samuelim01"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2023-10-12"},{"lineNumber":407,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":408,"author":{"gitId":"samuelim01"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2023-10-12"},{"lineNumber":409,"author":{"gitId":"samuelim01"},"content":"        modelManager.updateFilteredVendorList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-10-12"},{"lineNumber":410,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":412,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":413,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":415,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":416,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"samuelim01":288,"-":128}},{"path":"src/test/java/seedu/address/model/person/DietaryRequirementsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"keaganpzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-02"},{"lineNumber":2,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":3,"author":{"gitId":"keaganpzh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-02"},{"lineNumber":4,"author":{"gitId":"keaganpzh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":6,"author":{"gitId":"keaganpzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"keaganpzh"},"content":"/**","lastModifiedDate":"2023-10-02"},{"lineNumber":9,"author":{"gitId":"keaganpzh"},"content":" * Simple test class for DietaryRequirements.","lastModifiedDate":"2023-10-02"},{"lineNumber":10,"author":{"gitId":"keaganpzh"},"content":" *","lastModifiedDate":"2023-10-02"},{"lineNumber":11,"author":{"gitId":"keaganpzh"},"content":" * @author Keagan","lastModifiedDate":"2023-10-02"},{"lineNumber":12,"author":{"gitId":"keaganpzh"},"content":" * @version v1.2","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"keaganpzh"},"content":" */","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"keaganpzh"},"content":"public class DietaryRequirementsTest {","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":16,"author":{"gitId":"keaganpzh"},"content":"    @Test","lastModifiedDate":"2023-10-02"},{"lineNumber":17,"author":{"gitId":"keaganpzh"},"content":"    public void equals() {","lastModifiedDate":"2023-10-02"},{"lineNumber":18,"author":{"gitId":"keaganpzh"},"content":"        DietaryRequirements dr \u003d new DietaryRequirements(\"Halal\");","lastModifiedDate":"2023-10-02"},{"lineNumber":19,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":20,"author":{"gitId":"keaganpzh"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(dr.equals(dr));","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"keaganpzh"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"keaganpzh"},"content":"        DietaryRequirements drCopy \u003d new DietaryRequirements(dr.value);","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(dr.equals(drCopy));","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"keaganpzh"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-02"},{"lineNumber":28,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(dr.equals(1));","lastModifiedDate":"2023-10-02"},{"lineNumber":29,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":30,"author":{"gitId":"keaganpzh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-02"},{"lineNumber":31,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(dr.equals(null));","lastModifiedDate":"2023-10-02"},{"lineNumber":32,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"keaganpzh"},"content":"        // different dr -\u003e returns false","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"keaganpzh"},"content":"        DietaryRequirements differentDr \u003d new DietaryRequirements(\"Vegan\");","lastModifiedDate":"2023-10-02"},{"lineNumber":35,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(dr.equals(differentDr));","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"keaganpzh"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"keaganpzh":37}},{"path":"src/test/java/seedu/address/model/person/GuestTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"keaganpzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-02"},{"lineNumber":2,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":3,"author":{"gitId":"keaganpzh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"keaganpzh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"keaganpzh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-02"},{"lineNumber":6,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"keaganpzh"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"keaganpzh"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-02"},{"lineNumber":9,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":10,"author":{"gitId":"keaganpzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-02"},{"lineNumber":11,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":12,"author":{"gitId":"keaganpzh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"keaganpzh"},"content":"/**","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"keaganpzh"},"content":" * Simplified test class for Guest.","lastModifiedDate":"2023-10-02"},{"lineNumber":16,"author":{"gitId":"keaganpzh"},"content":" * More detailed tests to be written in the future.","lastModifiedDate":"2023-10-02"},{"lineNumber":17,"author":{"gitId":"keaganpzh"},"content":" *","lastModifiedDate":"2023-10-02"},{"lineNumber":18,"author":{"gitId":"keaganpzh"},"content":" * @author Keagan","lastModifiedDate":"2023-10-02"},{"lineNumber":19,"author":{"gitId":"keaganpzh"},"content":" * @version v1.2","lastModifiedDate":"2023-10-02"},{"lineNumber":20,"author":{"gitId":"keaganpzh"},"content":" */","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"keaganpzh"},"content":"public class GuestTest {","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"keaganpzh"},"content":"    @Test","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"keaganpzh"},"content":"    public void equals() {","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"keaganpzh"},"content":"        Name name \u003d new Name(\"Bob\");","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"keaganpzh"},"content":"        Phone phone \u003d new Phone(\"91234567\");","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"keaganpzh"},"content":"        Email email \u003d new Email(\"bob@bob.com\");","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"keaganpzh"},"content":"        Address address \u003d new Address(\"Blk 123\");","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"keaganpzh"},"content":"        DietaryRequirements dietaryRequirements \u003d new DietaryRequirements(\"Halal\");","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"keaganpzh"},"content":"        RsvpStatus rsvpStatus \u003d new RsvpStatus(\"yes\");","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"keaganpzh"},"content":"        Tag tag \u003d new Tag(\"friend\");","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"keaganpzh"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"keaganpzh"},"content":"        tags.add(tag);","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"keaganpzh"},"content":"        Guest guest \u003d new Guest(name, phone, email, address, rsvpStatus, dietaryRequirements, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"keaganpzh"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"keaganpzh"},"content":"        Person guestCopy \u003d new Guest(name, phone, email, address, rsvpStatus, dietaryRequirements, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(guest.equals(guestCopy));","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"keaganpzh"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(guest.equals(guest));","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"keaganpzh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(guest.equals(null));","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"keaganpzh"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(guest.equals(5));","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"keaganpzh"},"content":"    @Test","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"keaganpzh"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"keaganpzh"},"content":"        Name name \u003d new Name(\"Bob\");","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"keaganpzh"},"content":"        Phone phone \u003d new Phone(\"91234567\");","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"keaganpzh"},"content":"        Email email \u003d new Email(\"bob@bob.com\");","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"keaganpzh"},"content":"        Address address \u003d new Address(\"Blk 123\");","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"keaganpzh"},"content":"        DietaryRequirements dietaryRequirements \u003d new DietaryRequirements(\"Halal\");","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"keaganpzh"},"content":"        RsvpStatus rsvpStatus \u003d new RsvpStatus(\"yes\");","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"keaganpzh"},"content":"        Tag tag \u003d new Tag(\"friend\");","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"keaganpzh"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"keaganpzh"},"content":"        tags.add(tag);","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"keaganpzh"},"content":"        Guest guest \u003d new Guest(name, phone, email, address, rsvpStatus, dietaryRequirements, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":65,"author":{"gitId":"keaganpzh"},"content":"        String expected \u003d Guest.class.getCanonicalName() + \"{name\u003d\" + guest.getName() + \", phone\u003d\" + guest.getPhone()","lastModifiedDate":"2023-10-03"},{"lineNumber":66,"author":{"gitId":"keaganpzh"},"content":"                + \", email\u003d\" + guest.getEmail() + \", address\u003d\" + guest.getAddress()","lastModifiedDate":"2023-10-03"},{"lineNumber":67,"author":{"gitId":"keaganpzh"},"content":"                + \", rsvpStatus\u003d\" + guest.getRsvpStatus() + \", dietaryRequirements\u003d\" + guest.getDietaryRequirements()","lastModifiedDate":"2023-10-03"},{"lineNumber":68,"author":{"gitId":"keaganpzh"},"content":"                + \", tags\u003d\" + guest.getTags() + \"}\";","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"keaganpzh"},"content":"        assertEquals(expected, guest.toString());","lastModifiedDate":"2023-10-03"},{"lineNumber":70,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"keaganpzh"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"keaganpzh":71}},{"path":"src/test/java/seedu/address/model/person/RsvpStatusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"keaganpzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-02"},{"lineNumber":2,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":3,"author":{"gitId":"keaganpzh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-02"},{"lineNumber":4,"author":{"gitId":"keaganpzh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"keaganpzh"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-02"},{"lineNumber":6,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"keaganpzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":9,"author":{"gitId":"keaganpzh"},"content":"/**","lastModifiedDate":"2023-10-02"},{"lineNumber":10,"author":{"gitId":"keaganpzh"},"content":" * Test class for RsvpStatus.","lastModifiedDate":"2023-10-02"},{"lineNumber":11,"author":{"gitId":"keaganpzh"},"content":" *","lastModifiedDate":"2023-10-02"},{"lineNumber":12,"author":{"gitId":"keaganpzh"},"content":" * @author Keagan","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"keaganpzh"},"content":" * @version v1.2","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"keaganpzh"},"content":" */","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"keaganpzh"},"content":"public class RsvpStatusTest {","lastModifiedDate":"2023-10-02"},{"lineNumber":16,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":17,"author":{"gitId":"keaganpzh"},"content":"    @Test","lastModifiedDate":"2023-10-02"},{"lineNumber":18,"author":{"gitId":"keaganpzh"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-02"},{"lineNumber":19,"author":{"gitId":"keaganpzh"},"content":"        assertThrows(NullPointerException.class, () -\u003e new RsvpStatus(null));","lastModifiedDate":"2023-10-02"},{"lineNumber":20,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"keaganpzh"},"content":"    @Test","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"keaganpzh"},"content":"    public void constructor_invalidRsvpStatus_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"keaganpzh"},"content":"        String invalidRsvpStatus \u003d \"\";","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"keaganpzh"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new RsvpStatus(invalidRsvpStatus));","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":28,"author":{"gitId":"keaganpzh"},"content":"    @Test","lastModifiedDate":"2023-10-02"},{"lineNumber":29,"author":{"gitId":"keaganpzh"},"content":"    public void isValidRsvpStatus() {","lastModifiedDate":"2023-10-02"},{"lineNumber":30,"author":{"gitId":"keaganpzh"},"content":"        // null rsvp status","lastModifiedDate":"2023-10-02"},{"lineNumber":31,"author":{"gitId":"keaganpzh"},"content":"        assertThrows(NullPointerException.class, () -\u003e RsvpStatus.isValidRsvpStatus(null));","lastModifiedDate":"2023-10-02"},{"lineNumber":32,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"keaganpzh"},"content":"        // invalid rsvp status","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(RsvpStatus.isValidRsvpStatus(\"\")); // empty string","lastModifiedDate":"2023-10-02"},{"lineNumber":35,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(RsvpStatus.isValidRsvpStatus(\" \")); // spaces only","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(RsvpStatus.isValidRsvpStatus(\"yesno\")); // more than 1 word","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(RsvpStatus.isValidRsvpStatus(\"nonsense\")); // invalid keyword","lastModifiedDate":"2023-10-02"},{"lineNumber":38,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":39,"author":{"gitId":"keaganpzh"},"content":"        // valid rsvp status","lastModifiedDate":"2023-10-02"},{"lineNumber":40,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(RsvpStatus.isValidRsvpStatus(\"yes\"));","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(RsvpStatus.isValidRsvpStatus(\"no\"));","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(RsvpStatus.isValidRsvpStatus(\"Yes\")); // capitalised","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(RsvpStatus.isValidRsvpStatus(\"No\")); // capitalised","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(RsvpStatus.isValidRsvpStatus(\"unknown\"));","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(RsvpStatus.isValidRsvpStatus(\"Unknown\")); // capitalised","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":47,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":48,"author":{"gitId":"keaganpzh"},"content":"    @Test","lastModifiedDate":"2023-10-02"},{"lineNumber":49,"author":{"gitId":"keaganpzh"},"content":"    public void equals() {","lastModifiedDate":"2023-10-02"},{"lineNumber":50,"author":{"gitId":"keaganpzh"},"content":"        RsvpStatus rsvpStatus \u003d new RsvpStatus(\"yes\");","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":52,"author":{"gitId":"keaganpzh"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-02"},{"lineNumber":53,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(rsvpStatus.equals(new RsvpStatus(\"yes\")));","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":55,"author":{"gitId":"keaganpzh"},"content":"        // same values but capitalised -\u003e returns true","lastModifiedDate":"2023-10-02"},{"lineNumber":56,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(rsvpStatus.equals(new RsvpStatus(\"Yes\")));","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":58,"author":{"gitId":"keaganpzh"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-02"},{"lineNumber":59,"author":{"gitId":"keaganpzh"},"content":"        assertTrue(rsvpStatus.equals(rsvpStatus));","lastModifiedDate":"2023-10-02"},{"lineNumber":60,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":61,"author":{"gitId":"keaganpzh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-02"},{"lineNumber":62,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(rsvpStatus.equals(null));","lastModifiedDate":"2023-10-02"},{"lineNumber":63,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":64,"author":{"gitId":"keaganpzh"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-02"},{"lineNumber":65,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(rsvpStatus.equals(5.0f));","lastModifiedDate":"2023-10-02"},{"lineNumber":66,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":67,"author":{"gitId":"keaganpzh"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-02"},{"lineNumber":68,"author":{"gitId":"keaganpzh"},"content":"        assertFalse(rsvpStatus.equals(new RsvpStatus(\"no\")));","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":70,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":71,"author":{"gitId":"keaganpzh"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"keaganpzh":71}},{"path":"src/test/java/seedu/address/model/person/UniqueGuestListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"p-xp"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"p-xp"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"p-xp"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"p-xp"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"p-xp"},"content":"import static seedu.address.testutil.TypicalGuests.GINA;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"p-xp"},"content":"import static seedu.address.testutil.TypicalGuests.GREG;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"p-xp"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"import java.util.List;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"p-xp"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.exceptions.DuplicateGuestException;","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.exceptions.GuestNotFoundException;","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"p-xp"},"content":"import seedu.address.testutil.GuestBuilder;","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"p-xp"},"content":"public class UniqueGuestListTest {","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":"    private final UniqueGuestList uniqueGuestList \u003d new UniqueGuestList();","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":"    public void contains_nullGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueGuestList.contains(null));","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"p-xp"},"content":"    public void contains_guestNotInList_returnsFalse() {","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"p-xp"},"content":"        assertFalse(uniqueGuestList.contains(GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"    public void contains_guestInList_returnsTrue() {","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"p-xp"},"content":"        assertTrue(uniqueGuestList.contains(GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"p-xp"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"p-xp"},"content":"        Guest editedGina \u003d new GuestBuilder(GINA).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"p-xp"},"content":"                .build();","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"p-xp"},"content":"        assertTrue(uniqueGuestList.contains(editedGina));","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"p-xp"},"content":"    public void add_nullGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueGuestList.add(null));","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"p-xp"},"content":"    public void add_duplicateGuest_throwsDuplicateGuestException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"p-xp"},"content":"        assertThrows(DuplicateGuestException.class, () -\u003e uniqueGuestList.add(GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"p-xp"},"content":"    public void setGuest_nullTargetGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueGuestList.setGuest(null, GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"p-xp"},"content":"    public void setGuest_nullEditedGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueGuestList.setGuest(GINA, null));","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"p-xp"},"content":"    public void setGuest_targetGuestNotInList_throwsGuestNotFoundException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"p-xp"},"content":"        assertThrows(GuestNotFoundException.class, () -\u003e uniqueGuestList.setGuest(GINA, GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"p-xp"},"content":"    public void setGuest_editedGuestIsSameGuest_success() {","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.setGuest(GINA, GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"p-xp"},"content":"        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();","lastModifiedDate":"2023-10-07"},{"lineNumber":81,"author":{"gitId":"p-xp"},"content":"        expectedUniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":82,"author":{"gitId":"p-xp"},"content":"        assertEquals(expectedUniqueGuestList, uniqueGuestList);","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"p-xp"},"content":"    public void setGuest_editedGuestHasSameIdentity_success() {","lastModifiedDate":"2023-10-07"},{"lineNumber":87,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"p-xp"},"content":"        Guest editedAlice \u003d new GuestBuilder(GINA).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-07"},{"lineNumber":89,"author":{"gitId":"p-xp"},"content":"                .build();","lastModifiedDate":"2023-10-07"},{"lineNumber":90,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.setGuest(GINA, editedAlice);","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"p-xp"},"content":"        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();","lastModifiedDate":"2023-10-07"},{"lineNumber":92,"author":{"gitId":"p-xp"},"content":"        expectedUniqueGuestList.add(editedAlice);","lastModifiedDate":"2023-10-07"},{"lineNumber":93,"author":{"gitId":"p-xp"},"content":"        assertEquals(expectedUniqueGuestList, uniqueGuestList);","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":95,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":96,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"p-xp"},"content":"    public void setGuest_editedGuestHasDifferentIdentity_success() {","lastModifiedDate":"2023-10-07"},{"lineNumber":98,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":99,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.setGuest(GINA, GREG);","lastModifiedDate":"2023-10-07"},{"lineNumber":100,"author":{"gitId":"p-xp"},"content":"        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();","lastModifiedDate":"2023-10-07"},{"lineNumber":101,"author":{"gitId":"p-xp"},"content":"        expectedUniqueGuestList.add(GREG);","lastModifiedDate":"2023-10-07"},{"lineNumber":102,"author":{"gitId":"p-xp"},"content":"        assertEquals(expectedUniqueGuestList, uniqueGuestList);","lastModifiedDate":"2023-10-07"},{"lineNumber":103,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":104,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":105,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":106,"author":{"gitId":"p-xp"},"content":"    public void setGuest_editedGuestHasNonUniqueIdentity_throwsDuplicateGuestException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":107,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":108,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GREG);","lastModifiedDate":"2023-10-07"},{"lineNumber":109,"author":{"gitId":"p-xp"},"content":"        assertThrows(DuplicateGuestException.class, () -\u003e uniqueGuestList.setGuest(GINA, GREG));","lastModifiedDate":"2023-10-07"},{"lineNumber":110,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":112,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"p-xp"},"content":"    public void remove_nullGuest_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":114,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueGuestList.remove(null));","lastModifiedDate":"2023-10-07"},{"lineNumber":115,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":116,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":117,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":118,"author":{"gitId":"p-xp"},"content":"    public void remove_guestDoesNotExist_throwsGuestNotFoundException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":119,"author":{"gitId":"p-xp"},"content":"        assertThrows(GuestNotFoundException.class, () -\u003e uniqueGuestList.remove(GINA));","lastModifiedDate":"2023-10-07"},{"lineNumber":120,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":121,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":122,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":123,"author":{"gitId":"p-xp"},"content":"    public void remove_existingGuest_removesGuest() {","lastModifiedDate":"2023-10-07"},{"lineNumber":124,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":125,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.remove(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":126,"author":{"gitId":"p-xp"},"content":"        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();","lastModifiedDate":"2023-10-07"},{"lineNumber":127,"author":{"gitId":"p-xp"},"content":"        assertEquals(expectedUniqueGuestList, uniqueGuestList);","lastModifiedDate":"2023-10-07"},{"lineNumber":128,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":129,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":130,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":131,"author":{"gitId":"p-xp"},"content":"    public void setGuests_nullUniqueGuestList_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":132,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueGuestList.setGuests((UniqueGuestList) null));","lastModifiedDate":"2023-10-07"},{"lineNumber":133,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":134,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":135,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":136,"author":{"gitId":"p-xp"},"content":"    public void setGuests_uniqueGuestList_replacesOwnListWithProvidedUniqueGuestList() {","lastModifiedDate":"2023-10-07"},{"lineNumber":137,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":138,"author":{"gitId":"p-xp"},"content":"        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();","lastModifiedDate":"2023-10-07"},{"lineNumber":139,"author":{"gitId":"p-xp"},"content":"        expectedUniqueGuestList.add(GREG);","lastModifiedDate":"2023-10-07"},{"lineNumber":140,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.setGuests(expectedUniqueGuestList);","lastModifiedDate":"2023-10-07"},{"lineNumber":141,"author":{"gitId":"p-xp"},"content":"        assertEquals(expectedUniqueGuestList, uniqueGuestList);","lastModifiedDate":"2023-10-07"},{"lineNumber":142,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":143,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":144,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":145,"author":{"gitId":"p-xp"},"content":"    public void setGuests_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":146,"author":{"gitId":"p-xp"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueGuestList.setGuests((List\u003cGuest\u003e) null));","lastModifiedDate":"2023-10-07"},{"lineNumber":147,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":148,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":149,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":150,"author":{"gitId":"p-xp"},"content":"    public void setGuests_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2023-10-07"},{"lineNumber":151,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.add(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":152,"author":{"gitId":"p-xp"},"content":"        List\u003cGuest\u003e personList \u003d Collections.singletonList(GREG);","lastModifiedDate":"2023-10-07"},{"lineNumber":153,"author":{"gitId":"p-xp"},"content":"        uniqueGuestList.setGuests(personList);","lastModifiedDate":"2023-10-07"},{"lineNumber":154,"author":{"gitId":"p-xp"},"content":"        UniqueGuestList expectedUniqueGuestList \u003d new UniqueGuestList();","lastModifiedDate":"2023-10-07"},{"lineNumber":155,"author":{"gitId":"p-xp"},"content":"        expectedUniqueGuestList.add(GREG);","lastModifiedDate":"2023-10-07"},{"lineNumber":156,"author":{"gitId":"p-xp"},"content":"        assertEquals(expectedUniqueGuestList, uniqueGuestList);","lastModifiedDate":"2023-10-07"},{"lineNumber":157,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":158,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":159,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":160,"author":{"gitId":"p-xp"},"content":"    public void setGuests_listWithDuplicateGuests_throwsDuplicateGuestException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":161,"author":{"gitId":"p-xp"},"content":"        List\u003cGuest\u003e listWithDuplicateGuests \u003d Arrays.asList(GINA, GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":162,"author":{"gitId":"p-xp"},"content":"        assertThrows(DuplicateGuestException.class, () -\u003e uniqueGuestList.setGuests(listWithDuplicateGuests));","lastModifiedDate":"2023-10-07"},{"lineNumber":163,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":164,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":165,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":166,"author":{"gitId":"p-xp"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":167,"author":{"gitId":"p-xp"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2023-10-07"},{"lineNumber":168,"author":{"gitId":"p-xp"},"content":"                -\u003e uniqueGuestList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-10-07"},{"lineNumber":169,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":170,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":171,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":172,"author":{"gitId":"p-xp"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-07"},{"lineNumber":173,"author":{"gitId":"p-xp"},"content":"        assertEquals(uniqueGuestList.asUnmodifiableObservableList().toString(), uniqueGuestList.toString());","lastModifiedDate":"2023-10-07"},{"lineNumber":174,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":175,"author":{"gitId":"p-xp"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"p-xp":175}},{"path":"src/test/java/seedu/address/model/person/UniqueVendorListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalVendors.ANNE;","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalVendors.BOB;","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import java.util.List;","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.DuplicateVendorException;","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.exceptions.VendorNotFoundException;","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"import seedu.address.testutil.VendorBuilder;","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"public class UniqueVendorListTest {","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"    private final UniqueVendorList uniqueVendorList \u003d new UniqueVendorList();","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    public void contains_nullVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.contains(null));","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"    public void contains_vendorNotInList_returnsFalse() {","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"        assertFalse(uniqueVendorList.contains(ANNE));","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"    public void contains_vendorInList_returnsTrue() {","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"        assertTrue(uniqueVendorList.contains(ANNE));","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"    public void contains_vendorWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"        Vendor editedAnne \u003d new VendorBuilder(ANNE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"                .build();","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"        assertTrue(uniqueVendorList.contains(editedAnne));","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"    public void add_nullVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.add(null));","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"    public void add_duplicateVendor_throwsDuplicateVendorException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DuplicateVendorException.class, () -\u003e uniqueVendorList.add(ANNE));","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_nullTargetVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.setVendor(null, ANNE));","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_nullEditedVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.setVendor(ANNE, null));","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_targetVendorNotInList_throwsVendorNotFoundException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"        assertThrows(VendorNotFoundException.class, () -\u003e uniqueVendorList.setVendor(ANNE, ANNE));","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_editedVendorIsSameVendor_success() {","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.setVendor(ANNE, ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"        expectedUniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"        assertEquals(expectedUniqueVendorList, uniqueVendorList);","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_editedVendorHasSameIdentity_success() {","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"        Vendor editedAlice \u003d new VendorBuilder(ANNE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"                .build();","lastModifiedDate":"2023-10-06"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.setVendor(ANNE, editedAlice);","lastModifiedDate":"2023-10-06"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"        expectedUniqueVendorList.add(editedAlice);","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"        assertEquals(expectedUniqueVendorList, uniqueVendorList);","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":97,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_editedVendorHasDifferentIdentity_success() {","lastModifiedDate":"2023-10-06"},{"lineNumber":98,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":99,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.setVendor(ANNE, BOB);","lastModifiedDate":"2023-10-06"},{"lineNumber":100,"author":{"gitId":"samuelim01"},"content":"        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();","lastModifiedDate":"2023-10-06"},{"lineNumber":101,"author":{"gitId":"samuelim01"},"content":"        expectedUniqueVendorList.add(BOB);","lastModifiedDate":"2023-10-06"},{"lineNumber":102,"author":{"gitId":"samuelim01"},"content":"        assertEquals(expectedUniqueVendorList, uniqueVendorList);","lastModifiedDate":"2023-10-06"},{"lineNumber":103,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":104,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":105,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":106,"author":{"gitId":"samuelim01"},"content":"    public void setVendor_editedVendorHasNonUniqueIdentity_throwsDuplicateVendorException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":107,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":108,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(BOB);","lastModifiedDate":"2023-10-06"},{"lineNumber":109,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DuplicateVendorException.class, () -\u003e uniqueVendorList.setVendor(ANNE, BOB));","lastModifiedDate":"2023-10-06"},{"lineNumber":110,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":111,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":112,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":113,"author":{"gitId":"samuelim01"},"content":"    public void remove_nullVendor_throwsNullPointerException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":114,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.remove(null));","lastModifiedDate":"2023-10-06"},{"lineNumber":115,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":116,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":117,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":118,"author":{"gitId":"samuelim01"},"content":"    public void remove_vendorDoesNotExist_throwsVendorNotFoundException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":119,"author":{"gitId":"samuelim01"},"content":"        assertThrows(VendorNotFoundException.class, () -\u003e uniqueVendorList.remove(ANNE));","lastModifiedDate":"2023-10-06"},{"lineNumber":120,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":121,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":122,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":123,"author":{"gitId":"samuelim01"},"content":"    public void remove_existingVendor_removesVendor() {","lastModifiedDate":"2023-10-06"},{"lineNumber":124,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":125,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.remove(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":126,"author":{"gitId":"samuelim01"},"content":"        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();","lastModifiedDate":"2023-10-06"},{"lineNumber":127,"author":{"gitId":"samuelim01"},"content":"        assertEquals(expectedUniqueVendorList, uniqueVendorList);","lastModifiedDate":"2023-10-06"},{"lineNumber":128,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":129,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":130,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":131,"author":{"gitId":"samuelim01"},"content":"    public void setVendors_nullUniqueVendorList_throwsNullPointerException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":132,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.setVendors((UniqueVendorList) null));","lastModifiedDate":"2023-10-06"},{"lineNumber":133,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":134,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":135,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":136,"author":{"gitId":"samuelim01"},"content":"    public void setVendors_uniqueVendorList_replacesOwnListWithProvidedUniqueVendorList() {","lastModifiedDate":"2023-10-06"},{"lineNumber":137,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":138,"author":{"gitId":"samuelim01"},"content":"        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();","lastModifiedDate":"2023-10-06"},{"lineNumber":139,"author":{"gitId":"samuelim01"},"content":"        expectedUniqueVendorList.add(BOB);","lastModifiedDate":"2023-10-06"},{"lineNumber":140,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.setVendors(expectedUniqueVendorList);","lastModifiedDate":"2023-10-06"},{"lineNumber":141,"author":{"gitId":"samuelim01"},"content":"        assertEquals(expectedUniqueVendorList, uniqueVendorList);","lastModifiedDate":"2023-10-06"},{"lineNumber":142,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":143,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":144,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":145,"author":{"gitId":"samuelim01"},"content":"    public void setVendors_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":146,"author":{"gitId":"samuelim01"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueVendorList.setVendors((List\u003cVendor\u003e) null));","lastModifiedDate":"2023-10-06"},{"lineNumber":147,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":148,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":149,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":150,"author":{"gitId":"samuelim01"},"content":"    public void setVendors_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2023-10-06"},{"lineNumber":151,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.add(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":152,"author":{"gitId":"samuelim01"},"content":"        List\u003cVendor\u003e vendorList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2023-10-06"},{"lineNumber":153,"author":{"gitId":"samuelim01"},"content":"        uniqueVendorList.setVendors(vendorList);","lastModifiedDate":"2023-10-06"},{"lineNumber":154,"author":{"gitId":"samuelim01"},"content":"        UniqueVendorList expectedUniqueVendorList \u003d new UniqueVendorList();","lastModifiedDate":"2023-10-06"},{"lineNumber":155,"author":{"gitId":"samuelim01"},"content":"        expectedUniqueVendorList.add(BOB);","lastModifiedDate":"2023-10-06"},{"lineNumber":156,"author":{"gitId":"samuelim01"},"content":"        assertEquals(expectedUniqueVendorList, uniqueVendorList);","lastModifiedDate":"2023-10-06"},{"lineNumber":157,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":158,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":159,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":160,"author":{"gitId":"samuelim01"},"content":"    public void setVendors_listWithDuplicateVendors_throwsDuplicateVendorException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":161,"author":{"gitId":"samuelim01"},"content":"        List\u003cVendor\u003e listWithDuplicateVendors \u003d Arrays.asList(ANNE, ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":162,"author":{"gitId":"samuelim01"},"content":"        assertThrows(DuplicateVendorException.class, () -\u003e uniqueVendorList.setVendors(listWithDuplicateVendors));","lastModifiedDate":"2023-10-06"},{"lineNumber":163,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":164,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":165,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":166,"author":{"gitId":"samuelim01"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":167,"author":{"gitId":"samuelim01"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2023-10-06"},{"lineNumber":168,"author":{"gitId":"samuelim01"},"content":"            -\u003e uniqueVendorList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-10-06"},{"lineNumber":169,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":170,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":171,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":172,"author":{"gitId":"samuelim01"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-06"},{"lineNumber":173,"author":{"gitId":"samuelim01"},"content":"        assertEquals(uniqueVendorList.asUnmodifiableObservableList().toString(), uniqueVendorList.toString());","lastModifiedDate":"2023-10-06"},{"lineNumber":174,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":175,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"samuelim01":175}},{"path":"src/test/java/seedu/address/model/person/VendorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":" * Simplified test class for Vendor.","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":" * More detailed tests to be written in the future.","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":" *","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":" * @author Shannon","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":" * @version v1.2","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"public class VendorTest {","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"    @Test","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"    public void isSameVendor() {","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"        Name name \u003d new Name(\"ABC Catering\");","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"tllshan"},"content":"        Phone phone \u003d new Phone(\"61234567\");","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"tllshan"},"content":"        Email email \u003d new Email(\"abc@catering.com\");","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"tllshan"},"content":"        Address address \u003d new Address(\"Blk 123\");","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"tllshan"},"content":"        Tag tag \u003d new Tag(\"caterer\");","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"tllshan"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"tllshan"},"content":"        tags.add(tag);","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"tllshan"},"content":"        Vendor vendor \u003d new Vendor(name, phone, email, address, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"tllshan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"tllshan"},"content":"        assertTrue(vendor.isSamePerson(vendor));","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"tllshan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"tllshan"},"content":"        assertFalse(vendor.isSamePerson(null));","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"tllshan"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"tllshan"},"content":"        Phone phone1 \u003d new Phone(\"6123456\");","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"tllshan"},"content":"        Email email1 \u003d new Email(\"diff@catering.com\");","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"tllshan"},"content":"        Address address1 \u003d new Address(\"Blk 321\");","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"tllshan"},"content":"        Vendor editedVendor \u003d new Vendor(name, phone1, email1, address1, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"tllshan"},"content":"        assertTrue(vendor.isSamePerson(editedVendor));","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"tllshan"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"tllshan"},"content":"        Name name1 \u003d new Name(\"XYZ Catering\");","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"tllshan"},"content":"        editedVendor \u003d new Vendor(name1, phone, email, address, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"tllshan"},"content":"        assertFalse(vendor.isSamePerson(editedVendor));","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"tllshan"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"tllshan"},"content":"        Name name2 \u003d new Name(\"ABC CATERING\");","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"tllshan"},"content":"        editedVendor \u003d new Vendor(name2, phone, email, address, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"tllshan"},"content":"        assertFalse(vendor.isSamePerson(editedVendor));","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"tllshan"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"tllshan"},"content":"        Name name3 \u003d new Name(\"ABC Catering \");","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"tllshan"},"content":"        editedVendor \u003d new Vendor(name3, phone, email, address, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":63,"author":{"gitId":"tllshan"},"content":"        assertFalse(vendor.isSamePerson(editedVendor));","lastModifiedDate":"2023-10-03"},{"lineNumber":64,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":65,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":66,"author":{"gitId":"tllshan"},"content":"    @Test","lastModifiedDate":"2023-10-03"},{"lineNumber":67,"author":{"gitId":"tllshan"},"content":"    public void equals() {","lastModifiedDate":"2023-10-03"},{"lineNumber":68,"author":{"gitId":"tllshan"},"content":"        Name name \u003d new Name(\"ABC Catering\");","lastModifiedDate":"2023-10-03"},{"lineNumber":69,"author":{"gitId":"tllshan"},"content":"        Phone phone \u003d new Phone(\"61234567\");","lastModifiedDate":"2023-10-03"},{"lineNumber":70,"author":{"gitId":"tllshan"},"content":"        Email email \u003d new Email(\"abc@catering.com\");","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"tllshan"},"content":"        Address address \u003d new Address(\"Blk 123\");","lastModifiedDate":"2023-10-03"},{"lineNumber":72,"author":{"gitId":"tllshan"},"content":"        Tag tag \u003d new Tag(\"caterer\");","lastModifiedDate":"2023-10-03"},{"lineNumber":73,"author":{"gitId":"tllshan"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-03"},{"lineNumber":74,"author":{"gitId":"tllshan"},"content":"        tags.add(tag);","lastModifiedDate":"2023-10-03"},{"lineNumber":75,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":76,"author":{"gitId":"tllshan"},"content":"        Vendor vendor \u003d new Vendor(name, phone, email, address, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":77,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":78,"author":{"gitId":"tllshan"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-03"},{"lineNumber":79,"author":{"gitId":"tllshan"},"content":"        Person vendorCopy \u003d new Vendor(name, phone, email, address, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":80,"author":{"gitId":"tllshan"},"content":"        assertTrue(vendor.equals(vendorCopy));","lastModifiedDate":"2023-10-03"},{"lineNumber":81,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":82,"author":{"gitId":"tllshan"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-03"},{"lineNumber":83,"author":{"gitId":"tllshan"},"content":"        assertTrue(vendor.equals(vendor));","lastModifiedDate":"2023-10-03"},{"lineNumber":84,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":85,"author":{"gitId":"tllshan"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-03"},{"lineNumber":86,"author":{"gitId":"tllshan"},"content":"        assertFalse(vendor.equals(null));","lastModifiedDate":"2023-10-03"},{"lineNumber":87,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":88,"author":{"gitId":"tllshan"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-03"},{"lineNumber":89,"author":{"gitId":"tllshan"},"content":"        assertFalse(vendor.equals(5));","lastModifiedDate":"2023-10-03"},{"lineNumber":90,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":91,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":92,"author":{"gitId":"tllshan"},"content":"    @Test","lastModifiedDate":"2023-10-03"},{"lineNumber":93,"author":{"gitId":"tllshan"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-10-03"},{"lineNumber":94,"author":{"gitId":"tllshan"},"content":"        Name name \u003d new Name(\"ABC Catering\");","lastModifiedDate":"2023-10-03"},{"lineNumber":95,"author":{"gitId":"tllshan"},"content":"        Phone phone \u003d new Phone(\"61234567\");","lastModifiedDate":"2023-10-03"},{"lineNumber":96,"author":{"gitId":"tllshan"},"content":"        Email email \u003d new Email(\"abc@catering.com\");","lastModifiedDate":"2023-10-03"},{"lineNumber":97,"author":{"gitId":"tllshan"},"content":"        Address address \u003d new Address(\"Blk 123\");","lastModifiedDate":"2023-10-03"},{"lineNumber":98,"author":{"gitId":"tllshan"},"content":"        Tag tag \u003d new Tag(\"caterer\");","lastModifiedDate":"2023-10-03"},{"lineNumber":99,"author":{"gitId":"tllshan"},"content":"        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-03"},{"lineNumber":100,"author":{"gitId":"tllshan"},"content":"        tags.add(tag);","lastModifiedDate":"2023-10-03"},{"lineNumber":101,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":102,"author":{"gitId":"tllshan"},"content":"        Vendor vendor \u003d new Vendor(name, phone, email, address, tags);","lastModifiedDate":"2023-10-03"},{"lineNumber":103,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":104,"author":{"gitId":"tllshan"},"content":"        String expected \u003d Vendor.class.getCanonicalName() + \"{name\u003d\" + vendor.getName() + \", phone\u003d\" + vendor.getPhone()","lastModifiedDate":"2023-10-03"},{"lineNumber":105,"author":{"gitId":"tllshan"},"content":"                + \", email\u003d\" + vendor.getEmail() + \", address\u003d\" + vendor.getAddress()","lastModifiedDate":"2023-10-03"},{"lineNumber":106,"author":{"gitId":"tllshan"},"content":"                + \", tags\u003d\" + vendor.getTags() + \"}\";","lastModifiedDate":"2023-10-03"},{"lineNumber":107,"author":{"gitId":"tllshan"},"content":"        assertEquals(expected, vendor.toString());","lastModifiedDate":"2023-10-03"},{"lineNumber":108,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":109,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"tllshan":109}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedGuestTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"p-xp"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"p-xp"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":"import static seedu.address.storage.JsonAdaptedGuest.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"p-xp"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":"import static seedu.address.testutil.TypicalGuests.GINA;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"p-xp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"p-xp"},"content":"import java.util.List;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"p-xp"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"p-xp"},"content":"public class JsonAdaptedGuestTest {","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"p-xp"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"    private static final String INVALID_RSVP_STATUS \u003d \"idk\";","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"p-xp"},"content":"    private static final String INVALID_DIETARY_REQUIREMENTS \u003d \"\";","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"    private static final String VALID_NAME \u003d GINA.getName().toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"p-xp"},"content":"    private static final String VALID_PHONE \u003d GINA.getPhone().toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"p-xp"},"content":"    private static final String VALID_EMAIL \u003d GINA.getEmail().toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"p-xp"},"content":"    private static final String VALID_ADDRESS \u003d GINA.getAddress().toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"p-xp"},"content":"    private static final String VALID_RSVP_STATUS \u003d GINA.getRsvpStatus().toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"p-xp"},"content":"    private static final String VALID_DIETARY_REQUIREMENT \u003d GINA.getDietaryRequirements().toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"p-xp"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d GINA.getTags().stream()","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"p-xp"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"p-xp"},"content":"    public void toModelType_validGuestDetails_returnsGuest() throws Exception {","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d new JsonAdaptedGuest(GINA);","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"p-xp"},"content":"        assertEquals(GINA, guest.toModelType());","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"p-xp"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"p-xp"},"content":"                new JsonAdaptedGuest(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_RSVP_STATUS,","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"p-xp"},"content":"                        VALID_DIETARY_REQUIREMENT, VALID_TAGS);","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"p-xp"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"p-xp"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"p-xp"},"content":"                new JsonAdaptedGuest(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_RSVP_STATUS,","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"p-xp"},"content":"                        VALID_DIETARY_REQUIREMENT, VALID_TAGS);","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"p-xp"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"p-xp"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"p-xp"},"content":"                new JsonAdaptedGuest(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_RSVP_STATUS,","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"p-xp"},"content":"                        VALID_DIETARY_REQUIREMENT, VALID_TAGS);","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"p-xp"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"p-xp"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"p-xp"},"content":"                new JsonAdaptedGuest(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_RSVP_STATUS,","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"p-xp"},"content":"                        VALID_DIETARY_REQUIREMENT, VALID_TAGS);","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"p-xp"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":81,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":82,"author":{"gitId":"p-xp"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"p-xp"},"content":"                new JsonAdaptedGuest(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_RSVP_STATUS,","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"p-xp"},"content":"                        VALID_DIETARY_REQUIREMENT, VALID_TAGS);","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"p-xp"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-07"},{"lineNumber":87,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":89,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":90,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"p-xp"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":92,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":93,"author":{"gitId":"p-xp"},"content":"                new JsonAdaptedGuest(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_RSVP_STATUS,","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"p-xp"},"content":"                        VALID_DIETARY_REQUIREMENT, VALID_TAGS);","lastModifiedDate":"2023-10-07"},{"lineNumber":95,"author":{"gitId":"p-xp"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2023-10-07"},{"lineNumber":96,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":98,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":99,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":100,"author":{"gitId":"p-xp"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":101,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":102,"author":{"gitId":"p-xp"},"content":"                new JsonAdaptedGuest(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_RSVP_STATUS,","lastModifiedDate":"2023-10-07"},{"lineNumber":103,"author":{"gitId":"p-xp"},"content":"                        VALID_DIETARY_REQUIREMENT, VALID_TAGS);","lastModifiedDate":"2023-10-07"},{"lineNumber":104,"author":{"gitId":"p-xp"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-07"},{"lineNumber":105,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);","lastModifiedDate":"2023-10-07"},{"lineNumber":106,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":107,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":108,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":109,"author":{"gitId":"p-xp"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":110,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"p-xp"},"content":"                new JsonAdaptedGuest(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_RSVP_STATUS,","lastModifiedDate":"2023-10-07"},{"lineNumber":112,"author":{"gitId":"p-xp"},"content":"                        VALID_DIETARY_REQUIREMENT, VALID_TAGS);","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"p-xp"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2023-10-07"},{"lineNumber":114,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, guest::toModelType);","lastModifiedDate":"2023-10-07"},{"lineNumber":115,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":116,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":117,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":118,"author":{"gitId":"p-xp"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2023-10-07"},{"lineNumber":119,"author":{"gitId":"p-xp"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2023-10-07"},{"lineNumber":120,"author":{"gitId":"p-xp"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2023-10-07"},{"lineNumber":121,"author":{"gitId":"p-xp"},"content":"        JsonAdaptedGuest guest \u003d","lastModifiedDate":"2023-10-07"},{"lineNumber":122,"author":{"gitId":"p-xp"},"content":"                new JsonAdaptedGuest(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_RSVP_STATUS,","lastModifiedDate":"2023-10-07"},{"lineNumber":123,"author":{"gitId":"p-xp"},"content":"                        VALID_DIETARY_REQUIREMENT, invalidTags);","lastModifiedDate":"2023-10-07"},{"lineNumber":124,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, guest::toModelType);","lastModifiedDate":"2023-10-07"},{"lineNumber":125,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":126,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":127,"author":{"gitId":"p-xp"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"p-xp":127}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedVendorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.storage.JsonAdaptedVendor.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalVendors.BRYAN;","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import java.util.List;","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"public class JsonAdaptedVendorTest {","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    private static final String VALID_NAME \u003d BRYAN.getName().toString();","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    private static final String VALID_PHONE \u003d BRYAN.getPhone().toString();","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"    private static final String VALID_EMAIL \u003d BRYAN.getEmail().toString();","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    private static final String VALID_ADDRESS \u003d BRYAN.getAddress().toString();","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BRYAN.getTags().stream()","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_validVendorDetails_returnsVendor() throws Exception {","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(BRYAN);","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"        assertEquals(BRYAN, vendor.toModelType());","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"                new JsonAdaptedVendor(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"                new JsonAdaptedVendor(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2023-10-06"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"                new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"                new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2023-10-06"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-06"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);","lastModifiedDate":"2023-10-06"},{"lineNumber":97,"author":{"gitId":"samuelim01"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2023-10-06"},{"lineNumber":98,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, vendor::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":99,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":100,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":101,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":102,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":103,"author":{"gitId":"samuelim01"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2023-10-06"},{"lineNumber":104,"author":{"gitId":"samuelim01"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2023-10-06"},{"lineNumber":105,"author":{"gitId":"samuelim01"},"content":"        JsonAdaptedVendor vendor \u003d","lastModifiedDate":"2023-10-06"},{"lineNumber":106,"author":{"gitId":"samuelim01"},"content":"                new JsonAdaptedVendor(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);","lastModifiedDate":"2023-10-06"},{"lineNumber":107,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, vendor::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":108,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":109,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":110,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"samuelim01":110}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalVendors.ANNE;","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalVendors.HENRY;","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.testutil.TypicalVendors.IRENE;","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-06-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"import seedu.address.testutil.TypicalVendors;","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-06-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2023-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"    public void readAndSavePersonOnlyAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"        AddressBook original \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"    public void readAndSaveVendorOnlyAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"        AddressBook original \u003d TypicalVendors.getTypicalAddressBook();","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"samuelim01"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2023-10-06"},{"lineNumber":97,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":98,"author":{"gitId":"samuelim01"},"content":"        // Save in new file and read back","lastModifiedDate":"2023-10-06"},{"lineNumber":99,"author":{"gitId":"samuelim01"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2023-10-06"},{"lineNumber":100,"author":{"gitId":"samuelim01"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2023-10-06"},{"lineNumber":101,"author":{"gitId":"samuelim01"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2023-10-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"samuelim01"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2023-10-06"},{"lineNumber":104,"author":{"gitId":"samuelim01"},"content":"        original.addVendor(HENRY);","lastModifiedDate":"2023-10-06"},{"lineNumber":105,"author":{"gitId":"samuelim01"},"content":"        original.removeVendor(ANNE);","lastModifiedDate":"2023-10-06"},{"lineNumber":106,"author":{"gitId":"samuelim01"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2023-10-06"},{"lineNumber":107,"author":{"gitId":"samuelim01"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2023-10-06"},{"lineNumber":108,"author":{"gitId":"samuelim01"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2023-10-06"},{"lineNumber":109,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":110,"author":{"gitId":"samuelim01"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2023-10-06"},{"lineNumber":111,"author":{"gitId":"samuelim01"},"content":"        original.addVendor(IRENE);","lastModifiedDate":"2023-10-06"},{"lineNumber":112,"author":{"gitId":"samuelim01"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2023-10-06"},{"lineNumber":113,"author":{"gitId":"samuelim01"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2023-10-06"},{"lineNumber":114,"author":{"gitId":"samuelim01"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2023-10-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"samuelim01":31,"-":107}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"import seedu.address.testutil.TypicalVendors;","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":"    private static final Path TYPICAL_GUESTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalGuestsAddressBook.json\");","lastModifiedDate":"2023-10-11"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":"    private static final Path INVALID_GUEST_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidGuestAddressBook.json\");","lastModifiedDate":"2023-10-11"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"    private static final Path DUPLICATE_GUEST_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateGuestAddressBook.json\");","lastModifiedDate":"2023-10-11"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    private static final Path TYPICAL_VENDORS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalVendorsAddressBook.json\");","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    private static final Path INVALID_VENDOR_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidVendorAddressBook.json\");","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    private static final Path DUPLICATE_VENDOR_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateVendorAddressBook.json\");","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"p-xp"},"content":"    // guests-test","lastModifiedDate":"2023-10-11"},{"lineNumber":55,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":56,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":57,"author":{"gitId":"p-xp"},"content":"    public void toModelType_invalidGuestFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-11"},{"lineNumber":58,"author":{"gitId":"p-xp"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_GUEST_FILE,","lastModifiedDate":"2023-10-11"},{"lineNumber":59,"author":{"gitId":"p-xp"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2023-10-11"},{"lineNumber":60,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-10-11"},{"lineNumber":61,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":62,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":63,"author":{"gitId":"p-xp"},"content":"    @Test","lastModifiedDate":"2023-10-11"},{"lineNumber":64,"author":{"gitId":"p-xp"},"content":"    public void toModelType_duplicateGuests_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-11"},{"lineNumber":65,"author":{"gitId":"p-xp"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_GUEST_FILE,","lastModifiedDate":"2023-10-11"},{"lineNumber":66,"author":{"gitId":"p-xp"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2023-10-11"},{"lineNumber":67,"author":{"gitId":"p-xp"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_GUEST,","lastModifiedDate":"2023-10-11"},{"lineNumber":68,"author":{"gitId":"p-xp"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-10-11"},{"lineNumber":69,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-11"},{"lineNumber":70,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":71,"author":{"gitId":"p-xp"},"content":"    // vendors-test","lastModifiedDate":"2023-10-11"},{"lineNumber":72,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-11"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_typicalVendorsFile_success() throws Exception {","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_VENDORS_FILE,","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"        AddressBook typicalVendorsAddressBook \u003d TypicalVendors.getTypicalAddressBook();","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"        assertEquals(addressBookFromFile, typicalVendorsAddressBook);","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_invalidVendorFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_VENDOR_FILE,","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"    public void toModelType_duplicateVendors_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-06"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_VENDOR_FILE,","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_VENDOR,","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"samuelim01":27,"p-xp":22,"-":47}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"     * Adds a new {@code Guest} to the {@code AddressBook} that we are building.","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"    public AddressBookBuilder withGuest(Guest guest) {","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"        addressBook.addGuest(guest);","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"        return this;","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"     * Adds a new {@code Vendor} to the {@code AddressBook} that we are building.","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"    public AddressBookBuilder withVendor(Vendor vendor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"        addressBook.addVendor(vendor);","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"        return this;","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"samuelim01":18,"-":34}},{"path":"src/test/java/seedu/address/testutil/GuestBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"p-xp"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"p-xp"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.DietaryRequirements;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.RsvpStatus;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"p-xp"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"p-xp"},"content":" * A utility class to help with building Guest objects.","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"p-xp"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"p-xp"},"content":"public class GuestBuilder {","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Gee\";","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"p-xp"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"    public static final String DEFAULT_RSVP_STATUS \u003d \"yes\";","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"p-xp"},"content":"    public static final String DEFAULT_DIETARY_REQUIREMENTS \u003d \"vegan\";","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"    private Name name;","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"    private Phone phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"p-xp"},"content":"    private Email email;","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"p-xp"},"content":"    private Address address;","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"p-xp"},"content":"    private RsvpStatus rsvpStatus;","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"p-xp"},"content":"    private DietaryRequirements dietaryRequirements;","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"p-xp"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"     * Creates a {@code GuestBuilder} with the default details.","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"p-xp"},"content":"    public GuestBuilder() {","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"p-xp"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"p-xp"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"p-xp"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"p-xp"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"p-xp"},"content":"        rsvpStatus \u003d new RsvpStatus(DEFAULT_RSVP_STATUS);","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"p-xp"},"content":"        dietaryRequirements \u003d new DietaryRequirements(DEFAULT_DIETARY_REQUIREMENTS);","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"p-xp"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"p-xp"},"content":"     * Initializes the GuestBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"p-xp"},"content":"    public GuestBuilder(Guest guestToCopy) {","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"p-xp"},"content":"        name \u003d guestToCopy.getName();","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"p-xp"},"content":"        phone \u003d guestToCopy.getPhone();","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"p-xp"},"content":"        email \u003d guestToCopy.getEmail();","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"p-xp"},"content":"        address \u003d guestToCopy.getAddress();","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"p-xp"},"content":"        rsvpStatus \u003d guestToCopy.getRsvpStatus();","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"p-xp"},"content":"        dietaryRequirements \u003d guestToCopy.getDietaryRequirements();","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"p-xp"},"content":"        tags \u003d new HashSet\u003c\u003e(guestToCopy.getTags());","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"p-xp"},"content":"     * Sets the {@code Name} of the {@code Guest} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"p-xp"},"content":"    public GuestBuilder withName(String name) {","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"p-xp"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"p-xp"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"p-xp"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Guest} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"p-xp"},"content":"    public GuestBuilder withTags(String ... tags) {","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"p-xp"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"p-xp"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"p-xp"},"content":"     * Sets the {@code Address} of the {@code Guest} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":81,"author":{"gitId":"p-xp"},"content":"    public GuestBuilder withAddress(String address) {","lastModifiedDate":"2023-10-07"},{"lineNumber":82,"author":{"gitId":"p-xp"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"p-xp"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":87,"author":{"gitId":"p-xp"},"content":"     * Sets the {@code Phone} of the {@code Guest} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":89,"author":{"gitId":"p-xp"},"content":"    public GuestBuilder withPhone(String phone) {","lastModifiedDate":"2023-10-07"},{"lineNumber":90,"author":{"gitId":"p-xp"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"p-xp"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":92,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":93,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":95,"author":{"gitId":"p-xp"},"content":"     * Sets the {@code Email} of the {@code Guest} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":96,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"p-xp"},"content":"    public GuestBuilder withEmail(String email) {","lastModifiedDate":"2023-10-07"},{"lineNumber":98,"author":{"gitId":"p-xp"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2023-10-07"},{"lineNumber":99,"author":{"gitId":"p-xp"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":100,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":101,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":102,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":103,"author":{"gitId":"p-xp"},"content":"     * Sets the {@code RsvpStatus} of the {@code Guest} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":104,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":105,"author":{"gitId":"p-xp"},"content":"    public GuestBuilder withRsvpStatus(String rsvpStatus) {","lastModifiedDate":"2023-10-07"},{"lineNumber":106,"author":{"gitId":"p-xp"},"content":"        this.rsvpStatus \u003d new RsvpStatus(rsvpStatus);","lastModifiedDate":"2023-10-07"},{"lineNumber":107,"author":{"gitId":"p-xp"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":108,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":109,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":110,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":111,"author":{"gitId":"p-xp"},"content":"     * Sets the {@code DietaryRequirements} of the {@code Guest} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":112,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":113,"author":{"gitId":"p-xp"},"content":"    public GuestBuilder withDietaryRequirements(String dietaryRequirements) {","lastModifiedDate":"2023-10-07"},{"lineNumber":114,"author":{"gitId":"p-xp"},"content":"        this.dietaryRequirements \u003d new DietaryRequirements(dietaryRequirements);","lastModifiedDate":"2023-10-07"},{"lineNumber":115,"author":{"gitId":"p-xp"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":116,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":117,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":118,"author":{"gitId":"p-xp"},"content":"    public Guest build() {","lastModifiedDate":"2023-10-07"},{"lineNumber":119,"author":{"gitId":"p-xp"},"content":"        return new Guest(name, phone, email, address, rsvpStatus, dietaryRequirements, tags);","lastModifiedDate":"2023-10-07"},{"lineNumber":120,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":121,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":122,"author":{"gitId":"p-xp"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"p-xp":122}},{"path":"src/test/java/seedu/address/testutil/GuestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"keaganpzh"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-02"},{"lineNumber":2,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":3,"author":{"gitId":"keaganpzh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-02"},{"lineNumber":4,"author":{"gitId":"keaganpzh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DIETARY;","lastModifiedDate":"2023-10-02"},{"lineNumber":5,"author":{"gitId":"keaganpzh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-02"},{"lineNumber":6,"author":{"gitId":"keaganpzh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-02"},{"lineNumber":7,"author":{"gitId":"keaganpzh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-02"},{"lineNumber":8,"author":{"gitId":"keaganpzh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RSVP;","lastModifiedDate":"2023-10-02"},{"lineNumber":9,"author":{"gitId":"keaganpzh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-02"},{"lineNumber":10,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":11,"author":{"gitId":"keaganpzh"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-02"},{"lineNumber":12,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":13,"author":{"gitId":"keaganpzh"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2023-10-02"},{"lineNumber":14,"author":{"gitId":"keaganpzh"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-10-02"},{"lineNumber":15,"author":{"gitId":"keaganpzh"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-02"},{"lineNumber":16,"author":{"gitId":"keaganpzh"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-02"},{"lineNumber":17,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":18,"author":{"gitId":"keaganpzh"},"content":"/**","lastModifiedDate":"2023-10-02"},{"lineNumber":19,"author":{"gitId":"keaganpzh"},"content":" * A utility class for Person.","lastModifiedDate":"2023-10-02"},{"lineNumber":20,"author":{"gitId":"keaganpzh"},"content":" */","lastModifiedDate":"2023-10-02"},{"lineNumber":21,"author":{"gitId":"keaganpzh"},"content":"public class GuestUtil {","lastModifiedDate":"2023-10-02"},{"lineNumber":22,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":23,"author":{"gitId":"keaganpzh"},"content":"    /**","lastModifiedDate":"2023-10-02"},{"lineNumber":24,"author":{"gitId":"keaganpzh"},"content":"     * Returns an add command string for adding the {@code guest}.","lastModifiedDate":"2023-10-02"},{"lineNumber":25,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-02"},{"lineNumber":26,"author":{"gitId":"keaganpzh"},"content":"    public static String getAddCommand(Guest guest) {","lastModifiedDate":"2023-10-02"},{"lineNumber":27,"author":{"gitId":"keaganpzh"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getGuestDetails(guest);","lastModifiedDate":"2023-10-02"},{"lineNumber":28,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":29,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":30,"author":{"gitId":"keaganpzh"},"content":"    /**","lastModifiedDate":"2023-10-02"},{"lineNumber":31,"author":{"gitId":"keaganpzh"},"content":"     * Returns the part of command string for the given {@code guest}\u0027s details.","lastModifiedDate":"2023-10-02"},{"lineNumber":32,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-02"},{"lineNumber":33,"author":{"gitId":"keaganpzh"},"content":"    public static String getGuestDetails(Guest guest) {","lastModifiedDate":"2023-10-02"},{"lineNumber":34,"author":{"gitId":"keaganpzh"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-10-02"},{"lineNumber":35,"author":{"gitId":"keaganpzh"},"content":"        sb.append(PREFIX_NAME + guest.getName().fullName + \" \");","lastModifiedDate":"2023-10-02"},{"lineNumber":36,"author":{"gitId":"keaganpzh"},"content":"        sb.append(PREFIX_PHONE + guest.getPhone().value + \" \");","lastModifiedDate":"2023-10-02"},{"lineNumber":37,"author":{"gitId":"keaganpzh"},"content":"        sb.append(PREFIX_EMAIL + guest.getEmail().value + \" \");","lastModifiedDate":"2023-10-02"},{"lineNumber":38,"author":{"gitId":"keaganpzh"},"content":"        sb.append(PREFIX_ADDRESS + guest.getAddress().value + \" \");","lastModifiedDate":"2023-10-02"},{"lineNumber":39,"author":{"gitId":"keaganpzh"},"content":"        sb.append(PREFIX_RSVP + guest.getRsvpStatus().toString() + \" \");","lastModifiedDate":"2023-10-02"},{"lineNumber":40,"author":{"gitId":"keaganpzh"},"content":"        sb.append(PREFIX_DIETARY + guest.getDietaryRequirements().value + \" \");","lastModifiedDate":"2023-10-02"},{"lineNumber":41,"author":{"gitId":"keaganpzh"},"content":"        guest.getTags().stream().forEach(","lastModifiedDate":"2023-10-02"},{"lineNumber":42,"author":{"gitId":"keaganpzh"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2023-10-02"},{"lineNumber":43,"author":{"gitId":"keaganpzh"},"content":"        );","lastModifiedDate":"2023-10-02"},{"lineNumber":44,"author":{"gitId":"keaganpzh"},"content":"        return sb.toString();","lastModifiedDate":"2023-10-02"},{"lineNumber":45,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":46,"author":{"gitId":"keaganpzh"},"content":"","lastModifiedDate":"2023-10-02"},{"lineNumber":47,"author":{"gitId":"keaganpzh"},"content":"    /**","lastModifiedDate":"2023-10-02"},{"lineNumber":48,"author":{"gitId":"keaganpzh"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2023-10-02"},{"lineNumber":49,"author":{"gitId":"keaganpzh"},"content":"     */","lastModifiedDate":"2023-10-02"},{"lineNumber":50,"author":{"gitId":"keaganpzh"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2023-10-02"},{"lineNumber":51,"author":{"gitId":"keaganpzh"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-10-02"},{"lineNumber":52,"author":{"gitId":"keaganpzh"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2023-10-02"},{"lineNumber":53,"author":{"gitId":"keaganpzh"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2023-10-02"},{"lineNumber":54,"author":{"gitId":"keaganpzh"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2023-10-02"},{"lineNumber":55,"author":{"gitId":"keaganpzh"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2023-10-02"},{"lineNumber":56,"author":{"gitId":"keaganpzh"},"content":"        // descriptor.getRsvpStatus().ifPresent(rsvpStatus -\u003e sb.append(PREFIX_RSVP).append(rsvpStatus.toString())","lastModifiedDate":"2023-10-02"},{"lineNumber":57,"author":{"gitId":"keaganpzh"},"content":"        // .append(\" \"));","lastModifiedDate":"2023-10-02"},{"lineNumber":58,"author":{"gitId":"keaganpzh"},"content":"        // descriptor.getDietaryRequirements().ifPresent(dietaryRequirements -\u003e sb.append(PREFIX_DIETARY).append(\" \"));","lastModifiedDate":"2023-10-02"},{"lineNumber":59,"author":{"gitId":"keaganpzh"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2023-10-02"},{"lineNumber":60,"author":{"gitId":"keaganpzh"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2023-10-02"},{"lineNumber":61,"author":{"gitId":"keaganpzh"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2023-10-02"},{"lineNumber":62,"author":{"gitId":"keaganpzh"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2023-10-02"},{"lineNumber":63,"author":{"gitId":"keaganpzh"},"content":"            } else {","lastModifiedDate":"2023-10-02"},{"lineNumber":64,"author":{"gitId":"keaganpzh"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2023-10-02"},{"lineNumber":65,"author":{"gitId":"keaganpzh"},"content":"            }","lastModifiedDate":"2023-10-02"},{"lineNumber":66,"author":{"gitId":"keaganpzh"},"content":"        }","lastModifiedDate":"2023-10-02"},{"lineNumber":67,"author":{"gitId":"keaganpzh"},"content":"        return sb.toString();","lastModifiedDate":"2023-10-02"},{"lineNumber":68,"author":{"gitId":"keaganpzh"},"content":"    }","lastModifiedDate":"2023-10-02"},{"lineNumber":69,"author":{"gitId":"keaganpzh"},"content":"}","lastModifiedDate":"2023-10-02"}],"authorContributionMap":{"keaganpzh":69}},{"path":"src/test/java/seedu/address/testutil/TypicalGuests.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"p-xp"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DIETARY_REQUIREMENTS_AMY;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DIETARY_REQUIREMENTS_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RSVP_STATUS_AMY;","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RSVP_STATUS_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"p-xp"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"p-xp"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"p-xp"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"p-xp"},"content":"import java.util.List;","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"p-xp"},"content":"import seedu.address.model.person.Guest;","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"p-xp"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"p-xp"},"content":" * A utility class containing a list of {@code Guest} objects to be used in tests.","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"p-xp"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"p-xp"},"content":"public class TypicalGuests {","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"p-xp"},"content":"    public static final Guest GINA \u003d new GuestBuilder().withName(\"Gina Pauline\")","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"p-xp"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"gina@example.com\")","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"p-xp"},"content":"            .withPhone(\"94351253\").withRsvpStatus(\"yes\").withDietaryRequirements(\"vegan\")","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"p-xp"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"p-xp"},"content":"    public static final Guest GREG \u003d new GuestBuilder().withName(\"Greg Meier\")","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"p-xp"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"p-xp"},"content":"            .withEmail(\"greg@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"p-xp"},"content":"            .withRsvpStatus(\"no\").withDietaryRequirements(\"none\")","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"p-xp"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"p-xp"},"content":"    public static final Guest GABRIEL \u003d new GuestBuilder().withName(\"Gabriel Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"p-xp"},"content":"            .withEmail(\"gabkurz@example.com\").withAddress(\"wall street\")","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"p-xp"},"content":"            .withRsvpStatus(\"unknown\").withDietaryRequirements(\"vegetarian\")","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"p-xp"},"content":"            .build();","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"    public static final Guest GEORGE \u003d new GuestBuilder().withName(\"George Tan\").withPhone(\"87652533\")","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"p-xp"},"content":"            .withEmail(\"georgemeier@example.com\").withAddress(\"10th street\")","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"p-xp"},"content":"            .withRsvpStatus(\"yes\").withDietaryRequirements(\"no beef\")","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"p-xp"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"p-xp"},"content":"    // Manually added","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"    public static final Guest GIDEON \u003d new GuestBuilder().withName(\"Gideon Lim\").withPhone(\"8482424\")","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"p-xp"},"content":"            .withEmail(\"gideon@example.com\").withAddress(\"little india\")","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"p-xp"},"content":"            .withRsvpStatus(\"unknown\").withDietaryRequirements(\"none\")","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"p-xp"},"content":"            .build();","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"p-xp"},"content":"    public static final Guest GRACE \u003d new GuestBuilder().withName(\"Grace Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"p-xp"},"content":"            .withEmail(\"grace@example.com\").withAddress(\"chicago ave\")","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"p-xp"},"content":"            .withRsvpStatus(\"unknown\").withDietaryRequirements(\"none\")","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"p-xp"},"content":"            .build();","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"p-xp"},"content":"    // Manually added - Guest\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"p-xp"},"content":"    public static final Guest AMY \u003d new GuestBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"p-xp"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRsvpStatus(VALID_RSVP_STATUS_AMY)","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"p-xp"},"content":"            .withDietaryRequirements(VALID_DIETARY_REQUIREMENTS_AMY)","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"p-xp"},"content":"            .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"p-xp"},"content":"    public static final Guest BOB \u003d new GuestBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"p-xp"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRsvpStatus(VALID_RSVP_STATUS_BOB)","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"p-xp"},"content":"            .withDietaryRequirements(VALID_DIETARY_REQUIREMENTS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"p-xp"},"content":"            .build();","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"p-xp"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"p-xp"},"content":"    private TypicalGuests() {} // prevents instantiation","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"p-xp"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"p-xp"},"content":"     * Returns an {@code AddressBook} with all the typical guests.","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"p-xp"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"p-xp"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"p-xp"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"p-xp"},"content":"        for (Guest guest : getTypicalGuests()) {","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"p-xp"},"content":"            ab.addGuest(guest);","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"p-xp"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"p-xp"},"content":"        return ab;","lastModifiedDate":"2023-10-07"},{"lineNumber":81,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":82,"author":{"gitId":"p-xp"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"p-xp"},"content":"    public static List\u003cGuest\u003e getTypicalGuests() {","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"p-xp"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GINA, GREG, GABRIEL, GEORGE));","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"p-xp"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"p-xp"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"samuelim01":2,"p-xp":84}},{"path":"src/test/java/seedu/address/testutil/TypicalVendors.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":"import java.util.List;","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":" * A utility class containing a list of {@code Vendor} objects to be used in tests.","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"public class TypicalVendors {","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor ANNE \u003d new VendorBuilder().withName(\"Anne Chua\")","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"anne@example.com\")","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor BRYAN \u003d new VendorBuilder().withName(\"Bryan Lim\")","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"            .withEmail(\"bryand@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor CHLOE \u003d new VendorBuilder().withName(\"Chloe Chua\").withPhone(\"95352563\")","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"            .withEmail(\"ckrz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor DANIEL \u003d new VendorBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor ETHAN \u003d new VendorBuilder().withName(\"Ethan Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"            .withEmail(\"ethanmeyer@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor FELIZ \u003d new VendorBuilder().withName(\"Feliz Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor GRACE \u003d new VendorBuilder().withName(\"Grace Chan\").withPhone(\"9482442\")","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"            .withEmail(\"charis@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"    // Manually added","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor HENRY \u003d new VendorBuilder().withName(\"Henry Meier\").withPhone(\"8482424\")","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"            .withEmail(\"hiimhenry@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor IRENE \u003d new VendorBuilder().withName(\"Irene Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"            .withEmail(\"muellerirene@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"    // Manually added - Vendor\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor AMY \u003d new VendorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"    public static final Vendor BOB \u003d new VendorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"            .build();","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"    private TypicalVendors() {} // prevents instantiation","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"     * Returns an {@code AddressBook} with all the typical vendors.","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"        for (Vendor vendor : getTypicalVendors()) {","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"            ab.addVendor(vendor);","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"        return ab;","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"    public static List\u003cVendor\u003e getTypicalVendors() {","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ANNE, BRYAN, CHLOE, DANIEL, ETHAN, FELIZ, GRACE));","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"samuelim01":74}},{"path":"src/test/java/seedu/address/testutil/VendorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"samuelim01"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"samuelim01"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"samuelim01"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"samuelim01"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"samuelim01"},"content":"/**","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"samuelim01"},"content":" * A utility class to help with building Vendor objects.","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"samuelim01"},"content":" */","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"samuelim01"},"content":"public class VendorBuilder {","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"samuelim01"},"content":"    public static final String DEFAULT_NAME \u003d \"Annie Chua\";","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"samuelim01"},"content":"    public static final String DEFAULT_PHONE \u003d \"91463224\";","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"samuelim01"},"content":"    public static final String DEFAULT_EMAIL \u003d \"annie@gmail.com\";","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"samuelim01"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"301D, Anchorvale Drive, #05-15\";","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"samuelim01"},"content":"    private Name name;","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"samuelim01"},"content":"    private Phone phone;","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"samuelim01"},"content":"    private Email email;","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"samuelim01"},"content":"    private Address address;","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"samuelim01"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":30,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"samuelim01"},"content":"     * Creates a {@code VendorBuilder} with the default details.","lastModifiedDate":"2023-10-06"},{"lineNumber":32,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"samuelim01"},"content":"    public VendorBuilder() {","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"samuelim01"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"samuelim01"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"samuelim01"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"samuelim01"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"samuelim01"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"samuelim01"},"content":"     * Initializes the VendorBuilder with the data of {@code vendorToCopy}.","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"samuelim01"},"content":"    public VendorBuilder(Vendor vendorToCopy) {","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"samuelim01"},"content":"        name \u003d vendorToCopy.getName();","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"samuelim01"},"content":"        phone \u003d vendorToCopy.getPhone();","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"samuelim01"},"content":"        email \u003d vendorToCopy.getEmail();","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"samuelim01"},"content":"        address \u003d vendorToCopy.getAddress();","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"samuelim01"},"content":"        tags \u003d new HashSet\u003c\u003e(vendorToCopy.getTags());","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"samuelim01"},"content":"     * Sets the {@code Name} of the {@code Vendor} that we are building.","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"samuelim01"},"content":"    public VendorBuilder withName(String name) {","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"samuelim01"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"samuelim01"},"content":"        return this;","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"samuelim01"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Vendor} that we are building.","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"samuelim01"},"content":"    public VendorBuilder withTags(String ... tags) {","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"samuelim01"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"samuelim01"},"content":"        return this;","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":67,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":68,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":69,"author":{"gitId":"samuelim01"},"content":"     * Sets the {@code Address} of the {@code Vendor} that we are building.","lastModifiedDate":"2023-10-06"},{"lineNumber":70,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":71,"author":{"gitId":"samuelim01"},"content":"    public VendorBuilder withAddress(String address) {","lastModifiedDate":"2023-10-06"},{"lineNumber":72,"author":{"gitId":"samuelim01"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2023-10-06"},{"lineNumber":73,"author":{"gitId":"samuelim01"},"content":"        return this;","lastModifiedDate":"2023-10-06"},{"lineNumber":74,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":75,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":76,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":77,"author":{"gitId":"samuelim01"},"content":"     * Sets the {@code Phone} of the {@code Vendor} that we are building.","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":79,"author":{"gitId":"samuelim01"},"content":"    public VendorBuilder withPhone(String phone) {","lastModifiedDate":"2023-10-06"},{"lineNumber":80,"author":{"gitId":"samuelim01"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"samuelim01"},"content":"        return this;","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":83,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":84,"author":{"gitId":"samuelim01"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":85,"author":{"gitId":"samuelim01"},"content":"     * Sets the {@code Email} of the {@code Vendor} that we are building.","lastModifiedDate":"2023-10-06"},{"lineNumber":86,"author":{"gitId":"samuelim01"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":87,"author":{"gitId":"samuelim01"},"content":"    public VendorBuilder withEmail(String email) {","lastModifiedDate":"2023-10-06"},{"lineNumber":88,"author":{"gitId":"samuelim01"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2023-10-06"},{"lineNumber":89,"author":{"gitId":"samuelim01"},"content":"        return this;","lastModifiedDate":"2023-10-06"},{"lineNumber":90,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":91,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":92,"author":{"gitId":"samuelim01"},"content":"    public Vendor build() {","lastModifiedDate":"2023-10-06"},{"lineNumber":93,"author":{"gitId":"samuelim01"},"content":"        return new Vendor(name, phone, email, address, tags);","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"samuelim01"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":95,"author":{"gitId":"samuelim01"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":96,"author":{"gitId":"samuelim01"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"samuelim01":96}},{"path":"src/test/java/seedu/address/testutil/VendorUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tllshan"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"tllshan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"tllshan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"tllshan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"tllshan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"tllshan"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"tllshan"},"content":"import java.util.Set;","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"tllshan"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"tllshan"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"tllshan"},"content":"import seedu.address.model.person.Vendor;","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"tllshan"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"tllshan"},"content":"/**","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"tllshan"},"content":" * A utility class for Vendor.","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"tllshan"},"content":" */","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"tllshan"},"content":"public class VendorUtil {","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"tllshan"},"content":"     * Returns an add command string for adding the {@code vendor}.","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"tllshan"},"content":"    public static String getAddCommand(Vendor vendor) {","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"tllshan"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getVendorDetails(vendor);","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"tllshan"},"content":"     * Returns the part of command string for the given {@code vendor}\u0027s details.","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"tllshan"},"content":"    public static String getVendorDetails(Vendor vendor) {","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"tllshan"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"tllshan"},"content":"        sb.append(PREFIX_NAME + vendor.getName().fullName + \" \");","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"tllshan"},"content":"        sb.append(PREFIX_PHONE + vendor.getPhone().value + \" \");","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"tllshan"},"content":"        sb.append(PREFIX_EMAIL + vendor.getEmail().value + \" \");","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"tllshan"},"content":"        sb.append(PREFIX_ADDRESS + vendor.getAddress().value + \" \");","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"tllshan"},"content":"        vendor.getTags().stream().forEach(","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"tllshan"},"content":"                s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"tllshan"},"content":"        );","lastModifiedDate":"2023-10-03"},{"lineNumber":40,"author":{"gitId":"tllshan"},"content":"        return sb.toString();","lastModifiedDate":"2023-10-03"},{"lineNumber":41,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":42,"author":{"gitId":"tllshan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":43,"author":{"gitId":"tllshan"},"content":"    /**","lastModifiedDate":"2023-10-03"},{"lineNumber":44,"author":{"gitId":"tllshan"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2023-10-03"},{"lineNumber":45,"author":{"gitId":"tllshan"},"content":"     */","lastModifiedDate":"2023-10-03"},{"lineNumber":46,"author":{"gitId":"tllshan"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2023-10-03"},{"lineNumber":47,"author":{"gitId":"tllshan"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-10-03"},{"lineNumber":48,"author":{"gitId":"tllshan"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2023-10-03"},{"lineNumber":49,"author":{"gitId":"tllshan"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2023-10-03"},{"lineNumber":50,"author":{"gitId":"tllshan"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2023-10-03"},{"lineNumber":51,"author":{"gitId":"tllshan"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2023-10-03"},{"lineNumber":52,"author":{"gitId":"tllshan"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2023-10-03"},{"lineNumber":53,"author":{"gitId":"tllshan"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2023-10-03"},{"lineNumber":54,"author":{"gitId":"tllshan"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2023-10-03"},{"lineNumber":55,"author":{"gitId":"tllshan"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2023-10-03"},{"lineNumber":56,"author":{"gitId":"tllshan"},"content":"            } else {","lastModifiedDate":"2023-10-03"},{"lineNumber":57,"author":{"gitId":"tllshan"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2023-10-03"},{"lineNumber":58,"author":{"gitId":"tllshan"},"content":"            }","lastModifiedDate":"2023-10-03"},{"lineNumber":59,"author":{"gitId":"tllshan"},"content":"        }","lastModifiedDate":"2023-10-03"},{"lineNumber":60,"author":{"gitId":"tllshan"},"content":"        return sb.toString();","lastModifiedDate":"2023-10-03"},{"lineNumber":61,"author":{"gitId":"tllshan"},"content":"    }","lastModifiedDate":"2023-10-03"},{"lineNumber":62,"author":{"gitId":"tllshan"},"content":"}","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"tllshan":62}}]
