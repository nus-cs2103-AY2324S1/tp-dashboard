[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"[![CI Status](https://github.com/AY2324S1-CS2103T-T08-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"* This is **a project based on a sample project for Software Engineering (SE) students**.","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"* It is named `MediConnect` because the target user receptionist at medical facilities.","lastModifiedDate":"2023-10-05"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"* The purpose of `MediConnect` is to aid receptionist in their day-to-day administrative task.\u003cbr/\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"  This includes:","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"  * Helping a patient book their next appointment.","lastModifiedDate":"2023-10-05"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"  * Helping a doctor retrieve the medical history of a particular patient.","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"* The project simulates an ongoing software project for a desktop application (called _MediConnect_) used for managing patient details, doctor details and, appointments.","lastModifiedDate":"2023-10-05"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"  * It is **written in OOP fashion**.","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"* For an overview of this project, see the **[MediConnect Product Website](https://ay2324s1-cs2103t-t08-1.github.io/tp/)**.","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"* This project is based on `AddressBook Level 3` project (`AB3` for short), a **part of the se-education.org** initiative.","lastModifiedDate":"2023-10-05"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"  * Documentation of `AB3`: **[Address Book Product Website](https://se-education.org/addressbook-level3)**.","lastModifiedDate":"2023-10-05"}],"authorContributionMap":{"yanghengtang":12,"-":5}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac-aarch64\u0027","lastModifiedDate":"2023-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac-aarch64\u0027","lastModifiedDate":"2023-10-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac-aarch64\u0027","lastModifiedDate":"2023-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac-aarch64\u0027","lastModifiedDate":"2023-10-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"mounilsankar":4,"-":68}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"## CS2103T-T08-1","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"### Kim Shi Tong","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"\u003cimg src\u003d\"images/kimshitong.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"[[github](https://github.com/kimshitong)]","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"[[portfolio](team/kimshitong.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"* Role: Developer","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"* Responsibilities: UI + Threading","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"### Mah Chee Teng","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"\u003cimg src\u003d\"images/cheeggered.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"[[github](http://github.com/cheeggered)]","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"[[portfolio](team/cheeggered.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"* Role: Developer","lastModifiedDate":"2023-10-04"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"* Responsibilities: UI + Data","lastModifiedDate":"2023-10-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"### Mounil Sankar","lastModifiedDate":"2023-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"\u003cimg src\u003d\"images/mounilsankar.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"[[github](http://github.com/mounilsankar)] ","lastModifiedDate":"2023-10-04"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"[[portfolio](team/mounilsankar.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"### Tan Jing Xu, Derek","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"\u003cimg src\u003d\"images/derekjxtan.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"[[github](http://github.com/derekjxtan)]","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"[[portfolio](team/derekjxtan.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"### Tang Yang Heng","lastModifiedDate":"2023-10-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"\u003cimg src\u003d\"images/yanghengtang.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"[[github](http://github.com/yanghengtang)]","lastModifiedDate":"2023-10-04"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"[[portfolio](team/yanghengtang.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"* Responsibilities: Dev Ops + Data","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"yanghengtang":26,"-":33}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document `docs/diagrams` folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"derekjxtan"},"content":"* has a need to manage a significant number of patients and doctors","lastModifiedDate":"2023-10-04"},{"lineNumber":261,"author":{"gitId":"derekjxtan"},"content":"* has a need to manage appointments between the patients and doctors","lastModifiedDate":"2023-10-04"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"derekjxtan"},"content":"**Value proposition**:","lastModifiedDate":"2023-10-04"},{"lineNumber":268,"author":{"gitId":"derekjxtan"},"content":"* provides easy storage and management of patients\u0027 and doctors\u0027 profiles","lastModifiedDate":"2023-10-04"},{"lineNumber":269,"author":{"gitId":"derekjxtan"},"content":"* provides convenient management of appointments of doctors and patients","lastModifiedDate":"2023-10-04"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"kimshitong"},"content":"Priorities: High (Must-Have) - * * *, Medium (Good-To-Have) - * *, Low (To-Forgo) - *","lastModifiedDate":"2023-10-05"},{"lineNumber":275,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":276,"author":{"gitId":"kimshitong"},"content":"| Priority  | As a … | I want to …                                                                                                                    | So that I can…                                                                               |","lastModifiedDate":"2023-10-06"},{"lineNumber":277,"author":{"gitId":"kimshitong"},"content":"|-----------|--------|--------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-06"},{"lineNumber":278,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | add patient\u0027s data into the system                                                                                             | ensure the system will have a record of a new or existing patient.                           |","lastModifiedDate":"2023-10-06"},{"lineNumber":279,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | edit a patient\u0027s data in the system                                                                                            | modify or update when the patients record has changes.                                       |","lastModifiedDate":"2023-10-06"},{"lineNumber":280,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | view list of patients in the system                                                                                            | easily verify their identity.                                                                |","lastModifiedDate":"2023-10-06"},{"lineNumber":281,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | delete patients\u0027 profile from the system                                                                                       | ensure the system only contains current patients of UHC.                                     |","lastModifiedDate":"2023-10-06"},{"lineNumber":282,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | add doctor profile into the system                                                                                             | ensure the system keep tracks of all the doctor working at UHC.                              |","lastModifiedDate":"2023-10-05"},{"lineNumber":283,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | view list of doctor profiles in the system                                                                                     | assign the patient to a suitable doctor accordingly.                                         |","lastModifiedDate":"2023-10-06"},{"lineNumber":284,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | delete doctor profile from the system                                                                                          | ensure the system only contains doctor that is still working in UHC.                         |","lastModifiedDate":"2023-10-05"},{"lineNumber":285,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | add an appointment in the system                                                                                               | ensure the system has a record of this appointment.                                          |","lastModifiedDate":"2023-10-06"},{"lineNumber":286,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | view list of appointment in the system                                                                                         | see the information of the appointment.                                                      |","lastModifiedDate":"2023-10-06"},{"lineNumber":287,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | delete an appointment from the system                                                                                          | ensure appointment that has been postponed or cancelled will not be reflected in the system. |","lastModifiedDate":"2023-10-06"},{"lineNumber":288,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | easily locate available time slots for emergency appointments                                                                  | ensure that urgent cases are seen promptly                                                   |","lastModifiedDate":"2023-10-06"},{"lineNumber":289,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | generate a summary of upcoming appointments for patients                                                                       | ensure they receive reminders and stay well-prepared for their scheduled appointments        |","lastModifiedDate":"2023-10-06"},{"lineNumber":290,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | view a patient\u0027s medical profile and medical histories                                                                         | more efficiently match patients with the right doctor.                                       |","lastModifiedDate":"2023-10-06"},{"lineNumber":291,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | quickly view emergency contact information of patients                                                                         | provide useful information in the event of an emergency                                      |","lastModifiedDate":"2023-10-06"},{"lineNumber":292,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | update treatment plans for patients                                                                                            | ensure they receive the most up-to-date and effective care.                                  |","lastModifiedDate":"2023-10-06"},{"lineNumber":293,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | view patients who have appointments on any day                                                                                 | know who will be coming.                                                                     |","lastModifiedDate":"2023-10-06"},{"lineNumber":294,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | quickly locate and retrieve patient records by their names or dates of birth                                                   | streamline the check-in process and reducing wait times                                      |","lastModifiedDate":"2023-10-06"},{"lineNumber":295,"author":{"gitId":"kimshitong"},"content":"| * * *     | user,  | compile a concise daily or monthly appointment schedule                                                                        | enable me to prepare in advance and know my patients in advance                              |","lastModifiedDate":"2023-10-06"},{"lineNumber":296,"author":{"gitId":"kimshitong"},"content":"| * *       | user,  | provide doctors information about a patient\u0027s dietary restrictions and preferences                                             | provide tailored dietary advice during their appointments.                                   |","lastModifiedDate":"2023-10-06"},{"lineNumber":297,"author":{"gitId":"kimshitong"},"content":"| * *       | user,  | easily navigate on the application                                                                                             | use it more efficiently.                                                                     |","lastModifiedDate":"2023-10-06"},{"lineNumber":298,"author":{"gitId":"kimshitong"},"content":"| * *       | user,  | provide patients with detailed information about required pre-appointment preparations (e.g., fasting, medication adjustments) | ensure a smooth and successful visit.                                                        |","lastModifiedDate":"2023-10-06"},{"lineNumber":299,"author":{"gitId":"kimshitong"},"content":"| * *       | user,  | schedule recurring appointments for patients with ongoing treatment plans                                                      | ensure that staff and patients do not need to repeatedly book appointments in the system.    |","lastModifiedDate":"2023-10-06"},{"lineNumber":300,"author":{"gitId":"kimshitong"},"content":"| * *       | user,  | generate reports summarizing the number of patient appointments for a specific month                                           | better resource allocation and planning.                                                     |","lastModifiedDate":"2023-10-06"},{"lineNumber":301,"author":{"gitId":"kimshitong"},"content":"| * *       | user,  | view patient consent forms and treatment waivers                                                                               | ensure legal compliance and patient safety.                                                  |","lastModifiedDate":"2023-10-06"},{"lineNumber":302,"author":{"gitId":"kimshitong"},"content":"| * *       | user,  | provide patients with secure access to their medical records and appointment histories                                         | promote transparency and patient engagement.                                                 |","lastModifiedDate":"2023-10-06"},{"lineNumber":303,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | use the system to track and manage the inventory of medical supplies                                                           | ensure what we have what we need for patient care.                                           |","lastModifiedDate":"2023-10-06"},{"lineNumber":304,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | easily transfer patient records to other healthcare facilities or specialists                                                  | ensure there is seamless continuity of care                                                  |","lastModifiedDate":"2023-10-06"},{"lineNumber":305,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | efficiently enter patient check-ins and check-outs                                                                             | keep track of waiting times.                                                                 |","lastModifiedDate":"2023-10-06"},{"lineNumber":306,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | set up automated appointment confirmation messages for patients                                                                | reduce the need for manual confirmation calls.                                               |","lastModifiedDate":"2023-10-06"},{"lineNumber":307,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | add payments for each patient                                                                                                  | streamline the payment process and also reducing administrative errors.                      |","lastModifiedDate":"2023-10-06"},{"lineNumber":308,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | close payments for each patient                                                                                                | streamline the payment process and also reducing administrative errors.                      |","lastModifiedDate":"2023-10-06"},{"lineNumber":309,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | view the prescribed medicine for the patient\u0027s latest appointment                                                              | dispense the appropriate medicine.                                                           |","lastModifiedDate":"2023-10-06"},{"lineNumber":310,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | view all outstanding bills of each patient to advise                                                                           | let patients are aware of their financial obligations and can plan accordingly.              |","lastModifiedDate":"2023-10-06"},{"lineNumber":311,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | securely transmit patient invoices and billing information to the finance department                                           | streamline the billing process                                                               |","lastModifiedDate":"2023-10-06"},{"lineNumber":312,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | update patient consent forms and privacy policies                                                                              | let patients review and sign electronically                                                  |","lastModifiedDate":"2023-10-06"},{"lineNumber":313,"author":{"gitId":"kimshitong"},"content":"| *         | user,  | customize appointment reminder messages                                                                                        | cater to patients\u0027 preferred communication methods (email, SMS, phone call)                  |","lastModifiedDate":"2023-10-06"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":315,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"mounilsankar"},"content":"(For all use cases below, the **System** is the `MediConnect` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2023-10-04"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"mounilsankar"},"content":"**Use case: UC01 View all patients’ records**","lastModifiedDate":"2023-10-04"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"mounilsankar"},"content":"1.  User requests to view all patients’ records.","lastModifiedDate":"2023-10-04"},{"lineNumber":327,"author":{"gitId":"mounilsankar"},"content":"2.  MediConnect shows the patients’ records.","lastModifiedDate":"2023-10-04"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"mounilsankar"},"content":"* 1a. MediConnect detects that the command is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":334,"author":{"gitId":"mounilsankar"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":335,"author":{"gitId":"mounilsankar"},"content":"    * 1a2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":336,"author":{"gitId":"mounilsankar"},"content":"      ","lastModifiedDate":"2023-10-05"},{"lineNumber":337,"author":{"gitId":"mounilsankar"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":339,"author":{"gitId":"mounilsankar"},"content":"**Use case: UC02 View a patient\u0027s records**","lastModifiedDate":"2023-10-04"},{"lineNumber":340,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":341,"author":{"gitId":"mounilsankar"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":342,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":343,"author":{"gitId":"mounilsankar"},"content":"1.  User requests to view a patient\u0027s records.","lastModifiedDate":"2023-10-04"},{"lineNumber":344,"author":{"gitId":"mounilsankar"},"content":"2.  MediConnect shows the patient’s record.","lastModifiedDate":"2023-10-04"},{"lineNumber":345,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":346,"author":{"gitId":"mounilsankar"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":347,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":348,"author":{"gitId":"mounilsankar"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":349,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":350,"author":{"gitId":"mounilsankar"},"content":"* 1a. MediConnect detects that the command is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":351,"author":{"gitId":"mounilsankar"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":352,"author":{"gitId":"mounilsankar"},"content":"    * 1a2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":353,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":354,"author":{"gitId":"mounilsankar"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-04"},{"lineNumber":355,"author":{"gitId":"mounilsankar"},"content":"* 1b. The patient does not exist in the system.","lastModifiedDate":"2023-10-04"},{"lineNumber":356,"author":{"gitId":"mounilsankar"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":357,"author":{"gitId":"mounilsankar"},"content":"    ","lastModifiedDate":"2023-10-04"},{"lineNumber":358,"author":{"gitId":"mounilsankar"},"content":"      Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":359,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":360,"author":{"gitId":"mounilsankar"},"content":"**Use case: UC03 Add a patient**","lastModifiedDate":"2023-10-04"},{"lineNumber":361,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":362,"author":{"gitId":"mounilsankar"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":363,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":364,"author":{"gitId":"mounilsankar"},"content":"1.  User requests to add a specific patient to the list","lastModifiedDate":"2023-10-04"},{"lineNumber":365,"author":{"gitId":"mounilsankar"},"content":"2.  MediConnect adds the specific patient to the list ","lastModifiedDate":"2023-10-05"},{"lineNumber":366,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":367,"author":{"gitId":"mounilsankar"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":368,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":369,"author":{"gitId":"mounilsankar"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":370,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":371,"author":{"gitId":"mounilsankar"},"content":"* 1a.MediConnect detects that the arguments provided to add a patient is invalid.","lastModifiedDate":"2023-10-04"},{"lineNumber":372,"author":{"gitId":"mounilsankar"},"content":"    * 1a1. MediConnect shows an error message.    ","lastModifiedDate":"2023-10-04"},{"lineNumber":373,"author":{"gitId":"mounilsankar"},"content":"    * 1a2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":374,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":375,"author":{"gitId":"mounilsankar"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-04"},{"lineNumber":376,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":377,"author":{"gitId":"mounilsankar"},"content":"* 1b. MediConnect detects that patient to be added already exists in the system","lastModifiedDate":"2023-10-04"},{"lineNumber":378,"author":{"gitId":"mounilsankar"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"-"},"content":"      Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"mounilsankar"},"content":"**Use case: UC04 Edit a patient’s details/notes**","lastModifiedDate":"2023-10-04"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":385,"author":{"gitId":"mounilsankar"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":386,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":387,"author":{"gitId":"mounilsankar"},"content":"1.  User edits a specific patient’s details.","lastModifiedDate":"2023-10-05"},{"lineNumber":388,"author":{"gitId":"mounilsankar"},"content":"2.  MediConnect edits the patient’s details.","lastModifiedDate":"2023-10-05"},{"lineNumber":389,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":390,"author":{"gitId":"mounilsankar"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":391,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":392,"author":{"gitId":"mounilsankar"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":393,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":394,"author":{"gitId":"mounilsankar"},"content":"* 1a.MediConnect detects that the arguments provided to edit a patient is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":395,"author":{"gitId":"mounilsankar"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":396,"author":{"gitId":"mounilsankar"},"content":"    * 1a2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":397,"author":{"gitId":"mounilsankar"},"content":"   ","lastModifiedDate":"2023-10-04"},{"lineNumber":398,"author":{"gitId":"mounilsankar"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":399,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":400,"author":{"gitId":"mounilsankar"},"content":"**Use case: UC05 Delete a patient**","lastModifiedDate":"2023-10-04"},{"lineNumber":401,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":402,"author":{"gitId":"mounilsankar"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":403,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":404,"author":{"gitId":"mounilsankar"},"content":"1.  User requests to delete a specific patient in the list.","lastModifiedDate":"2023-10-05"},{"lineNumber":405,"author":{"gitId":"mounilsankar"},"content":"2.  MediConnect deletes the person.","lastModifiedDate":"2023-10-05"},{"lineNumber":406,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":407,"author":{"gitId":"mounilsankar"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":408,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":409,"author":{"gitId":"mounilsankar"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":410,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":411,"author":{"gitId":"mounilsankar"},"content":"* 1a. MediConnect detects that the list is empty.","lastModifiedDate":"2023-10-05"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":413,"author":{"gitId":"mounilsankar"},"content":"  Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":414,"author":{"gitId":"mounilsankar"},"content":"* 1b. MediConnect detects that the given index is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":415,"author":{"gitId":"mounilsankar"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":416,"author":{"gitId":"mounilsankar"},"content":"    * 1b2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"mounilsankar"},"content":"**Use case: UC06 View all doctors’ records**","lastModifiedDate":"2023-10-04"},{"lineNumber":421,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":422,"author":{"gitId":"mounilsankar"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":423,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":424,"author":{"gitId":"mounilsankar"},"content":"1.  User requests to view all doctors’ records","lastModifiedDate":"2023-10-04"},{"lineNumber":425,"author":{"gitId":"mounilsankar"},"content":"2.  MediConnect shows the doctors’ record","lastModifiedDate":"2023-10-04"},{"lineNumber":426,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":427,"author":{"gitId":"mounilsankar"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":428,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":429,"author":{"gitId":"mounilsankar"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":430,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":431,"author":{"gitId":"mounilsankar"},"content":"* 1a. MediConnect detects that the command is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":432,"author":{"gitId":"mounilsankar"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":433,"author":{"gitId":"mounilsankar"},"content":"    * 1a2. MediConnect requests for the correct input. ","lastModifiedDate":"2023-10-05"},{"lineNumber":434,"author":{"gitId":"mounilsankar"},"content":"    ","lastModifiedDate":"2023-10-04"},{"lineNumber":435,"author":{"gitId":"mounilsankar"},"content":"       Use case resumes at step 1.","lastModifiedDate":"2023-10-04"},{"lineNumber":436,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":437,"author":{"gitId":"cheeggered"},"content":"**Use case: UC07 View a doctor’s records**","lastModifiedDate":"2023-10-05"},{"lineNumber":438,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":439,"author":{"gitId":"mounilsankar"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":440,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":441,"author":{"gitId":"mounilsankar"},"content":"1.  User requests to view a doctor\u0027s records","lastModifiedDate":"2023-10-04"},{"lineNumber":442,"author":{"gitId":"mounilsankar"},"content":"2.  MediConnect shows the doctor’s record","lastModifiedDate":"2023-10-04"},{"lineNumber":443,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":444,"author":{"gitId":"mounilsankar"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":445,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":446,"author":{"gitId":"mounilsankar"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":447,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":448,"author":{"gitId":"mounilsankar"},"content":"* 1a. MediConnect detects that the command is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":449,"author":{"gitId":"mounilsankar"},"content":"    * 1a1. MediConnect shows an error message. ","lastModifiedDate":"2023-10-04"},{"lineNumber":450,"author":{"gitId":"mounilsankar"},"content":"    * 1a2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":451,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":452,"author":{"gitId":"mounilsankar"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-04"},{"lineNumber":453,"author":{"gitId":"mounilsankar"},"content":"* 1b. MediConnect detects that the doctor does not exist in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":454,"author":{"gitId":"mounilsankar"},"content":"    * 1b1. MediConnect shows an error message. ","lastModifiedDate":"2023-10-04"},{"lineNumber":455,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":456,"author":{"gitId":"mounilsankar"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-04"},{"lineNumber":457,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":458,"author":{"gitId":"mounilsankar"},"content":"**Use case: UC08 Add a doctor**","lastModifiedDate":"2023-10-04"},{"lineNumber":459,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":460,"author":{"gitId":"mounilsankar"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":461,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":462,"author":{"gitId":"mounilsankar"},"content":"1. User requests to add a specific doctor to the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":463,"author":{"gitId":"mounilsankar"},"content":"2. MediConnect adds the specific doctor to the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":464,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":465,"author":{"gitId":"mounilsankar"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":466,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":467,"author":{"gitId":"mounilsankar"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":468,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":469,"author":{"gitId":"mounilsankar"},"content":"* 1a. MediConnect detects that the arguments provided to add a doctor is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":470,"author":{"gitId":"mounilsankar"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":471,"author":{"gitId":"mounilsankar"},"content":"    * 1a2. MediConnect requests for the correct input    ","lastModifiedDate":"2023-10-05"},{"lineNumber":472,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":473,"author":{"gitId":"mounilsankar"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":474,"author":{"gitId":"mounilsankar"},"content":"* 1b. MediConnect detects that doctor to be added already exists in the system","lastModifiedDate":"2023-10-05"},{"lineNumber":475,"author":{"gitId":"mounilsankar"},"content":"   * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":476,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":477,"author":{"gitId":"mounilsankar"},"content":"     Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":478,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":479,"author":{"gitId":"mounilsankar"},"content":"**Use case: UC09 Edit a doctor’s details/notes**","lastModifiedDate":"2023-10-04"},{"lineNumber":480,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":481,"author":{"gitId":"mounilsankar"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":482,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":483,"author":{"gitId":"mounilsankar"},"content":"1.  User requests to edit a specific doctor’s details.","lastModifiedDate":"2023-10-04"},{"lineNumber":484,"author":{"gitId":"mounilsankar"},"content":"2.  MediConnect edits the doctor’s details.","lastModifiedDate":"2023-10-05"},{"lineNumber":485,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":486,"author":{"gitId":"mounilsankar"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":487,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":488,"author":{"gitId":"mounilsankar"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":489,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":490,"author":{"gitId":"mounilsankar"},"content":"* 1a.MediConnect detects that the arguments provided to edit a doctor is invalid.","lastModifiedDate":"2023-10-04"},{"lineNumber":491,"author":{"gitId":"mounilsankar"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":492,"author":{"gitId":"mounilsankar"},"content":"    * 1a2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":493,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":494,"author":{"gitId":"mounilsankar"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-04"},{"lineNumber":495,"author":{"gitId":"mounilsankar"},"content":"* 1b. MediConnect detects that doctor to be edited does not exist in the system","lastModifiedDate":"2023-10-04"},{"lineNumber":496,"author":{"gitId":"mounilsankar"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":497,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":498,"author":{"gitId":"mounilsankar"},"content":"      Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":499,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":500,"author":{"gitId":"mounilsankar"},"content":"**Use case: UC10 Delete a doctor**","lastModifiedDate":"2023-10-05"},{"lineNumber":501,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":502,"author":{"gitId":"mounilsankar"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":503,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":504,"author":{"gitId":"mounilsankar"},"content":"1.  User requests to delete a specific doctor in the list.","lastModifiedDate":"2023-10-05"},{"lineNumber":505,"author":{"gitId":"mounilsankar"},"content":"2.  MediConnect deletes the doctor.","lastModifiedDate":"2023-10-05"},{"lineNumber":506,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":507,"author":{"gitId":"mounilsankar"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":508,"author":{"gitId":"mounilsankar"},"content":"  ","lastModifiedDate":"2023-10-04"},{"lineNumber":509,"author":{"gitId":"mounilsankar"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":510,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":511,"author":{"gitId":"mounilsankar"},"content":"* 1a. MediConnect detects that the given arguments to delete a doctor is invalid","lastModifiedDate":"2023-10-05"},{"lineNumber":512,"author":{"gitId":"mounilsankar"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":513,"author":{"gitId":"mounilsankar"},"content":"    * 1a2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":514,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":515,"author":{"gitId":"mounilsankar"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"cheeggered"},"content":"**Use case: UC11 View a patient’s upcoming appointments**","lastModifiedDate":"2023-10-05"},{"lineNumber":518,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":519,"author":{"gitId":"cheeggered"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":520,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":521,"author":{"gitId":"cheeggered"},"content":"1. User requests to view a patient’s upcoming appointments","lastModifiedDate":"2023-10-05"},{"lineNumber":522,"author":{"gitId":"cheeggered"},"content":"2. MediConnect shows the patient’s appointment list","lastModifiedDate":"2023-10-05"},{"lineNumber":523,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":524,"author":{"gitId":"cheeggered"},"content":"   Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":525,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":526,"author":{"gitId":"cheeggered"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":527,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":528,"author":{"gitId":"cheeggered"},"content":"* 1a. MediConnect detects that the command is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":529,"author":{"gitId":"cheeggered"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":530,"author":{"gitId":"cheeggered"},"content":"    * 1a2. MediConnect requests for the correct input","lastModifiedDate":"2023-10-05"},{"lineNumber":531,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":532,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":533,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":534,"author":{"gitId":"cheeggered"},"content":"* 1b. MediConnect detects that the patient does not exist in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":535,"author":{"gitId":"cheeggered"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":536,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":537,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":538,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":539,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":540,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":541,"author":{"gitId":"cheeggered"},"content":"**Use case: UC12 View a doctor’s upcoming appointments**","lastModifiedDate":"2023-10-05"},{"lineNumber":542,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":543,"author":{"gitId":"cheeggered"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":544,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":545,"author":{"gitId":"cheeggered"},"content":"1. User requests to view a doctor’s upcoming appointments.","lastModifiedDate":"2023-10-05"},{"lineNumber":546,"author":{"gitId":"cheeggered"},"content":"2. MediConnect shows the doctor’s appointment list.","lastModifiedDate":"2023-10-05"},{"lineNumber":547,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":548,"author":{"gitId":"cheeggered"},"content":"   Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":549,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":550,"author":{"gitId":"cheeggered"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":551,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":552,"author":{"gitId":"cheeggered"},"content":"* 1a. MediConnect detects that the command is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":553,"author":{"gitId":"cheeggered"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":554,"author":{"gitId":"cheeggered"},"content":"    * 1a2. MediConnect requests for the correct input","lastModifiedDate":"2023-10-05"},{"lineNumber":555,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":556,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":557,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":558,"author":{"gitId":"cheeggered"},"content":"* 1b. MediConnect detects that the doctor does not exist in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":559,"author":{"gitId":"cheeggered"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":560,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":561,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":562,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":563,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":564,"author":{"gitId":"cheeggered"},"content":"**Use case: UC13 Add an appointment between a patient and doctor**","lastModifiedDate":"2023-10-05"},{"lineNumber":565,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":566,"author":{"gitId":"cheeggered"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":567,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":568,"author":{"gitId":"cheeggered"},"content":"1. User requests to add a specific appointment between a patient and doctor.","lastModifiedDate":"2023-10-05"},{"lineNumber":569,"author":{"gitId":"cheeggered"},"content":"2. MediConnect adds the appointment to the list.","lastModifiedDate":"2023-10-05"},{"lineNumber":570,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":571,"author":{"gitId":"cheeggered"},"content":"   Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":572,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":573,"author":{"gitId":"cheeggered"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":574,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":575,"author":{"gitId":"cheeggered"},"content":"* 1a.MediConnect detects that the arguments provided to add an appointment is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":576,"author":{"gitId":"cheeggered"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":577,"author":{"gitId":"cheeggered"},"content":"    * 1a2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":578,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":579,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":580,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":581,"author":{"gitId":"cheeggered"},"content":"* 1b. MediConnect detects that the appointment to be added already exists in the system","lastModifiedDate":"2023-10-05"},{"lineNumber":582,"author":{"gitId":"cheeggered"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":583,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"-"},"content":"      Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":585,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"cheeggered"},"content":"**Use case: UC14 Edit an appointment**","lastModifiedDate":"2023-10-05"},{"lineNumber":587,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":588,"author":{"gitId":"cheeggered"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":589,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":590,"author":{"gitId":"cheeggered"},"content":"1. User requests to edit an appointment.","lastModifiedDate":"2023-10-05"},{"lineNumber":591,"author":{"gitId":"cheeggered"},"content":"2. MediConnect edits the doctor’s details.","lastModifiedDate":"2023-10-05"},{"lineNumber":592,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":593,"author":{"gitId":"cheeggered"},"content":"   Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":594,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":595,"author":{"gitId":"cheeggered"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":596,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":597,"author":{"gitId":"cheeggered"},"content":"* 1a.MediConnect detects that the arguments provided to edit an appointment is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":598,"author":{"gitId":"cheeggered"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":599,"author":{"gitId":"cheeggered"},"content":"    * 1a2. MediConnect requests for the correct input.","lastModifiedDate":"2023-10-05"},{"lineNumber":600,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":601,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":602,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":603,"author":{"gitId":"cheeggered"},"content":"* 1b. MediConnect detects that the appointment to be edited does not exist in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":604,"author":{"gitId":"cheeggered"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":605,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":606,"author":{"gitId":"cheeggered"},"content":"      Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":607,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":608,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":609,"author":{"gitId":"cheeggered"},"content":"**Use case: UC15 Delete an appointment**","lastModifiedDate":"2023-10-05"},{"lineNumber":610,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":611,"author":{"gitId":"cheeggered"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":612,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":613,"author":{"gitId":"cheeggered"},"content":"1. User requests to delete an appointment in the list","lastModifiedDate":"2023-10-05"},{"lineNumber":614,"author":{"gitId":"cheeggered"},"content":"2. MediConnect deletes the appointment","lastModifiedDate":"2023-10-05"},{"lineNumber":615,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":616,"author":{"gitId":"cheeggered"},"content":"   Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":617,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":618,"author":{"gitId":"cheeggered"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":619,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":620,"author":{"gitId":"cheeggered"},"content":"* 1a. The list is empty.","lastModifiedDate":"2023-10-05"},{"lineNumber":621,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":622,"author":{"gitId":"cheeggered"},"content":"  Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":623,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":624,"author":{"gitId":"cheeggered"},"content":"* 1b. MediConnect detects that the given index is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":625,"author":{"gitId":"cheeggered"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":626,"author":{"gitId":"cheeggered"},"content":"    * 1b2. MediConnect requests for the correct input","lastModifiedDate":"2023-10-05"},{"lineNumber":627,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":628,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1.","lastModifiedDate":"2023-10-05"},{"lineNumber":629,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":630,"author":{"gitId":"cheeggered"},"content":"**Use case: UC16 Find a doctor’s availabilities in a given timeframe**","lastModifiedDate":"2023-10-05"},{"lineNumber":631,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":632,"author":{"gitId":"cheeggered"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":633,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":634,"author":{"gitId":"cheeggered"},"content":"1. User requests to find a doctor’s availability in a given timeframe.","lastModifiedDate":"2023-10-05"},{"lineNumber":635,"author":{"gitId":"cheeggered"},"content":"2. MediConnect shows the doctor’s availability.","lastModifiedDate":"2023-10-05"},{"lineNumber":636,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":637,"author":{"gitId":"cheeggered"},"content":"   Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":638,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":639,"author":{"gitId":"cheeggered"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":640,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":641,"author":{"gitId":"cheeggered"},"content":"* 1a.MediConnect detects that the given command is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":642,"author":{"gitId":"cheeggered"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":643,"author":{"gitId":"cheeggered"},"content":"    * 1a2. MediConnect requests for the correct input","lastModifiedDate":"2023-10-05"},{"lineNumber":644,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":645,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1","lastModifiedDate":"2023-10-05"},{"lineNumber":646,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":647,"author":{"gitId":"cheeggered"},"content":"* 1b. MediConnect detects that the given doctor does not exist in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":648,"author":{"gitId":"cheeggered"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":649,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":650,"author":{"gitId":"cheeggered"},"content":"      Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":651,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":652,"author":{"gitId":"cheeggered"},"content":"**Use case: UC17 View a patient’s outstanding bills**","lastModifiedDate":"2023-10-05"},{"lineNumber":653,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":654,"author":{"gitId":"cheeggered"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":655,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":656,"author":{"gitId":"cheeggered"},"content":"1. User requests to view a patient’s bills.","lastModifiedDate":"2023-10-05"},{"lineNumber":657,"author":{"gitId":"cheeggered"},"content":"2. MediConnect shows the patient’s bills.","lastModifiedDate":"2023-10-05"},{"lineNumber":658,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":659,"author":{"gitId":"cheeggered"},"content":"   Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":660,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":661,"author":{"gitId":"cheeggered"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":662,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":663,"author":{"gitId":"cheeggered"},"content":"* 1a.MediConnect detects that the given command is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":664,"author":{"gitId":"cheeggered"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":665,"author":{"gitId":"cheeggered"},"content":"    * 1a2. MediConnect requests for the correct input","lastModifiedDate":"2023-10-05"},{"lineNumber":666,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":667,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1","lastModifiedDate":"2023-10-05"},{"lineNumber":668,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":669,"author":{"gitId":"cheeggered"},"content":"* 1b. MediConnect detects that the given patient does not exist in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":670,"author":{"gitId":"cheeggered"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":671,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":672,"author":{"gitId":"cheeggered"},"content":"      Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":673,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":674,"author":{"gitId":"cheeggered"},"content":"**Use case: UC18 Add an outstanding bill to a patient**","lastModifiedDate":"2023-10-05"},{"lineNumber":675,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":676,"author":{"gitId":"cheeggered"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":677,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":678,"author":{"gitId":"cheeggered"},"content":"1. User requests to add an outstanding bill to a patient.","lastModifiedDate":"2023-10-05"},{"lineNumber":679,"author":{"gitId":"cheeggered"},"content":"2. MediConnect adds the outstanding bill to the patient.","lastModifiedDate":"2023-10-05"},{"lineNumber":680,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":681,"author":{"gitId":"cheeggered"},"content":"   Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":682,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":683,"author":{"gitId":"cheeggered"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":684,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":685,"author":{"gitId":"cheeggered"},"content":"* 1a.MediConnect detects that the given command is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":686,"author":{"gitId":"cheeggered"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":687,"author":{"gitId":"cheeggered"},"content":"    * 1a2. MediConnect requests for the correct input","lastModifiedDate":"2023-10-05"},{"lineNumber":688,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":689,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1","lastModifiedDate":"2023-10-05"},{"lineNumber":690,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":691,"author":{"gitId":"cheeggered"},"content":"* 1b. MediConnect detects that the given patient does not exist in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":692,"author":{"gitId":"cheeggered"},"content":"    * 1b1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":693,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":694,"author":{"gitId":"cheeggered"},"content":"      Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":695,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":696,"author":{"gitId":"cheeggered"},"content":"**Use case: UC19 Close an outstanding bill of a patient**","lastModifiedDate":"2023-10-05"},{"lineNumber":697,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":698,"author":{"gitId":"cheeggered"},"content":"**MSS**","lastModifiedDate":"2023-10-05"},{"lineNumber":699,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":700,"author":{"gitId":"cheeggered"},"content":"1. User requests to list outstanding bills a patient has (UC17)","lastModifiedDate":"2023-10-05"},{"lineNumber":701,"author":{"gitId":"cheeggered"},"content":"2. MediConnect shows the list of outstanding bills the patient has","lastModifiedDate":"2023-10-05"},{"lineNumber":702,"author":{"gitId":"cheeggered"},"content":"3. User requests to close a specific bill in the list","lastModifiedDate":"2023-10-05"},{"lineNumber":703,"author":{"gitId":"cheeggered"},"content":"4. MediConnect deletes the bill from the list","lastModifiedDate":"2023-10-05"},{"lineNumber":704,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":705,"author":{"gitId":"cheeggered"},"content":"   Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":706,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":707,"author":{"gitId":"cheeggered"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":708,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":709,"author":{"gitId":"cheeggered"},"content":"* 1a. MediConnect detects that the given patient is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":710,"author":{"gitId":"cheeggered"},"content":"    * 1a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":711,"author":{"gitId":"cheeggered"},"content":"    * 1a2. MediConnect requests for the correct input","lastModifiedDate":"2023-10-05"},{"lineNumber":712,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":713,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 1","lastModifiedDate":"2023-10-05"},{"lineNumber":714,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":715,"author":{"gitId":"cheeggered"},"content":"* 1b. MediConnect detects that the list is empty.","lastModifiedDate":"2023-10-05"},{"lineNumber":716,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":717,"author":{"gitId":"cheeggered"},"content":"  Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":718,"author":{"gitId":"cheeggered"},"content":"* 3a. MediConnect detects that the given index is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":719,"author":{"gitId":"cheeggered"},"content":"    * 3a1. MediConnect shows an error message.","lastModifiedDate":"2023-10-05"},{"lineNumber":720,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":721,"author":{"gitId":"cheeggered"},"content":"      Use case resumes at step 2","lastModifiedDate":"2023-10-05"},{"lineNumber":722,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":723,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":724,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":725,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":726,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":727,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":728,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":729,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":730,"author":{"gitId":"derekjxtan"},"content":"2. Should be able to handle at least 60,000 patients at any point of time.","lastModifiedDate":"2023-10-05"},{"lineNumber":731,"author":{"gitId":"derekjxtan"},"content":"3. Should be able to add, view, edit and delete patients and doctors without a noticeable lag.","lastModifiedDate":"2023-10-05"},{"lineNumber":732,"author":{"gitId":"derekjxtan"},"content":"4. Should be able to retrieve all appointments for a particular doctor or patient within 1 second.","lastModifiedDate":"2023-10-05"},{"lineNumber":733,"author":{"gitId":"derekjxtan"},"content":"5. Should lose no more than 1-minute worth of data in case of system error. ","lastModifiedDate":"2023-10-05"},{"lineNumber":734,"author":{"gitId":"derekjxtan"},"content":"6. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2023-10-05"},{"lineNumber":735,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":736,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":737,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":738,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":739,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":740,"author":{"gitId":"derekjxtan"},"content":"* **Appointment**: A arranged meeting between a patient and a doctor at a particular date and time","lastModifiedDate":"2023-10-05"},{"lineNumber":741,"author":{"gitId":"derekjxtan"},"content":"* **Doctor**: A person providing medical services at UHC","lastModifiedDate":"2023-10-05"},{"lineNumber":742,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":743,"author":{"gitId":"derekjxtan"},"content":"* **NRIC**: Identity card number of the National Registration Identity Card, used as the primary means of identification for patients and doctors in MediConnect","lastModifiedDate":"2023-10-05"},{"lineNumber":744,"author":{"gitId":"derekjxtan"},"content":"* **Patient**: A person receiving medical services at UHC","lastModifiedDate":"2023-10-05"},{"lineNumber":745,"author":{"gitId":"derekjxtan"},"content":"* **Receptionist**: A person handling administrative work at UHC, and is the target user of MediConnect","lastModifiedDate":"2023-10-05"},{"lineNumber":746,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":747,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":748,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":749,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":750,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":751,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":752,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":753,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":754,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":755,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":756,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":757,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":758,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":759,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":760,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":761,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":762,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":763,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":764,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":765,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":766,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":767,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":768,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":769,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":770,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":771,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":772,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":773,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":774,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":775,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":776,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":777,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":778,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":779,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":780,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":781,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":782,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":783,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":784,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":785,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":786,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":787,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":788,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":789,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":790,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":791,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":792,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":793,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":794,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":795,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":796,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":797,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":798,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"derekjxtan":15,"mounilsankar":176,"-":364,"kimshitong":40,"cheeggered":203}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"MediConnect is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, MediConnect can get your patient, doctor and appointment management tasks done faster than traditional GUI apps.","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"1. Download the latest `mediconnect.jar` from [here](https://github.com/AY2324S1-CS2103T-T08-1/tp/releases).","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your MediConnect.","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar mediconnect.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"   * `list_a` : Lists all appointments.","lastModifiedDate":"2023-10-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"   * `add_p n\\Joe Ng ic\\T0383462A p\\83745623` : Adds a patient named `Joe Ng` to the list of Patient.","lastModifiedDate":"2023-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"   * `delete_d id\\T0123321D` : Deletes the doctor with NRIC `T0123321D`.","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"  e.g. in `add n\\NAME`, `NAME` is a parameter which can be used as `add n\\John Doe`.","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"  e.g `n\\NAME [t\\TAG]` can be used as `n\\John Doe t\\friend` or as `n\\John Doe`.","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"  e.g. `[t\\TAG]…​` can be used as ` ` (i.e. 0 times), `t\\friend`, `t\\friend t\\family` etc.","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"  e.g. if the command specifies `n\\NAME p\\PHONE_NUMBER`, `p\\PHONE_NUMBER n\\NAME` is also acceptable.","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2023-06-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2023-10-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"### Adding a patient: `add_p`","lastModifiedDate":"2023-10-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"Adds a patient to the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"Format: `add_p n\\NAME ic\\NRIC p\\PHONE_NUMBER`","lastModifiedDate":"2023-10-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"* `add_p n\\John Doe ic\\T0212385J p\\98765432`","lastModifiedDate":"2023-10-06"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"* `add_p ic\\S9912343G n\\Betsy Crowe p\\81235833`","lastModifiedDate":"2023-10-06"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"### Listing all patient : `list_p`","lastModifiedDate":"2023-10-05"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"Shows a list of all patients in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"Format: `list_p`","lastModifiedDate":"2023-10-05"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"### Editing a patient : `edit_p`","lastModifiedDate":"2023-10-05"},{"lineNumber":90,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":91,"author":{"gitId":"yanghengtang"},"content":"Edits an existing patient in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":92,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":93,"author":{"gitId":"yanghengtang"},"content":"Format: `edit_p ic\\NRIC [n\\NAME] [p\\PHONE]`","lastModifiedDate":"2023-10-06"},{"lineNumber":94,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":95,"author":{"gitId":"yanghengtang"},"content":"* Edits the person with the specified `NRIC`.","lastModifiedDate":"2023-10-05"},{"lineNumber":96,"author":{"gitId":"yanghengtang"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2023-10-05"},{"lineNumber":97,"author":{"gitId":"yanghengtang"},"content":"* The NRIC of the patient cannot be changed.","lastModifiedDate":"2023-10-05"},{"lineNumber":98,"author":{"gitId":"yanghengtang"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2023-10-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"yanghengtang"},"content":"*  `edit_p ic\\T0212385J n\\Joe Ng` Edits the name of the patient with NRIC `T0212385J` to be `Joe Ng`.","lastModifiedDate":"2023-10-06"},{"lineNumber":102,"author":{"gitId":"yanghengtang"},"content":"*  `edit_p ic\\S9912343G p\\91234567` Edits the phone of patient with NRIC `S9912343G` to be `91234567`.","lastModifiedDate":"2023-10-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"yanghengtang"},"content":"### Locating patients by name: `find_p`","lastModifiedDate":"2023-10-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"yanghengtang"},"content":"Finds patients whose names contain any of the given keywords.","lastModifiedDate":"2023-10-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"yanghengtang"},"content":"Format: `find_p KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2023-10-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"yanghengtang"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2023-10-05"},{"lineNumber":111,"author":{"gitId":"yanghengtang"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2023-10-05"},{"lineNumber":112,"author":{"gitId":"yanghengtang"},"content":"* Only the name of the patient is searched.","lastModifiedDate":"2023-10-05"},{"lineNumber":113,"author":{"gitId":"yanghengtang"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2023-10-05"},{"lineNumber":114,"author":{"gitId":"yanghengtang"},"content":"* Patients matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2023-10-05"},{"lineNumber":115,"author":{"gitId":"yanghengtang"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2023-10-05"},{"lineNumber":116,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":117,"author":{"gitId":"yanghengtang"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":118,"author":{"gitId":"yanghengtang"},"content":"* `find_p John` returns `john` and `John Doe`","lastModifiedDate":"2023-10-05"},{"lineNumber":119,"author":{"gitId":"yanghengtang"},"content":"* `find_p alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":120,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":121,"author":{"gitId":"yanghengtang"},"content":"### Deleting a patient : `delete_p`","lastModifiedDate":"2023-10-05"},{"lineNumber":122,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":123,"author":{"gitId":"yanghengtang"},"content":"Deletes the specified patient from the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":124,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":125,"author":{"gitId":"yanghengtang"},"content":"Format: `delete_p ic\\NRIC`","lastModifiedDate":"2023-10-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"yanghengtang"},"content":"* Deletes the patient with the specified `NRIC`.","lastModifiedDate":"2023-10-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":130,"author":{"gitId":"yanghengtang"},"content":"* `delete_p ic\\T0212385J` deletes the patient with NRIC `T0212385J` in the system.","lastModifiedDate":"2023-10-06"},{"lineNumber":131,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":132,"author":{"gitId":"yanghengtang"},"content":"### Adding a doctor: `add_d`","lastModifiedDate":"2023-10-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":134,"author":{"gitId":"yanghengtang"},"content":"Adds a doctor to the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":135,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":136,"author":{"gitId":"yanghengtang"},"content":"Format: `add_d n\\NAME ic\\NRIC`","lastModifiedDate":"2023-10-06"},{"lineNumber":137,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":138,"author":{"gitId":"yanghengtang"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":139,"author":{"gitId":"yanghengtang"},"content":"* `add_d n\\John Doe ic\\T0212385J`","lastModifiedDate":"2023-10-06"},{"lineNumber":140,"author":{"gitId":"yanghengtang"},"content":"* `add_d ic\\S9912343G n\\Betsy Crowe`","lastModifiedDate":"2023-10-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"yanghengtang"},"content":"### Listing all doctor : `list_d`","lastModifiedDate":"2023-10-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":144,"author":{"gitId":"yanghengtang"},"content":"Shows a list of all doctors in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":146,"author":{"gitId":"yanghengtang"},"content":"Format: `list_d`","lastModifiedDate":"2023-10-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":148,"author":{"gitId":"yanghengtang"},"content":"### Editing a doctor : `edit_d`","lastModifiedDate":"2023-10-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":150,"author":{"gitId":"yanghengtang"},"content":"Edits an existing doctor in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":152,"author":{"gitId":"yanghengtang"},"content":"Format: `edit_d ic\\NRIC [n\\NAME]`","lastModifiedDate":"2023-10-06"},{"lineNumber":153,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":154,"author":{"gitId":"yanghengtang"},"content":"* Edits the doctor with the specified `NRIC`.","lastModifiedDate":"2023-10-05"},{"lineNumber":155,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"yanghengtang"},"content":"* The NRIC of the dcotor cannot be changed.","lastModifiedDate":"2023-10-05"},{"lineNumber":157,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"yanghengtang"},"content":"*  `edit_d ic\\T0212385J n\\Joe Ng` Edits the name of the doctor with NRIC `T0212385J` to be `Joe Ng`.","lastModifiedDate":"2023-10-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"yanghengtang"},"content":"### Locating doctors by name: `find_d`","lastModifiedDate":"2023-10-05"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"yanghengtang"},"content":"Finds doctor whose names contain any of the given keywords.","lastModifiedDate":"2023-10-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"yanghengtang"},"content":"Format: `find_d KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2023-10-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"yanghengtang"},"content":"* Only the name of the doctor is searched.","lastModifiedDate":"2023-10-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"yanghengtang"},"content":"* Doctors matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2023-10-05"},{"lineNumber":173,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"yanghengtang"},"content":"* `find_d John` returns `john` and `John Doe`","lastModifiedDate":"2023-10-05"},{"lineNumber":177,"author":{"gitId":"yanghengtang"},"content":"* `find_d alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":178,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":179,"author":{"gitId":"yanghengtang"},"content":"### Deleting a doctor : `delete_d`","lastModifiedDate":"2023-10-05"},{"lineNumber":180,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":181,"author":{"gitId":"yanghengtang"},"content":"Deletes the specified doctor from the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":183,"author":{"gitId":"yanghengtang"},"content":"Format: `delete_d ic\\NRIC`","lastModifiedDate":"2023-10-06"},{"lineNumber":184,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":185,"author":{"gitId":"yanghengtang"},"content":"* Deletes the doctor with the specified `NRIC`.","lastModifiedDate":"2023-10-05"},{"lineNumber":186,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":187,"author":{"gitId":"yanghengtang"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":188,"author":{"gitId":"yanghengtang"},"content":"* `delete_d ic\\T0212385J` deletes the doctor with NRIC `T0212385J` in the system.","lastModifiedDate":"2023-10-06"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":190,"author":{"gitId":"yanghengtang"},"content":"### Adding an appointment: `add_a`","lastModifiedDate":"2023-10-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":192,"author":{"gitId":"yanghengtang"},"content":"Adds an appointment into the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":194,"author":{"gitId":"mounilsankar"},"content":"Format: `add_a pic\\PATIENT_NRIC dic\\DOCTOR_NRIC from\\START_TIME to\\END_TIME`","lastModifiedDate":"2023-10-13"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":196,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":197,"author":{"gitId":"mounilsankar"},"content":"* `add_a pic\\S9912343G dic\\T0212385J from\\2023-09-11 07:30 to\\2023-09-11 08:00 `","lastModifiedDate":"2023-10-13"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":199,"author":{"gitId":"yanghengtang"},"content":"### Listing all appointments : `list_a`","lastModifiedDate":"2023-10-05"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":201,"author":{"gitId":"yanghengtang"},"content":"Shows a list of all upcoming appointments in the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":203,"author":{"gitId":"yanghengtang"},"content":"Format: `list_a`","lastModifiedDate":"2023-10-05"},{"lineNumber":204,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":205,"author":{"gitId":"yanghengtang"},"content":"### Locating appointment by patient or doctor NRIC: `find_a`","lastModifiedDate":"2023-10-05"},{"lineNumber":206,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":207,"author":{"gitId":"yanghengtang"},"content":"Finds appointment with the specified doctor or patient NRIC.","lastModifiedDate":"2023-10-05"},{"lineNumber":208,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":209,"author":{"gitId":"yanghengtang"},"content":"Format: `find_a [pic\\PATIENT_NRIC] [dic\\DOCTOR_NRIC]`","lastModifiedDate":"2023-10-06"},{"lineNumber":210,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":211,"author":{"gitId":"yanghengtang"},"content":"* Find any appointment of the doctor or patient with the specified `NRIC` has.","lastModifiedDate":"2023-10-05"},{"lineNumber":212,"author":{"gitId":"yanghengtang"},"content":"* At least one of the optional field must be provided","lastModifiedDate":"2023-10-05"},{"lineNumber":213,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":214,"author":{"gitId":"yanghengtang"},"content":"Examples:","lastModifiedDate":"2023-10-05"},{"lineNumber":215,"author":{"gitId":"yanghengtang"},"content":"* `find_a pic\\S9912343G` returns all the appointment the patient with NRIC `S9912343G` has.","lastModifiedDate":"2023-10-06"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"yanghengtang"},"content":"### Deleting an appointment : `delete_a`","lastModifiedDate":"2023-10-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"yanghengtang"},"content":"Deletes the specified appointment from the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"yanghengtang"},"content":"Format: `delete_a pic\\PATIENT_NRIC dic\\DOCTOR_NRIC d\\DATE_TIME`","lastModifiedDate":"2023-10-06"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"yanghengtang"},"content":"* Deletes the appointment with the specified `PATIENT_NRIC`, `DOCTOR_NRIC` and `DATE_TIME`.","lastModifiedDate":"2023-10-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"yanghengtang"},"content":"* `delete_a pic\\S9912343G dic\\T0212385J d\\2023-09-11T07:30` deletes the existing appointment between patient with NRIC `S9912343G` and doctor with NRIC `T0212385J` at `9 Sep 23 7.30am`.","lastModifiedDate":"2023-10-06"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"yanghengtang"},"content":"MediConnect data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2023-10-05"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":240,"author":{"gitId":"yanghengtang"},"content":"MediConnect data are saved automatically as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2023-10-05"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":242,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":243,"author":{"gitId":"yanghengtang"},"content":"If your changes to the data file makes its format invalid, MediConnect will discard all data and start with an empty data file at the next run. Hence, it is recommended to take a backup of the file before editing it.","lastModifiedDate":"2023-10-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":246,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"yanghengtang"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous MediConnect home folder.","lastModifiedDate":"2023-10-05"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":261,"author":{"gitId":"yanghengtang"},"content":"1. _Details coming soon ..._","lastModifiedDate":"2023-10-05"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"yanghengtang"},"content":"| Action                 | Format, Examples                                                                                                                       |","lastModifiedDate":"2023-10-06"},{"lineNumber":268,"author":{"gitId":"mounilsankar"},"content":"|------------------------|----------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-13"},{"lineNumber":269,"author":{"gitId":"yanghengtang"},"content":"| **Add Patient**        | `add_p n\\NAME ic\\NRIC p\\PHONE_NUMBER` \u003cbr\u003e e.g., `add_p n\\John Doe ic\\T0212385J p\\98765432`                                            |","lastModifiedDate":"2023-10-06"},{"lineNumber":270,"author":{"gitId":"yanghengtang"},"content":"| **Add Doctor**         | `add_d n\\NAME ic\\NRIC` \u003cbr\u003e e.g., `add_d n\\John Doe ic\\T0212385J`                                                                      |","lastModifiedDate":"2023-10-06"},{"lineNumber":271,"author":{"gitId":"mounilsankar"},"content":"| **Add Appointment**    | `add_a pic\\PATIENT_NRIC dic\\DOCTOR_NRIC from\\START_TIME to\\END_TIME` \u003cbr\u003e e.g., `add_a pic\\S9912343G dic\\T0212385J d\\2023-09-11T07:30` |","lastModifiedDate":"2023-10-13"},{"lineNumber":272,"author":{"gitId":"yanghengtang"},"content":"| **Delete Patient**     | `delete_p ic\\NRIC`\u003cbr\u003e e.g., `delete_p ic\\T0212385J`                                                                                   |","lastModifiedDate":"2023-10-06"},{"lineNumber":273,"author":{"gitId":"yanghengtang"},"content":"| **Delete Doctor**      | `delete_d ic\\NRIC`\u003cbr\u003e e.g., `delete_d ic\\T0212385J`                                                                                   |","lastModifiedDate":"2023-10-06"},{"lineNumber":274,"author":{"gitId":"yanghengtang"},"content":"| **Delete Appointment** | `delete_a pic\\PATIENT_NRIC dic\\DOCTOR_NRIC d\\DATE_TIME`\u003cbr\u003e e.g., `delete_a pic\\S9912343G dic\\T0212385J d\\2023-09-11T07:30`            |","lastModifiedDate":"2023-10-06"},{"lineNumber":275,"author":{"gitId":"yanghengtang"},"content":"| **Edit Patient**       | `edit_p ic\\NRIC [n\\NAME] [p\\PHONE]`\u003cbr\u003e e.g.,`edit_p ic\\T0212385J n\\Joe Ng`                                                            |","lastModifiedDate":"2023-10-06"},{"lineNumber":276,"author":{"gitId":"yanghengtang"},"content":"| **Edit Doctor**        | `edit_d ic\\NRIC [n\\NAME]`\u003cbr\u003e e.g.,`edit_d ic\\T0212385J n\\Joe Ng`                                                                      |","lastModifiedDate":"2023-10-06"},{"lineNumber":277,"author":{"gitId":"yanghengtang"},"content":"| **Find Patient**       | `find_p KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find_p James Jake`                                                                         |","lastModifiedDate":"2023-10-06"},{"lineNumber":278,"author":{"gitId":"yanghengtang"},"content":"| **Find Patient**       | `find_d KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find_d James Jake`                                                                         |","lastModifiedDate":"2023-10-06"},{"lineNumber":279,"author":{"gitId":"yanghengtang"},"content":"| **List Patient**       | `list_p`                                                                                                                               |","lastModifiedDate":"2023-10-06"},{"lineNumber":280,"author":{"gitId":"yanghengtang"},"content":"| **List Doctor**        | `list_d`                                                                                                                               |","lastModifiedDate":"2023-10-06"},{"lineNumber":281,"author":{"gitId":"yanghengtang"},"content":"| **List Appointment**   | `list_a`                                                                                                                               |","lastModifiedDate":"2023-10-06"},{"lineNumber":282,"author":{"gitId":"yanghengtang"},"content":"| **Help**               | `help`                                                                                                                                 |","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"yanghengtang":135,"mounilsankar":4,"-":143}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"yanghengtang"},"content":"    content: \"MediConnect\";","lastModifiedDate":"2023-10-06"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"yanghengtang":1,"-":294}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"title: MediConnect","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"[![CI Status](https://github.com/AY2324S1-CS2103T-T08-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2324S1-CS2103T-T08-1/tp/actions)","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"[![codecov](https://codecov.io/gh/AY2324S1-CS2103T-T08-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2324S1-CS2103T-T08-1/tp)","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"**MediConnect is a desktop application for managing your patient and doctor details as well as appointment.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"* If you are interested in using MediConnect, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"* If you are interested about developing MediConnect, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"yanghengtang":6,"-":13}},{"path":"docs/team/cheeggered.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"layout: page","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"title: Chee Teng\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"### Project: MediConnect","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"AddressBook - MediConnect is a desktop address book application used for managing hospital staff and patients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"* **New Feature**: ","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"  * What it does: ","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"  * Justification: ","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"  * Highlights: ","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"* **Project management**:","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"  * User Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"* **Community**:","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"  * PRs reviewed (with non-trivial review comments): []()","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"  * Contributed to forum discussions (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([]())","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"* **Tools**:","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"  * Integrated a third party library (Natty) to the project ([]())","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"derekjxtan":39}},{"path":"docs/team/derekjxtan.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"layout: page","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"title: Derek\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"### Project: MediConnect","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"AddressBook - MediConnect is a desktop address book application used for managing hospital staff and patients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"* **New Feature**: ","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"  * What it does: ","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"  * Justification: ","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"  * Highlights: ","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"* **Project management**:","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"  * User Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"* **Community**:","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"  * PRs reviewed (with non-trivial review comments): []()","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"  * Contributed to forum discussions (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([]())","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"* **Tools**:","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"  * Integrated a third party library (Natty) to the project ([]())","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"derekjxtan":39}},{"path":"docs/team/kimshitong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"layout: page","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"title: Shi Tong\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"### Project: MediConnect","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"AddressBook - MediConnect is a desktop address book application used for managing hospital staff and patients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"* **New Feature**: ","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"  * What it does: ","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"  * Justification: ","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"  * Highlights: ","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"* **Project management**:","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"  * User Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"* **Community**:","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"  * PRs reviewed (with non-trivial review comments): []()","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"  * Contributed to forum discussions (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([]())","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"* **Tools**:","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"  * Integrated a third party library (Natty) to the project ([]())","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"derekjxtan":39}},{"path":"docs/team/mounilsankar.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"layout: page","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"title: Mounil\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"### Project: MediConnect","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"AddressBook - MediConnect is a desktop address book application used for managing hospital staff and patients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"* **New Feature**: ","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"  * What it does: ","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"  * Justification: ","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"  * Highlights: ","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"* **Project management**:","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"  * User Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"* **Community**:","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"  * PRs reviewed (with non-trivial review comments): []()","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"  * Contributed to forum discussions (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([]())","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"* **Tools**:","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"  * Integrated a third party library (Natty) to the project ([]())","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"derekjxtan":39}},{"path":"docs/team/yanghengtang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"layout: page","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"title: Yang Heng\u0027s Project Portfolio Page","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"### Project: MediConnect","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"AddressBook - MediConnect is a desktop address book application used for managing hospital staff and patients. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"* **New Feature**: ","lastModifiedDate":"2023-10-03"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"  * What it does: ","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"  * Justification: ","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"  * Highlights: ","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"* **Project management**:","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"  * ","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-03"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"  * User Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-03"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    * ","lastModifiedDate":"2023-10-03"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"* **Community**:","lastModifiedDate":"2023-10-03"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"  * PRs reviewed (with non-trivial review comments): []()","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"  * Contributed to forum discussions (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: []())","lastModifiedDate":"2023-10-03"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([]())","lastModifiedDate":"2023-10-03"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"* **Tools**:","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"  * Integrated a third party library (Natty) to the project ([]())","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"derekjxtan":39}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        builder.append(person.getName())","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .append(person.getPhone())","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .append(person.getEmail())","lastModifiedDate":"2019-02-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                .append(person.getAddress())","lastModifiedDate":"2019-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .append(\"; Tags: \");","lastModifiedDate":"2019-02-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        person.getTags().forEach(builder::append);","lastModifiedDate":"2019-02-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"     * Formats the {@code appointment} for display to the user.","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"    public static String format(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"        builder.append(\"Patient NRIC: \")","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"                .append(appointment.getPatientNric())","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"                .append(\"; Doctor NRIC: \")","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"                .append(appointment.getDoctorNric())","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"                .append(\"; From: \")","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"                .append(appointment.getStartTime())","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"                .append(\"; to: \")","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"                .append(appointment.getEndTime());","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"cheeggered"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"cheeggered"},"content":"     * Formats the {@code patient} for display to the user.","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"cheeggered"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"cheeggered"},"content":"    public static String format(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"cheeggered"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"cheeggered"},"content":"        builder.append(patient.getName())","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"cheeggered"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"cheeggered"},"content":"                .append(patient.getPhone())","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"cheeggered"},"content":"                .append(\"; NRIC: \")","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"cheeggered"},"content":"                .append(patient.getNric());","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"cheeggered"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"kimshitong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"kimshitong"},"content":"     * Formats the {@code doctor} for display to the user.","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"kimshitong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"kimshitong"},"content":"    public static String format(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"kimshitong"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"kimshitong"},"content":"        builder.append(doctor.getName())","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"kimshitong"},"content":"                .append(\"; Nric: \")","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"kimshitong"},"content":"                .append(doctor.getNric());","lastModifiedDate":"2023-10-12"},{"lineNumber":92,"author":{"gitId":"kimshitong"},"content":"        return builder.toString();","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":94,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":95,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"mounilsankar":17,"-":51,"kimshitong":13,"cheeggered":15}},{"path":"src/main/java/seedu/address/logic/NewLogic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":" * API of the Logic component","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"public interface NewLogic {","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * Returns the database.","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     * @see seedu.address.model.NewModel#getDatabase()","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    ReadOnlyDatabase getDatabase();","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"    /** Returns an unmodifiable view of the filtered list of Appointments */","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    /** Returns an unmodifiable view of the filtered list of Patients */","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"    /** Returns an unmodifiable view of the filtered list of Doctors */","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    ObservableList\u003cDoctor\u003e getFilteredDoctorList();","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    Path getDatabaseFilePath();","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":58}},{"path":"src/main/java/seedu/address/logic/NewLogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.NewCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.parser.NewAddressBookParser;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"public class NewLogicManager implements NewLogic {","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    private final NewModel model;","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    private final Storage storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"    private final NewAddressBookParser newAddressBookParser;","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    public NewLogicManager(NewModel model, Storage storage) {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        this.model \u003d model;","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        newAddressBookParser \u003d new NewAddressBookParser();","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        CommandResult commandResult;","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"        NewCommand command \u003d newAddressBookParser.parseCommand(commandText);","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"        //save to database logic to be implemented here","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"        return commandResult;","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"    public ReadOnlyDatabase getDatabase() {","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"        return model.getDatabase();","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"        return model.getFilteredPatientList();","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"        return model.getFilteredDoctorList();","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"    public Path getDatabaseFilePath() {","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"        return model.getDatabaseFilePath();","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"mounilsankar"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"mounilsankar"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"mounilsankar"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"mounilsankar"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":89}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_END_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_START_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":" * Adds a person to the address book.","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"public class AddAppointmentCommand extends NewCommand {","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    public static final String COMMAND_WORD \u003d \"add_a\";","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the address book. \"","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"            + PREFIX_PATIENT_NRIC + \"PATIENT_NRIC\"","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"            + PREFIX_DOCTOR_NRIC + \"DOCTOR_NRIC\"","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"            + PREFIX_APPOINTMENT_START_TIME + \"START_TIME \"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"            + PREFIX_APPOINTMENT_END_TIME + \"END_TIME \";","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"            \"This Appointment already exists in the list of appointments\";","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    public static final String MESSAGE_INVALID_DOCTOR \u003d \"This Doctor does not exist in the list of doctors\";","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    public static final String MESSAGE_INVALID_PATIENT \u003d \"This Patient does not exist in the list of patients\";","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"    private final Appointment toAdd;","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"    public AddAppointmentCommand(Appointment appointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        toAdd \u003d appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    public CommandResult execute(NewModel model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        if (!model.hasDoctorWithNric(toAdd.getDoctorNric())) {","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"            throw new CommandException(MESSAGE_INVALID_DOCTOR);","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"        if (!model.hasPatientWithNric(toAdd.getPatientNric())) {","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"            throw new CommandException(MESSAGE_INVALID_PATIENT);","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"        if (model.hasAppointment(toAdd)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"        model.addAppointment(toAdd);","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"        if (!(other instanceof AddAppointmentCommand)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"        AddAppointmentCommand otherAddCommand \u003d (AddAppointmentCommand) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"mounilsankar"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"mounilsankar"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-12"},{"lineNumber":83,"author":{"gitId":"mounilsankar"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"mounilsankar"},"content":"                .toString();","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"mounilsankar":86}},{"path":"src/main/java/seedu/address/logic/commands/AddDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kimshitong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"kimshitong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"kimshitong"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"kimshitong"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"kimshitong"},"content":" * Adds a doctor to the database.","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"kimshitong"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"kimshitong"},"content":"public class AddDoctorCommand extends NewCommand {","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"kimshitong"},"content":"    public static final String COMMAND_WORD \u003d \"add_d\";","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"kimshitong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a doctor to the database. \"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"kimshitong"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"kimshitong"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"kimshitong"},"content":"            + PREFIX_NRIC + \"NRIC\";","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"kimshitong"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New doctor added: %1$s\";","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"kimshitong"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"This doctor already exists in the database\";","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"kimshitong"},"content":"    private final Doctor toAdd;","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"kimshitong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"kimshitong"},"content":"     * Creates an AddDoctorCommand to add the specified {@code Doctor}","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"kimshitong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"kimshitong"},"content":"    public AddDoctorCommand(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"kimshitong"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"kimshitong"},"content":"        toAdd \u003d doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"kimshitong"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"kimshitong"},"content":"    public CommandResult execute(NewModel model) throws CommandException {","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"kimshitong"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"kimshitong"},"content":"        if (model.hasDoctor(toAdd)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"kimshitong"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"kimshitong"},"content":"        model.addDoctor(toAdd);","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"kimshitong"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"kimshitong"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"kimshitong"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"kimshitong"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"kimshitong"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"kimshitong"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"kimshitong"},"content":"        if (!(other instanceof AddDoctorCommand)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"kimshitong"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"kimshitong"},"content":"        AddDoctorCommand otherAddCommand \u003d (AddDoctorCommand) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"kimshitong"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"kimshitong"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"kimshitong"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"kimshitong"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"kimshitong"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"kimshitong"},"content":"                .toString();","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"kimshitong"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"kimshitong":71}},{"path":"src/main/java/seedu/address/logic/commands/AddPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeggered"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"cheeggered"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"cheeggered"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"cheeggered"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"cheeggered"},"content":" * Adds a patient to the database.","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"cheeggered"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"cheeggered"},"content":"public class AddPatientCommand extends NewCommand {","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"cheeggered"},"content":"    public static final String COMMAND_WORD \u003d \"add_p\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"cheeggered"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the database. \"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"cheeggered"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"cheeggered"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"cheeggered"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"cheeggered"},"content":"            + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"cheeggered"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"cheeggered"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"cheeggered"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"cheeggered"},"content":"            + PREFIX_NRIC + \"A0123456B \";","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"cheeggered"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"cheeggered"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in the database\";","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"cheeggered"},"content":"    private final Patient toAdd;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"cheeggered"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"cheeggered"},"content":"     * Creates an AddPatientCommand to add the specified {@code Patient}","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"cheeggered"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"cheeggered"},"content":"    public AddPatientCommand(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"cheeggered"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"cheeggered"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"cheeggered"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"cheeggered"},"content":"    public CommandResult execute(NewModel model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"cheeggered"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"cheeggered"},"content":"        if (model.hasPatient(toAdd)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"cheeggered"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"cheeggered"},"content":"        model.addPatient(toAdd);","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"cheeggered"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"cheeggered"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"cheeggered"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"cheeggered"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"cheeggered"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"cheeggered"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"cheeggered"},"content":"        if (!(other instanceof AddPatientCommand)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"cheeggered"},"content":"            return false;","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"cheeggered"},"content":"        AddPatientCommand otherAddPatientCommand \u003d (AddPatientCommand) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"cheeggered"},"content":"        return toAdd.equals(otherAddPatientCommand.toAdd);","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"cheeggered"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"cheeggered"},"content":"    public String toString() {","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"cheeggered"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"cheeggered"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"cheeggered"},"content":"                .toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"cheeggered"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"cheeggered":74}},{"path":"src/main/java/seedu/address/logic/commands/NewCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"public abstract class NewCommand {","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    public abstract CommandResult execute(NewModel model) throws CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":20}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_END_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_START_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.AppointmentEndTime;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.AppointmentStartTime;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"public class AddAppointmentCommandParser implements NewParser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"                        PREFIX_PATIENT_NRIC,","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"                        PREFIX_DOCTOR_NRIC,","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"                        PREFIX_APPOINTMENT_START_TIME, PREFIX_APPOINTMENT_END_TIME);","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        if (!arePrefixesPresent(argMultimap,","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"                PREFIX_PATIENT_NRIC,","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"                PREFIX_DOCTOR_NRIC,","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"                PREFIX_APPOINTMENT_START_TIME,","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"                PREFIX_APPOINTMENT_END_TIME)","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_PATIENT_NRIC,","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"                PREFIX_DOCTOR_NRIC,","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"                PREFIX_APPOINTMENT_START_TIME,","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"                PREFIX_APPOINTMENT_END_TIME);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"        Nric patientNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_PATIENT_NRIC).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        Nric doctorNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_DOCTOR_NRIC).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"        AppointmentStartTime start \u003d ParserUtil","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"                .parseAppointmentStartTime(argMultimap.getValue(PREFIX_APPOINTMENT_START_TIME).get());","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"        AppointmentEndTime end \u003d ParserUtil","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"                .parseAppointmentEndTime(argMultimap.getValue(PREFIX_APPOINTMENT_END_TIME).get());","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"        Appointment appointment \u003d new Appointment(doctorNric, patientNric, start, end);","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"        return new AddAppointmentCommand(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"mounilsankar":68}},{"path":"src/main/java/seedu/address/logic/parser/AddDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kimshitong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"kimshitong"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.commands.AddDoctorCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"kimshitong"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"kimshitong"},"content":" * Parses input arguments and creates a new AddDoctorCommand object","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"kimshitong"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"kimshitong"},"content":"public class AddDoctorCommandParser implements NewParser\u003cAddDoctorCommand\u003e {","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"kimshitong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"kimshitong"},"content":"     * Parses the given {@code String} of arguments in the context of the AddDoctorCommand","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"kimshitong"},"content":"     * and returns an AddDoctorCommand object for execution.","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"kimshitong"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"kimshitong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"kimshitong"},"content":"    public AddDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"kimshitong"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"kimshitong"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC);","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"kimshitong"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC)","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"kimshitong"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"kimshitong"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"kimshitong"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_NRIC);","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"kimshitong"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"kimshitong"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"kimshitong"},"content":"        Doctor doctor \u003d new Doctor(name, nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"kimshitong"},"content":"        return new AddDoctorCommand(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"kimshitong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"kimshitong"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"kimshitong"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"kimshitong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"kimshitong"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"kimshitong"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"kimshitong"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"kimshitong":52}},{"path":"src/main/java/seedu/address/logic/parser/AddPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeggered"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"cheeggered"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.commands.NewCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"cheeggered"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"cheeggered"},"content":" * Parses input arguments and creates a new AddPatientCommand object","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"cheeggered"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"cheeggered"},"content":"public class AddPatientCommandParser implements NewParser\u003cNewCommand\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"cheeggered"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"cheeggered"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPatientCommand","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"cheeggered"},"content":"     * and returns an AddPatientCommand object for execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"cheeggered"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"cheeggered"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"cheeggered"},"content":"    public NewCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"cheeggered"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"cheeggered"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE);","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"cheeggered"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE)","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"cheeggered"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"cheeggered"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"cheeggered"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE);","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"cheeggered"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"cheeggered"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"cheeggered"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"cheeggered"},"content":"        Patient patient \u003d new Patient(name, phone, nric);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"cheeggered"},"content":"        return new AddPatientCommand(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"cheeggered"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"cheeggered"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"cheeggered"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"cheeggered"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"cheeggered"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"cheeggered"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"cheeggered"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"cheeggered":60}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"kimshitong"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    public static final Prefix PREFIX_PATIENT_NRIC \u003d new Prefix(\"pic\\\\\");","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    public static final Prefix PREFIX_DOCTOR_NRIC \u003d new Prefix(\"dic\\\\\");","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    public static final Prefix PREFIX_APPOINTMENT_START_TIME \u003d new Prefix(\"from\\\\\");","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    public static final Prefix PREFIX_APPOINTMENT_END_TIME \u003d new Prefix(\"to\\\\\");","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"mounilsankar":4,"-":15,"kimshitong":1}},{"path":"src/main/java/seedu/address/logic/parser/NewAddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.NewCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":" * Parses user input.","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"public class NewAddressBookParser {","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     * @param userInput full user input string","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"    public NewCommand parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"        case AddAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"            return new AddAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"cheeggered"},"content":"        case AddPatientCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"cheeggered"},"content":"            return new AddPatientCommandParser().parse(arguments);","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"        default:","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":59,"cheeggered":3}},{"path":"src/main/java/seedu/address/logic/parser/NewParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kimshitong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.commands.NewCommand;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"kimshitong"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"kimshitong"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"kimshitong"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"kimshitong"},"content":"public interface NewParser\u003cT extends NewCommand\u003e {","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"kimshitong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"kimshitong"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"kimshitong"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"kimshitong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"kimshitong"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"kimshitong"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"kimshitong":16}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.AppointmentEndTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.AppointmentStartTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"mounilsankar"},"content":"     * Parses {@code nric} into an {@code NRIC} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"mounilsankar"},"content":"     * trimmed.","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"mounilsankar"},"content":"     * @throws ParseException if the specified nric is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"mounilsankar"},"content":"    public static Nric parseNric(String nric) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"mounilsankar"},"content":"        String trimmedNric \u003d nric.trim().toUpperCase();","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"mounilsankar"},"content":"        if (!Nric.isValidNric(trimmedNric)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"mounilsankar"},"content":"            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"mounilsankar"},"content":"        return new Nric(trimmedNric);","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"mounilsankar"},"content":"     * Parses {@code time} into an {@code AppointmentStartTime} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2023-10-12"},{"lineNumber":131,"author":{"gitId":"mounilsankar"},"content":"     * trimmed.","lastModifiedDate":"2023-10-12"},{"lineNumber":132,"author":{"gitId":"mounilsankar"},"content":"     * @throws ParseException if the specified time is invalid (or not correct format).","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":134,"author":{"gitId":"mounilsankar"},"content":"    public static AppointmentStartTime parseAppointmentStartTime(String time) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"mounilsankar"},"content":"        String trimmedTime \u003d time.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"mounilsankar"},"content":"        if (!AppointmentStartTime.isValidAppointmmentTime(trimmedTime)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":137,"author":{"gitId":"mounilsankar"},"content":"            throw new ParseException(AppointmentStartTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"mounilsankar"},"content":"        return new AppointmentStartTime(trimmedTime);","lastModifiedDate":"2023-10-12"},{"lineNumber":140,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"mounilsankar"},"content":"     * Parses {@code time} into an {@code AppointmentEndTime} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"mounilsankar"},"content":"     * trimmed.","lastModifiedDate":"2023-10-12"},{"lineNumber":145,"author":{"gitId":"mounilsankar"},"content":"     * @throws ParseException if the specified time is invalid (or not correct format).","lastModifiedDate":"2023-10-12"},{"lineNumber":146,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"mounilsankar"},"content":"    public static AppointmentEndTime parseAppointmentEndTime(String time) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":148,"author":{"gitId":"mounilsankar"},"content":"        String trimmedTime \u003d time.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":149,"author":{"gitId":"mounilsankar"},"content":"        if (!AppointmentEndTime.isValidAppointmmentTime(trimmedTime)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"mounilsankar"},"content":"            throw new ParseException(AppointmentEndTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"mounilsankar"},"content":"        return new AppointmentEndTime(trimmedTime);","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"mounilsankar":42,"-":124}},{"path":"src/main/java/seedu/address/model/Database.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import java.util.List;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.patient.UniqueItemList;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":" * Wraps all data at the system level","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":" * Duplicates are not allowed (by .isSame comparison)","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"public class Database implements ReadOnlyDatabase {","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"    private final UniqueItemList\u003cAppointment\u003e appointments;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"    private final UniqueItemList\u003cDoctor\u003e doctors;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"    private final UniqueItemList\u003cPatient\u003e patients;","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"     * Creates a new empty Database.","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"    public Database() {","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"        appointments \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"        doctors \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"        patients \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"     * Creates a Database using the Persons in the {@code toBeCopied}","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"    public Database(ReadOnlyDatabase toBeCopied) {","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"        this();","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"        setAppointments(toBeCopied.getAppointmentList());","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"        setDoctors(toBeCopied.getDoctorList());","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"        setPatients(toBeCopied.getPatientList());","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"     * Replaces the contents of the appointment list with {@code appointments}.","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"     * {@code appointments} must not contain duplicate appointments.","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"        this.appointments.setItems(appointments);","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"     * Replaces the contents of the doctor list with {@code doctors}.","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"     * {@code doctors} must not contain duplicate doctors.","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"    public void setDoctors(List\u003cDoctor\u003e doctors) {","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"        this.doctors.setItems(doctors);","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"     * Replaces the contents of the doctor list with {@code doctors}.","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"     * {@code doctors} must not contain duplicate doctors.","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"        this.patients.setItems(patients);","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if an appointment with the same key fields as {@code appointment} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"yanghengtang"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"        return appointments.contains(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"     * Adds an appointment to the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"     * The appointment must not already exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"        appointments.add(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"     * {@code target} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"     * The key fields of {@code editedAppointment} must not be the same as another existing appointment in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":92,"author":{"gitId":"yanghengtang"},"content":"        appointments.setItem(target, editedAppointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":94,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":95,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":96,"author":{"gitId":"yanghengtang"},"content":"     * Removes {@code appointment} from this {@code Database}.","lastModifiedDate":"2023-10-12"},{"lineNumber":97,"author":{"gitId":"yanghengtang"},"content":"     * {@code appointment} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":98,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":99,"author":{"gitId":"yanghengtang"},"content":"    public void removeAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":100,"author":{"gitId":"yanghengtang"},"content":"        appointments.remove(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":101,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":102,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":103,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":104,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if a doctor with the same NRIC as {@code appointment} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":105,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"yanghengtang"},"content":"    public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":107,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"yanghengtang"},"content":"        return doctors.contains(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"derekjxtan"},"content":"     * Returns true if a doctor with the given NRIC as {@code nric} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"derekjxtan"},"content":"    public boolean hasDoctorWithNric(Nric nric) {","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"derekjxtan"},"content":"        return doctors.contains(doctor -\u003e doctor.getNric().equals(nric));","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"yanghengtang"},"content":"     * Adds a doctor to the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"yanghengtang"},"content":"     * The doctor must not already exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"yanghengtang"},"content":"    public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"yanghengtang"},"content":"        doctors.add(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"yanghengtang"},"content":"     * Replaces the given doctor {@code target} in the list with {@code editedDoctor}.","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"yanghengtang"},"content":"     * {@code target} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"yanghengtang"},"content":"     * The NRIC of {@code editedDoctor} must not be the same as another existing doctor in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":131,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":132,"author":{"gitId":"yanghengtang"},"content":"    public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(editedDoctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":134,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"yanghengtang"},"content":"        doctors.setItem(target, editedDoctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":137,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"yanghengtang"},"content":"     * Removes {@code doctor} from this {@code Database}.","lastModifiedDate":"2023-10-12"},{"lineNumber":140,"author":{"gitId":"yanghengtang"},"content":"     * {@code doctor} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"yanghengtang"},"content":"    public void removeDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"yanghengtang"},"content":"        doctors.remove(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":145,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":146,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if a patient with the same NRIC as {@code appointment} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":148,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":149,"author":{"gitId":"yanghengtang"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"yanghengtang"},"content":"        return patients.contains(patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"derekjxtan"},"content":"     * Returns true if a patient with the given NRIC {@code nric} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"derekjxtan"},"content":"    public boolean hasPatientWithNric(Nric nric) {","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"derekjxtan"},"content":"        return patients.contains(patient -\u003e patient.getNric().equals(nric));","lastModifiedDate":"2023-10-12"},{"lineNumber":160,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":161,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":163,"author":{"gitId":"yanghengtang"},"content":"     * Adds a patient to the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":164,"author":{"gitId":"yanghengtang"},"content":"     * The patient must not already exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"yanghengtang"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":167,"author":{"gitId":"yanghengtang"},"content":"        patients.add(patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":168,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":169,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":170,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":171,"author":{"gitId":"yanghengtang"},"content":"     * Replaces the given patient {@code target} in the list with {@code editedDoctor}.","lastModifiedDate":"2023-10-12"},{"lineNumber":172,"author":{"gitId":"yanghengtang"},"content":"     * {@code target} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":173,"author":{"gitId":"yanghengtang"},"content":"     * The NRIC of {@code editedDoctor} must not be the same as another existing patient in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":174,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"yanghengtang"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(editedPatient);","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":178,"author":{"gitId":"yanghengtang"},"content":"        patients.setItem(target, editedPatient);","lastModifiedDate":"2023-10-12"},{"lineNumber":179,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":180,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":181,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":182,"author":{"gitId":"yanghengtang"},"content":"     * Removes {@code patient} from this {@code Database}.","lastModifiedDate":"2023-10-12"},{"lineNumber":183,"author":{"gitId":"yanghengtang"},"content":"     * {@code patient} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":184,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":185,"author":{"gitId":"yanghengtang"},"content":"    public void removePatient(Patient patient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":186,"author":{"gitId":"yanghengtang"},"content":"        patients.remove(patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":187,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":188,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":189,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":190,"author":{"gitId":"yanghengtang"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":191,"author":{"gitId":"yanghengtang"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-12"},{"lineNumber":192,"author":{"gitId":"yanghengtang"},"content":"                .add(\"appointments\", appointments)","lastModifiedDate":"2023-10-12"},{"lineNumber":193,"author":{"gitId":"yanghengtang"},"content":"                .add(\"doctors\", doctors)","lastModifiedDate":"2023-10-12"},{"lineNumber":194,"author":{"gitId":"yanghengtang"},"content":"                .add(\"patients\", patients)","lastModifiedDate":"2023-10-12"},{"lineNumber":195,"author":{"gitId":"yanghengtang"},"content":"                .toString();","lastModifiedDate":"2023-10-12"},{"lineNumber":196,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":197,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":198,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":199,"author":{"gitId":"yanghengtang"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":200,"author":{"gitId":"yanghengtang"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-12"},{"lineNumber":201,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":202,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":203,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":204,"author":{"gitId":"yanghengtang"},"content":"    public ObservableList\u003cDoctor\u003e getDoctorList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":205,"author":{"gitId":"yanghengtang"},"content":"        return doctors.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-12"},{"lineNumber":206,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":207,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":208,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":209,"author":{"gitId":"yanghengtang"},"content":"    public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":210,"author":{"gitId":"yanghengtang"},"content":"        return patients.asUnmodifiableObservableList();","lastModifiedDate":"2023-10-12"},{"lineNumber":211,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":212,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":213,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":214,"author":{"gitId":"yanghengtang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":215,"author":{"gitId":"yanghengtang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":216,"author":{"gitId":"yanghengtang"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":217,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":218,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":219,"author":{"gitId":"yanghengtang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":220,"author":{"gitId":"yanghengtang"},"content":"        if (!(other instanceof Database)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":221,"author":{"gitId":"yanghengtang"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":222,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":223,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":224,"author":{"gitId":"yanghengtang"},"content":"        Database otherDatabase \u003d (Database) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":225,"author":{"gitId":"yanghengtang"},"content":"        return appointments.equals(otherDatabase.appointments)","lastModifiedDate":"2023-10-12"},{"lineNumber":226,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 doctors.equals(otherDatabase.doctors)","lastModifiedDate":"2023-10-12"},{"lineNumber":227,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 patients.equals(otherDatabase.patients);","lastModifiedDate":"2023-10-12"},{"lineNumber":228,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":229,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":230,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":231,"author":{"gitId":"yanghengtang"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":232,"author":{"gitId":"yanghengtang"},"content":"        return Objects.hash(appointments, doctors, patients);","lastModifiedDate":"2023-10-12"},{"lineNumber":233,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":234,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"yanghengtang":217,"derekjxtan":17}},{"path":"src/main/java/seedu/address/model/Listable.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":" * A interface for all classes that needs to be added to a UniqueList to implement.","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"public interface Listable {","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"     * Checks if 2 Listables are the same. This method is separate from equals as it represents a weaker notion of","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"     * equality.","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"     * @param otherListable Another Listable to compare the current instance to.","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"     * @return True if both listables are the same.","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"    public boolean isSame(Listable otherListable);","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"derekjxtan":17}},{"path":"src/main/java/seedu/address/model/NewModel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":" * The API of the Model component.","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"public interface NewModel {","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"    Predicate\u003cDoctor\u003e PREDICATE_SHOW_ALL_DOCTORS \u003d unused -\u003e true;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"     * Returns the user prefs.","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"     * Returns the user prefs\u0027 database file path.","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"    Path getDatabaseFilePath();","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"     * Sets the user prefs\u0027 database file path.","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"    void setDatabaseFilePath(Path addressBookFilePath);","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"     * Replaces current Database data with the data in {@code database}.","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"    void setDatabase(ReadOnlyDatabase database);","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"    /** Returns the Database */","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"    ReadOnlyDatabase getDatabase();","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if an appointment with the same fields as {@code appointment} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"yanghengtang"},"content":"    boolean hasAppointment(Appointment appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if a doctor with the same NRIC as {@code doctor} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"    boolean hasDoctor(Doctor doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if a patient with the same NRIC as {@code patient} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"    boolean hasPatient(Patient patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if a doctor with the same NRIC as {@code doctor} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"    boolean hasDoctorWithNric(Nric nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if a patient with the same NRIC as {@code patient} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"yanghengtang"},"content":"    boolean hasPatientWithNric(Nric nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":92,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"yanghengtang"},"content":"     * Deletes the given appointment.","lastModifiedDate":"2023-10-12"},{"lineNumber":94,"author":{"gitId":"yanghengtang"},"content":"     * The appointment must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":95,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":96,"author":{"gitId":"yanghengtang"},"content":"    void deleteAppointment(Appointment target);","lastModifiedDate":"2023-10-12"},{"lineNumber":97,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":98,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":99,"author":{"gitId":"yanghengtang"},"content":"     * Deletes the given doctor.","lastModifiedDate":"2023-10-12"},{"lineNumber":100,"author":{"gitId":"yanghengtang"},"content":"     * The doctor must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":101,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":102,"author":{"gitId":"yanghengtang"},"content":"    void deleteDoctor(Doctor target);","lastModifiedDate":"2023-10-12"},{"lineNumber":103,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":104,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":105,"author":{"gitId":"yanghengtang"},"content":"     * Deletes the given patient.","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"yanghengtang"},"content":"     * The patient must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":107,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"yanghengtang"},"content":"    void deletePatient(Patient target);","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"yanghengtang"},"content":"     * Adds the given appointment.","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"yanghengtang"},"content":"     * {@code appointment} must not already exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"yanghengtang"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"yanghengtang"},"content":"     * Adds the given doctor.","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"yanghengtang"},"content":"     * {@code doctor} must not already exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"yanghengtang"},"content":"    void addDoctor(Doctor doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"yanghengtang"},"content":"     * Adds the patient doctor.","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"yanghengtang"},"content":"     * {@code patient} must not already exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"yanghengtang"},"content":"    void addPatient(Patient patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"yanghengtang"},"content":"     * Replaces the given appointment {@code target} with {@code editedAppointment}.","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"yanghengtang"},"content":"     * {@code target} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":131,"author":{"gitId":"yanghengtang"},"content":"     * The doctor, patient and dateTime of {@code editedAppointment} must not be the same as another existing","lastModifiedDate":"2023-10-12"},{"lineNumber":132,"author":{"gitId":"yanghengtang"},"content":"     * appointment in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":134,"author":{"gitId":"yanghengtang"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":137,"author":{"gitId":"yanghengtang"},"content":"     * Replaces the given doctor {@code target} with {@code editedDoctor}.","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"yanghengtang"},"content":"     * {@code target} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"yanghengtang"},"content":"     * The NRIC of {@code editedDoctor} must not be the same as another existing doctor in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":140,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"yanghengtang"},"content":"    void setDoctor(Doctor target, Doctor editedDoctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"yanghengtang"},"content":"     * Replaces the given patient {@code target} with {@code editedPatient}.","lastModifiedDate":"2023-10-12"},{"lineNumber":145,"author":{"gitId":"yanghengtang"},"content":"     * {@code target} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":146,"author":{"gitId":"yanghengtang"},"content":"     * The NRIC of {@code editedPatient} must not be the same as another existing patient in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":148,"author":{"gitId":"yanghengtang"},"content":"    void setPatient(Patient target, Patient editedPatient);","lastModifiedDate":"2023-10-12"},{"lineNumber":149,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"yanghengtang"},"content":"    /** Returns an unmodifiable view of the filtered appointment list */","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"yanghengtang"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"yanghengtang"},"content":"    /** Returns an unmodifiable view of the filtered doctor list */","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"yanghengtang"},"content":"    ObservableList\u003cDoctor\u003e getFilteredDoctorList();","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"yanghengtang"},"content":"    /** Returns an unmodifiable view of the filtered patient list */","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"yanghengtang"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":160,"author":{"gitId":"yanghengtang"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-12"},{"lineNumber":161,"author":{"gitId":"yanghengtang"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":163,"author":{"gitId":"yanghengtang"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":164,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"yanghengtang"},"content":"     * Updates the filter of the filtered doctor list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-12"},{"lineNumber":167,"author":{"gitId":"yanghengtang"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-12"},{"lineNumber":168,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":169,"author":{"gitId":"yanghengtang"},"content":"    void updateFilteredDoctorList(Predicate\u003cDoctor\u003e predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":170,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":171,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":172,"author":{"gitId":"yanghengtang"},"content":"     * Updates the filter of the filtered patient list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-12"},{"lineNumber":173,"author":{"gitId":"yanghengtang"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-12"},{"lineNumber":174,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"yanghengtang"},"content":"    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"yanghengtang":176}},{"path":"src/main/java/seedu/address/model/NewModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"public class NewModelManager implements NewModel {","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"    private final Database database;","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"    private final FilteredList\u003cDoctor\u003e filteredDoctors;","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"    public NewModelManager(ReadOnlyDatabase database, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"        requireAllNonNull(database, userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"        logger.fine(\"Initializing with database: \" + database + \" and user prefs \" + userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"        this.database \u003d new Database(database);","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.database.getAppointmentList());","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"        filteredDoctors \u003d new FilteredList\u003c\u003e(this.database.getDoctorList());","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.database.getPatientList());","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"    public NewModelManager() {","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"        this(new Database(), new UserPrefs());","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"        return userPrefs;","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"yanghengtang"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"    public Path getDatabaseFilePath() {","lastModifiedDate":"2023-10-12"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"        return userPrefs.getDatabaseFilePath();","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"    public void setDatabaseFilePath(Path databaseFilePath) {","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(databaseFilePath);","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"        userPrefs.setDatabaseFilePath(databaseFilePath);","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Database \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"    public void setDatabase(ReadOnlyDatabase database) {","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"        this.database.setDoctors(database.getDoctorList());","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"        this.database.setPatients(database.getPatientList());","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"yanghengtang"},"content":"        this.database.setAppointments(database.getAppointmentList());","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":92,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":94,"author":{"gitId":"yanghengtang"},"content":"    public ReadOnlyDatabase getDatabase() {","lastModifiedDate":"2023-10-12"},{"lineNumber":95,"author":{"gitId":"yanghengtang"},"content":"        return database;","lastModifiedDate":"2023-10-12"},{"lineNumber":96,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":97,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":98,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":99,"author":{"gitId":"yanghengtang"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":100,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":101,"author":{"gitId":"yanghengtang"},"content":"        return database.hasAppointment(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":102,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":103,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":104,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":105,"author":{"gitId":"yanghengtang"},"content":"    public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":107,"author":{"gitId":"yanghengtang"},"content":"        return database.hasDoctor(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"yanghengtang"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"yanghengtang"},"content":"        return database.hasPatient(patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"yanghengtang"},"content":"    public boolean hasDoctorWithNric(Nric nric) {","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"yanghengtang"},"content":"        return database.hasDoctorWithNric(nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"yanghengtang"},"content":"    public boolean hasPatientWithNric(Nric nric) {","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"yanghengtang"},"content":"        return database.hasPatientWithNric(nric);","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"yanghengtang"},"content":"    public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"yanghengtang"},"content":"        database.removeAppointment(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":131,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":132,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":134,"author":{"gitId":"yanghengtang"},"content":"    public void deleteDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"yanghengtang"},"content":"        database.removeDoctor(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":137,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"yanghengtang"},"content":"    public void deletePatient(Patient patient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":140,"author":{"gitId":"yanghengtang"},"content":"        database.removePatient(patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"yanghengtang"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":145,"author":{"gitId":"yanghengtang"},"content":"        database.addAppointment(appointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":146,"author":{"gitId":"yanghengtang"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":148,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":149,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"yanghengtang"},"content":"    public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"yanghengtang"},"content":"        database.addDoctor(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"yanghengtang"},"content":"        updateFilteredDoctorList(PREDICATE_SHOW_ALL_DOCTORS);","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"yanghengtang"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"yanghengtang"},"content":"        database.addPatient(patient);","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"yanghengtang"},"content":"        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":160,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":161,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"yanghengtang"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":163,"author":{"gitId":"yanghengtang"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":164,"author":{"gitId":"yanghengtang"},"content":"        database.setAppointment(target, editedAppointment);","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":167,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":168,"author":{"gitId":"yanghengtang"},"content":"    public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":169,"author":{"gitId":"yanghengtang"},"content":"        requireAllNonNull(target, editedDoctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":170,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":171,"author":{"gitId":"yanghengtang"},"content":"        database.setDoctor(target, editedDoctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":172,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":173,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":174,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"yanghengtang"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"yanghengtang"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":178,"author":{"gitId":"yanghengtang"},"content":"        database.setPatient(target, editedPatient);","lastModifiedDate":"2023-10-12"},{"lineNumber":179,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":180,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":181,"author":{"gitId":"yanghengtang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":182,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":183,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":184,"author":{"gitId":"yanghengtang"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of","lastModifiedDate":"2023-10-12"},{"lineNumber":185,"author":{"gitId":"yanghengtang"},"content":"     * {@code versionedDatabase}","lastModifiedDate":"2023-10-12"},{"lineNumber":186,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":187,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":188,"author":{"gitId":"yanghengtang"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":189,"author":{"gitId":"yanghengtang"},"content":"        return filteredAppointments;","lastModifiedDate":"2023-10-12"},{"lineNumber":190,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":191,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":192,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":193,"author":{"gitId":"yanghengtang"},"content":"     * Returns an unmodifiable view of the list of {@code Doctor} backed by the internal list of","lastModifiedDate":"2023-10-12"},{"lineNumber":194,"author":{"gitId":"yanghengtang"},"content":"     * {@code versionedDatabase}","lastModifiedDate":"2023-10-12"},{"lineNumber":195,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":196,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":197,"author":{"gitId":"yanghengtang"},"content":"    public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":198,"author":{"gitId":"yanghengtang"},"content":"        return filteredDoctors;","lastModifiedDate":"2023-10-12"},{"lineNumber":199,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":200,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":201,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":202,"author":{"gitId":"yanghengtang"},"content":"     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of","lastModifiedDate":"2023-10-12"},{"lineNumber":203,"author":{"gitId":"yanghengtang"},"content":"     * {@code versionedDatabase}","lastModifiedDate":"2023-10-12"},{"lineNumber":204,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":205,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":206,"author":{"gitId":"yanghengtang"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":207,"author":{"gitId":"yanghengtang"},"content":"        return filteredPatients;","lastModifiedDate":"2023-10-12"},{"lineNumber":208,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":209,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":210,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":211,"author":{"gitId":"yanghengtang"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":212,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":213,"author":{"gitId":"yanghengtang"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":214,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":215,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":216,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":217,"author":{"gitId":"yanghengtang"},"content":"    public void updateFilteredDoctorList(Predicate\u003cDoctor\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":218,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":219,"author":{"gitId":"yanghengtang"},"content":"        filteredDoctors.setPredicate(predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":220,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":221,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":222,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":223,"author":{"gitId":"yanghengtang"},"content":"    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":224,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":225,"author":{"gitId":"yanghengtang"},"content":"        filteredPatients.setPredicate(predicate);","lastModifiedDate":"2023-10-12"},{"lineNumber":226,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":227,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":228,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":229,"author":{"gitId":"yanghengtang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":230,"author":{"gitId":"yanghengtang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":231,"author":{"gitId":"yanghengtang"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":232,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":233,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":234,"author":{"gitId":"yanghengtang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":235,"author":{"gitId":"yanghengtang"},"content":"        if (!(other instanceof NewModelManager)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":236,"author":{"gitId":"yanghengtang"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":237,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":238,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":239,"author":{"gitId":"yanghengtang"},"content":"        NewModelManager otherModelManager \u003d (NewModelManager) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":240,"author":{"gitId":"yanghengtang"},"content":"        return database.equals(otherModelManager.getDatabase())","lastModifiedDate":"2023-10-12"},{"lineNumber":241,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-10-12"},{"lineNumber":242,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 filteredAppointments.equals(otherModelManager.filteredAppointments)","lastModifiedDate":"2023-10-12"},{"lineNumber":243,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 filteredDoctors.equals(otherModelManager.filteredDoctors)","lastModifiedDate":"2023-10-12"},{"lineNumber":244,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 filteredPatients.equals(otherModelManager.filteredPatients);","lastModifiedDate":"2023-10-12"},{"lineNumber":245,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":246,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":247,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"yanghengtang":247}},{"path":"src/main/java/seedu/address/model/ReadOnlyDatabase.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"public interface ReadOnlyDatabase {","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"     * Returns an unmodifiable view of the Appointment list.","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"     * This list will not contain any duplicate Appointments.","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"     * Returns an unmodifiable view of the Doctor list.","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"     * This list will not contain any duplicate Doctors.","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"    ObservableList\u003cDoctor\u003e getDoctorList();","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"     * Returns an unmodifiable view of the Patient list.","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"     * This list will not contain any duplicate Patients.","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"    ObservableList\u003cPatient\u003e getPatientList();","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"yanghengtang":30}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"    Path getDatabaseFilePath();","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"yanghengtang":2,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"    private Path databaseFilePath \u003d Paths.get(\"data\" , \"database.json\");","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"        setDatabaseFilePath(newUserPrefs.getDatabaseFilePath());","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"    public Path getDatabaseFilePath() {","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"        return databaseFilePath;","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"    public void setDatabaseFilePath(Path databaseFilePath) {","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(databaseFilePath);","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"        this.databaseFilePath \u003d databaseFilePath;","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        UserPrefs otherUserPrefs \u003d (UserPrefs) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return guiSettings.equals(otherUserPrefs.guiSettings)","lastModifiedDate":"2023-07-13"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 addressBookFilePath.equals(otherUserPrefs.addressBookFilePath)","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 databaseFilePath.equals(otherUserPrefs.databaseFilePath);","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, databaseFilePath);","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":97,"author":{"gitId":"yanghengtang"},"content":"        sb.append(\"\\nDatabase file location : \" + databaseFilePath);","lastModifiedDate":"2023-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yanghengtang":15,"-":86}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-10"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-10"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-10"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.Listable;","lastModifiedDate":"2023-10-10"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-10"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-10"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":" * Represents a Appointment in the address book.","lastModifiedDate":"2023-10-10"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"public class Appointment implements Listable {","lastModifiedDate":"2023-10-10"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"    private final Nric doctorNric;","lastModifiedDate":"2023-10-10"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"    private final Nric patientNric;","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    private final AppointmentStartTime startTime;","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    private final AppointmentEndTime endTime;","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    public Appointment(Nric doctorNric, Nric patientNric, AppointmentStartTime startTime, AppointmentEndTime endTime) {","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"        requireAllNonNull(doctorNric, patientNric, startTime, endTime);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"        this.doctorNric \u003d doctorNric;","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"        this.patientNric \u003d patientNric;","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"    public Nric getDoctorNric() {","lastModifiedDate":"2023-10-10"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"        return doctorNric;","lastModifiedDate":"2023-10-10"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"    public Nric getPatientNric() {","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"        return patientNric;","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"    public AppointmentStartTime getStartTime() {","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        return startTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    public AppointmentEndTime getEndTime() {","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"        return endTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"    public boolean isSame(Listable otherListable) {","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"        if (!(otherListable instanceof Appointment)) {","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"            return false;","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"        Appointment otherAppointment \u003d (Appointment) otherListable;","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"        if (otherAppointment \u003d\u003d this) {","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"            return true;","lastModifiedDate":"2023-10-10"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"        return otherAppointment.getDoctorNric().equals(getDoctorNric())","lastModifiedDate":"2023-10-10"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 otherAppointment.getPatientNric().equals(getPatientNric())","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"                \u0026\u0026 otherAppointment.getStartTime().equals(getStartTime())","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"                \u0026\u0026 otherAppointment.getEndTime().equals(getEndTime());","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if both appointments have the same identity fields.","lastModifiedDate":"2023-10-10"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"     * This defines a stronger notion of equality between two patients.","lastModifiedDate":"2023-10-10"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":70,"author":{"gitId":"yanghengtang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-10"},{"lineNumber":71,"author":{"gitId":"yanghengtang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-10"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"            return true;","lastModifiedDate":"2023-10-10"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-10"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2023-10-10"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"            return false;","lastModifiedDate":"2023-10-10"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-10"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2023-10-10"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"        return doctorNric.equals(otherAppointment.doctorNric)","lastModifiedDate":"2023-10-10"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 patientNric.equals(otherAppointment.patientNric)","lastModifiedDate":"2023-10-10"},{"lineNumber":83,"author":{"gitId":"mounilsankar"},"content":"                \u0026\u0026 startTime.equals(otherAppointment.startTime)","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"mounilsankar"},"content":"                \u0026\u0026 endTime.equals(otherAppointment.endTime);","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-10"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-10-10"},{"lineNumber":90,"author":{"gitId":"mounilsankar"},"content":"        return Objects.hash(doctorNric, patientNric, startTime, endTime);","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":92,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":93,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-10"},{"lineNumber":94,"author":{"gitId":"yanghengtang"},"content":"    public String toString() {","lastModifiedDate":"2023-10-10"},{"lineNumber":95,"author":{"gitId":"yanghengtang"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-10"},{"lineNumber":96,"author":{"gitId":"yanghengtang"},"content":"                .add(\"doctorNric\", doctorNric)","lastModifiedDate":"2023-10-10"},{"lineNumber":97,"author":{"gitId":"yanghengtang"},"content":"                .add(\"patientNric\", patientNric)","lastModifiedDate":"2023-10-10"},{"lineNumber":98,"author":{"gitId":"mounilsankar"},"content":"                .add(\"startTime\", startTime)","lastModifiedDate":"2023-10-12"},{"lineNumber":99,"author":{"gitId":"mounilsankar"},"content":"                .add(\"endTime\", endTime)","lastModifiedDate":"2023-10-12"},{"lineNumber":100,"author":{"gitId":"yanghengtang"},"content":"                .toString();","lastModifiedDate":"2023-10-10"},{"lineNumber":101,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":102,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-10"}],"authorContributionMap":{"yanghengtang":84,"mounilsankar":18}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentEndTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":" * Represents a Appointment\u0027s end time in the database.","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAppointmmentTime(String)}","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"public class AppointmentEndTime {","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"            \"Appointment end date and time should be of the format yyyy-MM-dd HH:mm \";","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    public static final String DATETIME_INPUT_FORMAT \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    public static final DateTimeFormatter","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"            DATE_TIME_INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(DATETIME_INPUT_FORMAT);","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    public final LocalDateTime time;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * Constructs an {@code AppointmentStartTime}.","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     * @param time A valid String time.","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    public AppointmentEndTime(String time) {","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        requireNonNull(time);","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        String trimmedTime \u003d time.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        checkArgument(isValidAppointmmentTime((trimmedTime)), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"        this.time \u003d LocalDateTime.parse(trimmedTime, DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"     * Returns if a given string is a valid dateTime.","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    public static boolean isValidAppointmmentTime(String test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"            LocalDateTime.parse(test, DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"            return true; // Parsing successful, so it matches the specified format.","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"            return false; // Parsing failed, indicating it doesn\u0027t match the format.","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        return time.format(DateTimeFormatter.ofPattern(DATETIME_INPUT_FORMAT));","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"        if (!(other instanceof AppointmentEndTime)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"        AppointmentEndTime otherAppointmentEndTime \u003d (AppointmentEndTime) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"        return time.equals(otherAppointmentEndTime.time);","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"        return time.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"mounilsankar":71}},{"path":"src/main/java/seedu/address/model/appointment/AppointmentStartTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":" * Represents a Appointment\u0027s start time in the address book.","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAppointmmentTime(String)}","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"public class AppointmentStartTime {","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"            \"Appointment start date and time should be of the format YYYY-MM-DD HH:mm \";","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    public static final String DATETIME_INPUT_FORMAT \u003d \"yyyy-MM-dd HH:mm\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    public static final DateTimeFormatter","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"            DATE_TIME_INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(DATETIME_INPUT_FORMAT);","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    public final LocalDateTime time;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * Constructs an {@code AppointmentStartTime}.","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     * @param time A valid LocalDateTime time.","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    public AppointmentStartTime(String time) {","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        requireNonNull(time);","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        String trimmedTime \u003d time.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        checkArgument(isValidAppointmmentTime((trimmedTime)), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"        this.time \u003d LocalDateTime.parse(trimmedTime, DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"     * Returns if a given string is a valid dateTime.","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    public static boolean isValidAppointmmentTime(String test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"            LocalDateTime.parse(test, DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"            return true; // Parsing successful, so it matches the specified format.","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"            return false; // Parsing failed, indicating it doesn\u0027t match the format.","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        return time.format(DateTimeFormatter.ofPattern(DATETIME_INPUT_FORMAT));","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"        if (!(other instanceof AppointmentStartTime)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"        AppointmentStartTime otherAppointmentStartTime \u003d (AppointmentStartTime) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"        return time.equals(otherAppointmentStartTime.time);","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"        return time.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"mounilsankar":70,"derekjxtan":1}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsDoctorPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"kimshitong"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"kimshitong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"kimshitong"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"kimshitong"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"kimshitong"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"kimshitong"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"kimshitong"},"content":" * Tests that a {@code Doctor}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"kimshitong"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"kimshitong"},"content":"public class NameContainsKeywordsDoctorPredicate implements Predicate\u003cDoctor\u003e {","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"kimshitong"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"kimshitong"},"content":"    public NameContainsKeywordsDoctorPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"kimshitong"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"kimshitong"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"kimshitong"},"content":"    public boolean test(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"kimshitong"},"content":"        return keywords.stream()","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"kimshitong"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(doctor.getName().fullName, keyword));","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"kimshitong"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"kimshitong"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"kimshitong"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"kimshitong"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"kimshitong"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"kimshitong"},"content":"        if (!(other instanceof NameContainsKeywordsDoctorPredicate)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"kimshitong"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"kimshitong"},"content":"        NameContainsKeywordsDoctorPredicate otherNameContainsKeywordsPredicate \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"kimshitong"},"content":"                (NameContainsKeywordsDoctorPredicate) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"kimshitong"},"content":"        return keywords.equals(otherNameContainsKeywordsPredicate.keywords);","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"kimshitong"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"kimshitong"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"kimshitong"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"kimshitong"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"kimshitong":46}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPatientPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeggered"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"cheeggered"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"cheeggered"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"cheeggered"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"cheeggered"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"cheeggered"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"cheeggered"},"content":" * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"cheeggered"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"cheeggered"},"content":"public class NameContainsKeywordsPatientPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"cheeggered"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"cheeggered"},"content":"    public NameContainsKeywordsPatientPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"cheeggered"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"cheeggered"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"cheeggered"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"cheeggered"},"content":"        return keywords.stream()","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"cheeggered"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"cheeggered"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"cheeggered"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"cheeggered"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"cheeggered"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"cheeggered"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"cheeggered"},"content":"        if (!(other instanceof NameContainsKeywordsPatientPredicate)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"cheeggered"},"content":"            return false;","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"cheeggered"},"content":"        NameContainsKeywordsPatientPredicate otherNameContainsKeywordsPatientPredicate \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"cheeggered"},"content":"                (NameContainsKeywordsPatientPredicate) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"cheeggered"},"content":"        return keywords.equals(otherNameContainsKeywordsPatientPredicate.keywords);","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"cheeggered"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"cheeggered"},"content":"    public String toString() {","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"cheeggered"},"content":"        return new ToStringBuilder(this).add(\"keywords\", keywords).toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"cheeggered"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"cheeggered":45}},{"path":"src/main/java/seedu/address/model/person/Nric.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":" * Represents a Person\u0027s NRIC in the system.","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"public class Nric {","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"            \"NRIC should only contain alphanumeric characters and it should not be blank\";","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"    /*","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"     * The first character of the NRIC must either be \u0027S\u0027, \u0027T\u0027, \u0027F\u0027, \u0027G\u0027 or \u0027M\u0027,","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"     * followed by 7 digits and ending with a uppercase alphabet.","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"    public static final String VALIDATION_REGEX \u003d \"[STFGM]\\\\d{7}[A-Z]\";","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"    public final String nric;","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"     * Constructs a {@code Nric}.","lastModifiedDate":"2023-10-06"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"     *","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"     * @param nric A valid NRIC.","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"    public Nric(String nric) {","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-10-06"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        String uppercaseNric \u003d nric.toUpperCase();","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        checkArgument(isValidNric(uppercaseNric), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        this.nric \u003d uppercaseNric;","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-06"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if a given string is a valid NRIC.","lastModifiedDate":"2023-10-06"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-06"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"    public static boolean isValidNric(String test) {","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-06"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"    public String toString() {","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"        return nric;","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"            return true;","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"        if (!(other instanceof Nric)) {","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"            return false;","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"        Nric otherNric \u003d (Nric) other;","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"        return nric.equals(otherNric.nric);","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-06"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"        return nric.hashCode();","lastModifiedDate":"2023-10-06"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"yanghengtang":63,"mounilsankar":3}},{"path":"src/main/java/seedu/address/model/person/doctor/Doctor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model.person.doctor;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.Listable;","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":" * Represents a Doctor in the address book.","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"public class Doctor implements Listable {","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"    // Identity fields","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"    private final Name name;","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"    private final Nric nric;","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"    public Doctor(Name name, Nric nric) {","lastModifiedDate":"2023-10-08"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"        requireAllNonNull(name, nric);","lastModifiedDate":"2023-10-08"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-08"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-10-08"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"    public Name getName() {","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"        return name;","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"    public Nric getNric() {","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"        return nric;","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if both doctors have the same NRIC.","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"     * This defines a weaker notion of equality between two doctors.","lastModifiedDate":"2023-10-08"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    public boolean isSame(Listable otherListable) {","lastModifiedDate":"2023-10-08"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"        if (!(otherListable instanceof Doctor)) {","lastModifiedDate":"2023-10-08"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"            return false;","lastModifiedDate":"2023-10-08"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"        Doctor otherDoctor \u003d (Doctor) otherListable;","lastModifiedDate":"2023-10-08"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"        if (otherDoctor \u003d\u003d this) {","lastModifiedDate":"2023-10-08"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"            return true;","lastModifiedDate":"2023-10-08"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"        return otherDoctor.getNric().equals(getNric());","lastModifiedDate":"2023-10-08"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if both doctors have the same identity fields.","lastModifiedDate":"2023-10-08"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"     * This defines a stronger notion of equality between two doctors.","lastModifiedDate":"2023-10-08"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-08"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-08"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"            return true;","lastModifiedDate":"2023-10-08"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-08"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"        if (!(other instanceof Doctor)) {","lastModifiedDate":"2023-10-08"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"            return false;","lastModifiedDate":"2023-10-08"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":70,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":71,"author":{"gitId":"yanghengtang"},"content":"        Doctor otherDoctor \u003d (Doctor) other;","lastModifiedDate":"2023-10-08"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"        return name.equals(otherDoctor.name)","lastModifiedDate":"2023-10-08"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 nric.equals(otherDoctor.nric);","lastModifiedDate":"2023-10-08"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-08"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-10-08"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"        return Objects.hash(name, nric);","lastModifiedDate":"2023-10-08"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"    public String toString() {","lastModifiedDate":"2023-10-08"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-08"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"                .add(\"name\", name)","lastModifiedDate":"2023-10-08"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"                .add(\"nric\", nric)","lastModifiedDate":"2023-10-08"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"                .toString();","lastModifiedDate":"2023-10-08"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"yanghengtang":89}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateItemException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":" * Signals that the operation will result in duplicate Listable (Listables are considered duplicates if they have the","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":" * same identity).","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"public class DuplicateItemException extends RuntimeException {","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"    public DuplicateItemException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"        super(\"Operation would result in duplicate items\");","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"derekjxtan":11}},{"path":"src/main/java/seedu/address/model/person/exceptions/ItemNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":" * Signals that the operation is unable to find the specified Listable.","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"public class ItemNotFoundException extends RuntimeException {","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"derekjxtan":7}},{"path":"src/main/java/seedu/address/model/person/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model.person.patient;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import java.util.Objects;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.Listable;","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":" * Represents a Patient in the system.","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"public class Patient implements Listable {","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"    // Identity fields","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"    private final Name name;","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"    private final Phone phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"    private final Nric nric;","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"    public Patient(Name name, Phone phone, Nric nric) {","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"        requireAllNonNull(name, phone, nric);","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"    public Name getName() {","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"        return name;","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"    public Phone getPhone() {","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"        return phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    public Nric getNric() {","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"        return nric;","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if both patients have the same NRIC.","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"     * This defines a weaker notion of equality between two patients.","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"    public boolean isSame(Listable otherListable) {","lastModifiedDate":"2023-10-08"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"        if (!(otherListable instanceof Patient)) {","lastModifiedDate":"2023-10-08"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"            return false;","lastModifiedDate":"2023-10-08"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"        Patient otherPatient \u003d (Patient) otherListable;","lastModifiedDate":"2023-10-08"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"        if (otherPatient \u003d\u003d this) {","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"            return true;","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"        return otherPatient.getNric().equals(getNric());","lastModifiedDate":"2023-10-08"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"     * Returns true if both patients have the same identity fields.","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"     * This defines a stronger notion of equality between two patients.","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"yanghengtang"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"yanghengtang"},"content":"            return true;","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"            return false;","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"        Patient otherPatient \u003d (Patient) other;","lastModifiedDate":"2023-10-10"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"        return name.equals(otherPatient.name)","lastModifiedDate":"2023-10-10"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 phone.equals(otherPatient.phone)","lastModifiedDate":"2023-10-10"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"                \u0026\u0026 nric.equals(otherPatient.nric);","lastModifiedDate":"2023-10-10"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-07"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"        return Objects.hash(name, phone, nric);","lastModifiedDate":"2023-10-07"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":90,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":91,"author":{"gitId":"yanghengtang"},"content":"    @Override","lastModifiedDate":"2023-10-07"},{"lineNumber":92,"author":{"gitId":"yanghengtang"},"content":"    public String toString() {","lastModifiedDate":"2023-10-07"},{"lineNumber":93,"author":{"gitId":"yanghengtang"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-07"},{"lineNumber":94,"author":{"gitId":"yanghengtang"},"content":"                .add(\"name\", name)","lastModifiedDate":"2023-10-07"},{"lineNumber":95,"author":{"gitId":"yanghengtang"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2023-10-07"},{"lineNumber":96,"author":{"gitId":"yanghengtang"},"content":"                .add(\"nric\", nric)","lastModifiedDate":"2023-10-07"},{"lineNumber":97,"author":{"gitId":"yanghengtang"},"content":"                .toString();","lastModifiedDate":"2023-10-07"},{"lineNumber":98,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":99,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":100,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"yanghengtang":90,"derekjxtan":10}},{"path":"src/main/java/seedu/address/model/person/patient/UniqueItemList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.model.person.patient;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import java.util.List;","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import java.util.function.Function;","lastModifiedDate":"2023-10-10"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.Listable;","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.exceptions.DuplicateItemException;","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.exceptions.ItemNotFoundException;","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":" * A list of Listables that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":" * A Listable is considered unique by comparing using {@code Listable#isSame(Listable)}. As such, adding and updating of","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":" * items uses Listable#isSame(Listable) for equality so as to ensure that the item being added or updated is","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":" * unique in terms of identity in the UniqueItemList. However, the removal of a item uses Listable#equals(Object) so","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":" * as to ensure that the items with exactly the same fields will be removed.","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":" *","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":" *","lastModifiedDate":"2023-10-08"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":" * @see Listable#isSame(Listable)","lastModifiedDate":"2023-10-08"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"public class UniqueItemList\u003cS extends Listable\u003e implements Iterable\u003cS\u003e {","lastModifiedDate":"2023-10-08"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    private final ObservableList\u003cS\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-08"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"    private final ObservableList\u003cS\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"     * Returns true if the list contains an equivalent item as the given argument.","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"    public boolean contains(S toCheck) {","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-10-08"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"        return internalList.stream().anyMatch(toCheck::isSame);","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"     * Returns true if the list contains an item that returns true based on the given predicate.","lastModifiedDate":"2023-10-10"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-10"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"     * @param predicate predicate to check the items","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"     * @return true if the item exists in the list","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"    public boolean contains(Function\u003cS, Boolean\u003e predicate) {","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"        return internalList.stream()","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"                .map(item -\u003e predicate.apply(item))","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"                .reduce(false, (acc, item) -\u003e acc || item);","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"     * Adds a item to the list.","lastModifiedDate":"2023-10-08"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"     * The item must not already exist in the list.","lastModifiedDate":"2023-10-08"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"    public void add(S toAdd) {","lastModifiedDate":"2023-10-08"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-10-08"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"            throw new DuplicateItemException();","lastModifiedDate":"2023-10-08"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-10-08"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"     * Replaces the item {@code target} in the list with {@code editedItem}.","lastModifiedDate":"2023-10-08"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-10-08"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"     * The item identity of {@code editedItem} must not be the same as another existing item in the list.","lastModifiedDate":"2023-10-08"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"    public void setItem(S target, S editedItem) {","lastModifiedDate":"2023-10-08"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"        requireAllNonNull(target, editedItem);","lastModifiedDate":"2023-10-08"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-10-08"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-10-08"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"            throw new ItemNotFoundException();","lastModifiedDate":"2023-10-08"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":77,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":78,"author":{"gitId":"derekjxtan"},"content":"        if (!target.isSame(editedItem) \u0026\u0026 contains(editedItem)) {","lastModifiedDate":"2023-10-08"},{"lineNumber":79,"author":{"gitId":"derekjxtan"},"content":"            throw new DuplicateItemException();","lastModifiedDate":"2023-10-08"},{"lineNumber":80,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":81,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":82,"author":{"gitId":"derekjxtan"},"content":"        internalList.set(index, editedItem);","lastModifiedDate":"2023-10-08"},{"lineNumber":83,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":84,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":85,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":86,"author":{"gitId":"derekjxtan"},"content":"     * Removes the equivalent item from the list.","lastModifiedDate":"2023-10-08"},{"lineNumber":87,"author":{"gitId":"derekjxtan"},"content":"     * The item must exist in the list.","lastModifiedDate":"2023-10-08"},{"lineNumber":88,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":89,"author":{"gitId":"derekjxtan"},"content":"    public void remove(S toRemove) {","lastModifiedDate":"2023-10-08"},{"lineNumber":90,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-10-08"},{"lineNumber":91,"author":{"gitId":"derekjxtan"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-10-08"},{"lineNumber":92,"author":{"gitId":"derekjxtan"},"content":"            throw new ItemNotFoundException();","lastModifiedDate":"2023-10-08"},{"lineNumber":93,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":94,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":95,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":96,"author":{"gitId":"derekjxtan"},"content":"    public void setItems(UniqueItemList\u003cS\u003e replacement) {","lastModifiedDate":"2023-10-08"},{"lineNumber":97,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-10-08"},{"lineNumber":98,"author":{"gitId":"derekjxtan"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-10-08"},{"lineNumber":99,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":100,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":101,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":102,"author":{"gitId":"derekjxtan"},"content":"     * Replaces the contents of this list with {@code items}.","lastModifiedDate":"2023-10-08"},{"lineNumber":103,"author":{"gitId":"derekjxtan"},"content":"     * {@code items} must not contain duplicate items.","lastModifiedDate":"2023-10-08"},{"lineNumber":104,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":105,"author":{"gitId":"derekjxtan"},"content":"    public void setItems(List\u003cS\u003e items) {","lastModifiedDate":"2023-10-08"},{"lineNumber":106,"author":{"gitId":"derekjxtan"},"content":"        requireAllNonNull(items);","lastModifiedDate":"2023-10-08"},{"lineNumber":107,"author":{"gitId":"derekjxtan"},"content":"        if (!itemsAreUnique(items)) {","lastModifiedDate":"2023-10-08"},{"lineNumber":108,"author":{"gitId":"derekjxtan"},"content":"            throw new DuplicateItemException();","lastModifiedDate":"2023-10-08"},{"lineNumber":109,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":110,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":111,"author":{"gitId":"derekjxtan"},"content":"        internalList.setAll(items);","lastModifiedDate":"2023-10-08"},{"lineNumber":112,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":113,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":114,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":115,"author":{"gitId":"derekjxtan"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-10-08"},{"lineNumber":116,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":117,"author":{"gitId":"derekjxtan"},"content":"    public ObservableList\u003cS\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-10-08"},{"lineNumber":118,"author":{"gitId":"derekjxtan"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-10-08"},{"lineNumber":119,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":120,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":121,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":122,"author":{"gitId":"derekjxtan"},"content":"    public Iterator\u003cS\u003e iterator() {","lastModifiedDate":"2023-10-08"},{"lineNumber":123,"author":{"gitId":"derekjxtan"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-10-08"},{"lineNumber":124,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":125,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":126,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":127,"author":{"gitId":"derekjxtan"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-08"},{"lineNumber":128,"author":{"gitId":"derekjxtan"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-08"},{"lineNumber":129,"author":{"gitId":"derekjxtan"},"content":"            return true;","lastModifiedDate":"2023-10-08"},{"lineNumber":130,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":131,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":132,"author":{"gitId":"derekjxtan"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-08"},{"lineNumber":133,"author":{"gitId":"derekjxtan"},"content":"        if (!(other instanceof UniqueItemList\u003c?\u003e)) {","lastModifiedDate":"2023-10-08"},{"lineNumber":134,"author":{"gitId":"derekjxtan"},"content":"            return false;","lastModifiedDate":"2023-10-08"},{"lineNumber":135,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":136,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":137,"author":{"gitId":"derekjxtan"},"content":"        UniqueItemList\u003c?\u003e otherUniqueItemList \u003d (UniqueItemList\u003c?\u003e) other;","lastModifiedDate":"2023-10-08"},{"lineNumber":138,"author":{"gitId":"derekjxtan"},"content":"        return internalList.equals(otherUniqueItemList.internalList);","lastModifiedDate":"2023-10-08"},{"lineNumber":139,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":140,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":141,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":142,"author":{"gitId":"derekjxtan"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-08"},{"lineNumber":143,"author":{"gitId":"derekjxtan"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-10-08"},{"lineNumber":144,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":145,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":146,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-08"},{"lineNumber":147,"author":{"gitId":"derekjxtan"},"content":"    public String toString() {","lastModifiedDate":"2023-10-08"},{"lineNumber":148,"author":{"gitId":"derekjxtan"},"content":"        return internalList.toString();","lastModifiedDate":"2023-10-08"},{"lineNumber":149,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":150,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":151,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":152,"author":{"gitId":"derekjxtan"},"content":"     * Returns true if {@code items} contains only unique items.","lastModifiedDate":"2023-10-08"},{"lineNumber":153,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":154,"author":{"gitId":"derekjxtan"},"content":"    private boolean itemsAreUnique(List\u003cS\u003e items) {","lastModifiedDate":"2023-10-08"},{"lineNumber":155,"author":{"gitId":"derekjxtan"},"content":"        for (int i \u003d 0; i \u003c items.size() - 1; i++) {","lastModifiedDate":"2023-10-08"},{"lineNumber":156,"author":{"gitId":"derekjxtan"},"content":"            for (int j \u003d i + 1; j \u003c items.size(); j++) {","lastModifiedDate":"2023-10-08"},{"lineNumber":157,"author":{"gitId":"derekjxtan"},"content":"                if (items.get(i).isSame(items.get(j))) {","lastModifiedDate":"2023-10-08"},{"lineNumber":158,"author":{"gitId":"derekjxtan"},"content":"                    return false;","lastModifiedDate":"2023-10-08"},{"lineNumber":159,"author":{"gitId":"derekjxtan"},"content":"                }","lastModifiedDate":"2023-10-08"},{"lineNumber":160,"author":{"gitId":"derekjxtan"},"content":"            }","lastModifiedDate":"2023-10-08"},{"lineNumber":161,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-08"},{"lineNumber":162,"author":{"gitId":"derekjxtan"},"content":"        return true;","lastModifiedDate":"2023-10-08"},{"lineNumber":163,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":164,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"derekjxtan":164}},{"path":"src/main/java/seedu/address/storage/DatabaseStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":" * Represents a storage for {@link seedu.address.model.Database}.","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"public interface DatabaseStorage {","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"     * Returns the file path of the patient data file.","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"    Path getDatabaseFilePath();","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"     * Returns Database data as a {@link seedu.address.model.ReadOnlyDatabase}.","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"     * Returns {@code Optional.empty()} if storage files are not found.","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    Optional\u003cReadOnlyDatabase\u003e readDatabase() throws DataLoadingException;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"     * @see #getDatabaseFilePath()","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"    Optional\u003cReadOnlyDatabase\u003e readDatabase(Path filePath)","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"            throws DataLoadingException;","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"     * Saves the given {@link ReadOnlyDatabase} to the storage.","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"     * @param database cannot be null.","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"    void saveDatabase(ReadOnlyDatabase database) throws IOException;","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"     * @see #saveDatabase(ReadOnlyDatabase)","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"    void saveDatabase(ReadOnlyDatabase database, Path filePath) throws IOException;","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":45}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.appointment.AppointmentEndTime;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.appointment.AppointmentStartTime;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"class JsonAdaptedAppointment {","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"    private final String doctorNric;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"    private final String patientNric;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    private final String startTime;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"    private final String endTime;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details.","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"doctorNric\") String doctorNric,","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"                                  @JsonProperty(\"patientNric\") String patientNric,","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"                                  @JsonProperty(\"startTime\") String startTime,","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"                                  @JsonProperty(\"endTime\") String endTime) {","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"        this.doctorNric \u003d doctorNric;","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"        this.patientNric \u003d patientNric;","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"     * Converts a given {@code Patient} into this class for Jackson use.","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"        doctorNric \u003d source.getDoctorNric().nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"        patientNric \u003d source.getPatientNric().nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"        startTime \u003d source.getStartTime().toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"        endTime \u003d source.getEndTime().toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object.","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted patient.","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"        if (doctorNric \u003d\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"        if (!Nric.isValidNric(doctorNric)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"        final Nric modelDoctorNric \u003d new Nric(doctorNric);","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"        if (patientNric \u003d\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"        if (!Nric.isValidNric(patientNric)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"        final Nric modelPatientNric \u003d new Nric(patientNric);","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"        if (startTime \u003d\u003d null) {","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"                    AppointmentStartTime.class.getSimpleName()));","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"        if (!AppointmentStartTime.isValidAppointmmentTime(startTime)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(AppointmentStartTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"derekjxtan"},"content":"        final AppointmentStartTime modelAppointmentStartTime \u003d new AppointmentStartTime(startTime);","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"derekjxtan"},"content":"        if (endTime \u003d\u003d null) {","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"derekjxtan"},"content":"                    AppointmentEndTime.class.getSimpleName()));","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"derekjxtan"},"content":"        if (!AppointmentEndTime.isValidAppointmmentTime(endTime)) {","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(AppointmentEndTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"derekjxtan"},"content":"        final AppointmentEndTime modelAppointmentEndTime \u003d new AppointmentEndTime(endTime);","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"derekjxtan"},"content":"        return new Appointment(modelDoctorNric, modelPatientNric, modelAppointmentStartTime, modelAppointmentEndTime);","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":90}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedDoctor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":" * Jackson-friendly version of {@link Doctor}.","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"class JsonAdaptedDoctor {","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Doctor\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"    private final String nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"    private final String name;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"     * Constructs a {@code JsonAdaptedDoctor} with the given doctor details.","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"    public JsonAdaptedDoctor(@JsonProperty(\"nric\") String nric, @JsonProperty(\"name\") String name) {","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"     * Converts a given {@code Doctor} into this class for Jackson use.","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"    public JsonAdaptedDoctor(Doctor source) {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"        nric \u003d source.getNric().nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"     * Converts this Jackson-friendly adapted doctor object into the model\u0027s {@code Doctor} object.","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted doctor.","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"    public Doctor toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"        return new Doctor(modelName, modelNric);","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":63}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":" * Jackson-friendly version of {@link Patient}.","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"class JsonAdaptedPatient {","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"    private final String nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"    private final String name;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    private final String phone;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"     * Constructs a {@code JsonAdaptedPatient} with the given patient details.","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"nric\") String nric, @JsonProperty(\"name\") String name,","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"                              @JsonProperty(\"phone\") String phone) {","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"     * Converts a given {@code Patient} into this class for Jackson use.","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"    public JsonAdaptedPatient(Patient source) {","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"        nric \u003d source.getNric().nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"     * Converts this Jackson-friendly adapted patient object into the model\u0027s {@code Patient} object.","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted patient.","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"    public Patient toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"        return new Patient(modelName, modelPhone, modelNric);","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":76}},{"path":"src/main/java/seedu/address/storage/JsonDatabaseStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":" * A class to access Database data stored as a json file on the hard disk.","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"public class JsonDatabaseStorage implements DatabaseStorage {","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonDatabaseStorage.class);","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"    private Path filePath;","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    public JsonDatabaseStorage(Path filePath) {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"    public Path getDatabaseFilePath() {","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"        return filePath;","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"    public Optional\u003cReadOnlyDatabase\u003e readDatabase() throws DataLoadingException {","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"        return readDatabase(filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"     * Similar to {@link #readDatabase()}.","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"     * @throws DataLoadingException if loading the data from storage failed.","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"    public Optional\u003cReadOnlyDatabase\u003e readDatabase(Path filePath)","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"            throws DataLoadingException {","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"        Optional\u003cJsonSerializableDatabase\u003e jsonDatabase \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"                filePath, JsonSerializableDatabase.class);","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"        if (!jsonDatabase.isPresent()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"            return Optional.empty();","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"        try {","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"            return Optional.of(jsonDatabase.get().toModelType());","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"            throw new DataLoadingException(ive);","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"    public void saveDatabase(ReadOnlyDatabase database) throws IOException {","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"        saveDatabase(database, filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"     * Similar to {@link #saveDatabase(ReadOnlyDatabase)}.","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"    public void saveDatabase(ReadOnlyDatabase database, Path filePath) throws IOException {","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(database);","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"derekjxtan"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"derekjxtan"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableDatabase(database), filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":82}},{"path":"src/main/java/seedu/address/storage/JsonSerializableDatabase.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":" * An Immutable Database that is serializable to JSON format.","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"@JsonRootName(value \u003d \"database\")","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"class JsonSerializableDatabase {","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patients(s).\";","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"    public static final String MESSAGE_DUPLICATE_DOCTOR \u003d \"Doctors list contains duplicate doctors(s).\";","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Appointments list contains duplicate appointments(s).\";","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"    private final List\u003cJsonAdaptedDoctor\u003e doctors \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"     * Constructs a {@code JsonSerializableDatabase} with the given persons.","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"    public JsonSerializableDatabase(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients,","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"                                    @JsonProperty(\"doctors\") List\u003cJsonAdaptedDoctor\u003e doctors,","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"                                    @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"        this.patients.addAll(patients);","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"        this.doctors.addAll(doctors);","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"        this.appointments.addAll(appointments);","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"     * Converts a given {@code ReadOnlyDatabase} into this class for Jackson use.","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableDatabase}.","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"    public JsonSerializableDatabase(ReadOnlyDatabase source) {","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"        doctors.addAll(source.getDoctorList().stream().map(JsonAdaptedDoctor::new).collect(Collectors.toList()));","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"        appointments.addAll(source.getAppointmentList().stream().map(JsonAdaptedAppointment::new)","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"     * Converts this database into the model\u0027s {@code Database} object.","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"     *","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"    public Database toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"        Database database \u003d new Database();","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"            Patient patient \u003d jsonAdaptedPatient.toModelType();","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"            if (database.hasPatient(patient)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"            }","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"            database.addPatient(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"        for (JsonAdaptedDoctor jsonAdaptedDoctor : doctors) {","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"            Doctor doctor \u003d jsonAdaptedDoctor.toModelType();","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"            if (database.hasDoctor(doctor)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_DOCTOR);","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"            }","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"            database.addDoctor(doctor);","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"derekjxtan"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"derekjxtan"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"derekjxtan"},"content":"            if (database.hasAppointment(appointment)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"derekjxtan"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"derekjxtan"},"content":"            }","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"derekjxtan"},"content":"            database.addAppointment(appointment);","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"derekjxtan"},"content":"        return database;","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":87}},{"path":"src/main/java/seedu/address/storage/NewStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":" * API of the NewStorage component","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"public interface NewStorage extends DatabaseStorage, UserPrefsStorage {","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"    Path getDatabaseFilePath();","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"    Optional\u003cReadOnlyDatabase\u003e readDatabase() throws DataLoadingException;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    void saveDatabase(ReadOnlyDatabase database) throws IOException;","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":32}},{"path":"src/main/java/seedu/address/storage/NewStorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import java.util.Optional;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":" * Manages storage of MediConnect data in local storage.","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"public class NewStorageManager implements NewStorage {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(NewStorageManager.class);","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"    private DatabaseStorage databaseStorage;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"     * Creates a {@code NewStorageManager} with the given {@code DatabaseStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    public NewStorageManager(DatabaseStorage databaseStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"        this.databaseStorage \u003d databaseStorage;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataLoadingException {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Database methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"    public Path getDatabaseFilePath() {","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"        return databaseStorage.getDatabaseFilePath();","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"    public Optional\u003cReadOnlyDatabase\u003e readDatabase() throws DataLoadingException {","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"        return readDatabase(databaseStorage.getDatabaseFilePath());","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"    public Optional\u003cReadOnlyDatabase\u003e readDatabase(Path filePath) throws DataLoadingException {","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"        return databaseStorage.readDatabase(filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"    public void saveDatabase(ReadOnlyDatabase database) throws IOException {","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"        saveDatabase(database, databaseStorage.getDatabaseFilePath());","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"    public void saveDatabase(ReadOnlyDatabase database, Path filePath) throws IOException {","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"        databaseStorage.saveDatabase(database, filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":78}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertNewCommandFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertNewCommandSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalAppointment.getTypicalDatabase;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.ELLE_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.HOON_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.NewModelManager;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"public class AddAppointmentCommandIntegrationTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"    private NewModel newModel;","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    public void setUp() {","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        newModel \u003d new NewModelManager(getTypicalDatabase(), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().withPatientNric(ALICE_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"                .withDoctorNric(ELLE_NRIC).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"        NewModel expectedModel \u003d new NewModelManager(newModel.getDatabase(), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        expectedModel.addAppointment(validAppointment);","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        assertNewCommandSuccess(new AddAppointmentCommand(validAppointment), newModel,","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"                String.format(AddAppointmentCommand.MESSAGE_SUCCESS, Messages.format(validAppointment)),","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"                expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    public void execute_duplicateAppointment_throwsCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"        Appointment appointmentInList \u003d newModel.getDatabase().getAppointmentList().get(0);","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"        assertNewCommandFailure(new AddAppointmentCommand(appointmentInList), newModel,","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"                AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"    public void execute_invalidPatient_throwsCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"        Appointment appointmentWithInvalidPatient \u003d new AppointmentBuilder().withPatientNric(HOON_NRIC).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        assertNewCommandFailure(new AddAppointmentCommand(appointmentWithInvalidPatient), newModel,","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"                AddAppointmentCommand.MESSAGE_INVALID_PATIENT);","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"    public void execute_invalidDoctor_throwsCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"        Appointment appointmentWithInvalidDoctor \u003d new AppointmentBuilder().withDoctorNric(HOON_NRIC).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"        assertNewCommandFailure(new AddAppointmentCommand(appointmentWithInvalidDoctor), newModel,","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"                AddAppointmentCommand.MESSAGE_INVALID_DOCTOR);","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"mounilsankar":64}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalAppointment.APPOINTMENT_1;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"public class AddAppointmentCommandTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded();","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        CommandResult commandResult \u003d new AddAppointmentCommand(validAppointment).execute(modelStub);","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, Messages.format(validAppointment)),","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"        Appointment appointment1 \u003d new AppointmentBuilder().withPatientNric(\"T1234567N\").build();","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"        Appointment appointment2 \u003d new AppointmentBuilder().withPatientNric(\"T2468123N\").build();","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"        AddAppointmentCommand addAppointment1Command \u003d new AddAppointmentCommand(appointment1);","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        AddAppointmentCommand addAppointment2Command \u003d new AddAppointmentCommand(appointment2);","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(addAppointment1Command.equals(addAppointment1Command));","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"        AddAppointmentCommand addAppointment1CommandCopy \u003d new AddAppointmentCommand(appointment1);","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(addAppointment1Command.equals(addAppointment1CommandCopy));","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(addAppointment1Command.equals(1));","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(addAppointment1Command.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(addAppointment1Command.equals(addAppointment2Command));","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(APPOINTMENT_1);","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"        String expected \u003d AddAppointmentCommand.class.getCanonicalName() + \"{toAdd\u003d\" + APPOINTMENT_1 + \"}\";","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(expected, addAppointmentCommand.toString());","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"mounilsankar"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"mounilsankar"},"content":"    private class ModelStub implements NewModel {","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"mounilsankar"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"mounilsankar"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"mounilsankar"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"mounilsankar"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"mounilsankar"},"content":"        public Path getDatabaseFilePath() {","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"mounilsankar"},"content":"        public void setDatabaseFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"mounilsankar"},"content":"        public void setDatabase(ReadOnlyDatabase newDatabase) {","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"mounilsankar"},"content":"        public ReadOnlyDatabase getDatabase() {","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"mounilsankar"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"mounilsankar"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"mounilsankar"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":138,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":139,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":140,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":141,"author":{"gitId":"mounilsankar"},"content":"        public boolean hasDoctorWithNric(Nric nric) {","lastModifiedDate":"2023-10-13"},{"lineNumber":142,"author":{"gitId":"mounilsankar"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":143,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":144,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":145,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":146,"author":{"gitId":"mounilsankar"},"content":"        public boolean hasPatientWithNric(Nric nric) {","lastModifiedDate":"2023-10-13"},{"lineNumber":147,"author":{"gitId":"mounilsankar"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":148,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":149,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":150,"author":{"gitId":"mounilsankar"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2023-10-13"},{"lineNumber":151,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":152,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":153,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":154,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":155,"author":{"gitId":"mounilsankar"},"content":"        public void deleteDoctor(Doctor target) {","lastModifiedDate":"2023-10-13"},{"lineNumber":156,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":157,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":158,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":159,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":160,"author":{"gitId":"mounilsankar"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2023-10-13"},{"lineNumber":161,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":162,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":163,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":164,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":165,"author":{"gitId":"mounilsankar"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":166,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":167,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":168,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":169,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":170,"author":{"gitId":"mounilsankar"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-13"},{"lineNumber":171,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":172,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":173,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":174,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":175,"author":{"gitId":"mounilsankar"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":176,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":177,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":178,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":179,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":180,"author":{"gitId":"mounilsankar"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":181,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":182,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":183,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":184,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":185,"author":{"gitId":"mounilsankar"},"content":"        public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2023-10-13"},{"lineNumber":186,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":187,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":188,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":189,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":190,"author":{"gitId":"mounilsankar"},"content":"        public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":191,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":192,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":193,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":194,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":195,"author":{"gitId":"mounilsankar"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":196,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":197,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":198,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":199,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":200,"author":{"gitId":"mounilsankar"},"content":"        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":201,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":202,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":203,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":204,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":205,"author":{"gitId":"mounilsankar"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":206,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":207,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":208,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":209,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":210,"author":{"gitId":"mounilsankar"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2023-10-13"},{"lineNumber":211,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":212,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":213,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":214,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":215,"author":{"gitId":"mounilsankar"},"content":"        public void updateFilteredDoctorList(Predicate\u003cDoctor\u003e predicate) {","lastModifiedDate":"2023-10-13"},{"lineNumber":216,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":217,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":218,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":219,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":220,"author":{"gitId":"mounilsankar"},"content":"        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2023-10-13"},{"lineNumber":221,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":222,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":223,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":224,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":225,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":226,"author":{"gitId":"mounilsankar"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2023-10-13"},{"lineNumber":227,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":228,"author":{"gitId":"mounilsankar"},"content":"    private class ModelStubWithAppointment extends ModelStub {","lastModifiedDate":"2023-10-13"},{"lineNumber":229,"author":{"gitId":"mounilsankar"},"content":"        private final Appointment appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":230,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":231,"author":{"gitId":"mounilsankar"},"content":"        ModelStubWithAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":232,"author":{"gitId":"mounilsankar"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2023-10-13"},{"lineNumber":233,"author":{"gitId":"mounilsankar"},"content":"            this.appointment \u003d appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":234,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":235,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":236,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":237,"author":{"gitId":"mounilsankar"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":238,"author":{"gitId":"mounilsankar"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2023-10-13"},{"lineNumber":239,"author":{"gitId":"mounilsankar"},"content":"            return this.appointment.isSame(appointment);","lastModifiedDate":"2023-10-13"},{"lineNumber":240,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":241,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":242,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":243,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":244,"author":{"gitId":"mounilsankar"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2023-10-13"},{"lineNumber":245,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":246,"author":{"gitId":"mounilsankar"},"content":"    private class ModelStubAcceptingAppointmentAdded extends ModelStub {","lastModifiedDate":"2023-10-13"},{"lineNumber":247,"author":{"gitId":"mounilsankar"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":248,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":249,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":250,"author":{"gitId":"mounilsankar"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":251,"author":{"gitId":"mounilsankar"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2023-10-13"},{"lineNumber":252,"author":{"gitId":"mounilsankar"},"content":"            return appointmentsAdded.stream().anyMatch(appointment::isSame);","lastModifiedDate":"2023-10-13"},{"lineNumber":253,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":254,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":255,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":256,"author":{"gitId":"mounilsankar"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":257,"author":{"gitId":"mounilsankar"},"content":"            requireNonNull(appointment);","lastModifiedDate":"2023-10-13"},{"lineNumber":258,"author":{"gitId":"mounilsankar"},"content":"            appointmentsAdded.add(appointment);","lastModifiedDate":"2023-10-13"},{"lineNumber":259,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":260,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":261,"author":{"gitId":"mounilsankar"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":262,"author":{"gitId":"mounilsankar"},"content":"        public ReadOnlyDatabase getDatabase() {","lastModifiedDate":"2023-10-13"},{"lineNumber":263,"author":{"gitId":"mounilsankar"},"content":"            return new Database();","lastModifiedDate":"2023-10-13"},{"lineNumber":264,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":265,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":266,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":266}},{"path":"src/test/java/seedu/address/logic/commands/AddDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kimshitong"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"kimshitong"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"kimshitong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"kimshitong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"kimshitong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.testutil.TypicalDoctor.ALICE;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"kimshitong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"kimshitong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"kimshitong"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"kimshitong"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"kimshitong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"kimshitong"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"kimshitong"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"kimshitong"},"content":"import seedu.address.testutil.DoctorBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"kimshitong"},"content":"public class AddDoctorCommandTest {","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"kimshitong"},"content":"    public void constructor_nullDoctor_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"kimshitong"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddDoctorCommand(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"kimshitong"},"content":"    public void execute_doctorAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"kimshitong"},"content":"        NewModelStubAcceptingDoctorAdded newModelStub \u003d new NewModelStubAcceptingDoctorAdded();","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"kimshitong"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"kimshitong"},"content":"        CommandResult commandResult \u003d new AddDoctorCommand(validDoctor).execute(newModelStub);","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"kimshitong"},"content":"        assertEquals(String.format(AddDoctorCommand.MESSAGE_SUCCESS, Messages.format(validDoctor)),","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"kimshitong"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"kimshitong"},"content":"        assertEquals(Arrays.asList(validDoctor), newModelStub.doctorsAdded);","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"kimshitong"},"content":"    public void execute_duplicateDoctor_throwsCommandException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"kimshitong"},"content":"        Doctor validDoctor \u003d new DoctorBuilder().build();","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"kimshitong"},"content":"        AddDoctorCommand addDoctorCommand \u003d new AddDoctorCommand(validDoctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"kimshitong"},"content":"        NewModelStub newModelStub \u003d new NewModelStubWithDoctor(validDoctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"kimshitong"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"kimshitong"},"content":"                AddDoctorCommand.MESSAGE_DUPLICATE_DOCTOR, () -\u003e addDoctorCommand.execute(newModelStub));","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"kimshitong"},"content":"    public void equals() {","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"kimshitong"},"content":"        Doctor alice \u003d new DoctorBuilder().withName(\"Alice\").build();","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"kimshitong"},"content":"        Doctor bob \u003d new DoctorBuilder().withName(\"Bob\").build();","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"kimshitong"},"content":"        AddDoctorCommand addAliceCommand \u003d new AddDoctorCommand(alice);","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"kimshitong"},"content":"        AddDoctorCommand addBobCommand \u003d new AddDoctorCommand(bob);","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"kimshitong"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"kimshitong"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"kimshitong"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"kimshitong"},"content":"        AddDoctorCommand addAliceCommandCopy \u003d new AddDoctorCommand(alice);","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"kimshitong"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":74,"author":{"gitId":"kimshitong"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":75,"author":{"gitId":"kimshitong"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":77,"author":{"gitId":"kimshitong"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"kimshitong"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"kimshitong"},"content":"        // different doctor -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"kimshitong"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":83,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"kimshitong"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"kimshitong"},"content":"        AddDoctorCommand addDoctorCommand \u003d new AddDoctorCommand(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"kimshitong"},"content":"        String expected \u003d AddDoctorCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"kimshitong"},"content":"        assertEquals(expected, addDoctorCommand.toString());","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"kimshitong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":92,"author":{"gitId":"kimshitong"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"kimshitong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":94,"author":{"gitId":"kimshitong"},"content":"    private class NewModelStub implements NewModel {","lastModifiedDate":"2023-10-12"},{"lineNumber":95,"author":{"gitId":"kimshitong"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-12"},{"lineNumber":96,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":97,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":98,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":99,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":100,"author":{"gitId":"kimshitong"},"content":"         * Returns the user prefs.","lastModifiedDate":"2023-10-12"},{"lineNumber":101,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":102,"author":{"gitId":"kimshitong"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-10-12"},{"lineNumber":103,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":104,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":105,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":107,"author":{"gitId":"kimshitong"},"content":"         * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"kimshitong"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"kimshitong"},"content":"         * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"kimshitong"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"kimshitong"},"content":"         * Returns the user prefs\u0027 database file path.","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"kimshitong"},"content":"        public Path getDatabaseFilePath() {","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"kimshitong"},"content":"         * Sets the user prefs\u0027 database file path.","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"kimshitong"},"content":"        public void setDatabaseFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-12"},{"lineNumber":131,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":132,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":134,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"kimshitong"},"content":"         * Replaces current Database data with the data in {@code database}.","lastModifiedDate":"2023-10-12"},{"lineNumber":137,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"kimshitong"},"content":"        public void setDatabase(ReadOnlyDatabase database) {","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":140,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"kimshitong"},"content":"        /** Returns the Database */","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"kimshitong"},"content":"        public ReadOnlyDatabase getDatabase() {","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":145,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":146,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":148,"author":{"gitId":"kimshitong"},"content":"         * Returns true if an appointment with the same fields as {@code appointment} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":149,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"kimshitong"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"kimshitong"},"content":"         * Returns true if a doctor with the same NRIC as {@code doctor} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"kimshitong"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":160,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":161,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"kimshitong"},"content":"         * Returns true if a patient with the same NRIC as {@code patient} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":163,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":164,"author":{"gitId":"kimshitong"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":167,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":168,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":169,"author":{"gitId":"kimshitong"},"content":"         * Returns true if a doctor with the same NRIC as {@code doctor} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":170,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":171,"author":{"gitId":"kimshitong"},"content":"        public boolean hasDoctorWithNric(Nric nric) {","lastModifiedDate":"2023-10-12"},{"lineNumber":172,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":173,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":174,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"kimshitong"},"content":"         * Returns true if a patient with the same NRIC as {@code patient} exists in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":178,"author":{"gitId":"kimshitong"},"content":"        public boolean hasPatientWithNric(Nric nric) {","lastModifiedDate":"2023-10-12"},{"lineNumber":179,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":180,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":181,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":182,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":183,"author":{"gitId":"kimshitong"},"content":"         * Deletes the given appointment.","lastModifiedDate":"2023-10-12"},{"lineNumber":184,"author":{"gitId":"kimshitong"},"content":"         * The appointment must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":185,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":186,"author":{"gitId":"kimshitong"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2023-10-12"},{"lineNumber":187,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":188,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":189,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":190,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":191,"author":{"gitId":"kimshitong"},"content":"         * Deletes the given doctor.","lastModifiedDate":"2023-10-12"},{"lineNumber":192,"author":{"gitId":"kimshitong"},"content":"         * The doctor must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":193,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":194,"author":{"gitId":"kimshitong"},"content":"        public void deleteDoctor(Doctor target) {","lastModifiedDate":"2023-10-12"},{"lineNumber":195,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":196,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":197,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":198,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":199,"author":{"gitId":"kimshitong"},"content":"         * Deletes the given patient.","lastModifiedDate":"2023-10-12"},{"lineNumber":200,"author":{"gitId":"kimshitong"},"content":"         * The patient must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":201,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":202,"author":{"gitId":"kimshitong"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2023-10-12"},{"lineNumber":203,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":204,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":205,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":206,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":207,"author":{"gitId":"kimshitong"},"content":"         * Adds the given appointment.","lastModifiedDate":"2023-10-12"},{"lineNumber":208,"author":{"gitId":"kimshitong"},"content":"         * {@code appointment} must not already exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":209,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":210,"author":{"gitId":"kimshitong"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":211,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":212,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":213,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":214,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":215,"author":{"gitId":"kimshitong"},"content":"         * Adds the given doctor.","lastModifiedDate":"2023-10-12"},{"lineNumber":216,"author":{"gitId":"kimshitong"},"content":"         * {@code doctor} must not already exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":217,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":218,"author":{"gitId":"kimshitong"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":219,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":220,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":221,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":222,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":223,"author":{"gitId":"kimshitong"},"content":"         * Adds the patient doctor.","lastModifiedDate":"2023-10-12"},{"lineNumber":224,"author":{"gitId":"kimshitong"},"content":"         * {@code patient} must not already exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":225,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":226,"author":{"gitId":"kimshitong"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":227,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":228,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":229,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":230,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":231,"author":{"gitId":"kimshitong"},"content":"         * Replaces the given appointment {@code target} with {@code editedAppointment}.","lastModifiedDate":"2023-10-12"},{"lineNumber":232,"author":{"gitId":"kimshitong"},"content":"         * {@code target} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":233,"author":{"gitId":"kimshitong"},"content":"         * The doctor, patient and dateTime of {@code editedAppointment} must not be the same as another existing","lastModifiedDate":"2023-10-12"},{"lineNumber":234,"author":{"gitId":"kimshitong"},"content":"         * appointment in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":235,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":236,"author":{"gitId":"kimshitong"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2023-10-12"},{"lineNumber":237,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":238,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":239,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":240,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":241,"author":{"gitId":"kimshitong"},"content":"         * Replaces the given doctor {@code target} with {@code editedDoctor}.","lastModifiedDate":"2023-10-12"},{"lineNumber":242,"author":{"gitId":"kimshitong"},"content":"         * {@code target} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":243,"author":{"gitId":"kimshitong"},"content":"         * The NRIC of {@code editedDoctor} must not be the same as another existing doctor in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":244,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":245,"author":{"gitId":"kimshitong"},"content":"        public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":246,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":247,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":248,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":249,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":250,"author":{"gitId":"kimshitong"},"content":"         * Replaces the given patient {@code target} with {@code editedPatient}.","lastModifiedDate":"2023-10-12"},{"lineNumber":251,"author":{"gitId":"kimshitong"},"content":"         * {@code target} must exist in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":252,"author":{"gitId":"kimshitong"},"content":"         * The NRIC of {@code editedPatient} must not be the same as another existing patient in the database.","lastModifiedDate":"2023-10-12"},{"lineNumber":253,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":254,"author":{"gitId":"kimshitong"},"content":"        public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-10-12"},{"lineNumber":255,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":256,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":257,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":258,"author":{"gitId":"kimshitong"},"content":"        /** Returns an unmodifiable view of the filtered appointment list */","lastModifiedDate":"2023-10-12"},{"lineNumber":259,"author":{"gitId":"kimshitong"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":260,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":261,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":262,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":263,"author":{"gitId":"kimshitong"},"content":"        /** Returns an unmodifiable view of the filtered doctor list */","lastModifiedDate":"2023-10-12"},{"lineNumber":264,"author":{"gitId":"kimshitong"},"content":"        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":265,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":266,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":267,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":268,"author":{"gitId":"kimshitong"},"content":"        /** Returns an unmodifiable view of the filtered patient list */","lastModifiedDate":"2023-10-12"},{"lineNumber":269,"author":{"gitId":"kimshitong"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":270,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":271,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":272,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":273,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":274,"author":{"gitId":"kimshitong"},"content":"         * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-12"},{"lineNumber":275,"author":{"gitId":"kimshitong"},"content":"         * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-12"},{"lineNumber":276,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":277,"author":{"gitId":"kimshitong"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":278,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":279,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":280,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":281,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":282,"author":{"gitId":"kimshitong"},"content":"         * Updates the filter of the filtered doctor list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-12"},{"lineNumber":283,"author":{"gitId":"kimshitong"},"content":"         * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-12"},{"lineNumber":284,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":285,"author":{"gitId":"kimshitong"},"content":"        public void updateFilteredDoctorList(Predicate\u003cDoctor\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":286,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":287,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":288,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":289,"author":{"gitId":"kimshitong"},"content":"        /**","lastModifiedDate":"2023-10-12"},{"lineNumber":290,"author":{"gitId":"kimshitong"},"content":"         * Updates the filter of the filtered patient list to filter by the given {@code predicate}.","lastModifiedDate":"2023-10-12"},{"lineNumber":291,"author":{"gitId":"kimshitong"},"content":"         * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-10-12"},{"lineNumber":292,"author":{"gitId":"kimshitong"},"content":"         */","lastModifiedDate":"2023-10-12"},{"lineNumber":293,"author":{"gitId":"kimshitong"},"content":"        @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":294,"author":{"gitId":"kimshitong"},"content":"        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2023-10-12"},{"lineNumber":295,"author":{"gitId":"kimshitong"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-12"},{"lineNumber":296,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":297,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":298,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":299,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":300,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":301,"author":{"gitId":"kimshitong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":302,"author":{"gitId":"kimshitong"},"content":"     * A Model stub that contains a single doctor.","lastModifiedDate":"2023-10-12"},{"lineNumber":303,"author":{"gitId":"kimshitong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":304,"author":{"gitId":"kimshitong"},"content":"    private class NewModelStubWithDoctor extends NewModelStub {","lastModifiedDate":"2023-10-12"},{"lineNumber":305,"author":{"gitId":"kimshitong"},"content":"        private final Doctor doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":306,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":307,"author":{"gitId":"kimshitong"},"content":"        NewModelStubWithDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":308,"author":{"gitId":"kimshitong"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":309,"author":{"gitId":"kimshitong"},"content":"            this.doctor \u003d doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":310,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":311,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":312,"author":{"gitId":"kimshitong"},"content":"        @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":313,"author":{"gitId":"kimshitong"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":314,"author":{"gitId":"kimshitong"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":315,"author":{"gitId":"kimshitong"},"content":"            return this.doctor.isSame(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":316,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":317,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":318,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":319,"author":{"gitId":"kimshitong"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":320,"author":{"gitId":"kimshitong"},"content":"     * A Model stub that always accept the doctor being added.","lastModifiedDate":"2023-10-12"},{"lineNumber":321,"author":{"gitId":"kimshitong"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":322,"author":{"gitId":"kimshitong"},"content":"    private class NewModelStubAcceptingDoctorAdded extends NewModelStub {","lastModifiedDate":"2023-10-12"},{"lineNumber":323,"author":{"gitId":"kimshitong"},"content":"        final ArrayList\u003cDoctor\u003e doctorsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":324,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":325,"author":{"gitId":"kimshitong"},"content":"        @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":326,"author":{"gitId":"kimshitong"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":327,"author":{"gitId":"kimshitong"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":328,"author":{"gitId":"kimshitong"},"content":"            return doctorsAdded.stream().anyMatch(doctor::isSame);","lastModifiedDate":"2023-10-12"},{"lineNumber":329,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":330,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":331,"author":{"gitId":"kimshitong"},"content":"        @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":332,"author":{"gitId":"kimshitong"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-12"},{"lineNumber":333,"author":{"gitId":"kimshitong"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":334,"author":{"gitId":"kimshitong"},"content":"            doctorsAdded.add(doctor);","lastModifiedDate":"2023-10-12"},{"lineNumber":335,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":336,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":337,"author":{"gitId":"kimshitong"},"content":"        @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":338,"author":{"gitId":"kimshitong"},"content":"        public ReadOnlyDatabase getDatabase() {","lastModifiedDate":"2023-10-12"},{"lineNumber":339,"author":{"gitId":"kimshitong"},"content":"            return new Database();","lastModifiedDate":"2023-10-12"},{"lineNumber":340,"author":{"gitId":"kimshitong"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":341,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":342,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":343,"author":{"gitId":"kimshitong"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"kimshitong":343}},{"path":"src/test/java/seedu/address/logic/commands/AddPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeggered"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"cheeggered"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"cheeggered"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"cheeggered"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"cheeggered"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"cheeggered"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"cheeggered"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"cheeggered"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"cheeggered"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"cheeggered"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"cheeggered"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"cheeggered"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"cheeggered"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"cheeggered"},"content":"public class AddPatientCommandTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"cheeggered"},"content":"    public void constructor_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"cheeggered"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"cheeggered"},"content":"    public void execute_patientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"cheeggered"},"content":"        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"cheeggered"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"cheeggered"},"content":"        CommandResult commandResult \u003d new AddPatientCommand(validPatient).execute(modelStub);","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"cheeggered"},"content":"        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, Messages.format(validPatient)),","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"cheeggered"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"cheeggered"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.patientsAdded);","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"cheeggered"},"content":"    public void execute_duplicatePatient_throwsCommandException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"cheeggered"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"cheeggered"},"content":"        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(validPatient);","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"cheeggered"},"content":"        ModelStub modelStub \u003d new ModelStubWithPatient(validPatient);","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"cheeggered"},"content":"        assertThrows(CommandException.class,","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"cheeggered"},"content":"                AddPatientCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addPatientCommand.execute(modelStub));","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"cheeggered"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"cheeggered"},"content":"        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"cheeggered"},"content":"        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"cheeggered"},"content":"        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"cheeggered"},"content":"        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"cheeggered"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"cheeggered"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"cheeggered"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"cheeggered"},"content":"        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand(alice);","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"cheeggered"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"cheeggered"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"cheeggered"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"cheeggered"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"cheeggered"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"cheeggered"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"cheeggered"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"cheeggered"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"cheeggered"},"content":"        AddPatientCommand addPatientCommand \u003d new AddPatientCommand(ALICE);","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"cheeggered"},"content":"        String expected \u003d AddPatientCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"cheeggered"},"content":"        assertEquals(expected, addPatientCommand.toString());","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"cheeggered"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"cheeggered"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"cheeggered"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"cheeggered"},"content":"    private class ModelStub implements NewModel {","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"cheeggered"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"cheeggered"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"cheeggered"},"content":"        public void deleteDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"cheeggered"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"cheeggered"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"cheeggered"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"cheeggered"},"content":"        public boolean hasDoctorWithNric(Nric nric) {","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"cheeggered"},"content":"        public boolean hasPatientWithNric(Nric nric) {","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"cheeggered"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"cheeggered"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":138,"author":{"gitId":"cheeggered"},"content":"        public Path getDatabaseFilePath() {","lastModifiedDate":"2023-10-13"},{"lineNumber":139,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":140,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":141,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":142,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":143,"author":{"gitId":"cheeggered"},"content":"        public void setDatabaseFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-10-13"},{"lineNumber":144,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":145,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":146,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":147,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":148,"author":{"gitId":"cheeggered"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":149,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":150,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":151,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":152,"author":{"gitId":"cheeggered"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-10-13"},{"lineNumber":153,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":154,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":155,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":156,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":157,"author":{"gitId":"cheeggered"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":158,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":159,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":160,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":161,"author":{"gitId":"cheeggered"},"content":"        public void setDatabase(ReadOnlyDatabase database) {","lastModifiedDate":"2023-10-13"},{"lineNumber":162,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":163,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":164,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":165,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":166,"author":{"gitId":"cheeggered"},"content":"        public ReadOnlyDatabase getDatabase() {","lastModifiedDate":"2023-10-13"},{"lineNumber":167,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":168,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":169,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":170,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":171,"author":{"gitId":"cheeggered"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":172,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":173,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":174,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":175,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":176,"author":{"gitId":"cheeggered"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2023-10-13"},{"lineNumber":177,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":178,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":179,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":180,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":181,"author":{"gitId":"cheeggered"},"content":"        public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":182,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":183,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":184,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":185,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":186,"author":{"gitId":"cheeggered"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":187,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":188,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":189,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":190,"author":{"gitId":"cheeggered"},"content":"        public void setDoctor(Doctor target, Doctor editedDoctor) {","lastModifiedDate":"2023-10-13"},{"lineNumber":191,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":192,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":193,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":194,"author":{"gitId":"cheeggered"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":195,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":196,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":197,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":198,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":199,"author":{"gitId":"cheeggered"},"content":"        public ObservableList\u003cDoctor\u003e getFilteredDoctorList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":200,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":201,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":202,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":203,"author":{"gitId":"cheeggered"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":204,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":205,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":206,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":207,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":208,"author":{"gitId":"cheeggered"},"content":"        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2023-10-13"},{"lineNumber":209,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":210,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":211,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":212,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":213,"author":{"gitId":"cheeggered"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2023-10-13"},{"lineNumber":214,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":215,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":216,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":217,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":218,"author":{"gitId":"cheeggered"},"content":"        public void updateFilteredDoctorList(Predicate\u003cDoctor\u003e predicate) {","lastModifiedDate":"2023-10-13"},{"lineNumber":219,"author":{"gitId":"cheeggered"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":220,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":221,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":222,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":223,"author":{"gitId":"cheeggered"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":224,"author":{"gitId":"cheeggered"},"content":"     * A Model stub that contains a single patient.","lastModifiedDate":"2023-10-13"},{"lineNumber":225,"author":{"gitId":"cheeggered"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":226,"author":{"gitId":"cheeggered"},"content":"    private class ModelStubWithPatient extends ModelStub {","lastModifiedDate":"2023-10-13"},{"lineNumber":227,"author":{"gitId":"cheeggered"},"content":"        private final Patient patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":228,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":229,"author":{"gitId":"cheeggered"},"content":"        ModelStubWithPatient(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":230,"author":{"gitId":"cheeggered"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":231,"author":{"gitId":"cheeggered"},"content":"            this.patient \u003d patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":232,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":233,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":234,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":235,"author":{"gitId":"cheeggered"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":236,"author":{"gitId":"cheeggered"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":237,"author":{"gitId":"cheeggered"},"content":"            return this.patient.isSame(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":238,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":239,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":240,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":241,"author":{"gitId":"cheeggered"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":242,"author":{"gitId":"cheeggered"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2023-10-13"},{"lineNumber":243,"author":{"gitId":"cheeggered"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":244,"author":{"gitId":"cheeggered"},"content":"    private class ModelStubAcceptingPatientAdded extends ModelStub {","lastModifiedDate":"2023-10-13"},{"lineNumber":245,"author":{"gitId":"cheeggered"},"content":"        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-13"},{"lineNumber":246,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":247,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":248,"author":{"gitId":"cheeggered"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":249,"author":{"gitId":"cheeggered"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":250,"author":{"gitId":"cheeggered"},"content":"            return patientsAdded.stream().anyMatch(patient::isSame);","lastModifiedDate":"2023-10-13"},{"lineNumber":251,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":252,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":253,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":254,"author":{"gitId":"cheeggered"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":255,"author":{"gitId":"cheeggered"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":256,"author":{"gitId":"cheeggered"},"content":"            patientsAdded.add(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":257,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":258,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":259,"author":{"gitId":"cheeggered"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":260,"author":{"gitId":"cheeggered"},"content":"        public ReadOnlyDatabase getDatabase() {","lastModifiedDate":"2023-10-13"},{"lineNumber":261,"author":{"gitId":"cheeggered"},"content":"            return new Database();","lastModifiedDate":"2023-10-13"},{"lineNumber":262,"author":{"gitId":"cheeggered"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":263,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":264,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":265,"author":{"gitId":"cheeggered"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"cheeggered":265}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_END_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_START_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.NewModel;","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"    public static final String VALID_NRIC_AMY \u003d \"T0123456A\";","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S9987654Z\";","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    public static final String VALID_PATIENT_NRIC \u003d \"S9348573F\";","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"    public static final String VALID_DOCTOR_NRIC \u003d \"T0123456J\";","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"    public static final String VALID_APPOINTMENT_START_TIME \u003d \"2023-12-01 07:30\";","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"    public static final String VALID_APPOINTMENT_END_TIME \u003d \"2023-12-01 08:00\";","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"kimshitong"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"kimshitong"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"    public static final String APPOINTMENT_START_TIME_DESC \u003d \" \"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"            + PREFIX_APPOINTMENT_START_TIME","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"            + VALID_APPOINTMENT_START_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"    public static final String APPOINTMENT_END_TIME_DESC \u003d \" \"","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"            + PREFIX_APPOINTMENT_END_TIME","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"            + VALID_APPOINTMENT_END_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"    public static final String PATIENT_NRIC_DESC \u003d \" \" + PREFIX_PATIENT_NRIC + VALID_PATIENT_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"    public static final String DOCTOR_NRIC_DESC \u003d \" \" + PREFIX_DOCTOR_NRIC + VALID_DOCTOR_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"kimshitong"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"T012#456A\"; // \u0027#\u0027 not allowed in nric","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"mounilsankar"},"content":"    public static final String INVALID_NRIC \u003d \"S9348573FF\"; // invalid number of digits","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"mounilsankar"},"content":"    public static final String INVALID_APPOINTMENT_START_TIME_DESC \u003d \" \"","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"mounilsankar"},"content":"            + PREFIX_APPOINTMENT_START_TIME","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"mounilsankar"},"content":"            + \"11-09-2023 07:30\"; // invalid format for date","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"mounilsankar"},"content":"    public static final String INVALID_APPOINTMENT_END_TIME_DESC \u003d \" \"","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"mounilsankar"},"content":"            + PREFIX_APPOINTMENT_END_TIME","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"mounilsankar"},"content":"            + \"11-09-2023 07:30\"; // invalid format for date","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"mounilsankar"},"content":"    public static final String INVALID_PATIENT_NRIC_DESC \u003d \" \" + PREFIX_PATIENT_NRIC + INVALID_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"mounilsankar"},"content":"    public static final String INVALID_DOCTOR_NRIC_DESC \u003d \" \" + PREFIX_DOCTOR_NRIC + INVALID_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":152,"author":{"gitId":"mounilsankar"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2023-10-14"},{"lineNumber":153,"author":{"gitId":"mounilsankar"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2023-10-14"},{"lineNumber":154,"author":{"gitId":"mounilsankar"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2023-10-14"},{"lineNumber":155,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":156,"author":{"gitId":"mounilsankar"},"content":"    public static void assertNewCommandSuccess(NewCommand command, NewModel actualModel,","lastModifiedDate":"2023-10-14"},{"lineNumber":157,"author":{"gitId":"mounilsankar"},"content":"                                               CommandResult expectedCommandResult,","lastModifiedDate":"2023-10-14"},{"lineNumber":158,"author":{"gitId":"mounilsankar"},"content":"                                               NewModel expectedModel) {","lastModifiedDate":"2023-10-14"},{"lineNumber":159,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-10-14"},{"lineNumber":160,"author":{"gitId":"mounilsankar"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":161,"author":{"gitId":"mounilsankar"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2023-10-14"},{"lineNumber":162,"author":{"gitId":"mounilsankar"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":163,"author":{"gitId":"mounilsankar"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2023-10-14"},{"lineNumber":164,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2023-10-14"},{"lineNumber":165,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":166,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":167,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":168,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"mounilsankar"},"content":"     * Convenience wrapper to {@link #assertNewCommandSuccess(NewCommand, NewModel, CommandResult, NewModel)}","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"mounilsankar"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2023-10-14"},{"lineNumber":171,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":172,"author":{"gitId":"mounilsankar"},"content":"    public static void assertNewCommandSuccess(NewCommand newCommand, NewModel actualModel, String expectedMessage,","lastModifiedDate":"2023-10-14"},{"lineNumber":173,"author":{"gitId":"mounilsankar"},"content":"                                            NewModel expectedModel) {","lastModifiedDate":"2023-10-14"},{"lineNumber":174,"author":{"gitId":"mounilsankar"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2023-10-14"},{"lineNumber":175,"author":{"gitId":"mounilsankar"},"content":"        assertNewCommandSuccess(newCommand, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":176,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":177,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":178,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":179,"author":{"gitId":"mounilsankar"},"content":"     * Executes the given {@code newcommand}, confirms that \u003cbr\u003e","lastModifiedDate":"2023-10-14"},{"lineNumber":180,"author":{"gitId":"mounilsankar"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2023-10-14"},{"lineNumber":181,"author":{"gitId":"mounilsankar"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2023-10-14"},{"lineNumber":182,"author":{"gitId":"mounilsankar"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2023-10-14"},{"lineNumber":183,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":184,"author":{"gitId":"mounilsankar"},"content":"    public static void assertNewCommandFailure(NewCommand newCommand, NewModel actualModel, String expectedMessage) {","lastModifiedDate":"2023-10-14"},{"lineNumber":185,"author":{"gitId":"mounilsankar"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2023-10-14"},{"lineNumber":186,"author":{"gitId":"mounilsankar"},"content":"        // only do so by copying its components.","lastModifiedDate":"2023-10-14"},{"lineNumber":187,"author":{"gitId":"mounilsankar"},"content":"        Database expectedAddressBook \u003d new Database(actualModel.getDatabase());","lastModifiedDate":"2023-10-14"},{"lineNumber":188,"author":{"gitId":"mounilsankar"},"content":"        List\u003cAppointment\u003e expectedFilteredAppointmentList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAppointmentList());","lastModifiedDate":"2023-10-14"},{"lineNumber":189,"author":{"gitId":"mounilsankar"},"content":"        List\u003cPatient\u003e expectedFilteredPatientList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());","lastModifiedDate":"2023-10-14"},{"lineNumber":190,"author":{"gitId":"mounilsankar"},"content":"        List\u003cDoctor\u003e expectedFilteredDoctorList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDoctorList());","lastModifiedDate":"2023-10-14"},{"lineNumber":191,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":192,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e newCommand.execute(actualModel));","lastModifiedDate":"2023-10-14"},{"lineNumber":193,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(expectedAddressBook, actualModel.getDatabase());","lastModifiedDate":"2023-10-14"},{"lineNumber":194,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(expectedFilteredAppointmentList, actualModel.getFilteredAppointmentList());","lastModifiedDate":"2023-10-14"},{"lineNumber":195,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(expectedFilteredPatientList, actualModel.getFilteredPatientList());","lastModifiedDate":"2023-10-14"},{"lineNumber":196,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(expectedFilteredDoctorList, actualModel.getFilteredDoctorList());","lastModifiedDate":"2023-10-14"},{"lineNumber":197,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"yanghengtang":2,"mounilsankar":78,"-":128,"kimshitong":4}},{"path":"src/test/java/seedu/address/logic/parser/AddAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_END_TIME_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_START_TIME_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DOCTOR_NRIC_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_END_TIME_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_START_TIME_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DOCTOR_NRIC_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PATIENT_NRIC_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PATIENT_NRIC_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_END_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_START_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOCTOR_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_END_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_START_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.NewCommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.NewCommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalAppointment.APPOINTMENT_7;","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.AppointmentEndTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.AppointmentStartTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"public class AddAppointmentCommandParserTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(APPOINTMENT_7).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"                + PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"                + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"                + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"                + APPOINTMENT_END_TIME_DESC , new AddAppointmentCommand(expectedAppointment));","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"    public void parse_repeatedValue_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        String validExpectedAppointmentString \u003d PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"                + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"                + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"                + APPOINTMENT_END_TIME_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"        // multiple patient nric","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, PATIENT_NRIC_DESC + validExpectedAppointmentString,","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PATIENT_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"        // multiple doctor nric","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, DOCTOR_NRIC_DESC + validExpectedAppointmentString,","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DOCTOR_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"        // multiple apointment start dates","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, APPOINTMENT_START_TIME_DESC + validExpectedAppointmentString,","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_APPOINTMENT_START_TIME));","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"        // multiple appointment end dates","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, APPOINTMENT_END_TIME_DESC + validExpectedAppointmentString,","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_APPOINTMENT_END_TIME));","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"                validExpectedAppointmentString + PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"mounilsankar"},"content":"                        + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_END_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"mounilsankar"},"content":"                        + validExpectedAppointmentString,","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PATIENT_NRIC, PREFIX_DOCTOR_NRIC,","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"mounilsankar"},"content":"                        PREFIX_APPOINTMENT_START_TIME, PREFIX_APPOINTMENT_END_TIME));","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"mounilsankar"},"content":"        // invalid patient Nric","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, INVALID_PATIENT_NRIC_DESC + validExpectedAppointmentString,","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PATIENT_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"mounilsankar"},"content":"        // invalid email","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, INVALID_DOCTOR_NRIC_DESC + validExpectedAppointmentString,","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DOCTOR_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"mounilsankar"},"content":"        // invalid phone","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, INVALID_APPOINTMENT_START_TIME_DESC + validExpectedAppointmentString,","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_APPOINTMENT_START_TIME));","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"mounilsankar"},"content":"        // invalid address","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, INVALID_APPOINTMENT_END_TIME_DESC + validExpectedAppointmentString,","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_APPOINTMENT_END_TIME));","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"mounilsankar"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"mounilsankar"},"content":"        // invalid patient Nric","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, validExpectedAppointmentString + INVALID_PATIENT_NRIC_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PATIENT_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"mounilsankar"},"content":"        // invalid doctor Nric","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, validExpectedAppointmentString + INVALID_DOCTOR_NRIC_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_DOCTOR_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"mounilsankar"},"content":"        // invalid Appointment start date","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, validExpectedAppointmentString + INVALID_APPOINTMENT_START_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_APPOINTMENT_START_TIME));","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"mounilsankar"},"content":"        // invalid Appointment end date","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, validExpectedAppointmentString + INVALID_APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"mounilsankar"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_APPOINTMENT_END_TIME));","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"mounilsankar"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"mounilsankar"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"mounilsankar"},"content":"        // missing patient nric prefix","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, VALID_PATIENT_NRIC","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"mounilsankar"},"content":"                        + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"mounilsankar"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"mounilsankar"},"content":"        // missing doctor nric prefix","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"mounilsankar"},"content":"                        + VALID_DOCTOR_NRIC","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"mounilsankar"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":138,"author":{"gitId":"mounilsankar"},"content":"        // missing appointment start time prefix","lastModifiedDate":"2023-10-13"},{"lineNumber":139,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":140,"author":{"gitId":"mounilsankar"},"content":"                        + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":141,"author":{"gitId":"mounilsankar"},"content":"                        + VALID_APPOINTMENT_START_TIME","lastModifiedDate":"2023-10-13"},{"lineNumber":142,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":143,"author":{"gitId":"mounilsankar"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":144,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":145,"author":{"gitId":"mounilsankar"},"content":"        // missing appointment end time prefix","lastModifiedDate":"2023-10-13"},{"lineNumber":146,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":147,"author":{"gitId":"mounilsankar"},"content":"                        + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":148,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":149,"author":{"gitId":"mounilsankar"},"content":"                        + VALID_APPOINTMENT_END_TIME,","lastModifiedDate":"2023-10-13"},{"lineNumber":150,"author":{"gitId":"mounilsankar"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":151,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":152,"author":{"gitId":"mounilsankar"},"content":"        // all prefixes missing","lastModifiedDate":"2023-10-13"},{"lineNumber":153,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, VALID_PATIENT_NRIC","lastModifiedDate":"2023-10-13"},{"lineNumber":154,"author":{"gitId":"mounilsankar"},"content":"                        + VALID_DOCTOR_NRIC","lastModifiedDate":"2023-10-13"},{"lineNumber":155,"author":{"gitId":"mounilsankar"},"content":"                        + VALID_APPOINTMENT_START_TIME","lastModifiedDate":"2023-10-13"},{"lineNumber":156,"author":{"gitId":"mounilsankar"},"content":"                        + VALID_APPOINTMENT_END_TIME,","lastModifiedDate":"2023-10-13"},{"lineNumber":157,"author":{"gitId":"mounilsankar"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":158,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":159,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":160,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":161,"author":{"gitId":"mounilsankar"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":162,"author":{"gitId":"mounilsankar"},"content":"        // invalid patient nric","lastModifiedDate":"2023-10-13"},{"lineNumber":163,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, INVALID_PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":164,"author":{"gitId":"mounilsankar"},"content":"                        + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":165,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":166,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":167,"author":{"gitId":"mounilsankar"},"content":"                Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":168,"author":{"gitId":"mounilsankar"},"content":"        // invalid doctor nric","lastModifiedDate":"2023-10-13"},{"lineNumber":169,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":170,"author":{"gitId":"mounilsankar"},"content":"                        + INVALID_DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":171,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":172,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":173,"author":{"gitId":"mounilsankar"},"content":"                Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":174,"author":{"gitId":"mounilsankar"},"content":"        // invalid appointment start time","lastModifiedDate":"2023-10-13"},{"lineNumber":175,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":176,"author":{"gitId":"mounilsankar"},"content":"                        + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":177,"author":{"gitId":"mounilsankar"},"content":"                        + INVALID_APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":178,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":179,"author":{"gitId":"mounilsankar"},"content":"                AppointmentStartTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":180,"author":{"gitId":"mounilsankar"},"content":"        // invalid appoinrment end time","lastModifiedDate":"2023-10-13"},{"lineNumber":181,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":182,"author":{"gitId":"mounilsankar"},"content":"                        + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":183,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":184,"author":{"gitId":"mounilsankar"},"content":"                        + INVALID_APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":185,"author":{"gitId":"mounilsankar"},"content":"                AppointmentEndTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":186,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":187,"author":{"gitId":"mounilsankar"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2023-10-13"},{"lineNumber":188,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, INVALID_PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":189,"author":{"gitId":"mounilsankar"},"content":"                        + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":190,"author":{"gitId":"mounilsankar"},"content":"                        + INVALID_APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":191,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":192,"author":{"gitId":"mounilsankar"},"content":"                Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":193,"author":{"gitId":"mounilsankar"},"content":"        // non-empty preamble","lastModifiedDate":"2023-10-13"},{"lineNumber":194,"author":{"gitId":"mounilsankar"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY","lastModifiedDate":"2023-10-13"},{"lineNumber":195,"author":{"gitId":"mounilsankar"},"content":"                        + PATIENT_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":196,"author":{"gitId":"mounilsankar"},"content":"                        + DOCTOR_NRIC_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":197,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_START_TIME_DESC","lastModifiedDate":"2023-10-13"},{"lineNumber":198,"author":{"gitId":"mounilsankar"},"content":"                        + APPOINTMENT_END_TIME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":199,"author":{"gitId":"mounilsankar"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-13"},{"lineNumber":200,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":201,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":201}},{"path":"src/test/java/seedu/address/logic/parser/AddDoctorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kimshitong"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.parser.NewCommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.logic.parser.NewCommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.testutil.TypicalDoctor.AMY;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"kimshitong"},"content":"import static seedu.address.testutil.TypicalDoctor.BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"kimshitong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"kimshitong"},"content":"import seedu.address.logic.commands.AddDoctorCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"kimshitong"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"kimshitong"},"content":"import seedu.address.testutil.DoctorBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"kimshitong"},"content":"public class AddDoctorCommandParserTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"kimshitong"},"content":"    private AddDoctorCommandParser parser \u003d new AddDoctorCommandParser();","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"kimshitong"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"kimshitong"},"content":"        Doctor expectedDoctor \u003d new DoctorBuilder(BOB).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"kimshitong"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"kimshitong"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"kimshitong"},"content":"                + NAME_DESC_BOB + NRIC_DESC_BOB, new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"kimshitong"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"kimshitong"},"content":"        Doctor expectedDoctorMultipleTags \u003d new DoctorBuilder(BOB).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"kimshitong"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"kimshitong"},"content":"                NAME_DESC_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"kimshitong"},"content":"                new AddDoctorCommand(expectedDoctorMultipleTags));","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"kimshitong"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"kimshitong"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + NRIC_DESC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"kimshitong"},"content":"        // multiple names","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"kimshitong"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"kimshitong"},"content":"        // multiple emails","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, NRIC_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"kimshitong"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"kimshitong"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"kimshitong"},"content":"                validExpectedPersonString + NRIC_DESC_AMY + NAME_DESC_AMY","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"kimshitong"},"content":"                        + validExpectedPersonString,","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"kimshitong"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"kimshitong"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"kimshitong"},"content":"        // invalid name","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"kimshitong"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"kimshitong"},"content":"        // invalid nric","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, INVALID_NRIC_DESC + validExpectedPersonString,","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"kimshitong"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"kimshitong"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"kimshitong"},"content":"        // invalid name","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"kimshitong"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"kimshitong"},"content":"        // invalid nric","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NRIC_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"kimshitong"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"kimshitong"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"kimshitong"},"content":"        // zero tags","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"kimshitong"},"content":"        Doctor expectedDoctor \u003d new DoctorBuilder(AMY).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"kimshitong"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY,","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"kimshitong"},"content":"                new AddDoctorCommand(expectedDoctor));","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"kimshitong"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"kimshitong"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"kimshitong"},"content":"        // missing name prefix","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"kimshitong"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"kimshitong"},"content":"        // missing nric prefix","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_NRIC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"kimshitong"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"kimshitong"},"content":"        // all prefixes missing","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_NRIC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"kimshitong"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"kimshitong"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"kimshitong"},"content":"        // invalid name","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"kimshitong"},"content":"        // invalid nric","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"kimshitong"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_NRIC_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"kimshitong"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"kimshitong"},"content":"        // non-empty preamble","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"kimshitong"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"kimshitong"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"kimshitong"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"kimshitong":132}},{"path":"src/test/java/seedu/address/logic/parser/AddPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeggered"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.NewCommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.logic.parser.NewCommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.testutil.TypicalPatient.AMY;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"cheeggered"},"content":"import static seedu.address.testutil.TypicalPatient.BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"cheeggered"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"cheeggered"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"cheeggered"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"cheeggered"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"cheeggered"},"content":"public class AddPatientCommandParserTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"cheeggered"},"content":"    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"cheeggered"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"cheeggered"},"content":"        Patient expectedPatient \u003d new PatientBuilder(BOB).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"cheeggered"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"cheeggered"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"cheeggered"},"content":"                new AddPatientCommand(expectedPatient));","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"cheeggered"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"cheeggered"},"content":"        Patient expectedPatientMultipleTags \u003d new PatientBuilder(BOB).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"cheeggered"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"cheeggered"},"content":"                new AddPatientCommand(expectedPatientMultipleTags));","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"cheeggered"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"cheeggered"},"content":"        String validExpectedPatientString \u003d NAME_DESC_BOB + PHONE_DESC_BOB + NRIC_DESC_BOB;","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"cheeggered"},"content":"        // multiple names","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPatientString,","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"cheeggered"},"content":"        // multiple phones","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPatientString,","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"cheeggered"},"content":"        // multiple nric","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, NRIC_DESC_AMY + validExpectedPatientString,","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"cheeggered"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"cheeggered"},"content":"                validExpectedPatientString + PHONE_DESC_AMY + NAME_DESC_AMY + NRIC_DESC_AMY","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"cheeggered"},"content":"                        + validExpectedPatientString,","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_NRIC, PREFIX_PHONE));","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"cheeggered"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"cheeggered"},"content":"        // invalid name","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPatientString,","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"cheeggered"},"content":"        // invalid nric","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, INVALID_NRIC_DESC + validExpectedPatientString,","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"cheeggered"},"content":"        // invalid phone","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPatientString,","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"cheeggered"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"cheeggered"},"content":"        // invalid name","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, validExpectedPatientString + INVALID_NAME_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"cheeggered"},"content":"        // invalid nric","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, validExpectedPatientString + INVALID_NRIC_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NRIC));","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"cheeggered"},"content":"        // invalid phone","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, validExpectedPatientString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"cheeggered"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"cheeggered"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"cheeggered"},"content":"        // zero tags","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"cheeggered"},"content":"        Patient expectedPerson \u003d new PatientBuilder(AMY).build();","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"cheeggered"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + NRIC_DESC_AMY,","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"cheeggered"},"content":"                new AddPatientCommand(expectedPerson));","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"cheeggered"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":115,"author":{"gitId":"cheeggered"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-10-13"},{"lineNumber":116,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":117,"author":{"gitId":"cheeggered"},"content":"        // missing name prefix","lastModifiedDate":"2023-10-13"},{"lineNumber":118,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":119,"author":{"gitId":"cheeggered"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":120,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"cheeggered"},"content":"        // missing phone prefix","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"cheeggered"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":124,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":125,"author":{"gitId":"cheeggered"},"content":"        // missing email prefix","lastModifiedDate":"2023-10-13"},{"lineNumber":126,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_NRIC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":127,"author":{"gitId":"cheeggered"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":128,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":129,"author":{"gitId":"cheeggered"},"content":"        // all prefixes missing","lastModifiedDate":"2023-10-13"},{"lineNumber":130,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_NRIC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":131,"author":{"gitId":"cheeggered"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"cheeggered"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"cheeggered"},"content":"        // invalid name","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + NRIC_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":138,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":139,"author":{"gitId":"cheeggered"},"content":"        // invalid phone","lastModifiedDate":"2023-10-13"},{"lineNumber":140,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + NRIC_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":141,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":142,"author":{"gitId":"cheeggered"},"content":"        // invalid nric","lastModifiedDate":"2023-10-13"},{"lineNumber":143,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":144,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":145,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":146,"author":{"gitId":"cheeggered"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2023-10-13"},{"lineNumber":147,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_PHONE_DESC + NRIC_DESC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":148,"author":{"gitId":"cheeggered"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-13"},{"lineNumber":149,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":150,"author":{"gitId":"cheeggered"},"content":"        // non-empty preamble","lastModifiedDate":"2023-10-13"},{"lineNumber":151,"author":{"gitId":"cheeggered"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2023-10-13"},{"lineNumber":152,"author":{"gitId":"cheeggered"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-13"},{"lineNumber":153,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":154,"author":{"gitId":"cheeggered"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"cheeggered":154}},{"path":"src/test/java/seedu/address/logic/parser/NewAddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"public class NewAddressBookParserTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    private final NewAddressBookParser parser \u003d new NewAddressBookParser();","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    public void parseCommand_addAppointment() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"        AddAppointmentCommand command \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"                (AddAppointmentCommand) parser.parseCommand(PersonUtil.getAddAppointmentCommand(appointment));","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(new AddAppointmentCommand(appointment), command);","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"    public void parseCommand_addPatient() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PersonUtil.getAddPatientCommand(patient));","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(new AddPatientCommand(patient), command);","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":51}},{"path":"src/test/java/seedu/address/logic/parser/NewCommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.NewCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"public class NewCommandParserTestUtil {","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    public static void assertParseSuccess(NewParser\u003c? extends NewCommand\u003e parser, String userInput,","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"                                          NewCommand expectedCommand) {","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"            NewCommand command \u003d parser.parse(userInput);","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"    public static void assertParseFailure(NewParser\u003c? extends NewCommand\u003e parser,","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"                                          String userInput, String expectedMessage) {","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"            parser.parse(userInput);","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":40}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"    private static final String INVALID_NRIC \u003d \"A1234567N\";","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    private static final String VALID_NRIC \u003d \"T1234567G\";","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":201,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":202,"author":{"gitId":"mounilsankar"},"content":"    public void parseNric_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":203,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));","lastModifiedDate":"2023-10-12"},{"lineNumber":204,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":205,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":206,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":207,"author":{"gitId":"mounilsankar"},"content":"    public void parseNric_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":208,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));","lastModifiedDate":"2023-10-12"},{"lineNumber":209,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":210,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":211,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":212,"author":{"gitId":"mounilsankar"},"content":"    public void parseNric_validValueWithoutWhitespace_returnsNric() throws Exception {","lastModifiedDate":"2023-10-12"},{"lineNumber":213,"author":{"gitId":"mounilsankar"},"content":"        Nric expectedNric \u003d new Nric(VALID_NRIC);","lastModifiedDate":"2023-10-12"},{"lineNumber":214,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));","lastModifiedDate":"2023-10-12"},{"lineNumber":215,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":216,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":217,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":218,"author":{"gitId":"mounilsankar"},"content":"    public void parseNric_validValueWithWhitespace_returnsTrimmedNric() throws Exception {","lastModifiedDate":"2023-10-12"},{"lineNumber":219,"author":{"gitId":"mounilsankar"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;","lastModifiedDate":"2023-10-12"},{"lineNumber":220,"author":{"gitId":"mounilsankar"},"content":"        Nric expectedNric \u003d new Nric(VALID_NRIC);","lastModifiedDate":"2023-10-12"},{"lineNumber":221,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(expectedNric, ParserUtil.parseNric(nameWithWhitespace));","lastModifiedDate":"2023-10-12"},{"lineNumber":222,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":223,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":224,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":225,"author":{"gitId":"mounilsankar"},"content":"    public void parseNric_validValueWithLowerCase_returnsTrimmedNric() throws Exception {","lastModifiedDate":"2023-10-12"},{"lineNumber":226,"author":{"gitId":"mounilsankar"},"content":"        String lowercaseNric \u003d VALID_NRIC.toLowerCase();","lastModifiedDate":"2023-10-12"},{"lineNumber":227,"author":{"gitId":"mounilsankar"},"content":"        Nric expectedNric \u003d new Nric(VALID_NRIC);","lastModifiedDate":"2023-10-12"},{"lineNumber":228,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(expectedNric, ParserUtil.parseNric(lowercaseNric));","lastModifiedDate":"2023-10-12"},{"lineNumber":229,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"mounilsankar":34,"-":196}},{"path":"src/test/java/seedu/address/model/DatabaseTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalAppointment.APPOINTMENT_1;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalDoctor.ALICE;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalDoctor.BENSON;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalDoctor.getTypicalDoctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.getTypicalPatient;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"import java.util.Collection;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"import java.util.List;","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.testutil.DoctorBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.testutil.TypicalPatient;","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"public class DatabaseTest {","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"    private final Database database \u003d new Database();","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"    public void emptyConstructor() {","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(Collections.emptyList(), database.getAppointmentList());","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(Collections.emptyList(), database.getDoctorList());","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(Collections.emptyList(), database.getPatientList());","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"    public void copyConstructor() {","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"        List\u003cAppointment\u003e appointmentList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"        List\u003cDoctor\u003e doctorList \u003d getTypicalDoctor();","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"        List\u003cPatient\u003e patientList \u003d getTypicalPatient();","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"        DatabaseStub newData \u003d new DatabaseStub(appointmentList, doctorList, patientList);","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"        Database newDatabase \u003d new Database(newData);","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(appointmentList, newDatabase.getAppointmentList());","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(doctorList, newDatabase.getDoctorList());","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(patientList, newDatabase.getPatientList());","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"    public void hasAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e database.hasAppointment(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_nullDoctor_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e database.hasDoctor(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e database.hasPatient(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"yanghengtang"},"content":"    public void hasAppointment_appointmentNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(database.hasAppointment(APPOINTMENT_1));","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_doctorNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(database.hasDoctor(ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_patientNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(database.hasPatient(TypicalPatient.CARL));","lastModifiedDate":"2023-10-12"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"    public void hasAppointment_appointmentInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"        database.addAppointment(APPOINTMENT_1);","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(database.hasAppointment(APPOINTMENT_1));","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":92,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_doctorInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"yanghengtang"},"content":"        database.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":94,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(database.hasDoctor(ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":95,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":96,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":97,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":98,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_patientInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":99,"author":{"gitId":"derekjxtan"},"content":"        database.addPatient(TypicalPatient.CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":100,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(database.hasPatient(TypicalPatient.CARL));","lastModifiedDate":"2023-10-12"},{"lineNumber":101,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":102,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":103,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":104,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_doctorWithSameNricInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":105,"author":{"gitId":"yanghengtang"},"content":"        database.addDoctor(BENSON);","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"yanghengtang"},"content":"        Doctor editedBenson \u003d new DoctorBuilder(BENSON).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":107,"author":{"gitId":"yanghengtang"},"content":"        database.setDoctor(BENSON, editedBenson);","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(database.hasDoctor(editedBenson));","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_patientWithSameNricInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"derekjxtan"},"content":"        database.addPatient(TypicalPatient.DANIEL);","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"derekjxtan"},"content":"        Patient editedDaniel \u003d new PatientBuilder(TypicalPatient.DANIEL).withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"derekjxtan"},"content":"                .withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"derekjxtan"},"content":"        database.setPatient(TypicalPatient.DANIEL, editedDaniel);","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(database.hasPatient(editedDaniel));","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"yanghengtang"},"content":"    public void hasAppointment_appointmentRemovedFromDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"yanghengtang"},"content":"        database.addAppointment(APPOINTMENT_1);","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"yanghengtang"},"content":"        database.removeAppointment(APPOINTMENT_1);","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(database.hasAppointment(APPOINTMENT_1));","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_doctorRemovedFromDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"yanghengtang"},"content":"        database.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"yanghengtang"},"content":"        database.removeDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":131,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(database.hasDoctor(ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":132,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":134,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_patientRemovedFromDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"derekjxtan"},"content":"        database.addPatient(TypicalPatient.CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":137,"author":{"gitId":"derekjxtan"},"content":"        database.removePatient(TypicalPatient.CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(database.hasPatient(TypicalPatient.CARL));","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":140,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"yanghengtang"},"content":"    public void getAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e database.getAppointmentList().remove(0));","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":145,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":146,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"yanghengtang"},"content":"    public void getDoctorList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":148,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e database.getDoctorList().remove(0));","lastModifiedDate":"2023-10-12"},{"lineNumber":149,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"yanghengtang"},"content":"    public void getPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e database.getPatientList().remove(0));","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"derekjxtan"},"content":"    public void hasDoctorWithNric_nullNric_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e database.hasDoctorWithNric(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":160,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":161,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"derekjxtan"},"content":"    public void hasDoctorWithNric_doctorNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":163,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(database.hasDoctorWithNric(new Nric(TypicalPatient.ALICE_NRIC)));","lastModifiedDate":"2023-10-12"},{"lineNumber":164,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":167,"author":{"gitId":"derekjxtan"},"content":"    public void hasDoctorWithNric_doctorInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":168,"author":{"gitId":"derekjxtan"},"content":"        database.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":169,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(database.hasDoctorWithNric(new Nric(TypicalPatient.ALICE_NRIC)));","lastModifiedDate":"2023-10-12"},{"lineNumber":170,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":171,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":172,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":173,"author":{"gitId":"derekjxtan"},"content":"    public void hasDoctorWithNric_doctorWithSameNricInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":174,"author":{"gitId":"derekjxtan"},"content":"        database.addDoctor(BENSON);","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"derekjxtan"},"content":"        Doctor editedBenson \u003d new DoctorBuilder(BENSON).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"derekjxtan"},"content":"        database.setDoctor(BENSON, editedBenson);","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(database.hasDoctorWithNric(new Nric(TypicalPatient.BENSON_NRIC)));","lastModifiedDate":"2023-10-12"},{"lineNumber":178,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":179,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":180,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":181,"author":{"gitId":"derekjxtan"},"content":"    public void hasDoctorWithNric_doctorRemovedFromDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":182,"author":{"gitId":"derekjxtan"},"content":"        database.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":183,"author":{"gitId":"derekjxtan"},"content":"        database.removeDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":184,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(database.hasDoctorWithNric(new Nric(TypicalPatient.ALICE_NRIC)));","lastModifiedDate":"2023-10-12"},{"lineNumber":185,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":186,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":187,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":188,"author":{"gitId":"derekjxtan"},"content":"    public void hasPatientWithNric_nullNric_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":189,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e database.hasPatientWithNric(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":190,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":191,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":192,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":193,"author":{"gitId":"derekjxtan"},"content":"    public void hasPatientWithNric_patientNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":194,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(database.hasPatientWithNric(new Nric(TypicalPatient.ALICE_NRIC)));","lastModifiedDate":"2023-10-12"},{"lineNumber":195,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":196,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":197,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":198,"author":{"gitId":"derekjxtan"},"content":"    public void hasPatientWithNric_patientInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":199,"author":{"gitId":"derekjxtan"},"content":"        database.addPatient(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":200,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(database.hasPatientWithNric(new Nric(TypicalPatient.ALICE_NRIC)));","lastModifiedDate":"2023-10-12"},{"lineNumber":201,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":202,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":203,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":204,"author":{"gitId":"derekjxtan"},"content":"    public void hasPatientWithNric_patientWithSameNricInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":205,"author":{"gitId":"derekjxtan"},"content":"        database.addPatient(TypicalPatient.BENSON);","lastModifiedDate":"2023-10-12"},{"lineNumber":206,"author":{"gitId":"derekjxtan"},"content":"        Patient editedBenson \u003d new PatientBuilder(TypicalPatient.BENSON).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":207,"author":{"gitId":"derekjxtan"},"content":"        database.setPatient(TypicalPatient.BENSON, editedBenson);","lastModifiedDate":"2023-10-12"},{"lineNumber":208,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(database.hasPatientWithNric(new Nric(TypicalPatient.BENSON_NRIC)));","lastModifiedDate":"2023-10-12"},{"lineNumber":209,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":210,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":211,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":212,"author":{"gitId":"derekjxtan"},"content":"    public void hasPatientWithNric_patientRemovedFromDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":213,"author":{"gitId":"derekjxtan"},"content":"        database.addPatient(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":214,"author":{"gitId":"derekjxtan"},"content":"        database.removePatient(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":215,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(database.hasPatientWithNric(new Nric(TypicalPatient.ALICE_NRIC)));","lastModifiedDate":"2023-10-12"},{"lineNumber":216,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":217,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":218,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":219,"author":{"gitId":"yanghengtang"},"content":"    public void equals() {","lastModifiedDate":"2023-10-12"},{"lineNumber":220,"author":{"gitId":"yanghengtang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-12"},{"lineNumber":221,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(database.equals(database));","lastModifiedDate":"2023-10-12"},{"lineNumber":222,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":223,"author":{"gitId":"yanghengtang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-12"},{"lineNumber":224,"author":{"gitId":"yanghengtang"},"content":"        Database newDatabase \u003d new Database(database);","lastModifiedDate":"2023-10-12"},{"lineNumber":225,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(database.equals(newDatabase));","lastModifiedDate":"2023-10-12"},{"lineNumber":226,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":227,"author":{"gitId":"yanghengtang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":228,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(database.equals(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":229,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":230,"author":{"gitId":"yanghengtang"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":231,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(database.equals(5.0));","lastModifiedDate":"2023-10-12"},{"lineNumber":232,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":233,"author":{"gitId":"yanghengtang"},"content":"        // different doctorList -\u003e return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":234,"author":{"gitId":"yanghengtang"},"content":"        List\u003cDoctor\u003e doctorList \u003d getTypicalDoctor();","lastModifiedDate":"2023-10-12"},{"lineNumber":235,"author":{"gitId":"yanghengtang"},"content":"        newDatabase \u003d new Database();","lastModifiedDate":"2023-10-12"},{"lineNumber":236,"author":{"gitId":"yanghengtang"},"content":"        newDatabase.setDoctors(doctorList);","lastModifiedDate":"2023-10-12"},{"lineNumber":237,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(database.equals(newDatabase));","lastModifiedDate":"2023-10-12"},{"lineNumber":238,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":239,"author":{"gitId":"yanghengtang"},"content":"        // different patientList -\u003e return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":240,"author":{"gitId":"yanghengtang"},"content":"        List\u003cPatient\u003e patientList \u003d getTypicalPatient();","lastModifiedDate":"2023-10-12"},{"lineNumber":241,"author":{"gitId":"yanghengtang"},"content":"        newDatabase \u003d new Database();","lastModifiedDate":"2023-10-12"},{"lineNumber":242,"author":{"gitId":"yanghengtang"},"content":"        newDatabase.setPatients(patientList);","lastModifiedDate":"2023-10-12"},{"lineNumber":243,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(database.equals(newDatabase));","lastModifiedDate":"2023-10-12"},{"lineNumber":244,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":245,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":246,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":247,"author":{"gitId":"yanghengtang"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-12"},{"lineNumber":248,"author":{"gitId":"yanghengtang"},"content":"        String expected \u003d Database.class.getCanonicalName() + \"{appointments\u003d\" + database.getAppointmentList()","lastModifiedDate":"2023-10-12"},{"lineNumber":249,"author":{"gitId":"yanghengtang"},"content":"                + \", doctors\u003d\" + database.getDoctorList()","lastModifiedDate":"2023-10-12"},{"lineNumber":250,"author":{"gitId":"yanghengtang"},"content":"                + \", patients\u003d\" + database.getPatientList() + \"}\";","lastModifiedDate":"2023-10-12"},{"lineNumber":251,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(expected, database.toString());","lastModifiedDate":"2023-10-12"},{"lineNumber":252,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":253,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":254,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":255,"author":{"gitId":"yanghengtang"},"content":"     * A stub ReadOnlyDatabase whose persons list can violate interface constraints.","lastModifiedDate":"2023-10-12"},{"lineNumber":256,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":257,"author":{"gitId":"yanghengtang"},"content":"    private static class DatabaseStub implements ReadOnlyDatabase {","lastModifiedDate":"2023-10-12"},{"lineNumber":258,"author":{"gitId":"yanghengtang"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-12"},{"lineNumber":259,"author":{"gitId":"yanghengtang"},"content":"        private final ObservableList\u003cDoctor\u003e doctors \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-12"},{"lineNumber":260,"author":{"gitId":"yanghengtang"},"content":"        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-10-12"},{"lineNumber":261,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":262,"author":{"gitId":"yanghengtang"},"content":"        DatabaseStub(Collection\u003cAppointment\u003e appointments, Collection\u003cDoctor\u003e doctors, Collection\u003cPatient\u003e patients) {","lastModifiedDate":"2023-10-12"},{"lineNumber":263,"author":{"gitId":"yanghengtang"},"content":"            this.appointments.setAll(appointments);","lastModifiedDate":"2023-10-12"},{"lineNumber":264,"author":{"gitId":"yanghengtang"},"content":"            this.doctors.setAll(doctors);","lastModifiedDate":"2023-10-12"},{"lineNumber":265,"author":{"gitId":"yanghengtang"},"content":"            this.patients.setAll(patients);","lastModifiedDate":"2023-10-12"},{"lineNumber":266,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":267,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":268,"author":{"gitId":"yanghengtang"},"content":"        @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":269,"author":{"gitId":"yanghengtang"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":270,"author":{"gitId":"yanghengtang"},"content":"            return appointments;","lastModifiedDate":"2023-10-12"},{"lineNumber":271,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":272,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":273,"author":{"gitId":"yanghengtang"},"content":"        @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":274,"author":{"gitId":"yanghengtang"},"content":"        public ObservableList\u003cDoctor\u003e getDoctorList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":275,"author":{"gitId":"yanghengtang"},"content":"            return doctors;","lastModifiedDate":"2023-10-12"},{"lineNumber":276,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":277,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":278,"author":{"gitId":"yanghengtang"},"content":"        @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":279,"author":{"gitId":"yanghengtang"},"content":"        public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2023-10-12"},{"lineNumber":280,"author":{"gitId":"yanghengtang"},"content":"            return patients;","lastModifiedDate":"2023-10-12"},{"lineNumber":281,"author":{"gitId":"yanghengtang"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":282,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":283,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"yanghengtang":208,"derekjxtan":75}},{"path":"src/test/java/seedu/address/model/NewModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalAppointment.APPOINTMENT_1;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalDoctor.ALICE;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalPatient.CARL;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalPatient.CARL_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.exceptions.ItemNotFoundException;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.testutil.DoctorBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"public class NewModelManagerTest {","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"    private NewModelManager modelManager \u003d new NewModelManager();","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"    public void constructor() {","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(new Database(), new Database(modelManager.getDatabase()));","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setDatabaseFilePath(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2023-10-12"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"        modelManager.setDatabaseFilePath(path);","lastModifiedDate":"2023-10-12"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(path, modelManager.getDatabaseFilePath());","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"    public void hasAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAppointment(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_nullDoctor_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasDoctor(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":90,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":92,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":94,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":95,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":96,"author":{"gitId":"yanghengtang"},"content":"    public void hasAppointment_appointmentNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":97,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.hasAppointment(APPOINTMENT_1));","lastModifiedDate":"2023-10-12"},{"lineNumber":98,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":99,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":100,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":101,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_doctorNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":102,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.hasDoctor(ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":103,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":104,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":105,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_patientNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":107,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.hasPatient(CARL));","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctorWithNric_doctorNricNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"yanghengtang"},"content":"        Nric doctorNric \u003d new Nric(ALICE_NRIC);","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.hasDoctorWithNric(doctorNric));","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatientWithNric_patientNricNotInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"yanghengtang"},"content":"        Nric patientNric \u003d new Nric(CARL_NRIC);","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.hasPatientWithNric(patientNric));","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctorWithNric_doctorNricInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"yanghengtang"},"content":"        Nric doctorNric \u003d new Nric(ALICE_NRIC);","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(modelManager.hasDoctorWithNric(doctorNric));","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatientWithNric_patientNricInDatabase_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":131,"author":{"gitId":"yanghengtang"},"content":"        Nric patientNric \u003d new Nric(CARL_NRIC);","lastModifiedDate":"2023-10-12"},{"lineNumber":132,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addPatient(CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(modelManager.hasPatientWithNric(patientNric));","lastModifiedDate":"2023-10-12"},{"lineNumber":134,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":135,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":137,"author":{"gitId":"yanghengtang"},"content":"    public void hasAppointment_appointmentInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addAppointment(APPOINTMENT_1);","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(modelManager.hasAppointment(APPOINTMENT_1));","lastModifiedDate":"2023-10-12"},{"lineNumber":140,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":143,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_doctorInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":145,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(modelManager.hasDoctor(ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":146,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":148,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":149,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_patientInDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addPatient(CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(modelManager.hasPatient(CARL));","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":153,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"yanghengtang"},"content":"    public void hasAppointment_appointmentRemovedFromDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addAppointment(APPOINTMENT_1);","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"yanghengtang"},"content":"        modelManager.deleteAppointment(APPOINTMENT_1);","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.hasAppointment(APPOINTMENT_1));","lastModifiedDate":"2023-10-12"},{"lineNumber":159,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":160,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":161,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_doctorRemovedFromDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":163,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":164,"author":{"gitId":"yanghengtang"},"content":"        modelManager.deleteDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":165,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.hasDoctor(ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":166,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":167,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":168,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":169,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_patientRemovedFromDatabase_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":170,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addPatient(CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":171,"author":{"gitId":"yanghengtang"},"content":"        modelManager.deletePatient(CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":172,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.hasPatient(CARL));","lastModifiedDate":"2023-10-12"},{"lineNumber":173,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":174,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":175,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":176,"author":{"gitId":"yanghengtang"},"content":"    public void hasDoctor_doctorWithDifferentName_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":177,"author":{"gitId":"yanghengtang"},"content":"        Doctor editedAlice \u003d new DoctorBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":178,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":179,"author":{"gitId":"yanghengtang"},"content":"        modelManager.setDoctor(ALICE, editedAlice);","lastModifiedDate":"2023-10-12"},{"lineNumber":180,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(modelManager.hasDoctor(ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":181,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":182,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":183,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":184,"author":{"gitId":"yanghengtang"},"content":"    public void hasPatient_patientWithDifferentName_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":185,"author":{"gitId":"yanghengtang"},"content":"        Patient editedCarl \u003d new PatientBuilder(CARL).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":186,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addPatient(CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":187,"author":{"gitId":"yanghengtang"},"content":"        modelManager.setPatient(CARL, editedCarl);","lastModifiedDate":"2023-10-12"},{"lineNumber":188,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(modelManager.hasPatient(CARL));","lastModifiedDate":"2023-10-12"},{"lineNumber":189,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":190,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":191,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":192,"author":{"gitId":"yanghengtang"},"content":"    public void deleteAppointment_appointmentNotInDatabase_throwsItemNotFoundException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":193,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(ItemNotFoundException.class, () -\u003e modelManager.deleteAppointment(APPOINTMENT_1));","lastModifiedDate":"2023-10-12"},{"lineNumber":194,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":195,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":196,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":197,"author":{"gitId":"yanghengtang"},"content":"    public void deleteDoctor_doctorNotInDatabase_throwsItemNotFoundException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":198,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(ItemNotFoundException.class, () -\u003e modelManager.deleteDoctor(ALICE));","lastModifiedDate":"2023-10-12"},{"lineNumber":199,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":200,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":201,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":202,"author":{"gitId":"yanghengtang"},"content":"    public void deletePatient_patientNotInDatabase_throwsItemNotFoundException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":203,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(ItemNotFoundException.class, () -\u003e modelManager.deletePatient(CARL));","lastModifiedDate":"2023-10-12"},{"lineNumber":204,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":205,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":206,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":207,"author":{"gitId":"yanghengtang"},"content":"    public void setAppointment_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":208,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addAppointment(APPOINTMENT_1);","lastModifiedDate":"2023-10-12"},{"lineNumber":209,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAppointment(APPOINTMENT_1, null));","lastModifiedDate":"2023-10-12"},{"lineNumber":210,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":211,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":212,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":213,"author":{"gitId":"yanghengtang"},"content":"    public void setDoctor_nullDoctor_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":214,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":215,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setDoctor(ALICE, null));","lastModifiedDate":"2023-10-12"},{"lineNumber":216,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":217,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":218,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":219,"author":{"gitId":"yanghengtang"},"content":"    public void setPatient_nullPatient_throwsNullPointerException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":220,"author":{"gitId":"yanghengtang"},"content":"        modelManager.addPatient(CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":221,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setPatient(CARL, null));","lastModifiedDate":"2023-10-12"},{"lineNumber":222,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":223,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":224,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":225,"author":{"gitId":"yanghengtang"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":226,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAppointmentList()","lastModifiedDate":"2023-10-12"},{"lineNumber":227,"author":{"gitId":"yanghengtang"},"content":"                .remove(0));","lastModifiedDate":"2023-10-12"},{"lineNumber":228,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":229,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":230,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":231,"author":{"gitId":"yanghengtang"},"content":"    public void getFilteredDoctorList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":232,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDoctorList()","lastModifiedDate":"2023-10-12"},{"lineNumber":233,"author":{"gitId":"yanghengtang"},"content":"                .remove(0));","lastModifiedDate":"2023-10-12"},{"lineNumber":234,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":235,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":236,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":237,"author":{"gitId":"yanghengtang"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-12"},{"lineNumber":238,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList()","lastModifiedDate":"2023-10-12"},{"lineNumber":239,"author":{"gitId":"yanghengtang"},"content":"                .remove(0));","lastModifiedDate":"2023-10-12"},{"lineNumber":240,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":241,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":242,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":243,"author":{"gitId":"yanghengtang"},"content":"    public void equals() {","lastModifiedDate":"2023-10-12"},{"lineNumber":244,"author":{"gitId":"yanghengtang"},"content":"        Database database \u003d new Database();","lastModifiedDate":"2023-10-12"},{"lineNumber":245,"author":{"gitId":"yanghengtang"},"content":"        Database differentDatabase \u003d new Database();","lastModifiedDate":"2023-10-12"},{"lineNumber":246,"author":{"gitId":"yanghengtang"},"content":"        differentDatabase.addDoctor(ALICE);","lastModifiedDate":"2023-10-12"},{"lineNumber":247,"author":{"gitId":"yanghengtang"},"content":"        differentDatabase.addPatient(CARL);","lastModifiedDate":"2023-10-12"},{"lineNumber":248,"author":{"gitId":"yanghengtang"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2023-10-12"},{"lineNumber":249,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":250,"author":{"gitId":"yanghengtang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-12"},{"lineNumber":251,"author":{"gitId":"yanghengtang"},"content":"        modelManager \u003d new NewModelManager(database, userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":252,"author":{"gitId":"yanghengtang"},"content":"        NewModelManager modelManagerCopy \u003d new NewModelManager(database, userPrefs);","lastModifiedDate":"2023-10-12"},{"lineNumber":253,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2023-10-12"},{"lineNumber":254,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":255,"author":{"gitId":"yanghengtang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-12"},{"lineNumber":256,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2023-10-12"},{"lineNumber":257,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":258,"author":{"gitId":"yanghengtang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":259,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":260,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":261,"author":{"gitId":"yanghengtang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":262,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2023-10-12"},{"lineNumber":263,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":264,"author":{"gitId":"yanghengtang"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":265,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(modelManager.equals(new NewModelManager(differentDatabase, userPrefs)));","lastModifiedDate":"2023-10-12"},{"lineNumber":266,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":267,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"yanghengtang":267}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentEndTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"public class AppointmentEndTimeTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentEndTime(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    public void constructor_invalidAppointmentTime_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new AppointmentEndTime(invalidName));","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    public void isValidAppointmentEndTime() {","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"        // null name","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppointmentEndTime.isValidAppointmmentTime(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        // invalid name","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(AppointmentEndTime.isValidAppointmmentTime(\"\")); // empty string","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(AppointmentEndTime.isValidAppointmmentTime(\" \")); // spaces only","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(AppointmentEndTime.isValidAppointmmentTime(\"^*$\")); // not numeric characters","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(AppointmentEndTime.isValidAppointmmentTime(\"12-01-2023 07:30\")); // date in wrong format","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"        // valid name","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(AppointmentEndTime.isValidAppointmmentTime(\"2023-09-11 08:00\")); // in yyyy-dd-mm HH:mm format","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(AppointmentEndTime.isValidAppointmmentTime(\"2023-09-11 16:00\")); // in yyyy-dd-mm HH:mm 24h format","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        AppointmentEndTime appointmentEndTime \u003d new AppointmentEndTime(\"2023-09-11 16:00\");","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(appointmentEndTime.equals(new AppointmentEndTime(\"2023-09-11 16:00\")));","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(appointmentEndTime.equals(appointmentEndTime));","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(appointmentEndTime.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(appointmentEndTime.equals(5.0f));","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(appointmentEndTime.equals(new AppointmentEndTime(\"2023-09-11 04:00\")));","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":58}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentStartTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"public class AppointmentStartTimeTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AppointmentStartTime(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new AppointmentStartTime(invalidName));","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    public void isValidAppointmentStartTime() {","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"        // null name","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppointmentStartTime.isValidAppointmmentTime(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        // invalid name","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(AppointmentStartTime.isValidAppointmmentTime(\"\")); // empty string","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(AppointmentStartTime.isValidAppointmmentTime(\" \")); // spaces only","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(AppointmentStartTime.isValidAppointmmentTime(\"^*$\")); // not numeric characters","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(AppointmentStartTime.isValidAppointmmentTime(\"12-01-2023 07:30\")); // date in wrong format","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"        // valid name","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(AppointmentStartTime.isValidAppointmmentTime(\"2023-09-11 08:00\")); // in yyyy-dd-mm HH:mm format","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(AppointmentStartTime.isValidAppointmmentTime(\"2023-09-11 16:00\")); // in yyyy-dd-mm HH:mm 24h format","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        AppointmentStartTime appointmentStartTime \u003d new AppointmentStartTime(\"2023-09-11 16:00\");","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(appointmentStartTime.equals(new AppointmentStartTime(\"2023-09-11 16:00\")));","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"        assertTrue(appointmentStartTime.equals(appointmentStartTime));","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(appointmentStartTime.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(appointmentStartTime.equals(5.0f));","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(appointmentStartTime.equals(new AppointmentStartTime(\"2023-09-11 04:00\")));","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"mounilsankar":58}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-10"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-10"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-10"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-10-10"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-10"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalAppointment.APPOINTMENT_1;","lastModifiedDate":"2023-10-10"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalAppointment.APPOINTMENT_2;","lastModifiedDate":"2023-10-10"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-10"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"public class AppointmentTest {","lastModifiedDate":"2023-10-10"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"    public void isSame() {","lastModifiedDate":"2023-10-10"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-10"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(APPOINTMENT_1.isSame(APPOINTMENT_1));","lastModifiedDate":"2023-10-10"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.isSame(null));","lastModifiedDate":"2023-10-10"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"        // different Doctor NRIC -\u003e returns false","lastModifiedDate":"2023-10-10"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.isSame(new AppointmentBuilder(APPOINTMENT_1)","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"                .withDoctorNric(VALID_NRIC_AMY).build()));","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"        // different Patient NRIC -\u003e returns false","lastModifiedDate":"2023-10-10"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.isSame(new AppointmentBuilder(APPOINTMENT_1)","lastModifiedDate":"2023-10-10"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"                .withPatientNric(VALID_NRIC_BOB).build()));","lastModifiedDate":"2023-10-10"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"        // different Date Time -\u003e returns false","lastModifiedDate":"2023-10-10"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.isSame(new AppointmentBuilder(APPOINTMENT_1)","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"                .withStartTime(\"2023-12-01 10:30\").build()));","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"    public void equals() {","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-10"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"        Appointment appointmentCopy \u003d new AppointmentBuilder(APPOINTMENT_1).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(APPOINTMENT_1.equals(appointmentCopy));","lastModifiedDate":"2023-10-10"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(APPOINTMENT_1.equals(APPOINTMENT_1));","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.equals(null));","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.equals(5.0));","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.equals(APPOINTMENT_2));","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"        // different Doctor NRIC -\u003e returns false","lastModifiedDate":"2023-10-10"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"        Appointment editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_1).withDoctorNric(VALID_NRIC_AMY).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.equals(editedAppointment));","lastModifiedDate":"2023-10-10"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"        // different Patient NRIC -\u003e returns false","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"        editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_1).withPatientNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.equals(editedAppointment));","lastModifiedDate":"2023-10-10"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"        // different startTime -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"        editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_1).withStartTime(\"2023-12-01 12:00\").build();","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(APPOINTMENT_1.equals(editedAppointment));","lastModifiedDate":"2023-10-10"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"        // different endTime -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"        editedAppointment \u003d new AppointmentBuilder(APPOINTMENT_1).withEndTime(\"2023-12-01 12:00\").build();","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"        assertFalse(APPOINTMENT_1.equals(editedAppointment));","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-10"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-10"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"        String expected \u003d Appointment.class.getCanonicalName() + \"{doctorNric\u003d\" + APPOINTMENT_1.getDoctorNric()","lastModifiedDate":"2023-10-10"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"                + \", patientNric\u003d\" + APPOINTMENT_1.getPatientNric()","lastModifiedDate":"2023-10-10"},{"lineNumber":78,"author":{"gitId":"mounilsankar"},"content":"                + \", startTime\u003d\" + APPOINTMENT_1.getStartTime()","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"mounilsankar"},"content":"                + \", endTime\u003d\" + APPOINTMENT_1.getEndTime()","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"mounilsankar"},"content":"                + \"}\";","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(expected, APPOINTMENT_1.toString());","lastModifiedDate":"2023-10-10"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-10"}],"authorContributionMap":{"yanghengtang":72,"mounilsankar":11}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsDoctorPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"kimshitong"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"kimshitong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"kimshitong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"kimshitong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"kimshitong"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"kimshitong"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"kimshitong"},"content":"import java.util.List;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"kimshitong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"kimshitong"},"content":"import seedu.address.testutil.DoctorBuilder;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"kimshitong"},"content":"public class NameContainsKeywordsDoctorPredicateTest {","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"kimshitong"},"content":"    public void equals() {","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"kimshitong"},"content":"        List\u003cString\u003e firstPredicateDoctorKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"kimshitong"},"content":"        List\u003cString\u003e secondPredicateDoctorKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"kimshitong"},"content":"        NameContainsKeywordsDoctorPredicate firstPredicate \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"kimshitong"},"content":"                new NameContainsKeywordsDoctorPredicate(firstPredicateDoctorKeywordList);","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"kimshitong"},"content":"        NameContainsKeywordsDoctorPredicate secondPredicate \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"kimshitong"},"content":"                new NameContainsKeywordsDoctorPredicate(secondPredicateDoctorKeywordList);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"kimshitong"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"kimshitong"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"kimshitong"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"kimshitong"},"content":"        NameContainsKeywordsDoctorPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"kimshitong"},"content":"                new NameContainsKeywordsDoctorPredicate(firstPredicateDoctorKeywordList);","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"kimshitong"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"kimshitong"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"kimshitong"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"kimshitong"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"kimshitong"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"kimshitong"},"content":"        // different doctor -\u003e returns false","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"kimshitong"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"kimshitong"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"kimshitong"},"content":"        // One keyword","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"kimshitong"},"content":"        NameContainsKeywordsDoctorPredicate predicate \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"kimshitong"},"content":"                new NameContainsKeywordsDoctorPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"kimshitong"},"content":"        assertTrue(predicate.test(new DoctorBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"kimshitong"},"content":"        // Multiple keywords","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"kimshitong"},"content":"        predicate \u003d new NameContainsKeywordsDoctorPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"kimshitong"},"content":"        assertTrue(predicate.test(new DoctorBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"kimshitong"},"content":"        // Only one matching keyword","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"kimshitong"},"content":"        predicate \u003d new NameContainsKeywordsDoctorPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"kimshitong"},"content":"        assertTrue(predicate.test(new DoctorBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"kimshitong"},"content":"        // Mixed-case keywords","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"kimshitong"},"content":"        predicate \u003d new NameContainsKeywordsDoctorPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"kimshitong"},"content":"        assertTrue(predicate.test(new DoctorBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"kimshitong"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"kimshitong"},"content":"        // Zero keywords","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"kimshitong"},"content":"        NameContainsKeywordsDoctorPredicate predicate \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"kimshitong"},"content":"                new NameContainsKeywordsDoctorPredicate(Collections.emptyList());","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"kimshitong"},"content":"        assertFalse(predicate.test(new DoctorBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"kimshitong"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"kimshitong"},"content":"        predicate \u003d new NameContainsKeywordsDoctorPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":74,"author":{"gitId":"kimshitong"},"content":"        assertFalse(predicate.test(new DoctorBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-12"},{"lineNumber":75,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"kimshitong"},"content":"        // Keywords match nric, but does not match name","lastModifiedDate":"2023-10-12"},{"lineNumber":77,"author":{"gitId":"kimshitong"},"content":"        predicate \u003d new NameContainsKeywordsDoctorPredicate(Arrays.asList(\"G4123573C\"));","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"kimshitong"},"content":"        assertFalse(predicate.test(new DoctorBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"kimshitong"},"content":"    @Test","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"kimshitong"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-12"},{"lineNumber":83,"author":{"gitId":"kimshitong"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"kimshitong"},"content":"        NameContainsKeywordsDoctorPredicate predicate \u003d new NameContainsKeywordsDoctorPredicate(keywords);","lastModifiedDate":"2023-10-12"},{"lineNumber":85,"author":{"gitId":"kimshitong"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":86,"author":{"gitId":"kimshitong"},"content":"        String expected \u003d NameContainsKeywordsDoctorPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2023-10-12"},{"lineNumber":87,"author":{"gitId":"kimshitong"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"kimshitong"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":89,"author":{"gitId":"kimshitong"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"kimshitong":89}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPatientPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"cheeggered"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"cheeggered"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"cheeggered"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"cheeggered"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"cheeggered"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"cheeggered"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"cheeggered"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"cheeggered"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"cheeggered"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"cheeggered"},"content":"public class NameContainsKeywordsPatientPredicateTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"cheeggered"},"content":"    public void equals() {","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"cheeggered"},"content":"        List\u003cString\u003e firstPredicatePatientKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"cheeggered"},"content":"        List\u003cString\u003e secondPredicatePatientKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"cheeggered"},"content":"        NameContainsKeywordsPatientPredicate firstPredicate \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"cheeggered"},"content":"                new NameContainsKeywordsPatientPredicate(firstPredicatePatientKeywordList);","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"cheeggered"},"content":"        NameContainsKeywordsPatientPredicate secondPredicate \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"cheeggered"},"content":"                new NameContainsKeywordsPatientPredicate(secondPredicatePatientKeywordList);","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"cheeggered"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"cheeggered"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"cheeggered"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"cheeggered"},"content":"        NameContainsKeywordsPatientPredicate firstPredicateCopy \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"cheeggered"},"content":"                new NameContainsKeywordsPatientPredicate(firstPredicatePatientKeywordList);","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"cheeggered"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"cheeggered"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"cheeggered"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"cheeggered"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"cheeggered"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"cheeggered"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"cheeggered"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"cheeggered"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"cheeggered"},"content":"        // One keyword","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"cheeggered"},"content":"        NameContainsKeywordsPatientPredicate predicate \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"cheeggered"},"content":"                new NameContainsKeywordsPatientPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"cheeggered"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"cheeggered"},"content":"        // Multiple keywords","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"cheeggered"},"content":"        predicate \u003d new NameContainsKeywordsPatientPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"cheeggered"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"cheeggered"},"content":"        // Only one matching keyword","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"cheeggered"},"content":"        predicate \u003d new NameContainsKeywordsPatientPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"cheeggered"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"cheeggered"},"content":"        // Mixed-case keywords","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"cheeggered"},"content":"        predicate \u003d new NameContainsKeywordsPatientPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"cheeggered"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"cheeggered"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"cheeggered"},"content":"        // Zero keywords","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"cheeggered"},"content":"        NameContainsKeywordsPatientPredicate predicate \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"cheeggered"},"content":"                new NameContainsKeywordsPatientPredicate(Collections.emptyList());","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"cheeggered"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"cheeggered"},"content":"        // Non-matching keyword","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"cheeggered"},"content":"        predicate \u003d new NameContainsKeywordsPatientPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"cheeggered"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"cheeggered"},"content":"        // Keywords match phone, but does not match name","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"cheeggered"},"content":"        predicate \u003d new NameContainsKeywordsPatientPredicate(Arrays.asList(\"12345\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"cheeggered"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withPhone(\"12345\").build()));","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"cheeggered"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"cheeggered"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"cheeggered"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"cheeggered"},"content":"        NameContainsKeywordsPatientPredicate predicate \u003d new NameContainsKeywordsPatientPredicate(keywords);","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"cheeggered"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"cheeggered"},"content":"        String expected \u003d NameContainsKeywordsPatientPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"cheeggered"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"cheeggered"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"cheeggered"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"cheeggered":89}},{"path":"src/test/java/seedu/address/model/person/NricTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-06"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-06"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-06"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-06"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-06"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"public class NricTest {","lastModifiedDate":"2023-10-06"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Nric(null));","lastModifiedDate":"2023-10-06"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2023-10-06"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"        String invalidNric \u003d \"\";","lastModifiedDate":"2023-10-06"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));","lastModifiedDate":"2023-10-06"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"    public void isValidNric() {","lastModifiedDate":"2023-10-06"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"        // null NRIC","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"        assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));","lastModifiedDate":"2023-10-06"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"        // invalid NRIC","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(Nric.isValidNric(\"\")); // empty string","lastModifiedDate":"2023-10-06"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(Nric.isValidNric(\"S012345 A\")); // contains space","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(Nric.isValidNric(\"S012^456A\")); // contains non-alphanumeric characters","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(Nric.isValidNric(\"S01222456A\")); // too many characters","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(Nric.isValidNric(\"S01456A\")); // too few characters","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(Nric.isValidNric(\"A0123456A\")); // invalid starting character","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(Nric.isValidNric(\"s0123456A\")); // lowercase starting character","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(Nric.isValidNric(\"S0123456a\")); // lowercase end character","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"        // valid NRIC","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(Nric.isValidNric(\"S0123456A\")); // starting with S","lastModifiedDate":"2023-10-06"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(Nric.isValidNric(\"T2414628F\")); // starting with T","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(Nric.isValidNric(\"G1238858J\")); // starting with G","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(Nric.isValidNric(\"F7423926D\")); // starting with F","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(Nric.isValidNric(\"M4812734E\")); // starting with M","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-06"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"    public void equals() {","lastModifiedDate":"2023-10-06"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"        Nric nric \u003d new Nric(\"S0123456A\");","lastModifiedDate":"2023-10-06"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-06"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(nric.equals(new Nric(\"S0123456A\")));","lastModifiedDate":"2023-10-06"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-06"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(nric.equals(nric));","lastModifiedDate":"2023-10-06"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-06"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(nric.equals(null));","lastModifiedDate":"2023-10-06"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-06"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(nric.equals(5.0f));","lastModifiedDate":"2023-10-06"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-06"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-10-06"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(nric.equals(new Nric(\"T0987654Z\")));","lastModifiedDate":"2023-10-06"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-06"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-06"}],"authorContributionMap":{"yanghengtang":63}},{"path":"src/test/java/seedu/address/model/person/doctor/DoctorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model.person.doctor;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalDoctor.ALICE;","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalDoctor.BOB;","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.testutil.DoctorBuilder;","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"public class DoctorTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"    public void isSameDoctor() {","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(ALICE.isSame(ALICE));","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.isSame(null));","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"        // same NRIC, all other attributes different -\u003e returns true","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"        Doctor editedAlice \u003d new DoctorBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-08"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(ALICE.isSame(editedAlice));","lastModifiedDate":"2023-10-08"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"        // different NRIC, all other attributes same -\u003e returns false","lastModifiedDate":"2023-10-08"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"        editedAlice \u003d new DoctorBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-10-08"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.isSame(editedAlice));","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"    public void equals() {","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"        Doctor aliceCopy \u003d new DoctorBuilder(ALICE).build();","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2023-10-08"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-08"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2023-10-08"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-08"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2023-10-08"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-08"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2023-10-08"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2023-10-08"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        Doctor editedAlice \u003d new DoctorBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-08"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-08"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2023-10-08"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"        editedAlice \u003d new DoctorBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-08"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-08"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"        // different NRIC -\u003e returns false","lastModifiedDate":"2023-10-08"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"        editedAlice \u003d new DoctorBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-08"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-08"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"        String expected \u003d Doctor.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", nric\u003d\"","lastModifiedDate":"2023-10-08"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"                + ALICE.getNric() + \"}\";","lastModifiedDate":"2023-10-08"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2023-10-08"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"yanghengtang":69}},{"path":"src/test/java/seedu/address/model/person/patient/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.model.person.patient;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE;","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.testutil.TypicalPatient.BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"public class PatientTest {","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"    public void isSamePatient() {","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(ALICE.isSame(ALICE));","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(ALICE.isSame(null));","lastModifiedDate":"2023-10-08"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"        // same NRIC, all other attributes different -\u003e returns true","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(ALICE.isSame(editedAlice));","lastModifiedDate":"2023-10-08"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"        // different NRIC, all other attributes same -\u003e returns false","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(ALICE.isSame(editedAlice));","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"    public void equals() {","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"        Patient aliceCopy \u003d new PatientBuilder(ALICE).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"        // different NRIC -\u003e returns false","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"        editedAlice \u003d new PatientBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-07"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":69,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":70,"author":{"gitId":"yanghengtang"},"content":"    @Test","lastModifiedDate":"2023-10-07"},{"lineNumber":71,"author":{"gitId":"yanghengtang"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-07"},{"lineNumber":72,"author":{"gitId":"yanghengtang"},"content":"        String expected \u003d Patient.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName() + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2023-10-07"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"                + \", nric\u003d\" + ALICE.getNric() + \"}\";","lastModifiedDate":"2023-10-07"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"yanghengtang":72,"derekjxtan":4}},{"path":"src/test/java/seedu/address/model/person/patient/UniqueItemListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.model.person.patient;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE;","lastModifiedDate":"2023-10-10"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE_NAME;","lastModifiedDate":"2023-10-10"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE_NRIC;","lastModifiedDate":"2023-10-10"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE_PHONE;","lastModifiedDate":"2023-10-10"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.BENSON;","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.BENSON_NAME;","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.BENSON_NRIC;","lastModifiedDate":"2023-10-10"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.BENSON_PHONE;","lastModifiedDate":"2023-10-10"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.BOB;","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"import java.util.Collections;","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"import java.util.List;","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"import java.util.function.Function;","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-08"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.exceptions.DuplicateItemException;","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.exceptions.ItemNotFoundException;","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.testutil.PatientBuilder;","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.testutil.TypicalPatient;","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"public class UniqueItemListTest {","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"    private final UniqueItemList\u003cPatient\u003e uniquePatientList \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"    public void contains_nullItem_throwsNullPointerException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains((Patient) null));","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains((Function\u003cPatient, Boolean\u003e) null));","lastModifiedDate":"2023-10-10"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"    public void contains_itemNotInList_returnsFalse() {","lastModifiedDate":"2023-10-08"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(uniquePatientList.contains(ALICE));","lastModifiedDate":"2023-10-08"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(uniquePatientList.contains(patient -\u003e patient.getNric().equals(new Nric(ALICE_NRIC))));","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(uniquePatientList.contains(patient -\u003e patient.getName().equals(new Name(ALICE_NAME))));","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(uniquePatientList.contains(patient -\u003e patient.getPhone().equals(new Phone(ALICE_PHONE))));","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(ALICE);","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(uniquePatientList.contains(BENSON));","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(uniquePatientList.contains(patient -\u003e patient.getNric().equals(new Nric(BENSON_NRIC))));","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(uniquePatientList.contains(patient -\u003e patient.getName().equals(new Name(BENSON_NAME))));","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(uniquePatientList.contains(patient -\u003e patient.getPhone().equals(new Phone(BENSON_PHONE))));","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(uniquePatientList.contains(patient -\u003e patient.getName().equals(new Nric(ALICE_NRIC))));","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"    public void contains_itemInList_returnsTrue() {","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(uniquePatientList.contains(TypicalPatient.ALICE));","lastModifiedDate":"2023-10-08"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(uniquePatientList.contains(patient -\u003e patient.getNric().equals(new Nric(ALICE_NRIC))));","lastModifiedDate":"2023-10-10"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(uniquePatientList.contains(patient -\u003e patient.getName().equals(new Name(ALICE_NAME))));","lastModifiedDate":"2023-10-10"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(uniquePatientList.contains(patient -\u003e patient.getPhone().equals(new Phone(ALICE_PHONE))));","lastModifiedDate":"2023-10-10"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"    public void contains_itemWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2023-10-08"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"        Patient editedAlice \u003d new PatientBuilder(TypicalPatient.ALICE).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-08"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"                .withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-08"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"                .build();","lastModifiedDate":"2023-10-08"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"        assertTrue(uniquePatientList.contains(editedAlice));","lastModifiedDate":"2023-10-08"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":77,"author":{"gitId":"derekjxtan"},"content":"    public void add_nullItem_throwsNullPointerException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":78,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));","lastModifiedDate":"2023-10-08"},{"lineNumber":79,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":80,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":81,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":82,"author":{"gitId":"derekjxtan"},"content":"    public void add_duplicateItem_throwsDuplicateItemException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":83,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":84,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e uniquePatientList.add(TypicalPatient.ALICE));","lastModifiedDate":"2023-10-08"},{"lineNumber":85,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":86,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":87,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":88,"author":{"gitId":"derekjxtan"},"content":"    public void setItem_nullTargetItem_throwsNullPointerException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":89,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setItem(null, TypicalPatient.ALICE));","lastModifiedDate":"2023-10-08"},{"lineNumber":90,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":91,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":92,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":93,"author":{"gitId":"derekjxtan"},"content":"    public void setItem_nullEditedItem_throwsNullPointerException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":94,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setItem(TypicalPatient.ALICE, null));","lastModifiedDate":"2023-10-08"},{"lineNumber":95,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":96,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":97,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":98,"author":{"gitId":"derekjxtan"},"content":"    public void setItem_targetItemNotInList_throwsItemNotFoundException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":99,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(ItemNotFoundException.class, () -\u003e uniquePatientList.setItem(","lastModifiedDate":"2023-10-08"},{"lineNumber":100,"author":{"gitId":"derekjxtan"},"content":"                TypicalPatient.ALICE, TypicalPatient.ALICE));","lastModifiedDate":"2023-10-08"},{"lineNumber":101,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":102,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":103,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":104,"author":{"gitId":"derekjxtan"},"content":"    public void setItem_editedItemIsSameItem_success() {","lastModifiedDate":"2023-10-08"},{"lineNumber":105,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":106,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.setItem(TypicalPatient.ALICE, TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":107,"author":{"gitId":"derekjxtan"},"content":"        UniqueItemList\u003cPatient\u003e expectedUniqueItemList \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-08"},{"lineNumber":108,"author":{"gitId":"derekjxtan"},"content":"        expectedUniqueItemList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":109,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(expectedUniqueItemList, uniquePatientList);","lastModifiedDate":"2023-10-08"},{"lineNumber":110,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":111,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":112,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":113,"author":{"gitId":"derekjxtan"},"content":"    public void setItem_editedItemHasSameIdentity_success() {","lastModifiedDate":"2023-10-08"},{"lineNumber":114,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":115,"author":{"gitId":"derekjxtan"},"content":"        Patient editedAlice \u003d new PatientBuilder(TypicalPatient.ALICE).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-08"},{"lineNumber":116,"author":{"gitId":"derekjxtan"},"content":"                .withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-08"},{"lineNumber":117,"author":{"gitId":"derekjxtan"},"content":"                .build();","lastModifiedDate":"2023-10-08"},{"lineNumber":118,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.setItem(TypicalPatient.ALICE, editedAlice);","lastModifiedDate":"2023-10-08"},{"lineNumber":119,"author":{"gitId":"derekjxtan"},"content":"        UniqueItemList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-08"},{"lineNumber":120,"author":{"gitId":"derekjxtan"},"content":"        expectedUniquePatientList.add(editedAlice);","lastModifiedDate":"2023-10-08"},{"lineNumber":121,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-08"},{"lineNumber":122,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":123,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":124,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":125,"author":{"gitId":"derekjxtan"},"content":"    public void setItem_editedItemHasDifferentIdentity_success() {","lastModifiedDate":"2023-10-08"},{"lineNumber":126,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":127,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.setItem(TypicalPatient.ALICE, BOB);","lastModifiedDate":"2023-10-08"},{"lineNumber":128,"author":{"gitId":"derekjxtan"},"content":"        UniqueItemList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-08"},{"lineNumber":129,"author":{"gitId":"derekjxtan"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2023-10-08"},{"lineNumber":130,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-08"},{"lineNumber":131,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":132,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":133,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":134,"author":{"gitId":"derekjxtan"},"content":"    public void setItem_editedItemHasNonUniqueIdentity_throwsDuplicateItemException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":135,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":136,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(BOB);","lastModifiedDate":"2023-10-08"},{"lineNumber":137,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e uniquePatientList.setItem(TypicalPatient.ALICE, BOB));","lastModifiedDate":"2023-10-08"},{"lineNumber":138,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":139,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":140,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":141,"author":{"gitId":"derekjxtan"},"content":"    public void remove_nullItem_throwsNullPointerException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":142,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));","lastModifiedDate":"2023-10-08"},{"lineNumber":143,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":144,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":145,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":146,"author":{"gitId":"derekjxtan"},"content":"    public void remove_itemDoesNotExist_throwsItemNotFoundException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":147,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(ItemNotFoundException.class, () -\u003e uniquePatientList.remove(TypicalPatient.ALICE));","lastModifiedDate":"2023-10-08"},{"lineNumber":148,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":149,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":150,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":151,"author":{"gitId":"derekjxtan"},"content":"    public void remove_existingItem_removesItem() {","lastModifiedDate":"2023-10-08"},{"lineNumber":152,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":153,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.remove(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":154,"author":{"gitId":"derekjxtan"},"content":"        UniqueItemList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-08"},{"lineNumber":155,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-08"},{"lineNumber":156,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":157,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":158,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":159,"author":{"gitId":"derekjxtan"},"content":"    public void setItems_nullUniqueItemList_throwsNullPointerException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":160,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setItems((UniqueItemList\u003cPatient\u003e) null));","lastModifiedDate":"2023-10-08"},{"lineNumber":161,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":162,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":163,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":164,"author":{"gitId":"derekjxtan"},"content":"    public void setItems_uniqueItemList_replacesOwnListWithProvidedUniqueItemList() {","lastModifiedDate":"2023-10-08"},{"lineNumber":165,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":166,"author":{"gitId":"derekjxtan"},"content":"        UniqueItemList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-08"},{"lineNumber":167,"author":{"gitId":"derekjxtan"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2023-10-08"},{"lineNumber":168,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.setItems(expectedUniquePatientList);","lastModifiedDate":"2023-10-08"},{"lineNumber":169,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-08"},{"lineNumber":170,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":171,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":172,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":173,"author":{"gitId":"derekjxtan"},"content":"    public void setItems_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":174,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setItems((List\u003cPatient\u003e) null));","lastModifiedDate":"2023-10-08"},{"lineNumber":175,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":176,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":177,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":178,"author":{"gitId":"derekjxtan"},"content":"    public void setItems_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2023-10-08"},{"lineNumber":179,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.add(TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":180,"author":{"gitId":"derekjxtan"},"content":"        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2023-10-08"},{"lineNumber":181,"author":{"gitId":"derekjxtan"},"content":"        uniquePatientList.setItems(patientList);","lastModifiedDate":"2023-10-08"},{"lineNumber":182,"author":{"gitId":"derekjxtan"},"content":"        UniqueItemList\u003cPatient\u003e expectedUniquePatientList \u003d new UniqueItemList\u003c\u003e();","lastModifiedDate":"2023-10-08"},{"lineNumber":183,"author":{"gitId":"derekjxtan"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2023-10-08"},{"lineNumber":184,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-10-08"},{"lineNumber":185,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":186,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":187,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":188,"author":{"gitId":"derekjxtan"},"content":"    public void setItems_listWithDuplicateItems_throwsDuplicateItemException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":189,"author":{"gitId":"derekjxtan"},"content":"        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(TypicalPatient.ALICE, TypicalPatient.ALICE);","lastModifiedDate":"2023-10-08"},{"lineNumber":190,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e uniquePatientList.setItems(listWithDuplicatePatients));","lastModifiedDate":"2023-10-08"},{"lineNumber":191,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":192,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":193,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":194,"author":{"gitId":"derekjxtan"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-08"},{"lineNumber":195,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2023-10-08"},{"lineNumber":196,"author":{"gitId":"derekjxtan"},"content":"                -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-10-08"},{"lineNumber":197,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":198,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":199,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-08"},{"lineNumber":200,"author":{"gitId":"derekjxtan"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-08"},{"lineNumber":201,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(uniquePatientList.asUnmodifiableObservableList().toString(), uniquePatientList.toString());","lastModifiedDate":"2023-10-08"},{"lineNumber":202,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":203,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"derekjxtan":203}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedAppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.storage.JsonAdaptedAppointment.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalAppointment.APPOINTMENT_1;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.BENSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.appointment.AppointmentEndTime;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.appointment.AppointmentStartTime;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"public class JsonAdaptedAppointmentTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"    private static final String INVALID_NRIC \u003d \"X0123456L\";","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"    private static final String INVALID_DATETIME \u003d \"06-09-2023T25:30\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    private static final String VALID_START_TIME \u003d \"2023-10-13 20:30\";","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"    private static final String VALID_END_TIME \u003d \"2023-10-13 22:30\";","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_validAppointmentDetails_returnsAppointment() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(APPOINTMENT_1);","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(APPOINTMENT_1, appointment.toModelType());","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"        // invalid doctor nric","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"                new JsonAdaptedAppointment(INVALID_NRIC, VALID_NRIC, VALID_START_TIME, VALID_END_TIME);","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"        // invalid patient nric","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"        appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, INVALID_NRIC, VALID_START_TIME, VALID_END_TIME);","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"        // invalid doctor nric and patient nric","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"        appointment \u003d new JsonAdaptedAppointment(INVALID_NRIC, INVALID_NRIC, VALID_START_TIME, VALID_END_TIME);","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"        // doctor nric is null","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"                new JsonAdaptedAppointment(null, VALID_NRIC, VALID_START_TIME, VALID_END_TIME);","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"        // patient nric is null","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"        appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, null, VALID_START_TIME, VALID_END_TIME);","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"        // doctor and patient nric is null","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"        appointment \u003d new JsonAdaptedAppointment(null, null, VALID_START_TIME, VALID_END_TIME);","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"                new JsonAdaptedAppointment(VALID_NRIC, VALID_NRIC, INVALID_DATETIME, VALID_END_TIME);","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, AppointmentStartTime.MESSAGE_CONSTRAINTS, appointment::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_NRIC, null,","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"                VALID_END_TIME);","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"                AppointmentStartTime.class.getSimpleName());","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedAppointment appointment \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"derekjxtan"},"content":"                new JsonAdaptedAppointment(VALID_NRIC, VALID_NRIC, VALID_START_TIME, INVALID_DATETIME);","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, AppointmentEndTime.MESSAGE_CONSTRAINTS, appointment::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedAppointment appointment \u003d new JsonAdaptedAppointment(VALID_NRIC, VALID_NRIC, VALID_START_TIME,","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"derekjxtan"},"content":"                null);","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, AppointmentEndTime.class.getSimpleName());","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, appointment::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":94}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedDoctorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.storage.JsonAdaptedDoctor.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalDoctor.BENSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"public class JsonAdaptedDoctorTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"    private static final String INVALID_NRIC \u003d \"X0123456L\";","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_validDoctorDetails_returnsDoctor() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(BENSON);","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(BENSON, doctor.toModelType());","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedDoctor doctor \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"                new JsonAdaptedDoctor(INVALID_NRIC, VALID_NAME);","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(null, VALID_NAME);","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedDoctor doctor \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"                new JsonAdaptedDoctor(VALID_NRIC, INVALID_NAME);","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedDoctor doctor \u003d new JsonAdaptedDoctor(VALID_NRIC, null);","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, doctor::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":56}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.BENSON;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"    private static final String INVALID_NRIC \u003d \"X0123456L\";","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_validPatientDetails_returnsPatient() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(BENSON, patient.toModelType());","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedPatient patient \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"                new JsonAdaptedPatient(INVALID_NRIC, VALID_NAME, VALID_PHONE);","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_NAME, VALID_PHONE);","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedPatient patient \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"                new JsonAdaptedPatient(VALID_NRIC, INVALID_NAME, VALID_PHONE);","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NRIC, null, VALID_PHONE);","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedPatient patient \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"                new JsonAdaptedPatient(VALID_NRIC, VALID_NAME, INVALID_PHONE);","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NRIC, VALID_NAME, null);","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":75}},{"path":"src/test/java/seedu/address/storage/JsonDatabaseStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalDatabase.getTypicalDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.HOON;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.IDA;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.DataLoadingException;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"public class JsonDatabaseStorageTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonDatabaseStorageTest\");","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"    @TempDir","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    public Path testFolder;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"    public void readDatabase_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e readDatabase(null));","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"    private java.util.Optional\u003cReadOnlyDatabase\u003e readDatabase(String filePath) throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"        return new JsonDatabaseStorage(Paths.get(filePath)).readDatabase(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"                : null;","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"        assertFalse(readDatabase(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readDatabase(\"notJsonFormatDatabase.json\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"    public void readDatabase_invalidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readDatabase(\"invalidPatientDatabase.json\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readDatabase(\"invalidDoctorDatabase.json\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readDatabase(\"invalidAppointmentDatabase.json\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataLoadingException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readDatabase(\"invalidAndValidPatientDatabase.json\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readDatabase(\"invalidAndValidDoctorDatabase.json\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(DataLoadingException.class, () -\u003e readDatabase(\"invalidAndValidAppointmentDatabase.json\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"    public void readAndSaveDatabase_allInOrder_success() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"        Path filePath \u003d testFolder.resolve(\"TempDatabase.json\");","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"        Database original \u003d getTypicalDatabase();","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"        JsonDatabaseStorage jsonDatabaseStorage \u003d new JsonDatabaseStorage(filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"        // Save in new file and read back","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"        jsonDatabaseStorage.saveDatabase(original, filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"        ReadOnlyDatabase readBack \u003d jsonDatabaseStorage.readDatabase(filePath).get();","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(original, new Database(readBack));","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"derekjxtan"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"derekjxtan"},"content":"        original.addPatient(HOON);","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"derekjxtan"},"content":"        original.removePatient(ALICE);","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"derekjxtan"},"content":"        jsonDatabaseStorage.saveDatabase(original, filePath);","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"derekjxtan"},"content":"        readBack \u003d jsonDatabaseStorage.readDatabase(filePath).get();","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(original, new Database(readBack));","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"derekjxtan"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"derekjxtan"},"content":"        original.addPatient(IDA);","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"derekjxtan"},"content":"        jsonDatabaseStorage.saveDatabase(original); // file path not specified","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"derekjxtan"},"content":"        readBack \u003d jsonDatabaseStorage.readDatabase().get(); // file path not specified","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(original, new Database(readBack));","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":91,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":92,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":93,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":94,"author":{"gitId":"derekjxtan"},"content":"    public void saveDatabase_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":95,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveDatabase(null, \"SomeFile.json\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":96,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":97,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":98,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":99,"author":{"gitId":"derekjxtan"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2023-10-13"},{"lineNumber":100,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":101,"author":{"gitId":"derekjxtan"},"content":"    private void saveDatabase(ReadOnlyDatabase database, String filePath) {","lastModifiedDate":"2023-10-13"},{"lineNumber":102,"author":{"gitId":"derekjxtan"},"content":"        try {","lastModifiedDate":"2023-10-13"},{"lineNumber":103,"author":{"gitId":"derekjxtan"},"content":"            new JsonDatabaseStorage(Paths.get(filePath))","lastModifiedDate":"2023-10-13"},{"lineNumber":104,"author":{"gitId":"derekjxtan"},"content":"                    .saveDatabase(database, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-10-13"},{"lineNumber":105,"author":{"gitId":"derekjxtan"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2023-10-13"},{"lineNumber":106,"author":{"gitId":"derekjxtan"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2023-10-13"},{"lineNumber":107,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":108,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":109,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":110,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":111,"author":{"gitId":"derekjxtan"},"content":"    public void saveDatabase_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-10-13"},{"lineNumber":112,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveDatabase(new Database(), null));","lastModifiedDate":"2023-10-13"},{"lineNumber":113,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":114,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":114}},{"path":"src/test/java/seedu/address/storage/JsonSerializableDatabaseTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.testutil.TypicalDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"public class JsonSerializableDatabaseTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableDatabaseTest\");","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"    private static final Path TYPICAL_DATABASE_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDatabase.json\");","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"    private static final Path INVALID_PATIENTS_DATABASE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientDatabase.json\");","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    private static final Path DUPLICATE_PATIENTS_DATABASE_FILE \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"            TEST_DATA_FOLDER.resolve(\"duplicatePatientDatabase.json\");","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"    private static final Path INVALID_DOCTORS_DATABASE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDoctorDatabase.json\");","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"    private static final Path DUPLICATE_DOCTORS_DATABASE_FILE \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"            TEST_DATA_FOLDER.resolve(\"duplicateDoctorDatabase.json\");","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    private static final Path INVALID_APPOINTMENTS_DATABASE_FILE \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"            TEST_DATA_FOLDER.resolve(\"invalidAppointmentDatabase.json\");","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    private static final Path DUPLICATE_APPOINTMENTS_DATABASE_FILE \u003d","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"            TEST_DATA_FOLDER.resolve(\"duplicateAppointmentDatabase.json\");","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_typicalDatabaseFile_success() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"        JsonSerializableDatabase dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_DATABASE_FILE,","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"                JsonSerializableDatabase.class).get();","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"        Database databaseFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"        Database typicalDatabase \u003d TypicalDatabase.getTypicalDatabase();","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(databaseFromFile, typicalDatabase);","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidPatientsFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"        JsonSerializableDatabase dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENTS_DATABASE_FILE,","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"                JsonSerializableDatabase.class).get();","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"        JsonSerializableDatabase dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENTS_DATABASE_FILE,","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"                JsonSerializableDatabase.class).get();","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableDatabase.MESSAGE_DUPLICATE_PATIENT,","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidDoctorsFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"        JsonSerializableDatabase dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DOCTORS_DATABASE_FILE,","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"                JsonSerializableDatabase.class).get();","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_duplicateDoctors_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"        JsonSerializableDatabase dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_DOCTORS_DATABASE_FILE,","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"                JsonSerializableDatabase.class).get();","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableDatabase.MESSAGE_DUPLICATE_DOCTOR,","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_invalidAppointmentsFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"        JsonSerializableDatabase dataFromFile \u003d JsonUtil.readJsonFile(INVALID_APPOINTMENTS_DATABASE_FILE,","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"                JsonSerializableDatabase.class).get();","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"derekjxtan"},"content":"    public void toModelType_duplicateAppointments_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"derekjxtan"},"content":"        JsonSerializableDatabase dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_APPOINTMENTS_DATABASE_FILE,","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"derekjxtan"},"content":"                JsonSerializableDatabase.class).get();","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"derekjxtan"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableDatabase.MESSAGE_DUPLICATE_APPOINTMENT,","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"derekjxtan"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":84}},{"path":"src/test/java/seedu/address/storage/NewStorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalDatabase.getTypicalDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.ReadOnlyDatabase;","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"public class NewStorageManagerTest {","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"    @TempDir","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    public Path testFolder;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"    private NewStorageManager storageManager;","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"    @BeforeEach","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    public void setUp() {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"        JsonDatabaseStorage databaseStorage \u003d new JsonDatabaseStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"        storageManager \u003d new NewStorageManager(databaseStorage, userPrefsStorage);","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"        /*","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"         */","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"        /*","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"         * Note: This is an integration test that verifies the NewStorageManager is properly wired to the","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"         * {@link JsonDatabaseStorage} class.","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonDatabaseStorageTest} class.","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"         */","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"        Database original \u003d getTypicalDatabase();","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"        storageManager.saveDatabase(original);","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"        ReadOnlyDatabase retrieved \u003d storageManager.readDatabase().get();","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"        assertEquals(original, new Database(retrieved));","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"    @Test","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"derekjxtan"},"content":"        assertNotNull(storageManager.getDatabaseFilePath());","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":68}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-10"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.GEORGE_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.AppointmentEndTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.AppointmentStartTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-10"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-10"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":" * A utility class to help with building Appointment objects.","lastModifiedDate":"2023-10-10"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-10"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2023-10-10"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    public static final String DEFAULT_DOCTOR_NRIC \u003d ALICE_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    public static final String DEFAULT_PATIENT_NRIC \u003d GEORGE_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    public static final String DEFAULT_START_TIME \u003d \"2023-09-11 07:30\";","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    public static final String DEFAULT_END_TIME \u003d \"2023-09-11 08:00\";","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"    private Nric doctorNric;","lastModifiedDate":"2023-10-10"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"    private Nric patientNric;","lastModifiedDate":"2023-10-10"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    private AppointmentStartTime startTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    private AppointmentEndTime endTime;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"     * Creates a {@code AppointmentBuilder} with the default details.","lastModifiedDate":"2023-10-10"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"        doctorNric \u003d new Nric(DEFAULT_DOCTOR_NRIC);","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"        patientNric \u003d new Nric(DEFAULT_PATIENT_NRIC);","lastModifiedDate":"2023-10-10"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        startTime \u003d new AppointmentStartTime(DEFAULT_START_TIME);","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        endTime \u003d new AppointmentEndTime(DEFAULT_END_TIME);","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}.","lastModifiedDate":"2023-10-10"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"        doctorNric \u003d appointmentToCopy.getDoctorNric();","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"        patientNric \u003d appointmentToCopy.getPatientNric();","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        startTime \u003d appointmentToCopy.getStartTime();","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        endTime \u003d appointmentToCopy.getEndTime();","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"     * Sets the {@code DoctorNRIC} of the {@code Appointment} that we are building.","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"    public AppointmentBuilder withDoctorNric(String doctorNric) {","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"        this.doctorNric \u003d new Nric(doctorNric);","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"        return this;","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"     * Sets the {@code PatientNRIC} of the {@code Appointment} that we are building.","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"    public AppointmentBuilder withPatientNric(String patientNric) {","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"        this.patientNric \u003d new Nric(patientNric);","lastModifiedDate":"2023-10-10"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"        return this;","lastModifiedDate":"2023-10-10"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"     * Sets the {@code startTime} of the {@code Appointment} that we are building.","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-10"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"    public AppointmentBuilder withStartTime(String startTime) {","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"        this.startTime \u003d new AppointmentStartTime(startTime);","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"        return this;","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"     * Sets the {@code endTime} of the {@code Appointment} that we are building.","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"    public AppointmentBuilder withEndTime(String endTime) {","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"        this.endTime \u003d new AppointmentEndTime(endTime);","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"yanghengtang"},"content":"        return this;","lastModifiedDate":"2023-10-10"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"    public Appointment build() {","lastModifiedDate":"2023-10-10"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"        return new Appointment(doctorNric, patientNric, startTime, endTime);","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-10"}],"authorContributionMap":{"yanghengtang":52,"mounilsankar":27}},{"path":"src/test/java/seedu/address/testutil/DoctorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":" * A utility class to help with building Doctor objects.","lastModifiedDate":"2023-10-08"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"public class DoctorBuilder {","lastModifiedDate":"2023-10-08"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2023-10-08"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"    public static final String DEFAULT_NRIC \u003d \"T0123456A\";","lastModifiedDate":"2023-10-08"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"    private Name name;","lastModifiedDate":"2023-10-08"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"    private Nric nric;","lastModifiedDate":"2023-10-08"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"     * Creates a {@code DoctorBuilder} with the default details.","lastModifiedDate":"2023-10-08"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"    public DoctorBuilder() {","lastModifiedDate":"2023-10-08"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2023-10-08"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2023-10-08"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"     * Initializes the DoctorBuilder with the data of {@code doctorToCopy}.","lastModifiedDate":"2023-10-08"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"    public DoctorBuilder(Doctor doctorToCopy) {","lastModifiedDate":"2023-10-08"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"        name \u003d doctorToCopy.getName();","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"        nric \u003d doctorToCopy.getNric();","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"     * Sets the {@code Name} of the {@code Doctor} that we are building.","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"    public DoctorBuilder withName(String name) {","lastModifiedDate":"2023-10-08"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2023-10-08"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"        return this;","lastModifiedDate":"2023-10-08"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-08"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"     * Sets the {@code Nric} of the {@code Doctor} that we are building.","lastModifiedDate":"2023-10-08"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-08"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"    public DoctorBuilder withNric(String nric) {","lastModifiedDate":"2023-10-08"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2023-10-08"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"        return this;","lastModifiedDate":"2023-10-08"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"    public Doctor build() {","lastModifiedDate":"2023-10-08"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"        return new Doctor(name, nric);","lastModifiedDate":"2023-10-08"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"yanghengtang":52}},{"path":"src/test/java/seedu/address/testutil/PatientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":" * A utility class to help with building Patient objects.","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"public class PatientBuilder {","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"    public static final String DEFAULT_NRIC \u003d \"T0123456A\";","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"    private Name name;","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"    private Phone phone;","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"    private Nric nric;","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"     * Creates a {@code PatientBuilder} with the default details.","lastModifiedDate":"2023-10-07"},{"lineNumber":22,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":23,"author":{"gitId":"yanghengtang"},"content":"    public PatientBuilder() {","lastModifiedDate":"2023-10-07"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2023-10-07"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2023-10-07"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"     * Initializes the PatientBuilder with the data of {@code patientToCopy}.","lastModifiedDate":"2023-10-07"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"    public PatientBuilder(Patient patientToCopy) {","lastModifiedDate":"2023-10-07"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":"        name \u003d patientToCopy.getName();","lastModifiedDate":"2023-10-07"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"        phone \u003d patientToCopy.getPhone();","lastModifiedDate":"2023-10-07"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"        nric \u003d patientToCopy.getNric();","lastModifiedDate":"2023-10-07"},{"lineNumber":36,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":37,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":39,"author":{"gitId":"yanghengtang"},"content":"     * Sets the {@code Name} of the {@code Patient} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":40,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":41,"author":{"gitId":"yanghengtang"},"content":"    public PatientBuilder withName(String name) {","lastModifiedDate":"2023-10-07"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2023-10-07"},{"lineNumber":43,"author":{"gitId":"yanghengtang"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":44,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":45,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"     * Sets the {@code Phone} of the {@code Patient} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":49,"author":{"gitId":"yanghengtang"},"content":"    public PatientBuilder withPhone(String phone) {","lastModifiedDate":"2023-10-07"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2023-10-07"},{"lineNumber":51,"author":{"gitId":"yanghengtang"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":52,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"    /**","lastModifiedDate":"2023-10-07"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"     * Sets the {@code Nric} of the {@code Patient} that we are building.","lastModifiedDate":"2023-10-07"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"     */","lastModifiedDate":"2023-10-07"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"    public PatientBuilder withNric(String nric) {","lastModifiedDate":"2023-10-07"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2023-10-07"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"        return this;","lastModifiedDate":"2023-10-07"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"    public Patient build() {","lastModifiedDate":"2023-10-07"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"        return new Patient(name, phone, nric);","lastModifiedDate":"2023-10-07"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"yanghengtang":65}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_END_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_START_TIME;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DOCTOR_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PATIENT_NRIC;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"     * Returns an add appointment command string for adding the {@code appointment}.","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"    public static String getAddAppointmentCommand(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        return AddAppointmentCommand.COMMAND_WORD + \" \" + getAppointmentDetails(appointment);","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"     * Returns an add patient command string for adding the {@code appointment}.","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    public static String getAddPatientCommand(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"        return AddPatientCommand.COMMAND_WORD + \" \" + getPatientDetails(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details.","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"    public static String getAppointmentDetails(Appointment appointment) {","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"        sb.append(PREFIX_PATIENT_NRIC + appointment.getPatientNric().toString() + \" \");","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"        sb.append(PREFIX_DOCTOR_NRIC + appointment.getDoctorNric().toString() + \" \");","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"        sb.append(PREFIX_APPOINTMENT_START_TIME + appointment.getStartTime().toString() + \" \");","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"        sb.append(PREFIX_APPOINTMENT_END_TIME + appointment.getEndTime().toString() + \" \");","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"        return sb.toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"mounilsankar"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":80,"author":{"gitId":"mounilsankar"},"content":"    public static String getPatientDetails(Patient patient) {","lastModifiedDate":"2023-10-13"},{"lineNumber":81,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-10-13"},{"lineNumber":82,"author":{"gitId":"mounilsankar"},"content":"        sb.append(PREFIX_NRIC + patient.getNric().toString() + \" \");","lastModifiedDate":"2023-10-13"},{"lineNumber":83,"author":{"gitId":"mounilsankar"},"content":"        sb.append(PREFIX_NAME + patient.getName().toString() + \" \");","lastModifiedDate":"2023-10-13"},{"lineNumber":84,"author":{"gitId":"mounilsankar"},"content":"        sb.append(PREFIX_PHONE + patient.getPhone().toString() + \" \");","lastModifiedDate":"2023-10-13"},{"lineNumber":85,"author":{"gitId":"mounilsankar"},"content":"        return sb.toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":86,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":87,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"mounilsankar":45,"-":62}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointment.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-10"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_END_TIME;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_START_TIME;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DOCTOR_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PATIENT_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalDoctor.getTypicalDoctor;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.BENSON_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.CARL_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.DANIEL_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.ELLE_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.FIONA_NRIC;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"import static seedu.address.testutil.TypicalPatient.getTypicalPatient;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-10"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-10"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":"import java.util.List;","lastModifiedDate":"2023-10-10"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-10"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-10"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":" * A utility class containing a list of {@code Appointment} objects to be used in tests.","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"public class TypicalAppointment {","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"    public static final Appointment APPOINTMENT_1 \u003d new AppointmentBuilder().withDoctorNric(BENSON_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"            .withPatientNric(ALICE_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"            .build();","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"    public static final Appointment APPOINTMENT_2 \u003d new AppointmentBuilder().withDoctorNric(CARL_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"            .withPatientNric(BENSON_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"            .build();","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    public static final Appointment APPOINTMENT_3 \u003d new AppointmentBuilder().withDoctorNric(DANIEL_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"            .withPatientNric(CARL_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"            .build();","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"    public static final Appointment APPOINTMENT_4 \u003d new AppointmentBuilder().withDoctorNric(ELLE_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"            .withPatientNric(DANIEL_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"            .build();","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    public static final Appointment APPOINTMENT_5 \u003d new AppointmentBuilder().withDoctorNric(FIONA_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"            .withPatientNric(ELLE_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"            .build();","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    public static final Appointment APPOINTMENT_6 \u003d new AppointmentBuilder().withDoctorNric(ALICE_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"            .withPatientNric(FIONA_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"            .build();","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"    // Manually added - Doctor\u0027s and Patient\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"    public static final Appointment APPOINTMENT_7 \u003d new AppointmentBuilder()","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"            .withDoctorNric(VALID_DOCTOR_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"            .withPatientNric(VALID_PATIENT_NRIC)","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"            .withStartTime(VALID_APPOINTMENT_START_TIME)","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"            .withEndTime(VALID_APPOINTMENT_END_TIME)","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"            .build();","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"    public TypicalAppointment() {} // prevents instantiation","lastModifiedDate":"2023-10-10"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"    public static Database getTypicalDatabase() {","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"        Database db \u003d new Database();","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"        for (Appointment appointment : getTypicalAppointment()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"            db.addAppointment(appointment);","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"        for (Patient patient : getTypicalPatient()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"            db.addPatient(patient);","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"        for (Doctor doctor: getTypicalDoctor()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"            db.addDoctor(doctor);","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"        return db;","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointment() {","lastModifiedDate":"2023-10-10"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(APPOINTMENT_1, APPOINTMENT_2, APPOINTMENT_3, APPOINTMENT_4,","lastModifiedDate":"2023-10-10"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"                APPOINTMENT_5, APPOINTMENT_6));","lastModifiedDate":"2023-10-10"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-10"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-10"}],"authorContributionMap":{"yanghengtang":25,"mounilsankar":57}},{"path":"src/test/java/seedu/address/testutil/TypicalDatabase.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"derekjxtan"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalAppointment.getTypicalAppointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalDoctor.getTypicalDoctor;","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.getTypicalPatient;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.Database;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":" * A utility class for testing Database.","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"public class TypicalDatabase {","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"     * Returns an {@code Database} with all the typical patients, doctors and appointments.","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"    public static Database getTypicalDatabase() {","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"        Database db \u003d new Database();","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"        for (Patient patient : getTypicalPatient()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"            db.addPatient(patient);","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"        for (Doctor doctor : getTypicalDoctor()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"derekjxtan"},"content":"            db.addDoctor(doctor);","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"        for (Appointment appointment : getTypicalAppointment()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"            db.addAppointment(appointment);","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"        return db;","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"derekjxtan":32}},{"path":"src/test/java/seedu/address/testutil/TypicalDoctor.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-08"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-08"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-08"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-10-08"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-08"},{"lineNumber":7,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.ALICE_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.BENSON_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.BENSON_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.CARL_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.CARL_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.DANIEL_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.DANIEL_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.ELLE_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.ELLE_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.FIONA_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.FIONA_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.GEORGE_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.GEORGE_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.HOON_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.HOON_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.IDA_NAME;","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"import static seedu.address.testutil.TypicalPatient.IDA_NRIC;","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":26,"author":{"gitId":"yanghengtang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-08"},{"lineNumber":27,"author":{"gitId":"yanghengtang"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-08"},{"lineNumber":28,"author":{"gitId":"yanghengtang"},"content":"import java.util.List;","lastModifiedDate":"2023-10-08"},{"lineNumber":29,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":30,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.doctor.Doctor;","lastModifiedDate":"2023-10-08"},{"lineNumber":31,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":32,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-08"},{"lineNumber":33,"author":{"gitId":"yanghengtang"},"content":" * A utility class containing a list of {@code Doctor} objects to be used in tests.","lastModifiedDate":"2023-10-08"},{"lineNumber":34,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-08"},{"lineNumber":35,"author":{"gitId":"yanghengtang"},"content":"public class TypicalDoctor {","lastModifiedDate":"2023-10-08"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"    public static final Doctor ALICE \u003d new DoctorBuilder().withName(ALICE_NAME)","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"            .withNric(ALICE_NRIC).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"    public static final Doctor BENSON \u003d new DoctorBuilder().withName(BENSON_NAME)","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"            .withNric(BENSON_NRIC).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"    public static final Doctor CARL \u003d new DoctorBuilder().withName(CARL_NAME)","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"            .withNric(CARL_NRIC).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"    public static final Doctor DANIEL \u003d new DoctorBuilder().withName(DANIEL_NAME)","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"            .withNric(DANIEL_NRIC).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"    public static final Doctor ELLE \u003d new DoctorBuilder().withName(ELLE_NAME).withNric(ELLE_NRIC).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"    public static final Doctor FIONA \u003d new DoctorBuilder().withName(FIONA_NAME).withNric(FIONA_NRIC).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"    public static final Doctor GEORGE \u003d new DoctorBuilder().withName(GEORGE_NAME).withNric(GEORGE_NRIC).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":48,"author":{"gitId":"yanghengtang"},"content":"    // Manually added","lastModifiedDate":"2023-10-08"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"    public static final Doctor HOON \u003d new DoctorBuilder().withName(HOON_NAME)","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"            .withNric(HOON_NRIC).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"    public static final Doctor IDA \u003d new DoctorBuilder().withName(IDA_NAME)","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"            .withNric(IDA_NRIC).build();","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":54,"author":{"gitId":"yanghengtang"},"content":"    // Manually added - Doctor\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-10-08"},{"lineNumber":55,"author":{"gitId":"yanghengtang"},"content":"    public static final Doctor AMY \u003d new DoctorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-10-08"},{"lineNumber":56,"author":{"gitId":"yanghengtang"},"content":"            .withNric(VALID_NRIC_AMY).build();","lastModifiedDate":"2023-10-08"},{"lineNumber":57,"author":{"gitId":"yanghengtang"},"content":"    public static final Doctor BOB \u003d new DoctorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-08"},{"lineNumber":58,"author":{"gitId":"yanghengtang"},"content":"            .withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-10-08"},{"lineNumber":59,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":60,"author":{"gitId":"yanghengtang"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2023-10-08"},{"lineNumber":61,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":62,"author":{"gitId":"yanghengtang"},"content":"    private TypicalDoctor() {} // prevents instantiation","lastModifiedDate":"2023-10-08"},{"lineNumber":63,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":64,"author":{"gitId":"yanghengtang"},"content":"    public static List\u003cDoctor\u003e getTypicalDoctor() {","lastModifiedDate":"2023-10-08"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2023-10-08"},{"lineNumber":66,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-08"},{"lineNumber":67,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-08"},{"lineNumber":68,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-08"}],"authorContributionMap":{"yanghengtang":35,"derekjxtan":33}},{"path":"src/test/java/seedu/address/testutil/TypicalPatient.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yanghengtang"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-10-07"},{"lineNumber":2,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":3,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-07"},{"lineNumber":4,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":5,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-10-07"},{"lineNumber":6,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":7,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-10-07"},{"lineNumber":8,"author":{"gitId":"yanghengtang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-07"},{"lineNumber":9,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":10,"author":{"gitId":"yanghengtang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-10-07"},{"lineNumber":11,"author":{"gitId":"yanghengtang"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-10-07"},{"lineNumber":12,"author":{"gitId":"yanghengtang"},"content":"import java.util.List;","lastModifiedDate":"2023-10-07"},{"lineNumber":13,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":14,"author":{"gitId":"yanghengtang"},"content":"import seedu.address.model.person.patient.Patient;","lastModifiedDate":"2023-10-07"},{"lineNumber":15,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":16,"author":{"gitId":"yanghengtang"},"content":"/**","lastModifiedDate":"2023-10-07"},{"lineNumber":17,"author":{"gitId":"yanghengtang"},"content":" * A utility class containing a list of {@code Patient} objects to be used in tests.","lastModifiedDate":"2023-10-07"},{"lineNumber":18,"author":{"gitId":"yanghengtang"},"content":" */","lastModifiedDate":"2023-10-07"},{"lineNumber":19,"author":{"gitId":"yanghengtang"},"content":"public class TypicalPatient {","lastModifiedDate":"2023-10-07"},{"lineNumber":20,"author":{"gitId":"derekjxtan"},"content":"    public static final String ALICE_NAME \u003d \"Alice Pauline\";","lastModifiedDate":"2023-10-10"},{"lineNumber":21,"author":{"gitId":"derekjxtan"},"content":"    public static final String ALICE_PHONE \u003d \"94351253\";","lastModifiedDate":"2023-10-10"},{"lineNumber":22,"author":{"gitId":"derekjxtan"},"content":"    public static final String ALICE_NRIC \u003d \"T0123456J\";","lastModifiedDate":"2023-10-10"},{"lineNumber":23,"author":{"gitId":"derekjxtan"},"content":"    public static final Patient ALICE \u003d new PatientBuilder().withName(ALICE_NAME).withPhone(ALICE_PHONE)","lastModifiedDate":"2023-10-10"},{"lineNumber":24,"author":{"gitId":"derekjxtan"},"content":"            .withNric(ALICE_NRIC).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":25,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":26,"author":{"gitId":"derekjxtan"},"content":"    public static final String BENSON_NAME \u003d \"Benson Meier\";","lastModifiedDate":"2023-10-10"},{"lineNumber":27,"author":{"gitId":"derekjxtan"},"content":"    public static final String BENSON_PHONE \u003d \"98765432\";","lastModifiedDate":"2023-10-10"},{"lineNumber":28,"author":{"gitId":"derekjxtan"},"content":"    public static final String BENSON_NRIC \u003d \"S2936283D\";","lastModifiedDate":"2023-10-10"},{"lineNumber":29,"author":{"gitId":"derekjxtan"},"content":"    public static final Patient BENSON \u003d new PatientBuilder().withName(BENSON_NAME).withPhone(BENSON_PHONE)","lastModifiedDate":"2023-10-10"},{"lineNumber":30,"author":{"gitId":"derekjxtan"},"content":"            .withNric(BENSON_NRIC).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":31,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":32,"author":{"gitId":"derekjxtan"},"content":"    public static final String CARL_NAME \u003d \"Carl Kurz\";","lastModifiedDate":"2023-10-10"},{"lineNumber":33,"author":{"gitId":"derekjxtan"},"content":"    public static final String CARL_PHONE \u003d \"95352563\";","lastModifiedDate":"2023-10-10"},{"lineNumber":34,"author":{"gitId":"derekjxtan"},"content":"    public static final String CARL_NRIC \u003d \"T3856391A\";","lastModifiedDate":"2023-10-10"},{"lineNumber":35,"author":{"gitId":"derekjxtan"},"content":"    public static final Patient CARL \u003d new PatientBuilder().withName(CARL_NAME).withPhone(CARL_PHONE)","lastModifiedDate":"2023-10-10"},{"lineNumber":36,"author":{"gitId":"derekjxtan"},"content":"            .withNric(CARL_NRIC).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":37,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":38,"author":{"gitId":"derekjxtan"},"content":"    public static final String DANIEL_NAME \u003d \"Daniel Meier\";","lastModifiedDate":"2023-10-10"},{"lineNumber":39,"author":{"gitId":"derekjxtan"},"content":"    public static final String DANIEL_PHONE \u003d \"87652533\";","lastModifiedDate":"2023-10-10"},{"lineNumber":40,"author":{"gitId":"derekjxtan"},"content":"    public static final String DANIEL_NRIC \u003d \"S9754123F\";","lastModifiedDate":"2023-10-10"},{"lineNumber":41,"author":{"gitId":"derekjxtan"},"content":"    public static final Patient DANIEL \u003d new PatientBuilder().withName(DANIEL_NAME).withPhone(DANIEL_PHONE)","lastModifiedDate":"2023-10-10"},{"lineNumber":42,"author":{"gitId":"derekjxtan"},"content":"            .withNric(DANIEL_NRIC).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":43,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":44,"author":{"gitId":"derekjxtan"},"content":"    public static final String ELLE_NAME \u003d \"Elle Meyer\";","lastModifiedDate":"2023-10-10"},{"lineNumber":45,"author":{"gitId":"derekjxtan"},"content":"    public static final String ELLE_PHONE \u003d \"9482224\";","lastModifiedDate":"2023-10-10"},{"lineNumber":46,"author":{"gitId":"derekjxtan"},"content":"    public static final String ELLE_NRIC \u003d \"G4123573C\";","lastModifiedDate":"2023-10-10"},{"lineNumber":47,"author":{"gitId":"derekjxtan"},"content":"    public static final Patient ELLE \u003d new PatientBuilder().withName(ELLE_NAME).withPhone(ELLE_PHONE)","lastModifiedDate":"2023-10-10"},{"lineNumber":48,"author":{"gitId":"derekjxtan"},"content":"            .withNric(ELLE_NRIC).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":49,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":50,"author":{"gitId":"derekjxtan"},"content":"    public static final String FIONA_NAME \u003d \"Fiona Kunz\";","lastModifiedDate":"2023-10-10"},{"lineNumber":51,"author":{"gitId":"derekjxtan"},"content":"    public static final String FIONA_PHONE \u003d \"9482427\";","lastModifiedDate":"2023-10-10"},{"lineNumber":52,"author":{"gitId":"derekjxtan"},"content":"    public static final String FIONA_NRIC \u003d \"G6739542H\";","lastModifiedDate":"2023-10-10"},{"lineNumber":53,"author":{"gitId":"derekjxtan"},"content":"    public static final Patient FIONA \u003d new PatientBuilder().withName(FIONA_NAME).withPhone(FIONA_PHONE)","lastModifiedDate":"2023-10-10"},{"lineNumber":54,"author":{"gitId":"derekjxtan"},"content":"            .withNric(FIONA_NRIC).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":55,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":56,"author":{"gitId":"derekjxtan"},"content":"    public static final String GEORGE_NAME \u003d \"George Best\";","lastModifiedDate":"2023-10-10"},{"lineNumber":57,"author":{"gitId":"derekjxtan"},"content":"    public static final String GEORGE_PHONE \u003d \"9482442\";","lastModifiedDate":"2023-10-10"},{"lineNumber":58,"author":{"gitId":"derekjxtan"},"content":"    public static final String GEORGE_NRIC \u003d \"T0359320R\";","lastModifiedDate":"2023-10-10"},{"lineNumber":59,"author":{"gitId":"derekjxtan"},"content":"    public static final Patient GEORGE \u003d new PatientBuilder().withName(GEORGE_NAME).withPhone(GEORGE_PHONE)","lastModifiedDate":"2023-10-10"},{"lineNumber":60,"author":{"gitId":"derekjxtan"},"content":"            .withNric(GEORGE_NRIC).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":61,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":62,"author":{"gitId":"derekjxtan"},"content":"    public static final String HOON_NAME \u003d \"Hoon Meier\";","lastModifiedDate":"2023-10-10"},{"lineNumber":63,"author":{"gitId":"derekjxtan"},"content":"    public static final String HOON_PHONE \u003d \"8482424\";","lastModifiedDate":"2023-10-10"},{"lineNumber":64,"author":{"gitId":"derekjxtan"},"content":"    public static final String HOON_NRIC \u003d \"T0248362R\";","lastModifiedDate":"2023-10-10"},{"lineNumber":65,"author":{"gitId":"yanghengtang"},"content":"    // Manually added","lastModifiedDate":"2023-10-07"},{"lineNumber":66,"author":{"gitId":"derekjxtan"},"content":"    public static final Patient HOON \u003d new PatientBuilder().withName(HOON_NAME).withPhone(HOON_PHONE)","lastModifiedDate":"2023-10-10"},{"lineNumber":67,"author":{"gitId":"derekjxtan"},"content":"            .withNric(HOON_NRIC).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":68,"author":{"gitId":"derekjxtan"},"content":"","lastModifiedDate":"2023-10-10"},{"lineNumber":69,"author":{"gitId":"derekjxtan"},"content":"    public static final String IDA_NAME \u003d \"Ida Mueller\";","lastModifiedDate":"2023-10-10"},{"lineNumber":70,"author":{"gitId":"derekjxtan"},"content":"    public static final String IDA_PHONE \u003d \"8482131\";","lastModifiedDate":"2023-10-10"},{"lineNumber":71,"author":{"gitId":"derekjxtan"},"content":"    public static final String IDA_NRIC \u003d \"S9348573F\";","lastModifiedDate":"2023-10-10"},{"lineNumber":72,"author":{"gitId":"derekjxtan"},"content":"    public static final Patient IDA \u003d new PatientBuilder().withName(IDA_NAME).withPhone(IDA_PHONE)","lastModifiedDate":"2023-10-10"},{"lineNumber":73,"author":{"gitId":"derekjxtan"},"content":"            .withNric(IDA_NRIC).build();","lastModifiedDate":"2023-10-10"},{"lineNumber":74,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":75,"author":{"gitId":"yanghengtang"},"content":"    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-10-07"},{"lineNumber":76,"author":{"gitId":"yanghengtang"},"content":"    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-10-07"},{"lineNumber":77,"author":{"gitId":"yanghengtang"},"content":"            .withNric(VALID_NRIC_AMY).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":78,"author":{"gitId":"yanghengtang"},"content":"    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-07"},{"lineNumber":79,"author":{"gitId":"yanghengtang"},"content":"            .withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-10-07"},{"lineNumber":80,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":81,"author":{"gitId":"yanghengtang"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2023-10-07"},{"lineNumber":82,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":83,"author":{"gitId":"yanghengtang"},"content":"    private TypicalPatient() {} // prevents instantiation","lastModifiedDate":"2023-10-07"},{"lineNumber":84,"author":{"gitId":"yanghengtang"},"content":"","lastModifiedDate":"2023-10-07"},{"lineNumber":85,"author":{"gitId":"yanghengtang"},"content":"    public static List\u003cPatient\u003e getTypicalPatient() {","lastModifiedDate":"2023-10-07"},{"lineNumber":86,"author":{"gitId":"yanghengtang"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2023-10-07"},{"lineNumber":87,"author":{"gitId":"yanghengtang"},"content":"    }","lastModifiedDate":"2023-10-07"},{"lineNumber":88,"author":{"gitId":"yanghengtang"},"content":"}","lastModifiedDate":"2023-10-07"}],"authorContributionMap":{"yanghengtang":36,"derekjxtan":52}}]
