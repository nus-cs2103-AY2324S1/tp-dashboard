[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"[![CI Status](https://github.com/AY2324S1-CS2103T-T12-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2324S1-CS2103T-T12-4/tp/actions)","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"[![codecov](https://codecov.io/gh/AY2324S1-CS2103T-T12-4/tp/graph/badge.svg?token\u003dXRD2EIUJ8H)](https://codecov.io/gh/AY2324S1-CS2103T-T12-4/tp)","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"- This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"- It is named MedBook, a brownfield project from the AddressBook-Level3.","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"- It can:","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"  - streamline patient management for healthcare professionals","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"  - simplify the process of accessing patients\u0027 contact information and medical records","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"- To access the User Guide, click [here](/docs/UserGuide.md)","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"- To access the Developer Guide, click [here](/docs/DeveloperGuide.md)","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":9,"hjoneweek":1,"-":2}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-07-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    archiveFileName \u003d \u0027medbook.jar\u0027","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Darren159":1,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"About Us\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"# About Us","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"You can reach us at the email `low.darren[at]u.nus.edu`","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"### Darren Low","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"\u003cimg src\u003d\"images/darren159.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"[[github](https://github.com/Darren159)]","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"[[portfolio](team/darren159.md)]","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"* Role: Developer","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"### Kim Hanjoo","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"\u003cimg src\u003d\"images/hjoneweek.png\" width \u003d \"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"[[github](https://github.com/hjoneweek)]","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"[[portfolio](team/hjoneweek.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"### Adam Ang Zi Jun","lastModifiedDate":"2023-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"\u003cimg src\u003d\"images/adammangzijun.png\" width \u003d \"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"[[github](https://github.com/adammangzijun)]","lastModifiedDate":"2023-10-04"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"[[portfolio](team/adammangzijun.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"### Lin Yuxiang","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"\u003cimg src\u003d\"images/clin-lyx.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"Clin-lyx"},"content":"[[github](http://github.com/Clin-lyx)]","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"[[portfolio](team/clin-lyx.md)]","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2023-10-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"ryanongwx"},"content":"### Ryan Ong Wei Xian","lastModifiedDate":"2023-10-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"ryanongwx"},"content":"\u003cimg src\u003d\"images/ryanongwx.png\" width \u003d \"200px\"\u003e","lastModifiedDate":"2023-10-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"ryanongwx"},"content":"[[github](https://github.com/ryanongwx)]","lastModifiedDate":"2023-10-05"},{"lineNumber":54,"author":{"gitId":"ryanongwx"},"content":"[[portfolio](team/ryanongwx.md)]","lastModifiedDate":"2023-10-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2023-10-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Darren159":7,"hjoneweek":3,"Clin-lyx":4,"-":34,"adammangzijun":4,"ryanongwx":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"Developer Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"# MedBook Developer Guide","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"_{ list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well }_","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureDiagram.puml\" width\u003d\"280\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"**`Main`** (consisting of classes [`Main`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/MainApp.java)) is in charge of the app launch and shut down.","lastModifiedDate":"2023-10-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* At app launch, it initializes the other components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At shut down, it shuts down the other components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"The bulk of the app\u0027s work is done by the following four components:","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ArchitectureSequenceDiagram.puml\" width\u003d\"574\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ComponentManagers.puml\" width\u003d\"300\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2023-10-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UiClassDiagram.puml\" alt\u003d\"Structure of the UI Component\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/LogicClassDiagram.puml\" width\u003d\"550\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"The sequence diagram below illustrates the interactions within the `Logic` component, taking `execute(\"delete 1\")` API call as an example.","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/DeleteSequenceDiagram.puml\" alt\u003d\"Interactions Inside the Logic Component for the `delete 1` Command\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it is passed to an `AddressBookParser` object which in turn creates a parser that matches the command (e.g., `DeleteCommandParser`) and uses it to parse the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `DeleteCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to delete a person).","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ParserClasses.puml\" width\u003d\"600\"/\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"Darren159"},"content":"**API** : [`Model.java`](https://github.com/AY2324S1-CS2103T-T12-4/tp/blob/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2023-10-03"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/ModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"**Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/BetterModelClassDiagram.puml\" width\u003d\"450\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/StorageClassDiagram.puml\" width\u003d\"550\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in JSON format, and read them back into corresponding objects.","lastModifiedDate":"2023-09-03"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState0.puml\" alt\u003d\"UndoRedoState0\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState1.puml\" alt\u003d\"UndoRedoState1\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState2.puml\" alt\u003d\"UndoRedoState2\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"**Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2023-09-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState3.puml\" alt\u003d\"UndoRedoState3\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2023-09-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoSequenceDiagram.puml\" alt\u003d\"UndoSequenceDiagram\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"**Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2023-09-12"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"**Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2023-09-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState4.puml\" alt\u003d\"UndoRedoState4\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/UndoRedoState5.puml\" alt\u003d\"UndoRedoState5\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"\u003cpuml src\u003d\"diagrams/CommitActivityDiagram.puml\" width\u003d\"250\" /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":259,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"Darren159"},"content":"* doctors","lastModifiedDate":"2023-10-03"},{"lineNumber":273,"author":{"gitId":"Darren159"},"content":"* has a need to manage a significant number of patients","lastModifiedDate":"2023-10-03"},{"lineNumber":274,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":277,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"Darren159"},"content":"**Value proposition**:","lastModifiedDate":"2023-10-03"},{"lineNumber":280,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":281,"author":{"gitId":"Darren159"},"content":"* streamline patient management","lastModifiedDate":"2023-10-03"},{"lineNumber":282,"author":{"gitId":"Darren159"},"content":"* easy access to patients\u0027 details such as medical records and contact information","lastModifiedDate":"2023-10-03"},{"lineNumber":283,"author":{"gitId":"Darren159"},"content":"* manage patients faster than a typical mouse/GUI driven app","lastModifiedDate":"2023-10-03"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"| Priority | As a …​                                | I want to …​                                                                                               | So that I can…​                                                   |","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"adammangzijun"},"content":"|----------|----------------------------------------|------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------|","lastModifiedDate":"2023-10-04"},{"lineNumber":292,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | user                                   | *add* a patient’s medical records and contact details                                                      | keep track of them efficiently                                    |","lastModifiedDate":"2023-10-04"},{"lineNumber":293,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | user                                   | *view* a list of all the patients in the app                                                               | quickly see all my patients at once                               |","lastModifiedDate":"2023-10-04"},{"lineNumber":294,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | user                                   | *delete* a specific patient’s details from the ap                                                          | remove patients that are no longer relevant or needed             |","lastModifiedDate":"2023-10-04"},{"lineNumber":295,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | user                                   | *edit* an existing patient’s details in the app                                                            | keep the information accurate and up-to-date                      |","lastModifiedDate":"2023-10-04"},{"lineNumber":296,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | user                                   | *search* for specific patients using keywords such as patient’s name or medical record                     | easily search for and locate specific patients in the app         |","lastModifiedDate":"2023-10-04"},{"lineNumber":297,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | user                                   | see the app populated with sample data                                                                     | easily see how the app will look when it is in use                |","lastModifiedDate":"2023-10-04"},{"lineNumber":298,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | new user                                   | access a “help” page to view the app’s functionalities                                                     | learn how to use the application effectively                      |","lastModifiedDate":"2023-10-04"},{"lineNumber":299,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | new user                                   | *clear all* current data                                                                                   | get rid of sample/experimental data I used for exploring the app  |","lastModifiedDate":"2023-10-04"},{"lineNumber":300,"author":{"gitId":"adammangzijun"},"content":"| `* * *`  | user                                   | exit the application and save the address book automatically                                               |                                                                   |","lastModifiedDate":"2023-10-04"},{"lineNumber":301,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | busy user | *pin* a specific patient                                                                                   | remember to contact them                                          |","lastModifiedDate":"2023-10-04"},{"lineNumber":302,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | user                                   | import my patient details into the app                                                                     | efficiently manage my existing patient information                |","lastModifiedDate":"2023-10-04"},{"lineNumber":303,"author":{"gitId":"adammangzijun"},"content":"| `* * `   | user                                   | reorganize the address book in terms of appointment date/time and/or alphabetical order of patients’ names | have a sorted list to for other purposes                          |","lastModifiedDate":"2023-10-04"},{"lineNumber":304,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | user                                   | receive regular updates and bug fixes for the app                                                          | ensure that it remains functional and bug-free                    |","lastModifiedDate":"2023-10-04"},{"lineNumber":305,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | user | attach files such as lab reports and prescription images to a patient\u0027s profile                            | maintain a comprehensive record of all patient information        |","lastModifiedDate":"2023-10-04"},{"lineNumber":306,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | user                                   | view a history log of all the changes made to a patient\u0027s record                                           | track updates and maintain a reliable record                      |","lastModifiedDate":"2023-10-04"},{"lineNumber":307,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | expert user                                   | separate my patients into different categories                                                             | easily filter out my patients accordingly                         |","lastModifiedDate":"2023-10-04"},{"lineNumber":308,"author":{"gitId":"adammangzijun"},"content":"| `* *`    | busy user | clear the contacts related to a specific patient                                                           | remove them all at one go                                         |","lastModifiedDate":"2023-10-04"},{"lineNumber":309,"author":{"gitId":"adammangzijun"},"content":"| `*`      | user | view a daily schedule of patient appointments within the app                                               | prepare for my daily patient consultations                        |","lastModifiedDate":"2023-10-04"},{"lineNumber":310,"author":{"gitId":"adammangzijun"},"content":"| `*`      | user                                   | reschedule or cancel appointments within the app                                                           | have flexibility in appointment dates                             |","lastModifiedDate":"2023-10-04"},{"lineNumber":311,"author":{"gitId":"adammangzijun"},"content":"| `*`      | user                                   | set access permissions(password protected)                                                                 | allow only authorized personnel to view or modify patient details |","lastModifiedDate":"2023-10-04"},{"lineNumber":312,"author":{"gitId":"adammangzijun"},"content":"| `*`      | user                                   | print a patient’s medical record directly from the app                                                     | facilitate physical record keeping and sharing of information     |","lastModifiedDate":"2023-10-04"},{"lineNumber":313,"author":{"gitId":"adammangzijun"},"content":"| `*`      | expert user                                   | create reminders for my patients to follow up                                                              | make sure that patients remember their follow up appointment      |","lastModifiedDate":"2023-10-04"},{"lineNumber":314,"author":{"gitId":"adammangzijun"},"content":"| `*`      | expert user                                   | record patients who didn’t show up                                                                         | to keep track of patients who tend to miss appointment dates      |","lastModifiedDate":"2023-10-04"},{"lineNumber":315,"author":{"gitId":"adammangzijun"},"content":"| `*`      | expert user                                   | export patient data to a CSV file or other common formats                                                  | easily share or transfer data between different systems           |","lastModifiedDate":"2023-10-04"},{"lineNumber":316,"author":{"gitId":"adammangzijun"},"content":"| `*`      | busy user | reminders for upcoming patient appointments                                                                | remember to attend all the consultations                          |","lastModifiedDate":"2023-10-04"},{"lineNumber":317,"author":{"gitId":"adammangzijun"},"content":"| `*`      | busy user | blacklist certain patients                                                                                 | remove absurd patients                                            |","lastModifiedDate":"2023-10-04"},{"lineNumber":318,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"Darren159"},"content":"(For all use cases below, the **System** is the `MedBook` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2023-10-03"},{"lineNumber":325,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":326,"author":{"gitId":"Darren159"},"content":"**Use case: UC01 - Viewing help**","lastModifiedDate":"2023-10-04"},{"lineNumber":327,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":328,"author":{"gitId":"Darren159"},"content":"**MSS**","lastModifiedDate":"2023-10-03"},{"lineNumber":329,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":330,"author":{"gitId":"Darren159"},"content":"**Use case: UC02 - Adding a patient**","lastModifiedDate":"2023-10-04"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":332,"author":{"gitId":"Darren159"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":333,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":334,"author":{"gitId":"Darren159"},"content":"**Use case: UC03 - Listing all patient**","lastModifiedDate":"2023-10-04"},{"lineNumber":335,"author":{"gitId":"adammangzijun"},"content":"**Actors**: User (typically a healthcare professional)","lastModifiedDate":"2023-10-04"},{"lineNumber":336,"author":{"gitId":"adammangzijun"},"content":"*Preconditions*:","lastModifiedDate":"2023-10-04"},{"lineNumber":337,"author":{"gitId":"adammangzijun"},"content":"1. Patient list is displayed and has at least one patient entry.","lastModifiedDate":"2023-10-04"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":339,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":341,"author":{"gitId":"Clin-lyx"},"content":"1.  User requests to list patients.","lastModifiedDate":"2023-10-15"},{"lineNumber":342,"author":{"gitId":"Clin-lyx"},"content":"2.  Medbook shows a list of patients.","lastModifiedDate":"2023-10-04"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":346,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":348,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2023-10-04"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":350,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":352,"author":{"gitId":"Darren159"},"content":"**Use case: UC04 - Editing a patient**","lastModifiedDate":"2023-10-04"},{"lineNumber":353,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":354,"author":{"gitId":"adammangzijun"},"content":"1. User \u003cu\u003elists all patients (UC03)\u003c/u\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":355,"author":{"gitId":"adammangzijun"},"content":"2. User provides the required input: `patient ID`, `detail field`, and `updated patient details`.","lastModifiedDate":"2023-10-04"},{"lineNumber":356,"author":{"gitId":"adammangzijun"},"content":"3. MedBook updates the patient entry with new detail.","lastModifiedDate":"2023-10-04"},{"lineNumber":357,"author":{"gitId":"adammangzijun"},"content":"4. MedBook shows successful edit details.","lastModifiedDate":"2023-10-04"},{"lineNumber":358,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":359,"author":{"gitId":"adammangzijun"},"content":"   Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":360,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":361,"author":{"gitId":"adammangzijun"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":362,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":363,"author":{"gitId":"adammangzijun"},"content":"* 2a. User gives an invalid input in any of the given field.","lastModifiedDate":"2023-10-04"},{"lineNumber":364,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":365,"author":{"gitId":"adammangzijun"},"content":"    * 2a1. MedBook shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":366,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":367,"author":{"gitId":"adammangzijun"},"content":"      Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":368,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":369,"author":{"gitId":"Darren159"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":370,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":371,"author":{"gitId":"Darren159"},"content":"**Use case: UC05 - Locating a specific patient**","lastModifiedDate":"2023-10-04"},{"lineNumber":372,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":373,"author":{"gitId":"Darren159"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"Darren159"},"content":"**Use case: UC06 - Delete a patient**","lastModifiedDate":"2023-10-04"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"Darren159"},"content":"1. User \u003cu\u003elists all patients (UC03)\u003c/u\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":380,"author":{"gitId":"Darren159"},"content":"2. User requests to delete a specific patient in the list","lastModifiedDate":"2023-10-04"},{"lineNumber":381,"author":{"gitId":"Darren159"},"content":"3. MedBook deletes the patient","lastModifiedDate":"2023-10-04"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"ryanongwx"},"content":"* 2a. The given id is invalid.","lastModifiedDate":"2023-10-05"},{"lineNumber":388,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":389,"author":{"gitId":"Darren159"},"content":"    * 2a1. MedBook shows an error message.~~","lastModifiedDate":"2023-10-04"},{"lineNumber":390,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":391,"author":{"gitId":"Darren159"},"content":"      Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":392,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":393,"author":{"gitId":"Darren159"},"content":"**Use case: UC07 - Pin a patient**","lastModifiedDate":"2023-10-04"},{"lineNumber":394,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":395,"author":{"gitId":"Darren159"},"content":"**MSS**","lastModifiedDate":"2023-10-04"},{"lineNumber":396,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":397,"author":{"gitId":"Darren159"},"content":"1.  User \u003cu\u003elists all patients (UC03)\u003c/u\u003e","lastModifiedDate":"2023-10-04"},{"lineNumber":398,"author":{"gitId":"Darren159"},"content":"2.  User requests to pin a specific patient in the list","lastModifiedDate":"2023-10-04"},{"lineNumber":399,"author":{"gitId":"Darren159"},"content":"3.  MedBook pins the patient","lastModifiedDate":"2023-10-04"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"       Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"Darren159"},"content":"**Extensions**","lastModifiedDate":"2023-10-04"},{"lineNumber":404,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":405,"author":{"gitId":"Darren159"},"content":"* 2a. The given id is invalid.","lastModifiedDate":"2023-10-04"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"Darren159"},"content":"    * 2a1. MedBook shows an error message.","lastModifiedDate":"2023-10-04"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"Darren159"},"content":"      Use case ends.","lastModifiedDate":"2023-10-04"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"ryanongwx"},"content":"## Use Case: UC08 - Searching for Patients","lastModifiedDate":"2023-10-05"},{"lineNumber":412,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":413,"author":{"gitId":"ryanongwx"},"content":"**Main Success Scenario (MSS)**","lastModifiedDate":"2023-10-05"},{"lineNumber":414,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":415,"author":{"gitId":"ryanongwx"},"content":"1. User initiates a search for patients based on specific keywords using the `search` command.","lastModifiedDate":"2023-10-05"},{"lineNumber":416,"author":{"gitId":"ryanongwx"},"content":"2. MedBook performs a case-insensitive search of patient names and details.","lastModifiedDate":"2023-10-05"},{"lineNumber":417,"author":{"gitId":"ryanongwx"},"content":"3. MedBook returns a list of patients matching at least one keyword.","lastModifiedDate":"2023-10-05"},{"lineNumber":418,"author":{"gitId":"ryanongwx"},"content":"4. The user views the list of matching patients.","lastModifiedDate":"2023-10-05"},{"lineNumber":419,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":420,"author":{"gitId":"ryanongwx"},"content":"**Extensions**","lastModifiedDate":"2023-10-05"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":422,"author":{"gitId":"ryanongwx"},"content":"* 3a. No matches found.","lastModifiedDate":"2023-10-05"},{"lineNumber":423,"author":{"gitId":"ryanongwx"},"content":"    * 3a1. MedBook displays a message: \"No matches found. Try using a different keyword.\"","lastModifiedDate":"2023-10-05"},{"lineNumber":424,"author":{"gitId":"ryanongwx"},"content":"    * Use case ends.","lastModifiedDate":"2023-10-05"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":427,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"ryanongwx"},"content":"4.  The system should be backward compatible with data produced by earlier versions of the system.","lastModifiedDate":"2023-10-05"},{"lineNumber":435,"author":{"gitId":"ryanongwx"},"content":"5.  The system should be usable by a novice who has never used an address book.","lastModifiedDate":"2023-10-05"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":451,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":452,"author":{"gitId":"-"},"content":"**Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2023-09-12"},{"lineNumber":453,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"Darren159":49,"Clin-lyx":2,"-":384,"adammangzijun":46,"ryanongwx":16}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"User Guide\"","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"# MedBook User Guide","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"Medbook is a **desktop app for managing patient details and medical records, optimized for use via a  Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, MedBook can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c!-- * Table of Contents --\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cpage-nav-print /\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"1. Download the latest `medbook.jar` from [here](https://github.com/AY2324S1-CS2103T-T12-4/tp/releases).","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your MedBook.","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar medbook.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-10-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * `list` : Lists all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"   * `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the MedBook.","lastModifiedDate":"2023-10-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * `delete 3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2023-01-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * `clear` : Deletes all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"**Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"* If you are using a PDF version of this document, be careful when copying and pasting commands that span multiple lines as space characters surrounding line-breaks may be omitted when copied over to the application.","lastModifiedDate":"2023-06-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"### Adding a patient: `addpatient`","lastModifiedDate":"2023-10-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"Adds a patient\u0027s contact and medical details.","lastModifiedDate":"2023-10-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"hjoneweek"},"content":"Command Format: addpatient [name/email/phone/gender/age/blood type/allergies]","lastModifiedDate":"2023-10-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"hjoneweek"},"content":"Examples:","lastModifiedDate":"2023-10-04"},{"lineNumber":85,"author":{"gitId":"hjoneweek"},"content":"* `addpatient John Doe/johndoe@gmail.com/12345678/M/26/AB+/Penicillin`","lastModifiedDate":"2023-10-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"Expected Outputs on Success","lastModifiedDate":"2023-10-04"},{"lineNumber":88,"author":{"gitId":"hjoneweek"},"content":"* **GUI:** Contact details added to the respective patient\u0027s record.","lastModifiedDate":"2023-10-04"},{"lineNumber":89,"author":{"gitId":"hjoneweek"},"content":"* **Message:** Patient details added successfully.","lastModifiedDate":"2023-10-04"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":91,"author":{"gitId":"hjoneweek"},"content":"Expected Output on Failure","lastModifiedDate":"2023-10-04"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"* **Message:** Failed to add details. Please check the command format and try again.","lastModifiedDate":"2023-10-04"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"### Adding Medical Records : \u0027addrecord\u0027","lastModifiedDate":"2023-10-04"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"Adds a new patient\u0027s medical records to the app.","lastModifiedDate":"2023-10-04"},{"lineNumber":97,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"Command Format: addrecord [id/date/condition(s)]","lastModifiedDate":"2023-10-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"hjoneweek"},"content":"* `addrecord 3/18-09-2023 1800/Fever`","lastModifiedDate":"2023-10-04"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":103,"author":{"gitId":"hjoneweek"},"content":"Expected outputs on success:","lastModifiedDate":"2023-10-04"},{"lineNumber":104,"author":{"gitId":"hjoneweek"},"content":"* **GUI:** A new entry appearing in the patient list.","lastModifiedDate":"2023-10-04"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"* **Messages:** \"Patient record added successfully.\"","lastModifiedDate":"2023-10-04"},{"lineNumber":106,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"Expected outputs on failure:","lastModifiedDate":"2023-10-04"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"* **Messages:** \"Failed to add patient record. Please check the command format and try again.\"","lastModifiedDate":"2023-10-04"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"* **Messages:** “Failed to add patient record. The patient does not exist”","lastModifiedDate":"2023-10-04"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"### Listing all persons : `list`","lastModifiedDate":"2023-10-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"Clin-lyx"},"content":"Shows a list of all patients in the Medbook.","lastModifiedDate":"2023-10-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2023-10-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"Clin-lyx"},"content":"### View patient detail","lastModifiedDate":"2023-10-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"Clin-lyx"},"content":"Shows the detailed information of the patient by clicking.","lastModifiedDate":"2023-10-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"adammangzijun"},"content":"### Editing detail of a patient : `editdetail`","lastModifiedDate":"2023-10-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"Edits an existing person in MedBook.","lastModifiedDate":"2023-10-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"Format: `editdetail [patient ID/detail field/updated patient details]`","lastModifiedDate":"2023-10-04"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"* Edits the person at the specified `patient ID`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2023-10-04"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"* The `detail field` must be provided.","lastModifiedDate":"2023-10-04"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"* Accepted `detail field` : **name**, **email**, **phone**, **gender**, **age**, **blood**, **allergy**.","lastModifiedDate":"2023-10-04"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"* Existing values in the `detail field` will be updated to the `updated patient details` input.","lastModifiedDate":"2023-10-04"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"* **Name**: Text (up to 256 characters)","lastModifiedDate":"2023-10-04"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"* **Email**: Valid email format","lastModifiedDate":"2023-10-04"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"* **Phone**: Number (up to 15 digits)","lastModifiedDate":"2023-10-04"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"* **Gender**: M/F","lastModifiedDate":"2023-10-04"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"* **Age**: Number (0-120)","lastModifiedDate":"2023-10-04"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"* **Blood Type**: One of [A+, A-, B+, B-, AB+, AB-, O+, O-]","lastModifiedDate":"2023-10-04"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"* **Allergies**: Text (up to 512 characters)","lastModifiedDate":"2023-10-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"*  `editdetail 1/email/johndoe_updated@gmail.com` Edits the email address of the 1st person to be `johndoe_updated@gmail.com`.","lastModifiedDate":"2023-10-04"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"*  `editdetail 2/phone/92345678` Edits the name of the 2nd person to be `92345678`.","lastModifiedDate":"2023-10-04"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"*  `editdetail 3/allergy/aspirin` Edits the allergy of the 3rd person to be `aspirin`.","lastModifiedDate":"2023-10-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"ryanongwx"},"content":"### Locating persons by keywords: `search`","lastModifiedDate":"2023-10-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"ryanongwx"},"content":"In MedBook, the Search functionality streamlines the process of finding patients based on specific keywords. Simply enter the keyword, and MedBook will display a list of patients matching your search criteria. If no matches are found, the system will provide feedback, allowing you to refine your search for better results.","lastModifiedDate":"2023-10-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"ryanongwx"},"content":"Format: `search [Keyword]`","lastModifiedDate":"2023-10-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"ryanongwx"},"content":"* The search is case-insensitive. e.g `Penicillin` will match `penicillin`","lastModifiedDate":"2023-10-05"},{"lineNumber":153,"author":{"gitId":"ryanongwx"},"content":"* A patient\u0027s name and details will be searched.","lastModifiedDate":"2023-10-05"},{"lineNumber":154,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"ryanongwx"},"content":"  e.g. `arm fracture` will return `burnt arm`, `leg fracture`","lastModifiedDate":"2023-10-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"ryanongwx"},"content":"* `search Penicillin` returns `Penicillin`","lastModifiedDate":"2023-10-05"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"Darren159"},"content":"### Deleting a patient : `delete`","lastModifiedDate":"2023-10-03"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"Darren159"},"content":"Deletes the specified patient from the medbook.","lastModifiedDate":"2023-10-03"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"Darren159"},"content":"Format: `delete [patientId]`","lastModifiedDate":"2023-10-03"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"Darren159"},"content":"* Deletes the patient at the specified `patientId`.","lastModifiedDate":"2023-10-03"},{"lineNumber":167,"author":{"gitId":"Darren159"},"content":"* The patientId refers to the unique patient id shown in the displayed patient list.","lastModifiedDate":"2023-10-03"},{"lineNumber":168,"author":{"gitId":"Darren159"},"content":"* The id **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2023-10-03"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"Darren159"},"content":"* `delete 2` deletes the patient with the id of `2` in the medbook.","lastModifiedDate":"2023-10-03"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":173,"author":{"gitId":"Darren159"},"content":"### Pinning a patient : `pin`","lastModifiedDate":"2023-10-03"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":175,"author":{"gitId":"Darren159"},"content":"Pins the specified patient to the top of the patient list.","lastModifiedDate":"2023-10-03"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":177,"author":{"gitId":"Darren159"},"content":"Format: `pin [patientId]`","lastModifiedDate":"2023-10-03"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":179,"author":{"gitId":"Darren159"},"content":"* Pins the patient at the specified `patientId` to the top of the patient list.","lastModifiedDate":"2023-10-03"},{"lineNumber":180,"author":{"gitId":"Darren159"},"content":"* The pinned patient will always be visible on screen at the top of the patient list.","lastModifiedDate":"2023-10-03"},{"lineNumber":181,"author":{"gitId":"Darren159"},"content":"* The patientId refers to the unique patient id shown in the displayed patient list.","lastModifiedDate":"2023-10-03"},{"lineNumber":182,"author":{"gitId":"Darren159"},"content":"* The id **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2023-10-03"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-10-03"},{"lineNumber":185,"author":{"gitId":"Darren159"},"content":"* `pin 2` pin the patient with the id of `2` in the medbook to the top of the patient list.","lastModifiedDate":"2023-10-03"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"Darren159"},"content":"Clears all entries from the medbook.","lastModifiedDate":"2023-10-03"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"Darren159"},"content":"MedBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2023-10-03"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":205,"author":{"gitId":"Darren159"},"content":"MedBook data are saved automatically as a JSON file `[JAR file location]/data/medbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2023-10-03"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"warning\" seamless\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"**Caution:**","lastModifiedDate":"2023-09-12"},{"lineNumber":210,"author":{"gitId":"Darren159"},"content":"If your changes to the data file makes its format invalid, MedBook will discard all data and start with an empty data file at the next run.  Hence, it is recommended to take a backup of the file before editing it.","lastModifiedDate":"2023-10-03"},{"lineNumber":211,"author":{"gitId":"-"},"content":"\u003c/box\u003e","lastModifiedDate":"2023-09-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":213,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"Darren159"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous MedBook home folder.","lastModifiedDate":"2023-10-03"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Known issues","lastModifiedDate":"2023-09-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"1. **When using multiple screens**, if you move the application to a secondary screen, and later switch to using only the primary screen, the GUI will open off-screen. The remedy is to delete the `preferences.json` file created by the application before running the application again.","lastModifiedDate":"2023-09-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-09-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"adammangzijun"},"content":"| Action     | Format, Examples|","lastModifiedDate":"2023-10-04"},{"lineNumber":235,"author":{"gitId":"adammangzijun"},"content":"|------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-10-04"},{"lineNumber":236,"author":{"gitId":"adammangzijun"},"content":"| **Add**    | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`|","lastModifiedDate":"2023-10-04"},{"lineNumber":237,"author":{"gitId":"adammangzijun"},"content":"| **List**   | `list`|","lastModifiedDate":"2023-10-04"},{"lineNumber":238,"author":{"gitId":"adammangzijun"},"content":"| **Edit**   | `editdetail [patient ID/detail field/updated patient details]`\u003cbr\u003e e.g.,`editdetail 1/email/johndoe_updated@gmail.com`|","lastModifiedDate":"2023-10-04"},{"lineNumber":239,"author":{"gitId":"adammangzijun"},"content":"| **Find**   | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`|","lastModifiedDate":"2023-10-04"},{"lineNumber":240,"author":{"gitId":"adammangzijun"},"content":"| **Delete** | `delete [patientId]`\u003cbr\u003e e.g., `delete 3`|","lastModifiedDate":"2023-10-04"},{"lineNumber":241,"author":{"gitId":"adammangzijun"},"content":"| **Pin**    | `pin [patientId]`\u003cbr\u003e e.g., `pin 2`|","lastModifiedDate":"2023-10-04"},{"lineNumber":242,"author":{"gitId":"adammangzijun"},"content":"| **Clear**  | `clear`|","lastModifiedDate":"2023-10-04"},{"lineNumber":243,"author":{"gitId":"adammangzijun"},"content":"| **exit**   | `exit`|","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"Darren159":26,"hjoneweek":27,"Clin-lyx":3,"-":153,"adammangzijun":27,"ryanongwx":7}},{"path":"docs/team/adammangzijun.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"layout: default.md","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"title: \"Adam\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"### Project: MedBook","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"Overview: To be added soon","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"Contributions: To be added soon","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"* **New Feature 1**","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"* **New Feature 2**","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"* **Project management**","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"* **Documentation**","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"* **Community**","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"adammangzijun":20}},{"path":"docs/team/clin-lyx.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  layout: default.md","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"Clin-lyx"},"content":"  title: \"Lin Yuxiang\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"Clin-lyx"},"content":"### Project Medbook","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"Clin-lyx"},"content":"MedBook - Medbook streamlines patient management for healthcare professionals. It simplifies the process of accessing patients\u0027 contact information and medical records, making it easier for healthcare providers to efficiently coordinate care.","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"Clin-lyx"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in the future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"Clin-lyx"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003dclin-lyx\u0026breakdown\u003dfalse\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2023-09-22\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos)","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2023-10-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2023-10-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2023-10-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2023-10-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2023-10-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2023-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2023-10-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2023-10-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2023-10-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2023-10-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2023-10-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2023-10-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2023-10-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2023-10-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2023-10-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2023-10-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2023-10-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"Clin-lyx":5,"-":41}},{"path":"docs/team/darren159.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"  layout: default.md","lastModifiedDate":"2023-10-03"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"  title: \"Darren\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-03"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"---","lastModifiedDate":"2023-10-03"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"### Project: MedBook","lastModifiedDate":"2023-10-03"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-10-03"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-10-03"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"* **New Feature**:","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2324s1.github.io/tp-dashboard/?search\u003ddarren159\u0026breakdown\u003dfalse\u0026sort\u003dgroupTitle%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2023-09-22\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos)","lastModifiedDate":"2023-10-03"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"* **Project management**:","lastModifiedDate":"2023-10-03"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-10-03"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"* **Documentation**:","lastModifiedDate":"2023-10-03"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"* **Community**:","lastModifiedDate":"2023-10-03"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-03"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"* **Tools**:","lastModifiedDate":"2023-10-03"}],"authorContributionMap":{"Darren159":24}},{"path":"docs/team/hjoneweek.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"layout: default.md","lastModifiedDate":"2023-10-04"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"title: \"Hanjoo\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-04"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"---","lastModifiedDate":"2023-10-04"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"### Project: MedBook","lastModifiedDate":"2023-10-04"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"Overview: To be added soon","lastModifiedDate":"2023-10-04"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"Contributions: To be added soon","lastModifiedDate":"2023-10-04"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"* **New Feature 1**","lastModifiedDate":"2023-10-04"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"* **New Feature 2**","lastModifiedDate":"2023-10-04"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"* **Project management**","lastModifiedDate":"2023-10-04"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"* **Documentation**","lastModifiedDate":"2023-10-04"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"* **Community**","lastModifiedDate":"2023-10-04"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-04"}],"authorContributionMap":{"hjoneweek":22}},{"path":"docs/team/ryanongwx.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":2,"author":{"gitId":"ryanongwx"},"content":"  layout: default.md","lastModifiedDate":"2023-10-05"},{"lineNumber":3,"author":{"gitId":"ryanongwx"},"content":"  title: \"Ryan\u0027s Project Portfolio Page\"","lastModifiedDate":"2023-10-05"},{"lineNumber":4,"author":{"gitId":"ryanongwx"},"content":"---","lastModifiedDate":"2023-10-05"},{"lineNumber":5,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":6,"author":{"gitId":"ryanongwx"},"content":"### Project: MedBook","lastModifiedDate":"2023-10-05"},{"lineNumber":7,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"- **New Feature**:","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"- **Code contributed**:","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"- **Project management**:","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"- **Documentation**:","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"- **Community**:","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"ryanongwx"},"content":"","lastModifiedDate":"2023-10-05"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"- **Tools**:","lastModifiedDate":"2023-10-15"}],"authorContributionMap":{"Darren159":7,"ryanongwx":13}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    /** Returns an unmodifiable view of the pinned list of persons */","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    ObservableList\u003cPerson\u003e getPinnedPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Darren159":3,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_FORMAT \u003d \"Could not save data due to the following error: %s\";","lastModifiedDate":"2023-06-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_PERMISSION_ERROR_FORMAT \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \"Could not save data to file %s due to insufficient permissions to write to the file or the folder.\";","lastModifiedDate":"2023-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        } catch (AccessDeniedException e) {","lastModifiedDate":"2023-06-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_PERMISSION_ERROR_FORMAT, e.getMessage()), e);","lastModifiedDate":"2023-06-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new CommandException(String.format(FILE_OPS_ERROR_FORMAT, ioe.getMessage()), ioe);","lastModifiedDate":"2023-06-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cPerson\u003e getPinnedPersonList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"        return model.getPinnedPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Darren159":5,"-":88}},{"path":"src/main/java/seedu/address/logic/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2023-07-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2023-07-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-07-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-07-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.Prefix;","lastModifiedDate":"2023-07-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_FIELDS \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                \"Multiple values specified for the following single-valued field(s): \";","lastModifiedDate":"2023-07-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-07-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an error message indicating the duplicate prefixes.","lastModifiedDate":"2023-07-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-07-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getErrorMessageForDuplicatePrefixes(Prefix... duplicatePrefixes) {","lastModifiedDate":"2023-07-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assert duplicatePrefixes.length \u003e 0;","lastModifiedDate":"2023-07-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        Set\u003cString\u003e duplicateFields \u003d","lastModifiedDate":"2023-07-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                Stream.of(duplicatePrefixes).map(Prefix::toString).collect(Collectors.toSet());","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return MESSAGE_DUPLICATE_FIELDS + String.join(\" \", duplicateFields);","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-02-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Formats the {@code person} for display to the user.","lastModifiedDate":"2019-02-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-02-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static String format(Person person) {","lastModifiedDate":"2019-02-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2019-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        builder.append(person.getName())","lastModifiedDate":"2019-02-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2019-02-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .append(person.getEmail())","lastModifiedDate":"2019-02-23"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"                .append(person.getPhone())","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; Gender: \")","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"                .append(person.getGender())","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; Age: \")","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"                .append(person.getAge())","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; BloodType: \")","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"                .append(person.getBloodType())","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"                .append(\"; Allergies: \");","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"        person.getAllergies().forEach(builder::append);","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":45,"adammangzijun":10}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    public static final String COMMAND_WORD \u003d \"addpatient\";","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the address book. \"","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_GENDER + \"GENDER \"","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_AGE + \"AGE \"","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_BLOODTYPE + \"BLOODTYPE \"","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\"","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"            + PREFIX_GENDER + \"M \"","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_AGE + \"18 \"","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_BLOODTYPE + \"A+ \"","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"            + PREFIX_ALLERGIES + \"Penicillin \";","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, Messages.format(toAdd)));","lastModifiedDate":"2019-02-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-07-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!(other instanceof AddCommand)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-07-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-07-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        AddCommand otherAddCommand \u003d (AddCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return toAdd.equals(otherAddCommand.toAdd);","lastModifiedDate":"2023-07-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .add(\"toAdd\", toAdd)","lastModifiedDate":"2019-02-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hjoneweek":11,"Darren159":1,"-":73,"adammangzijun":5}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2023-07-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"    public static final String COMMAND_WORD \u003d \"editpatient\";","lastModifiedDate":"2023-10-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_GENDER + \"GENDER] \"","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_AGE + \"AGE] \"","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_BLOODTYPE + \"BLOODTYPE \"","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"            + \"[\" + PREFIX_ALLERGIES + \"ALLERGY]...\\n\"","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS,","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"                Messages.format(editedPerson)));","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"        Age updatedAge \u003d editPersonDescriptor.getAge().orElse(personToEdit.getAge());","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"        BloodType updatedBloodType \u003d editPersonDescriptor.getBloodType().orElse(personToEdit.getBloodType());","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"        Set\u003cAllergy\u003e updatedAllergies \u003d editPersonDescriptor.getAllergies().orElse(personToEdit.getAllergies());","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"        return new Person(updatedName, updatedEmail, updatedPhone, updatedGender,","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"Darren159"},"content":"                updatedAge, updatedBloodType, updatedAllergies, personToEdit.isPinned());","lastModifiedDate":"2023-10-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand otherEditCommand \u003d (EditCommand) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(otherEditCommand.index)","lastModifiedDate":"2023-07-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(otherEditCommand.editPersonDescriptor);","lastModifiedDate":"2023-07-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .add(\"index\", index)","lastModifiedDate":"2019-02-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                .add(\"editPersonDescriptor\", editPersonDescriptor)","lastModifiedDate":"2019-02-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":149,"author":{"gitId":"adammangzijun"},"content":"        private Phone phone;","lastModifiedDate":"2023-10-14"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"        private Gender gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":151,"author":{"gitId":"adammangzijun"},"content":"        private Age age;","lastModifiedDate":"2023-10-14"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"        private BloodType bloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":153,"author":{"gitId":"Darren159"},"content":"        private Set\u003cAllergy\u003e allergies;","lastModifiedDate":"2023-10-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":158,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"         * A defensive copy of {@code allergies} is used internally.","lastModifiedDate":"2023-10-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2023-10-14"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"            setGender(toCopy.gender);","lastModifiedDate":"2023-10-14"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"            setAge(toCopy.age);","lastModifiedDate":"2023-10-14"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"            setBloodType(toCopy.bloodType);","lastModifiedDate":"2023-10-14"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"            setAllergies(toCopy.allergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"            return CollectionUtil.isAnyNonNull(name, email, phone, gender, age, bloodType, allergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2023-10-14"},{"lineNumber":199,"author":{"gitId":"adammangzijun"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2023-10-14"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"adammangzijun"},"content":"        public void setGender(Gender gender) {","lastModifiedDate":"2023-10-14"},{"lineNumber":203,"author":{"gitId":"adammangzijun"},"content":"            this.gender \u003d gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":204,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":205,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":206,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cGender\u003e getGender() {","lastModifiedDate":"2023-10-14"},{"lineNumber":207,"author":{"gitId":"adammangzijun"},"content":"            return Optional.ofNullable(gender);","lastModifiedDate":"2023-10-14"},{"lineNumber":208,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":209,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":210,"author":{"gitId":"adammangzijun"},"content":"        public void setAge(Age age) {","lastModifiedDate":"2023-10-14"},{"lineNumber":211,"author":{"gitId":"adammangzijun"},"content":"            this.age \u003d age;","lastModifiedDate":"2023-10-14"},{"lineNumber":212,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":213,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":214,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cAge\u003e getAge() {","lastModifiedDate":"2023-10-14"},{"lineNumber":215,"author":{"gitId":"adammangzijun"},"content":"            return Optional.ofNullable(age);","lastModifiedDate":"2023-10-14"},{"lineNumber":216,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":217,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":218,"author":{"gitId":"adammangzijun"},"content":"        public void setBloodType(BloodType bloodType) {","lastModifiedDate":"2023-10-14"},{"lineNumber":219,"author":{"gitId":"adammangzijun"},"content":"            this.bloodType \u003d bloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cBloodType\u003e getBloodType() {","lastModifiedDate":"2023-10-14"},{"lineNumber":223,"author":{"gitId":"adammangzijun"},"content":"            return Optional.ofNullable(bloodType);","lastModifiedDate":"2023-10-14"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":227,"author":{"gitId":"adammangzijun"},"content":"         * Sets {@code allergies} to this object\u0027s {@code tags}.","lastModifiedDate":"2023-10-14"},{"lineNumber":228,"author":{"gitId":"adammangzijun"},"content":"         * A defensive copy of {@code allergies} is used internally.","lastModifiedDate":"2023-10-14"},{"lineNumber":229,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":230,"author":{"gitId":"adammangzijun"},"content":"        public void setAllergies(Set\u003cAllergy\u003e allergies) {","lastModifiedDate":"2023-10-14"},{"lineNumber":231,"author":{"gitId":"adammangzijun"},"content":"            this.allergies \u003d (allergies !\u003d null) ? new HashSet\u003c\u003e(allergies) : null;","lastModifiedDate":"2023-10-14"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":235,"author":{"gitId":"adammangzijun"},"content":"         * Returns an unmodifiable Allergy set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2023-10-14"},{"lineNumber":236,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":237,"author":{"gitId":"adammangzijun"},"content":"         * Returns {@code Optional#empty()} if {@code allergies} is null.","lastModifiedDate":"2023-10-14"},{"lineNumber":238,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":239,"author":{"gitId":"adammangzijun"},"content":"        public Optional\u003cSet\u003cAllergy\u003e\u003e getAllergies() {","lastModifiedDate":"2023-10-14"},{"lineNumber":240,"author":{"gitId":"adammangzijun"},"content":"            return (allergies !\u003d null) ? Optional.of(Collections.unmodifiableSet(allergies)) : Optional.empty();","lastModifiedDate":"2023-10-14"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":250,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            EditPersonDescriptor otherEditPersonDescriptor \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            return Objects.equals(name, otherEditPersonDescriptor.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                    \u0026\u0026 Objects.equals(email, otherEditPersonDescriptor.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":257,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(phone, otherEditPersonDescriptor.phone)","lastModifiedDate":"2023-10-14"},{"lineNumber":258,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(gender, otherEditPersonDescriptor.gender)","lastModifiedDate":"2023-10-14"},{"lineNumber":259,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(age, otherEditPersonDescriptor.age)","lastModifiedDate":"2023-10-14"},{"lineNumber":260,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(bloodType, otherEditPersonDescriptor.bloodType)","lastModifiedDate":"2023-10-14"},{"lineNumber":261,"author":{"gitId":"adammangzijun"},"content":"                    \u0026\u0026 Objects.equals(allergies, otherEditPersonDescriptor.allergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2019-02-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        public String toString() {","lastModifiedDate":"2019-02-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"                    .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"                    .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":269,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"phone\", phone)","lastModifiedDate":"2023-10-14"},{"lineNumber":270,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"gender\", gender)","lastModifiedDate":"2023-10-14"},{"lineNumber":271,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"age\", age)","lastModifiedDate":"2023-10-14"},{"lineNumber":272,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"bloodType\", bloodType)","lastModifiedDate":"2023-10-14"},{"lineNumber":273,"author":{"gitId":"adammangzijun"},"content":"                    .add(\"allergies\", allergies)","lastModifiedDate":"2023-10-14"},{"lineNumber":274,"author":{"gitId":"-"},"content":"                    .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-02-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"Darren159":3,"-":201,"adammangzijun":73}},{"path":"src/main/java/seedu/address/logic/commands/PinCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * Pins the person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"public class PinCommand extends Command {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    public static final String COMMAND_WORD \u003d \"pin\";","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"            + \": Pins the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_PIN_PERSON_SUCCESS \u003d \"Pinned Person: %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    public PinCommand(Index targetIndex) {","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        Person personToPin \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        Person pinnedPerson \u003d new Person(personToPin.getName(), personToPin.getEmail(), personToPin.getPhone(),","lastModifiedDate":"2023-10-15"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"                personToPin.getGender(), personToPin.getAge(), personToPin.getBloodType(), personToPin.getAllergies(),","lastModifiedDate":"2023-10-15"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"                true);","lastModifiedDate":"2023-10-15"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        model.setPerson(personToPin, pinnedPerson);","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(String.format(MESSAGE_PIN_PERSON_SUCCESS, Messages.format(personToPin)));","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof PinCommand)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        PinCommand otherPinCommand \u003d (PinCommand) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        return targetIndex.equals(otherPinCommand.targetIndex);","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"                .toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":74}},{"path":"src/main/java/seedu/address/logic/commands/UnpinCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import java.util.List;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * Unpins the person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"public class UnpinCommand extends Command {","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    public static final String COMMAND_WORD \u003d \"unpin\";","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"            + \": Unpins the person identified by the index number used in the displayed pinned list.\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public static final String MESSAGE_UNPIN_PERSON_SUCCESS \u003d \"Unpinned Person: %1$s\";","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    public UnpinCommand(Index targetIndex) {","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        List\u003cPerson\u003e lastShownPinnedList \u003d model.getPinnedPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownPinnedList.size()) {","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"        Person personToUnpin \u003d lastShownPinnedList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"        Person unpinnedPerson \u003d new Person(personToUnpin.getName(), personToUnpin.getEmail(), personToUnpin.getPhone(),","lastModifiedDate":"2023-10-15"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"                personToUnpin.getGender(), personToUnpin.getAge(), personToUnpin.getBloodType(),","lastModifiedDate":"2023-10-15"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"                personToUnpin.getAllergies(), false);","lastModifiedDate":"2023-10-15"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        model.setPerson(personToUnpin, unpinnedPerson);","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        return new CommandResult(String.format(MESSAGE_UNPIN_PERSON_SUCCESS, Messages.format(personToUnpin)));","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-13"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-13"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"            return true;","lastModifiedDate":"2023-10-13"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-13"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        if (!(other instanceof UnpinCommand)) {","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"            return false;","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        UnpinCommand otherUnpinCommand \u003d (UnpinCommand) other;","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        return targetIndex.equals(otherUnpinCommand.targetIndex);","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"    public String toString() {","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"                .add(\"targetIndex\", targetIndex)","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"                .toString();","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":74}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_GENDER, PREFIX_AGE,","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"                        PREFIX_BLOODTYPE, PREFIX_ALLERGIES);","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_GENDER,","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"                PREFIX_EMAIL, PREFIX_AGE, PREFIX_BLOODTYPE, PREFIX_ALLERGIES)","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_GENDER,","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"                PREFIX_EMAIL, PREFIX_AGE, PREFIX_BLOODTYPE, PREFIX_ALLERGIES);","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"        Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        BloodType bloodType \u003d ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE).get());","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        Set\u003cAllergy\u003e allergies \u003d ParserUtil.parseAllergies(argMultimap.getAllValues(PREFIX_ALLERGIES));","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        Person person \u003d new Person(name, email, phone, gender, age, bloodType, allergies, false);","lastModifiedDate":"2023-10-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"hjoneweek":15,"Darren159":1,"-":50,"adammangzijun":4}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2023-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Note to developers: Change the log level in config.json to enable lower level (i.e., FINE, FINER and lower)","lastModifiedDate":"2023-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // log messages such as the one below.","lastModifiedDate":"2023-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Lower level log messages are used sparingly to minimize noise in the code.","lastModifiedDate":"2023-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logger.fine(\"Command word: \" + commandWord + \"; Arguments: \" + arguments);","lastModifiedDate":"2023-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"        case PinCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-13"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"            return new PinCommandParser().parse(arguments);","lastModifiedDate":"2023-10-13"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"        case UnpinCommand.COMMAND_WORD:","lastModifiedDate":"2023-10-13"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"            return new UnpinCommandParser().parse(arguments);","lastModifiedDate":"2023-10-13"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.finer(\"This user input caused a ParseException: \" + userInput);","lastModifiedDate":"2023-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"Darren159":8,"-":86}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_BLOODTYPE \u003d new Prefix(\"bt/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    public static final Prefix PREFIX_ALLERGIES \u003d new Prefix(\"al/\");","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hjoneweek":5,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"                        PREFIX_GENDER, PREFIX_AGE, PREFIX_BLOODTYPE, PREFIX_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        argMultimap.verifyNoDuplicatePrefixesFor(PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"                PREFIX_GENDER, PREFIX_AGE, PREFIX_BLOODTYPE);","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));","lastModifiedDate":"2023-10-15"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        if (argMultimap.getValue(PREFIX_AGE).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"            editPersonDescriptor.setAge(ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get()));","lastModifiedDate":"2023-10-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"        if (argMultimap.getValue(PREFIX_BLOODTYPE).isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"            editPersonDescriptor.setBloodType(ParserUtil.parseBloodType(argMultimap.getValue(PREFIX_BLOODTYPE).get()));","lastModifiedDate":"2023-10-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"        parseAllergiesForEdit(argMultimap.getAllValues(PREFIX_ALLERGIES)).ifPresent(editPersonDescriptor::setAllergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"     * Parses {@code Collection\u003cString\u003e allergies} into a {@code Set\u003cAllergy\u003e} if {@code allergies} is non-empty.","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"     * If {@code allergies} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"     * {@code Set\u003cAllergy\u003e} containing zero allergies.","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"    private Optional\u003cSet\u003cAllergy\u003e\u003e parseAllergiesForEdit(Collection\u003cString\u003e allergies) throws ParseException {","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"        assert allergies !\u003d null;","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        if (allergies.isEmpty()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"        Collection\u003cString\u003e allergySet \u003d allergies.size() \u003d\u003d 1","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"                \u0026\u0026 allergies.contains(\"\") ? Collections.emptySet() : allergies;","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"        return Optional.of(ParserUtil.parseAllergies(allergySet));","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"-":67,"adammangzijun":29}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String gender} into an {@code Gender}.","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code gender} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"hjoneweek"},"content":"    public static Gender parseGender(String gender) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"        String trimmedGender \u003d gender.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"        if (!Gender.isValidGender(trimmedGender)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"hjoneweek"},"content":"        return new Gender(trimmedGender);","lastModifiedDate":"2023-10-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String age} into an {@code Age}.","lastModifiedDate":"2023-10-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code age} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"hjoneweek"},"content":"    public static Age parseAge(String age) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":93,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(age);","lastModifiedDate":"2023-10-12"},{"lineNumber":94,"author":{"gitId":"hjoneweek"},"content":"        Integer trimmedAge \u003d Integer.parseInt(age.trim());","lastModifiedDate":"2023-10-12"},{"lineNumber":95,"author":{"gitId":"hjoneweek"},"content":"        if (!Age.isValidAge(trimmedAge)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":96,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"hjoneweek"},"content":"        return new Age(trimmedAge);","lastModifiedDate":"2023-10-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":102,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String bloodType} into an {@code BloodType}.","lastModifiedDate":"2023-10-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":105,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code allergy} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"    public static BloodType parseBloodType(String bloodType) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(bloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"        String trimmedBloodType \u003d bloodType.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"        if (!BloodType.isValidBloodType(trimmedBloodType)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(BloodType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"        return new BloodType(trimmedBloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String allergy} into an {@code Allergy}.","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code allergy} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"hjoneweek"},"content":"    public static Allergy parseAllergy(String allergy) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(allergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"hjoneweek"},"content":"        String trimmedAllergy \u003d allergy.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"        if (!Allergy.isValidAllergy(trimmedAllergy)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"        return new Allergy(trimmedAllergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code Collection\u003cString\u003e allergies} into an {@code Set\u003cAllergy\u003e}.","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code allergy} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"hjoneweek"},"content":"    public static Set\u003cAllergy\u003e parseAllergies(Collection\u003cString\u003e allergies) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":138,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":139,"author":{"gitId":"hjoneweek"},"content":"        final Set\u003cAllergy\u003e allergiesSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":140,"author":{"gitId":"hjoneweek"},"content":"        for (String allergy : allergies) {","lastModifiedDate":"2023-10-12"},{"lineNumber":141,"author":{"gitId":"hjoneweek"},"content":"            allergiesSet.add(parseAllergy(allergy));","lastModifiedDate":"2023-10-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"hjoneweek"},"content":"        return allergiesSet;","lastModifiedDate":"2023-10-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":148,"author":{"gitId":"hjoneweek"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2023-10-12"},{"lineNumber":149,"author":{"gitId":"hjoneweek"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-10-12"},{"lineNumber":150,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":151,"author":{"gitId":"hjoneweek"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2023-10-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":153,"author":{"gitId":"hjoneweek"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2023-10-12"},{"lineNumber":154,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(email);","lastModifiedDate":"2023-10-12"},{"lineNumber":155,"author":{"gitId":"hjoneweek"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2023-10-12"},{"lineNumber":156,"author":{"gitId":"hjoneweek"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":157,"author":{"gitId":"hjoneweek"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":159,"author":{"gitId":"hjoneweek"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2023-10-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":161,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hjoneweek":56,"-":101,"adammangzijun":5}},{"path":"src/main/java/seedu/address/logic/parser/PinCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":" * Parses input arguments and creates a new PinCommand object","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"public class PinCommandParser implements Parser\u003cPinCommand\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"     * Parses the given {@code String} of arguments in the context of the PinCommand","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"     * and returns a PinCommand object for execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    public PinCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"        try {","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"            return new PinCommand(index);","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PinCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":29}},{"path":"src/main/java/seedu/address/logic/parser/UnpinCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":" * Parses input arguments and creates a new UnpinCommand object","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"public class UnpinCommandParser implements Parser\u003cUnpinCommand\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"     * Parses the given {@code String} of arguments in the context of the UnpinCommand","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"     * and returns a UnpinCommand object for execution.","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"    public UnpinCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"        try {","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"            return new UnpinCommand(index);","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"            throw new ParseException(","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnpinCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":29}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"    /** Returns an unmodifiable view of the pinned person list */","lastModifiedDate":"2023-10-13"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"    ObservableList\u003cPerson\u003e getPinnedPersonList();","lastModifiedDate":"2023-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"Darren159":3,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":131,"author":{"gitId":"Darren159"},"content":"    @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":132,"author":{"gitId":"Darren159"},"content":"    public ObservableList\u003cPerson\u003e getPinnedPersonList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"        FilteredList\u003cPerson\u003e pinnedPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2023-10-13"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"        pinnedPersons.setPredicate(person -\u003e person.isPinned());","lastModifiedDate":"2023-10-13"},{"lineNumber":135,"author":{"gitId":"Darren159"},"content":"        return pinnedPersons;","lastModifiedDate":"2023-10-13"},{"lineNumber":136,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":137,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-07-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-07-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (!(other instanceof ModelManager)) {","lastModifiedDate":"2023-07-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        ModelManager otherModelManager \u003d (ModelManager) other;","lastModifiedDate":"2023-07-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        return addressBook.equals(otherModelManager.addressBook)","lastModifiedDate":"2023-07-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(otherModelManager.userPrefs)","lastModifiedDate":"2023-07-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(otherModelManager.filteredPersons);","lastModifiedDate":"2023-07-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":156,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Darren159":9,"-":148}},{"path":"src/main/java/seedu/address/model/person/Age.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" * Represents a Patient\u0027s age in the MedBook.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAge(Integer)}","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class Age {","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"            \"Age should only be a positive integer or 0\";","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public final Integer age;","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Age}.","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"     * @param age A valid age.","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"    public Age(Integer age) {","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(age);","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidAge(age), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        this.age \u003d age;","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if a given integer is a valid age.","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidAge(Integer test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"        return test \u003e\u003d 0;","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        return String.valueOf(this.age);","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof Age)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        Age otherAge \u003d (Age) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        return this.age \u003d\u003d otherAge.age;","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        return this.age.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":59}},{"path":"src/main/java/seedu/address/model/person/Allergy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" * Represents an allergy in the address book.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidAllergy(String)}","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class Allergy {","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Allergy names should be alphanumeric\";","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"    public final String allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Allergy}.","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"     * @param allergy A valid allergy name.","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public Allergy(String allergy) {","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(allergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidAllergy(allergy), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        this.allergy \u003d allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidAllergy(String test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof Allergy)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        Allergy otherAllergy \u003d (Allergy) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        return allergy.equals(otherAllergy.allergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        return allergy.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"        return \u0027[\u0027 + allergy + \u0027]\u0027;","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":64}},{"path":"src/main/java/seedu/address/model/person/BloodType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * Represents a Patient\u0027s blood type in the MedBook.","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBloodType(String)}","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"public class BloodType {","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"            \"Blood Type should only be one of the following: A+, A-, B+, B-, AB+, AB-, O+, O-\";","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    public static final String[] POSSIBLE_BLOOD_TYPES \u003d {\"A+\", \"A-\", \"B+\", \"B-\", \"AB+\", \"AB-\", \"O+\", \"O-\"};","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    public final String bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Gender}.","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"     * @param bloodType A valid blood type.","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    public BloodType(String bloodType) {","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(bloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidBloodType(bloodType), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"        this.bloodType \u003d bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if a given string is a valid gender.","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidBloodType(String test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"        for (int i \u003d 0; i \u003c POSSIBLE_BLOOD_TYPES.length; i++) {","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"            if (POSSIBLE_BLOOD_TYPES[i].equals(test)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"                return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"            }","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"        return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        return this.bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof BloodType)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"        BloodType otherBloodType \u003d (BloodType) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        return this.bloodType \u003d\u003d otherBloodType.bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        return this.bloodType.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":66,"Darren159":1}},{"path":"src/main/java/seedu/address/model/person/Gender.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":" * Represents a Patient\u0027s gender in the MedBook.","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":"public class Gender {","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"            \"Gender should only be either M or F\";","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    public final String gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code Gender}.","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"     * @param gender A valid gender.","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    public Gender(String gender) {","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"        requireNonNull(gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"     * Returns true if a given string is a valid gender.","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    public static boolean isValidGender(String test) {","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        return test.equals(\"M\") || test.equals(\"F\");","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    public String toString() {","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        return this.gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"            return true;","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"        if (!(other instanceof Gender)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"            return false;","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        Gender otherGender \u003d (Gender) other;","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"        return this.gender.equals(otherGender.gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    @Override","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"    public int hashCode() {","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        return this.gender.hashCode();","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":62}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ToStringBuilder;","lastModifiedDate":"2019-02-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    private final Gender gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"    private final Age age;","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    private final BloodType bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"    private final Set\u003cAllergy\u003e allergies \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    private boolean isPinned;","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"    public Person(Name name, Email email, Phone phone, Gender gender, Age age,","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"                  BloodType bloodType, Set\u003cAllergy\u003e allergies, boolean isPinned) {","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"        requireAllNonNull(name, phone, email, gender, age, allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"        this.age \u003d age;","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"        this.bloodType \u003d bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"        this.allergies.addAll(allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        this.isPinned \u003d isPinned;","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"hjoneweek"},"content":"    public Gender getGender() {","lastModifiedDate":"2023-10-12"},{"lineNumber":56,"author":{"gitId":"hjoneweek"},"content":"        return gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"    public boolean isPinned() {","lastModifiedDate":"2023-10-13"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"        return isPinned;","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"    public Age getAge() {","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"        return age;","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"    public BloodType getBloodType() {","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"        return bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":70,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":71,"author":{"gitId":"hjoneweek"},"content":"    public Set\u003cAllergy\u003e getAllergies() {","lastModifiedDate":"2023-10-12"},{"lineNumber":72,"author":{"gitId":"hjoneweek"},"content":"        return Collections.unmodifiableSet(allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-07-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return name.equals(otherPerson.name)","lastModifiedDate":"2023-07-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \u0026\u0026 phone.equals(otherPerson.phone)","lastModifiedDate":"2023-07-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                \u0026\u0026 email.equals(otherPerson.email)","lastModifiedDate":"2023-07-13"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 gender.equals(otherPerson.gender)","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 age.equals(otherPerson.age)","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"                \u0026\u0026 bloodType.equals(otherPerson.bloodType)","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 allergies.equals(otherPerson.allergies)","lastModifiedDate":"2023-10-15"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"                \u0026\u0026 isPinned \u003d\u003d otherPerson.isPinned;","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"        return Objects.hash(name, email, phone, gender, age, bloodType, allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return new ToStringBuilder(this)","lastModifiedDate":"2019-02-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .add(\"name\", name)","lastModifiedDate":"2019-02-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .add(\"email\", email)","lastModifiedDate":"2019-02-23"},{"lineNumber":125,"author":{"gitId":"hjoneweek"},"content":"                .add(\"phone\", phone)","lastModifiedDate":"2023-10-12"},{"lineNumber":126,"author":{"gitId":"hjoneweek"},"content":"                .add(\"gender\", gender)","lastModifiedDate":"2023-10-12"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"                .add(\"age\", age)","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"                .add(\"bloodType\", bloodType)","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"hjoneweek"},"content":"                .add(\"allergies\", allergies)","lastModifiedDate":"2023-10-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .toString();","lastModifiedDate":"2019-02-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hjoneweek":32,"Darren159":9,"-":92}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Email(\"alexyeoh@example.com\"), new Phone(\"87438807\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"                new Gender(\"M\"), new Age(12), new BloodType(\"A+\"), getAllergySet(\"Peanuts\"), true),","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"            new Person(new Name(\"Bernice Yu\"), new Email(\"berniceyu@example.com\"), new Phone(\"99272758\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"                new Gender(\"F\"), new Age(31), new BloodType(\"B+\"), getAllergySet(\"Dust\", \"Peanuts\"), false),","lastModifiedDate":"2023-10-15"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Email(\"charlotte@example.com\"), new Phone(\"93210283\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"                new Gender(\"F\"), new Age(12), new BloodType(\"AB+\"), getAllergySet(\"Dust\"), false),","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"            new Person(new Name(\"David Li\"), new Email(\"lidavid@example.com\"), new Phone(\"91031282\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"                new Gender(\"M\"), new Age(33), new BloodType(\"O-\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"                getAllergySet(\"Pollen\"), false),","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Email(\"irfan@example.com\"), new Phone(\"92492021\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"                new Gender(\"M\"), new Age(21), new BloodType(\"B-\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"                getAllergySet(\"Fur\"), false),","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Email(\"royb@example.com\"), new Phone(\"92624417\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"                new Gender(\"M\"), new Age(24), new BloodType(\"B+\"),","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"                getAllergySet(\"Grass\"), false)","lastModifiedDate":"2023-10-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    public static Set\u003cAllergy\u003e getAllergySet(String... strings) {","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"                .map(Allergy::new)","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"Darren159":8,"-":38,"adammangzijun":14}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAllergy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hjoneweek"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-10-12"},{"lineNumber":2,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":3,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-10-12"},{"lineNumber":4,"author":{"gitId":"hjoneweek"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2023-10-12"},{"lineNumber":5,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":6,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-10-12"},{"lineNumber":7,"author":{"gitId":"hjoneweek"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":8,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":9,"author":{"gitId":"hjoneweek"},"content":"/**","lastModifiedDate":"2023-10-12"},{"lineNumber":10,"author":{"gitId":"hjoneweek"},"content":" * Jackson-friendly version of {@link Allergy}.","lastModifiedDate":"2023-10-12"},{"lineNumber":11,"author":{"gitId":"hjoneweek"},"content":" */","lastModifiedDate":"2023-10-12"},{"lineNumber":12,"author":{"gitId":"hjoneweek"},"content":"public class JsonAdaptedAllergy {","lastModifiedDate":"2023-10-12"},{"lineNumber":13,"author":{"gitId":"hjoneweek"},"content":"    private final String allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":14,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":15,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":16,"author":{"gitId":"hjoneweek"},"content":"     * Constructs a {@code JsonAdaptedAllergy} with the given {@code allergy}.","lastModifiedDate":"2023-10-12"},{"lineNumber":17,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":18,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":19,"author":{"gitId":"hjoneweek"},"content":"    @JsonCreator","lastModifiedDate":"2023-10-12"},{"lineNumber":20,"author":{"gitId":"hjoneweek"},"content":"    public JsonAdaptedAllergy(String allergy) {","lastModifiedDate":"2023-10-12"},{"lineNumber":21,"author":{"gitId":"hjoneweek"},"content":"        this.allergy \u003d allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":22,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":23,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":24,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":25,"author":{"gitId":"hjoneweek"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2023-10-12"},{"lineNumber":26,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":27,"author":{"gitId":"hjoneweek"},"content":"    public JsonAdaptedAllergy(Allergy source) {","lastModifiedDate":"2023-10-12"},{"lineNumber":28,"author":{"gitId":"hjoneweek"},"content":"        this.allergy \u003d source.allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":29,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":30,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":31,"author":{"gitId":"hjoneweek"},"content":"    @JsonValue","lastModifiedDate":"2023-10-12"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    public String getAllergy() {","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"        return allergy;","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"hjoneweek"},"content":"    /**","lastModifiedDate":"2023-10-12"},{"lineNumber":37,"author":{"gitId":"hjoneweek"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Allergy} object.","lastModifiedDate":"2023-10-12"},{"lineNumber":38,"author":{"gitId":"hjoneweek"},"content":"     *","lastModifiedDate":"2023-10-12"},{"lineNumber":39,"author":{"gitId":"hjoneweek"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted allergy.","lastModifiedDate":"2023-10-12"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"     */","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    public Allergy toModelType() throws IllegalValueException {","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"        if (!Allergy.isValidAllergy(allergy)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"        return new Allergy(allergy);","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"hjoneweek"},"content":"    }","lastModifiedDate":"2023-10-12"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"}","lastModifiedDate":"2023-10-12"}],"authorContributionMap":{"hjoneweek":48}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"hjoneweek"},"content":"    private final String gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":33,"author":{"gitId":"hjoneweek"},"content":"    private final Integer age;","lastModifiedDate":"2023-10-12"},{"lineNumber":34,"author":{"gitId":"hjoneweek"},"content":"    private final String bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":35,"author":{"gitId":"hjoneweek"},"content":"    private final List\u003cJsonAdaptedAllergy\u003e allergies \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"gender\") String gender,","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"            @JsonProperty(\"age\") Integer age, @JsonProperty(\"bloodType\") String bloodType,","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"            @JsonProperty(\"allergies\") List\u003cJsonAdaptedAllergy\u003e allergies) {","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"hjoneweek"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":49,"author":{"gitId":"hjoneweek"},"content":"        this.age \u003d age;","lastModifiedDate":"2023-10-12"},{"lineNumber":50,"author":{"gitId":"hjoneweek"},"content":"        this.bloodType \u003d bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":51,"author":{"gitId":"hjoneweek"},"content":"        if (allergies !\u003d null) {","lastModifiedDate":"2023-10-12"},{"lineNumber":52,"author":{"gitId":"hjoneweek"},"content":"            this.allergies.addAll(allergies);","lastModifiedDate":"2023-10-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"hjoneweek"},"content":"        gender \u003d source.getGender().gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":65,"author":{"gitId":"hjoneweek"},"content":"        age \u003d source.getAge().age;","lastModifiedDate":"2023-10-12"},{"lineNumber":66,"author":{"gitId":"hjoneweek"},"content":"        bloodType \u003d source.getBloodType().bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":67,"author":{"gitId":"hjoneweek"},"content":"        allergies.addAll(source.getAllergies().stream()","lastModifiedDate":"2023-10-12"},{"lineNumber":68,"author":{"gitId":"hjoneweek"},"content":"                .map(JsonAdaptedAllergy::new)","lastModifiedDate":"2023-10-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"hjoneweek"},"content":"        final List\u003cAllergy\u003e allergiesList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-10-12"},{"lineNumber":79,"author":{"gitId":"hjoneweek"},"content":"        for (JsonAdaptedAllergy allergy : allergies) {","lastModifiedDate":"2023-10-12"},{"lineNumber":80,"author":{"gitId":"hjoneweek"},"content":"            allergiesList.add(allergy.toModelType());","lastModifiedDate":"2023-10-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"hjoneweek"},"content":"        if (gender \u003d\u003d null) {","lastModifiedDate":"2023-10-12"},{"lineNumber":108,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));","lastModifiedDate":"2023-10-12"},{"lineNumber":109,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":110,"author":{"gitId":"hjoneweek"},"content":"        if (!Gender.isValidGender(gender)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":111,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":112,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":113,"author":{"gitId":"hjoneweek"},"content":"        final Gender modelGender \u003d new Gender(gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":114,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":115,"author":{"gitId":"hjoneweek"},"content":"        if (age \u003d\u003d null) {","lastModifiedDate":"2023-10-12"},{"lineNumber":116,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Integer.class.getSimpleName()));","lastModifiedDate":"2023-10-12"},{"lineNumber":117,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":118,"author":{"gitId":"hjoneweek"},"content":"        if (!Age.isValidAge(age)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":119,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":120,"author":{"gitId":"hjoneweek"},"content":"        }","lastModifiedDate":"2023-10-12"},{"lineNumber":121,"author":{"gitId":"hjoneweek"},"content":"        final Age modelAge \u003d new Age(age);","lastModifiedDate":"2023-10-12"},{"lineNumber":122,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":123,"author":{"gitId":"hjoneweek"},"content":"        if (bloodType \u003d\u003d null) {","lastModifiedDate":"2023-10-12"},{"lineNumber":124,"author":{"gitId":"adammangzijun"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-10-14"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"                    BloodType.class.getSimpleName()));","lastModifiedDate":"2023-10-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"hjoneweek"},"content":"        if (!BloodType.isValidBloodType(bloodType)) {","lastModifiedDate":"2023-10-12"},{"lineNumber":128,"author":{"gitId":"hjoneweek"},"content":"            throw new IllegalValueException(BloodType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"hjoneweek"},"content":"        final BloodType modelBloodType \u003d new BloodType(bloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"hjoneweek"},"content":"        final Set\u003cAllergy\u003e modelAllergies \u003d new HashSet\u003c\u003e(allergiesList);","lastModifiedDate":"2023-10-12"},{"lineNumber":133,"author":{"gitId":"Darren159"},"content":"        return new Person(modelName, modelEmail, modelPhone, modelGender, modelAge, modelBloodType, modelAllergies,","lastModifiedDate":"2023-10-15"},{"lineNumber":134,"author":{"gitId":"Darren159"},"content":"                false);","lastModifiedDate":"2023-10-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"hjoneweek":42,"Darren159":2,"-":87,"adammangzijun":6}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"    private PinnedPersonListPanel pinnedPersonListPanel;","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"    private StackPane pinnedPersonListPanelPlaceholder;","lastModifiedDate":"2023-10-13"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"Darren159"},"content":"        pinnedPersonListPanel \u003d new PinnedPersonListPanel(logic.getPinnedPersonList());","lastModifiedDate":"2023-10-13"},{"lineNumber":121,"author":{"gitId":"Darren159"},"content":"        pinnedPersonListPanelPlaceholder.getChildren().add(pinnedPersonListPanel.getRoot());","lastModifiedDate":"2023-10-13"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            logger.info(\"An error occurred while executing command: \" + commandText);","lastModifiedDate":"2023-06-13"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"Darren159":7,"-":196}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"hjoneweek"},"content":"    private Label age;","lastModifiedDate":"2023-10-12"},{"lineNumber":41,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-10-12"},{"lineNumber":42,"author":{"gitId":"hjoneweek"},"content":"    private FlowPane allergies;","lastModifiedDate":"2023-10-12"},{"lineNumber":43,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-10-12"},{"lineNumber":44,"author":{"gitId":"hjoneweek"},"content":"    private Label gender;","lastModifiedDate":"2023-10-12"},{"lineNumber":45,"author":{"gitId":"hjoneweek"},"content":"    @FXML","lastModifiedDate":"2023-10-12"},{"lineNumber":46,"author":{"gitId":"hjoneweek"},"content":"    private Label bloodType;","lastModifiedDate":"2023-10-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"hjoneweek"},"content":"        age.setText(String.valueOf(person.getAge().age));","lastModifiedDate":"2023-10-12"},{"lineNumber":58,"author":{"gitId":"hjoneweek"},"content":"        gender.setText(person.getGender().gender);","lastModifiedDate":"2023-10-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"hjoneweek"},"content":"        bloodType.setText(person.getBloodType().bloodType);","lastModifiedDate":"2023-10-12"},{"lineNumber":61,"author":{"gitId":"hjoneweek"},"content":"","lastModifiedDate":"2023-10-12"},{"lineNumber":62,"author":{"gitId":"hjoneweek"},"content":"        person.getAllergies().stream()","lastModifiedDate":"2023-10-12"},{"lineNumber":63,"author":{"gitId":"hjoneweek"},"content":"                .sorted(Comparator.comparing(allergy -\u003e allergy.allergy))","lastModifiedDate":"2023-10-12"},{"lineNumber":64,"author":{"gitId":"Clin-lyx"},"content":"                .forEach(allergy -\u003e allergies.getChildren().add(new Label(allergy.allergy + \" \")));","lastModifiedDate":"2023-10-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"hjoneweek":13,"Clin-lyx":1,"-":52}},{"path":"src/main/java/seedu/address/ui/PinnedPersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-10-13"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-10-13"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-10-13"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-13"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-13"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * Panel containing the list of pinned persons.","lastModifiedDate":"2023-10-13"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-13"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"public class PinnedPersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"    private static final String FXML \u003d \"PinnedPersonListPanel.fxml\";","lastModifiedDate":"2023-10-13"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PinnedPersonListPanel.class);","lastModifiedDate":"2023-10-13"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"    @FXML","lastModifiedDate":"2023-10-13"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private ListView\u003cPerson\u003e pinnedPersonListView;","lastModifiedDate":"2023-10-13"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"     * Creates a {@code PinnedPersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-10-13"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public PinnedPersonListPanel(ObservableList\u003cPerson\u003e pinnedPersonList) {","lastModifiedDate":"2023-10-13"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"        super(FXML);","lastModifiedDate":"2023-10-13"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"        pinnedPersonListView.setItems(pinnedPersonList);","lastModifiedDate":"2023-10-13"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"        pinnedPersonListView.setCellFactory(listView -\u003e new PinnedPersonListViewCell());","lastModifiedDate":"2023-10-13"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-13"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2023-10-13"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-13"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"    class PinnedPersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2023-10-13"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2023-10-13"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2023-10-13"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"                setGraphic(null);","lastModifiedDate":"2023-10-13"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"                setText(null);","lastModifiedDate":"2023-10-13"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"            } else {","lastModifiedDate":"2023-10-13"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2023-10-13"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"            }","lastModifiedDate":"2023-10-13"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-13"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":49}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-07-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        \u003cSplitPane dividerPositions\u003d\"0.7\"\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"          \u003cVBox\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                      minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"              \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"              \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"              \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"            \u003cVBox fx:id\u003d\"pinnedPersonList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" prefWidth\u003d\"200\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"              \u003cStackPane fx:id\u003d\"pinnedPersonListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"Darren159":7,"-":61}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-07-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\" \u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"Clin-lyx"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"Clin-lyx"},"content":"        \u003cVBox prefWidth\u003d\"300\"\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"Clin-lyx"},"content":"          \u003cHBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"              \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"              \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":34,"author":{"gitId":"Clin-lyx"},"content":"          \u003cHBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"Clin-lyx"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"Clin-lyx"},"content":"              \u003cInsets top\u003d\"5\" left\u003d\"20\" bottom\u003d\"5\"/\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"Clin-lyx"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"Clin-lyx"},"content":"            \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$gender\" prefWidth\u003d\"25\" /\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":39,"author":{"gitId":"Clin-lyx"},"content":"            \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$age\" prefWidth\u003d\"25\" /\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":40,"author":{"gitId":"Clin-lyx"},"content":"            \u003cLabel fx:id\u003d\"bloodType\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$bloodType\" prefWidth\u003d\"30\" /\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":41,"author":{"gitId":"Clin-lyx"},"content":"          \u003c/HBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":42,"author":{"gitId":"Clin-lyx"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":43,"author":{"gitId":"Clin-lyx"},"content":"        \u003cVBox prefWidth\u003d\"300\"\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":44,"author":{"gitId":"Clin-lyx"},"content":"          \u003cLabel text\u003d\"Contacts\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"Clin-lyx"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":48,"author":{"gitId":"Clin-lyx"},"content":"        \u003cVBox prefWidth\u003d\"300\"\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":49,"author":{"gitId":"Clin-lyx"},"content":"          \u003cLabel text\u003d\"Allergies\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":50,"author":{"gitId":"Clin-lyx"},"content":"          \u003cFlowPane fx:id\u003d\"allergies\" /\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":51,"author":{"gitId":"Clin-lyx"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-10-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"Clin-lyx":20,"-":35}},{"path":"src/main/resources/view/PinnedPersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"  \u003cListView fx:id\u003d\"pinnedPersonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-10-13"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-10-13"}],"authorContributionMap":{"Darren159":8}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-07-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-07-13"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.AccessDeniedException;","lastModifiedDate":"2023-06-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy IO exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_AD_EXCEPTION \u003d new AccessDeniedException(\"dummy access denied exception\");","lastModifiedDate":"2023-06-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_IO_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_ERROR_FORMAT, DUMMY_IO_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-06-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-06-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsAdException_throwsCommandException() {","lastModifiedDate":"2023-06-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertCommandFailureForExceptionFromStorage(DUMMY_AD_EXCEPTION, String.format(","lastModifiedDate":"2023-06-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                LogicManager.FILE_OPS_PERMISSION_ERROR_FORMAT, DUMMY_AD_EXCEPTION.getMessage()));","lastModifiedDate":"2023-06-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Tests the Logic component\u0027s handling of an {@code IOException} thrown by the Storage component.","lastModifiedDate":"2023-06-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2023-06-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * @param e the exception to be thrown by the Storage component","lastModifiedDate":"2023-06-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * @param expectedMessage the message expected inside exception thrown by the Logic component","lastModifiedDate":"2023-06-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private void assertCommandFailureForExceptionFromStorage(IOException e, String expectedMessage) {","lastModifiedDate":"2023-06-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        Path prefPath \u003d temporaryFolder.resolve(\"ExceptionUserPrefs.json\");","lastModifiedDate":"2023-06-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // Inject LogicManager with an AddressBookStorage that throws the IOException e when saving","lastModifiedDate":"2023-06-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(prefPath) {","lastModifiedDate":"2023-06-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath)","lastModifiedDate":"2023-06-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                    throws IOException {","lastModifiedDate":"2023-06-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                throw e;","lastModifiedDate":"2023-06-13"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2023-06-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2023-06-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ExceptionUserPrefs.json\"));","lastModifiedDate":"2023-06-13"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2023-06-13"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-06-13"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-06-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // Triggers the saveAddressBook method by executing an add command","lastModifiedDate":"2023-06-13"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2023-10-14"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_AMY + AGE_DESC_AMY + BLOODTYPE_DESC_AMY + ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withAllergies().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-06-13"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2023-06-13"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-06-13"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"Darren159":2,"-":171,"adammangzijun":5}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2019-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, Messages.format(validPerson)),","lastModifiedDate":"2019-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2019-02-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(ALICE);","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expected \u003d AddCommand.class.getCanonicalName() + \"{toAdd\u003d\" + ALICE + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(expected, addCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-13"},{"lineNumber":161,"author":{"gitId":"Darren159"},"content":"        @Override","lastModifiedDate":"2023-10-13"},{"lineNumber":162,"author":{"gitId":"Darren159"},"content":"        public ObservableList\u003cPerson\u003e getPinnedPersonList() {","lastModifiedDate":"2023-10-13"},{"lineNumber":163,"author":{"gitId":"Darren159"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-10-13"},{"lineNumber":164,"author":{"gitId":"Darren159"},"content":"        }","lastModifiedDate":"2023-10-13"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"Darren159":5,"-":204}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_GENDER_AMY \u003d \"F\";","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_GENDER_BOB \u003d \"M\";","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    public static final int VALID_AGE_AMY \u003d 20;","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    public static final int VALID_AGE_BOB \u003d 31;","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_BLOODTYPE_AMY \u003d \"B+\";","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_BLOODTYPE_BOB \u003d \"A-\";","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_ALLERGY_DUST \u003d \"Dust\";","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"    public static final String VALID_ALLERGY_PEANUTS \u003d \"Peanuts\";","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    public static final String AGE_DESC_AMY \u003d \" \" + PREFIX_AGE + VALID_AGE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"    public static final String BLOODTYPE_DESC_AMY \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"    public static final String BLOODTYPE_DESC_BOB \u003d \" \" + PREFIX_BLOODTYPE + VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"    public static final String ALLERGY_DESC_DUST \u003d \" \" + PREFIX_ALLERGIES + VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"    public static final String ALLERGY_DESC_PEANUTS \u003d \" \" + PREFIX_ALLERGIES + VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"A\"; // \u0027A\u0027 not allowed in gender","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"0\"; // age must be more than 0","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"    public static final String INVALID_BLOODTYPE_DESC \u003d \" \" + PREFIX_BLOODTYPE + \"G\"; // \u0027G\u0027 not allowed in bloodtype","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    public static final String INVALID_ALLERGY_DESC \u003d \" \" + PREFIX_ALLERGIES + \"Peanuts*\";","lastModifiedDate":"2023-10-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"                .withEmail(VALID_EMAIL_AMY).withPhone(VALID_PHONE_AMY).withGender(VALID_GENDER_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"                .withAge(VALID_AGE_AMY).withBloodType(VALID_BLOODTYPE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"                .withEmail(VALID_EMAIL_BOB).withPhone(VALID_PHONE_BOB).withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"                .withAge(VALID_AGE_BOB).withBloodType(VALID_BLOODTYPE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_DUST, VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"Darren159":5,"-":107,"adammangzijun":30}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"                .withPhone(VALID_PHONE_BOB).withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, Messages.format(editedPerson));","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        Index index \u003d Index.fromOneBased(1);","lastModifiedDate":"2019-02-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2019-02-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        String expected \u003d EditCommand.class.getCanonicalName() + \"{index\u003d\" + index + \", editPersonDescriptor\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                + editPersonDescriptor + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertEquals(expected, editCommand.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"-":181,"adammangzijun":3}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        // different gender -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGender(VALID_GENDER_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"        // different age -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAge(VALID_AGE_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"        // different bloodType -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withBloodType(VALID_BLOODTYPE_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        // different allergies -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAllergies(VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2019-02-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String expected \u003d EditPersonDescriptor.class.getCanonicalName() + \"{name\u003d\"","lastModifiedDate":"2019-02-23"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getName().orElse(null) + \", email\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getEmail().orElse(null) + \", phone\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getPhone().orElse(null) + \", gender\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getGender().orElse(null) + \", age\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getAge().orElse(null) + \", bloodType\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getBloodType().orElse(null) + \", allergies\u003d\"","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"                + editPersonDescriptor.getAllergies().orElse(null) + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expected, editPersonDescriptor.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Darren159":2,"-":58,"adammangzijun":23}},{"path":"src/test/java/seedu/address/logic/commands/PinCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":" * Contains integration tests (interaction with the Model) and unit tests for PinCommand.","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"public class PinCommandTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        Person personToPin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        Person pinnedPerson \u003d new PersonBuilder(personToPin).withIsPinned(true).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(PinCommand.MESSAGE_PIN_PERSON_SUCCESS, Messages.format(personToPin));","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), pinnedPerson);","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(pinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(outOfBoundIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        assertCommandFailure(pinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"        Person personToPin \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        Person pinnedPerson \u003d new PersonBuilder(personToPin).withIsPinned(true).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(PinCommand.MESSAGE_PIN_PERSON_SUCCESS, Messages.format(personToPin));","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), pinnedPerson);","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(pinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(outOfBoundIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        assertCommandFailure(pinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"Darren159"},"content":"    public void equals() {","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"Darren159"},"content":"        PinCommand pinFirstCommand \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"Darren159"},"content":"        PinCommand pinSecondCommand \u003d new PinCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"Darren159"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"        assertTrue(pinFirstCommand.equals(pinFirstCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"Darren159"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"Darren159"},"content":"        PinCommand unpinFirstCommandCopy \u003d new PinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"Darren159"},"content":"        assertTrue(pinFirstCommand.equals(unpinFirstCommandCopy));","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"Darren159"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"        assertFalse(pinFirstCommand.equals(1));","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"        assertFalse(pinFirstCommand.equals(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"Darren159"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"Darren159"},"content":"        assertFalse(pinFirstCommand.equals(pinSecondCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"        PinCommand pinCommand \u003d new PinCommand(targetIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"        String expected \u003d PinCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"Darren159"},"content":"        assertEquals(expected, pinCommand.toString());","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Darren159":113}},{"path":"src/test/java/seedu/address/logic/commands/UnpinCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":" * Contains integration tests (interaction with the Model) and unit tests for UnpinCommand.","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"public class UnpinCommandTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    public void execute_validIndex_success() {","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"        Person personToUnpin \u003d model.getPinnedPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"Darren159"},"content":"        Person unpinnedPerson \u003d new PersonBuilder(personToUnpin).withIsPinned(false).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinCommand \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"        String expectedMessage \u003d String.format(UnpinCommand.MESSAGE_UNPIN_PERSON_SUCCESS,","lastModifiedDate":"2023-10-15"},{"lineNumber":37,"author":{"gitId":"Darren159"},"content":"                Messages.format(personToUnpin));","lastModifiedDate":"2023-10-15"},{"lineNumber":38,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"Darren159"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"Darren159"},"content":"        expectedModel.setPerson(model.getPinnedPersonList().get(0), unpinnedPerson);","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"Darren159"},"content":"        assertCommandSuccess(unpinCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"Darren159"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"Darren159"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getPinnedPersonList().size() + 1);","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinCommand \u003d new UnpinCommand(outOfBoundIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"        assertCommandFailure(unpinCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"    public void equals() {","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinFirstCommand \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinSecondCommand \u003d new UnpinCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"Darren159"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"Darren159"},"content":"        assertTrue(unpinFirstCommand.equals(unpinFirstCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"Darren159"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinFirstCommandCopy \u003d new UnpinCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        assertTrue(unpinFirstCommand.equals(unpinFirstCommandCopy));","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"Darren159"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"Darren159"},"content":"        assertFalse(unpinFirstCommand.equals(1));","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"Darren159"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"Darren159"},"content":"        assertFalse(unpinFirstCommand.equals(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"Darren159"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"Darren159"},"content":"        assertFalse(unpinFirstCommand.equals(unpinSecondCommand));","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"Darren159"},"content":"    public void toStringMethod() {","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"Darren159"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"Darren159"},"content":"        UnpinCommand unpinCommand \u003d new UnpinCommand(targetIndex);","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"Darren159"},"content":"        String expected \u003d UnpinCommand.class.getCanonicalName() + \"{targetIndex\u003d\" + targetIndex + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"Darren159"},"content":"        assertEquals(expected, unpinCommand.toString());","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Darren159":83}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGE_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-10-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-10-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-15"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-07-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-15"},{"lineNumber":51,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-15"},{"lineNumber":52,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-15"},{"lineNumber":54,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_DUST,","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":74,"author":{"gitId":"Darren159"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withAllergies(VALID_ALLERGY_DUST,","lastModifiedDate":"2023-10-15"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"                        VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"                NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"                        + AGE_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_DUST + ALLERGY_DESC_PEANUTS,","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2023-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parse_repeatedNonTagValue_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"        String validExpectedPersonString \u003d NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB + ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // multiple names","lastModifiedDate":"2023-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"        // multiple emails","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, EMAIL_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // multiple phones","lastModifiedDate":"2023-07-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PHONE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"        // multiple genders","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, GENDER_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"        // multiple ages","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, AGE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_AGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"        // multiple bloodTypes","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, BLOODTYPE_DESC_AMY + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // multiple fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-07-14"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"                validExpectedPersonString + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"                        + NAME_DESC_AMY + PREFIX_GENDER + PREFIX_AGE + PREFIX_BLOODTYPE","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                        + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME, PREFIX_EMAIL, PREFIX_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"                        PREFIX_GENDER, PREFIX_AGE, PREFIX_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid value followed by valid value","lastModifiedDate":"2023-07-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_EMAIL_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-07-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"        // invalid gender","lastModifiedDate":"2023-10-14"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, INVALID_GENDER_DESC + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"        // invalid age","lastModifiedDate":"2023-10-14"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, INVALID_AGE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_AGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"        // invalid bloodType","lastModifiedDate":"2023-10-14"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, INVALID_BLOODTYPE_DESC + validExpectedPersonString,","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // valid value followed by invalid value","lastModifiedDate":"2023-07-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-07-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_NAME_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_NAME));","lastModifiedDate":"2023-07-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-07-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_EMAIL));","lastModifiedDate":"2023-07-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-07-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_PHONE_DESC,","lastModifiedDate":"2023-07-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":160,"author":{"gitId":"adammangzijun"},"content":"        // invalid gender","lastModifiedDate":"2023-10-14"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_GENDER_DESC,","lastModifiedDate":"2023-10-14"},{"lineNumber":162,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":163,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"        // invalid age","lastModifiedDate":"2023-10-14"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_AGE_DESC,","lastModifiedDate":"2023-10-14"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_AGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"        // invalid bloodtype","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, validExpectedPersonString + INVALID_BLOODTYPE_DESC,","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withAllergies().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + EMAIL_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2023-10-14"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_AMY + AGE_DESC_AMY + BLOODTYPE_DESC_AMY,","lastModifiedDate":"2023-10-14"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"                        + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":192,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + VALID_PHONE_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":193,"author":{"gitId":"adammangzijun"},"content":"                        + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":197,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_EMAIL_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"                        + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":199,"author":{"gitId":"adammangzijun"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-14"},{"lineNumber":200,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":201,"author":{"gitId":"adammangzijun"},"content":"        // missing gender prefix","lastModifiedDate":"2023-10-14"},{"lineNumber":202,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":203,"author":{"gitId":"adammangzijun"},"content":"                        + VALID_GENDER_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":206,"author":{"gitId":"adammangzijun"},"content":"        // missing age prefix","lastModifiedDate":"2023-10-14"},{"lineNumber":207,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_EMAIL_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":208,"author":{"gitId":"adammangzijun"},"content":"                        + GENDER_DESC_BOB + VALID_AGE_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":209,"author":{"gitId":"adammangzijun"},"content":"                expectedMessage);","lastModifiedDate":"2023-10-14"},{"lineNumber":210,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":211,"author":{"gitId":"adammangzijun"},"content":"        // missing bloodType prefix","lastModifiedDate":"2023-10-14"},{"lineNumber":212,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_EMAIL_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":213,"author":{"gitId":"adammangzijun"},"content":"                        + GENDER_DESC_BOB + VALID_AGE_BOB + VALID_BLOODTYPE_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":217,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_EMAIL_BOB + VALID_PHONE_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":218,"author":{"gitId":"adammangzijun"},"content":"                        + VALID_GENDER_BOB + VALID_AGE_BOB + VALID_BLOODTYPE_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":225,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":226,"author":{"gitId":"adammangzijun"},"content":"                + AGE_DESC_BOB + BLOODTYPE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":229,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + INVALID_PHONE_DESC + GENDER_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":230,"author":{"gitId":"adammangzijun"},"content":"                + AGE_DESC_BOB + BLOODTYPE_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":233,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_EMAIL_DESC + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":234,"author":{"gitId":"adammangzijun"},"content":"                + AGE_DESC_BOB + BLOODTYPE_DESC_BOB, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":235,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":236,"author":{"gitId":"adammangzijun"},"content":"        // invalid gender","lastModifiedDate":"2023-10-14"},{"lineNumber":237,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + INVALID_GENDER_DESC","lastModifiedDate":"2023-10-14"},{"lineNumber":238,"author":{"gitId":"adammangzijun"},"content":"                + AGE_DESC_BOB + BLOODTYPE_DESC_BOB, Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":239,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":240,"author":{"gitId":"adammangzijun"},"content":"        // invalid age","lastModifiedDate":"2023-10-14"},{"lineNumber":241,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":242,"author":{"gitId":"adammangzijun"},"content":"                + INVALID_AGE_DESC + BLOODTYPE_DESC_BOB, Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":244,"author":{"gitId":"adammangzijun"},"content":"        // invalid bloodType","lastModifiedDate":"2023-10-14"},{"lineNumber":245,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":246,"author":{"gitId":"adammangzijun"},"content":"                + AGE_DESC_BOB + INVALID_BLOODTYPE_DESC, BloodType.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":249,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB + GENDER_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":250,"author":{"gitId":"adammangzijun"},"content":"                + INVALID_ALLERGY_DESC + VALID_ALLERGY_PEANUTS, Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":253,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":254,"author":{"gitId":"adammangzijun"},"content":"                        + INVALID_GENDER_DESC + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":258,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + EMAIL_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2023-10-14"},{"lineNumber":259,"author":{"gitId":"adammangzijun"},"content":"                + GENDER_DESC_BOB + AGE_DESC_BOB + BLOODTYPE_DESC_BOB,","lastModifiedDate":"2023-10-14"},{"lineNumber":260,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":262,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"Darren159":23,"-":141,"adammangzijun":98}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-07-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.AGE_DESC_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALLERGY_DESC_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AGE_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALLERGY_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BLOODTYPE_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-07-14"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-07-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.logic.Messages;","lastModifiedDate":"2023-07-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"    private static final String ALLERGY_EMPTY \u003d \" \" + PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_CONSTRAINTS); // invalid gender","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_AGE_DESC, Age.MESSAGE_CONSTRAINTS); // invalid age","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_BLOODTYPE_DESC, BloodType.MESSAGE_CONSTRAINTS); // invalid bloodType","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ALLERGY_DESC, Allergy.MESSAGE_CONSTRAINTS); // invalid allergy","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        // invalid email followed by valid phone","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC + VALID_PHONE_AMY, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\" + ALLERGY_DESC_DUST + ALLERGY_DESC_PEANUTS + ALLERGY_EMPTY,","lastModifiedDate":"2023-10-15"},{"lineNumber":105,"author":{"gitId":"Darren159"},"content":"                Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-15"},{"lineNumber":106,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\" + ALLERGY_DESC_DUST + ALLERGY_EMPTY + ALLERGY_DESC_PEANUTS,","lastModifiedDate":"2023-10-15"},{"lineNumber":107,"author":{"gitId":"Darren159"},"content":"                Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-15"},{"lineNumber":108,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"1\" + ALLERGY_EMPTY + ALLERGY_DESC_DUST + ALLERGY_DESC_PEANUTS,","lastModifiedDate":"2023-10-15"},{"lineNumber":109,"author":{"gitId":"Darren159"},"content":"                Allergy.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-10-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"                        + VALID_GENDER_AMY + VALID_AGE_AMY + VALID_BLOODTYPE_AMY,","lastModifiedDate":"2023-10-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ALLERGY_DESC_DUST","lastModifiedDate":"2023-10-14"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"                + EMAIL_DESC_AMY + GENDER_DESC_AMY + NAME_DESC_AMY + ALLERGY_DESC_PEANUTS","lastModifiedDate":"2023-10-14"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"                + AGE_DESC_AMY + BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"                .withEmail(VALID_EMAIL_AMY).withPhone(VALID_PHONE_AMY).withGender(VALID_GENDER_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"                .withAge(VALID_AGE_AMY).withBloodType(VALID_BLOODTYPE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_DUST, VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY + PHONE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"                .withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"        // email","lastModifiedDate":"2023-10-14"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-10-14"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-14"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"        // gender","lastModifiedDate":"2023-10-14"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-10-14"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-10-14"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"        // age","lastModifiedDate":"2023-10-14"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + AGE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAge(VALID_AGE_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"        // bloodType","lastModifiedDate":"2023-10-14"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + BLOODTYPE_DESC_AMY;","lastModifiedDate":"2023-10-14"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withBloodType(VALID_BLOODTYPE_AMY).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + ALLERGY_DESC_DUST;","lastModifiedDate":"2023-10-14"},{"lineNumber":186,"author":{"gitId":"adammangzijun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_failure() {","lastModifiedDate":"2023-07-14"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // More extensive testing of duplicate parameter detections is done in","lastModifiedDate":"2023-07-14"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // AddCommandParserTest#parse_repeatedNonTagValue_failure()","lastModifiedDate":"2023-07-14"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // valid followed by invalid","lastModifiedDate":"2023-07-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2023-07-14"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // invalid followed by valid","lastModifiedDate":"2023-07-14"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + INVALID_PHONE_DESC;","lastModifiedDate":"2023-07-14"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput, Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE));","lastModifiedDate":"2023-07-14"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-07-14"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        // mulltiple valid fields repeated","lastModifiedDate":"2023-07-14"},{"lineNumber":208,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + GENDER_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-10-14"},{"lineNumber":209,"author":{"gitId":"adammangzijun"},"content":"                + ALLERGY_DESC_DUST + PHONE_DESC_AMY + GENDER_DESC_AMY + EMAIL_DESC_AMY + ALLERGY_DESC_DUST","lastModifiedDate":"2023-10-14"},{"lineNumber":210,"author":{"gitId":"adammangzijun"},"content":"                + PHONE_DESC_BOB + GENDER_DESC_AMY + EMAIL_DESC_BOB + ALLERGY_DESC_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":213,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        // multiple invalid values","lastModifiedDate":"2023-07-14"},{"lineNumber":216,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + INVALID_GENDER_DESC + INVALID_EMAIL_DESC","lastModifiedDate":"2023-10-14"},{"lineNumber":217,"author":{"gitId":"adammangzijun"},"content":"                + INVALID_PHONE_DESC + INVALID_GENDER_DESC + INVALID_EMAIL_DESC;","lastModifiedDate":"2023-10-14"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, userInput,","lastModifiedDate":"2023-07-14"},{"lineNumber":220,"author":{"gitId":"adammangzijun"},"content":"                Messages.getErrorMessageForDuplicatePrefixes(PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":226,"author":{"gitId":"adammangzijun"},"content":"        String userInput \u003d targetIndex.getOneBased() + ALLERGY_EMPTY;","lastModifiedDate":"2023-10-14"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":228,"author":{"gitId":"adammangzijun"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withAllergies().build();","lastModifiedDate":"2023-10-14"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":233,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"Darren159":7,"-":159,"adammangzijun":67}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_GENDER \u003d \" \";","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_AGE \u003d \" \";","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_BLOODTYPE \u003d \"D\";","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_ALLERGY \u003d \"#dust\";","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_GENDER \u003d \"M\";","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    private static final int VALID_AGE \u003d 10;","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_AGE_STRING \u003d \"10\";","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"Darren159"},"content":"    private static final String VALID_BLOODTYPE \u003d \"A+\";","lastModifiedDate":"2023-10-15"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_ALLERGY_1 \u003d \"Nuts\";","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_ALLERGY_2 \u003d \"Coconut\";","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"    public void parseGender_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGender((String) null));","lastModifiedDate":"2023-10-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"    public void parseGender_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGender(INVALID_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":148,"author":{"gitId":"adammangzijun"},"content":"        Gender expectedGender \u003d new Gender(VALID_GENDER);","lastModifiedDate":"2023-10-14"},{"lineNumber":149,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedGender, ParserUtil.parseGender(VALID_GENDER));","lastModifiedDate":"2023-10-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"        Gender expectedGender \u003d new Gender(VALID_GENDER);","lastModifiedDate":"2023-10-14"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedGender, ParserUtil.parseGender(genderWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":160,"author":{"gitId":"adammangzijun"},"content":"    public void parseAge_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAge((String) null));","lastModifiedDate":"2023-10-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"    public void parseAge_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAge(INVALID_AGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"    public void parseAge_validValueWithoutWhitespace_returnsAge() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"        Age expectedAge \u003d new Age(VALID_AGE);","lastModifiedDate":"2023-10-14"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAge, ParserUtil.parseAge(VALID_AGE_STRING));","lastModifiedDate":"2023-10-14"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"    public void parseAge_validValueWithWhitespace_returnsTrimmedAge() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"        String ageWithWhitespace \u003d WHITESPACE + VALID_AGE + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"        Age expectedAge \u003d new Age(VALID_AGE);","lastModifiedDate":"2023-10-14"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAge, ParserUtil.parseAge(ageWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":183,"author":{"gitId":"adammangzijun"},"content":"    public void parseBloodType_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":184,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBloodType((String) null));","lastModifiedDate":"2023-10-14"},{"lineNumber":185,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":186,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"    public void parseBloodType_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":189,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBloodType(INVALID_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":190,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":191,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":192,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":193,"author":{"gitId":"adammangzijun"},"content":"    public void parseBloodType_validValueWithoutWhitespace_returnsBloodType() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":194,"author":{"gitId":"adammangzijun"},"content":"        BloodType expectedBloodType \u003d new BloodType(VALID_BLOODTYPE);","lastModifiedDate":"2023-10-14"},{"lineNumber":195,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedBloodType, ParserUtil.parseBloodType(VALID_BLOODTYPE));","lastModifiedDate":"2023-10-14"},{"lineNumber":196,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":197,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":199,"author":{"gitId":"adammangzijun"},"content":"    public void parseBloodType_validValueWithWhitespace_returnsTrimmedBloodType() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":200,"author":{"gitId":"adammangzijun"},"content":"        String bloodTypeWithWhitespace \u003d WHITESPACE + VALID_BLOODTYPE + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":201,"author":{"gitId":"adammangzijun"},"content":"        BloodType expectedBloodType \u003d new BloodType(VALID_BLOODTYPE);","lastModifiedDate":"2023-10-14"},{"lineNumber":202,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedBloodType, ParserUtil.parseBloodType(bloodTypeWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":206,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergy_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":207,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAllergy(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":211,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergy_invalidValue_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":212,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAllergy(INVALID_ALLERGY));","lastModifiedDate":"2023-10-14"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":216,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergy_validValueWithoutWhitespace_returnsAllergy() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":217,"author":{"gitId":"adammangzijun"},"content":"        Allergy expectedAllergy \u003d new Allergy(VALID_ALLERGY_1);","lastModifiedDate":"2023-10-14"},{"lineNumber":218,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAllergy, ParserUtil.parseAllergy(VALID_ALLERGY_1));","lastModifiedDate":"2023-10-14"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":222,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergy_validValueWithWhitespace_returnsTrimmedAllergy() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":223,"author":{"gitId":"adammangzijun"},"content":"        String allergyWithWhitespace \u003d WHITESPACE + VALID_ALLERGY_1 + WHITESPACE;","lastModifiedDate":"2023-10-14"},{"lineNumber":224,"author":{"gitId":"adammangzijun"},"content":"        Allergy expectedAllergy \u003d new Allergy(VALID_ALLERGY_1);","lastModifiedDate":"2023-10-14"},{"lineNumber":225,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAllergy, ParserUtil.parseAllergy(allergyWithWhitespace));","lastModifiedDate":"2023-10-14"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":229,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergies_null_throwsNullPointerException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":230,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAllergies(null));","lastModifiedDate":"2023-10-14"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":234,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergies_collectionWithInvalidAllergies_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":235,"author":{"gitId":"Darren159"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAllergies(Arrays.asList(VALID_ALLERGY_1,","lastModifiedDate":"2023-10-15"},{"lineNumber":236,"author":{"gitId":"Darren159"},"content":"                INVALID_ALLERGY)));","lastModifiedDate":"2023-10-15"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":240,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergies_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":241,"author":{"gitId":"adammangzijun"},"content":"        assertTrue(ParserUtil.parseAllergies(Collections.emptyList()).isEmpty());","lastModifiedDate":"2023-10-14"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":245,"author":{"gitId":"adammangzijun"},"content":"    public void parseAllergies_collectionWithValidAllergies_returnsAllergySet() throws Exception {","lastModifiedDate":"2023-10-14"},{"lineNumber":246,"author":{"gitId":"adammangzijun"},"content":"        Set\u003cAllergy\u003e actualAllergySet \u003d ParserUtil.parseAllergies(Arrays.asList(VALID_ALLERGY_1, VALID_ALLERGY_2));","lastModifiedDate":"2023-10-14"},{"lineNumber":247,"author":{"gitId":"Darren159"},"content":"        Set\u003cAllergy\u003e expectedAllergySet \u003d new HashSet\u003cAllergy\u003e(Arrays.asList(new Allergy(VALID_ALLERGY_1),","lastModifiedDate":"2023-10-15"},{"lineNumber":248,"author":{"gitId":"Darren159"},"content":"                new Allergy(VALID_ALLERGY_2)));","lastModifiedDate":"2023-10-15"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":250,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedAllergySet, actualAllergySet);","lastModifiedDate":"2023-10-14"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":252,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"Darren159":5,"-":144,"adammangzijun":103}},{"path":"src/test/java/seedu/address/logic/parser/PinCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.PinCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * outside of the PinCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * same path through the PinCommand, and therefore we test only one of them.","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"public class PinCommandParserTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private PinCommandParser parser \u003d new PinCommandParser();","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    public void parse_validArgs_returnsPinCommand() {","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        assertParseSuccess(parser, \"1\", new PinCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, PinCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Darren159":32}},{"path":"src/test/java/seedu/address/logic/parser/UnpinCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Darren159"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-10-14"},{"lineNumber":2,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-10-14"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-10-14"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-10-14"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-10-14"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.logic.commands.UnpinCommand;","lastModifiedDate":"2023-10-14"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"/**","lastModifiedDate":"2023-10-14"},{"lineNumber":13,"author":{"gitId":"Darren159"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2023-10-14"},{"lineNumber":14,"author":{"gitId":"Darren159"},"content":" * outside of the UnpinCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-10-14"},{"lineNumber":15,"author":{"gitId":"Darren159"},"content":" * same path through the UnpinCommand, and therefore we test only one of them.","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"Darren159"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-10-14"},{"lineNumber":17,"author":{"gitId":"Darren159"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-10-14"},{"lineNumber":18,"author":{"gitId":"Darren159"},"content":" */","lastModifiedDate":"2023-10-14"},{"lineNumber":19,"author":{"gitId":"Darren159"},"content":"public class UnpinCommandParserTest {","lastModifiedDate":"2023-10-14"},{"lineNumber":20,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":21,"author":{"gitId":"Darren159"},"content":"    private UnpinCommandParser parser \u003d new UnpinCommandParser();","lastModifiedDate":"2023-10-14"},{"lineNumber":22,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":23,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"Darren159"},"content":"    public void parse_validArgs_returnsUnpinCommand() {","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"Darren159"},"content":"        assertParseSuccess(parser, \"1\", new UnpinCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":29,"author":{"gitId":"Darren159"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":30,"author":{"gitId":"Darren159"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnpinCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"Darren159"},"content":"}","lastModifiedDate":"2023-10-14"}],"authorContributionMap":{"Darren159":32}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"                .withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"                .withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expected \u003d AddressBook.class.getCanonicalName() + \"{persons\u003d\" + addressBook.getPersonList() + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expected, addressBook.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"Darren159":1,"-":104,"adammangzijun":7}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"Darren159"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"Darren159"},"content":"    public void getPinnedPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"Darren159"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getPinnedPersonList().remove(0));","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"Darren159"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"Darren159"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"Darren159":5,"-":132}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"        // Keywords match phone, email and gender, but does not match name","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"                .withEmail(\"alice@email.com\").withGender(\"F\").build()));","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d List.of(\"keyword1\", \"keyword2\");","lastModifiedDate":"2019-02-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);","lastModifiedDate":"2019-02-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expected \u003d NameContainsKeywordsPredicate.class.getCanonicalName() + \"{keywords\u003d\" + keywords + \"}\";","lastModifiedDate":"2019-02-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expected, predicate.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":83,"adammangzijun":2}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-02-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getAllergies().remove(0));","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"                .withGender(VALID_GENDER_BOB).withAge(VALID_AGE_BOB).withBloodType(VALID_BLOODTYPE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"        // different gender -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"        // different age -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAge(VALID_AGE_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"        // different bloodType -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withBloodType(VALID_BLOODTYPE_BOB).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        // different allergies -\u003e returns false","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAllergies(VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-23"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"        String expected \u003d Person.class.getCanonicalName() + \"{name\u003d\" + ALICE.getName()","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"                + \", email\u003d\" + ALICE.getEmail()","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"                + \", phone\u003d\" + ALICE.getPhone()","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"                + \", gender\u003d\" + ALICE.getGender()","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"                + \", age\u003d\" + ALICE.getAge()","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"                + \", bloodType\u003d\" + ALICE.getBloodType()","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"                + \", allergies\u003d\" + ALICE.getAllergies()","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"                + \"}\";","lastModifiedDate":"2023-10-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(expected, ALICE.toString());","lastModifiedDate":"2019-02-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Darren159":4,"-":86,"adammangzijun":26}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).withAllergies(VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"                .withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"                .withAllergies(VALID_ALLERGY_PEANUTS)","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2019-02-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void toStringMethod() {","lastModifiedDate":"2019-02-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList().toString(), uniquePersonList.toString());","lastModifiedDate":"2019-02-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"Darren159":2,"-":171,"adammangzijun":4}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_GENDER \u003d \"G\";","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    private static final Integer INVALID_AGE \u003d 0;","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_BLOODTYPE \u003d \"C\";","lastModifiedDate":"2023-10-14"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    private static final String INVALID_ALLERGY \u003d \"#friend\";","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_GENDER \u003d BENSON.getGender().toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    private static final Integer VALID_AGE \u003d BENSON.getAge().age;","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    private static final String VALID_BLOODTYPE \u003d BENSON.getBloodType().toString();","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    private static final List\u003cJsonAdaptedAllergy\u003e VALID_ALLERGIES \u003d BENSON.getAllergies().stream()","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"            .map(JsonAdaptedAllergy::new)","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"                        VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_EMAIL, INVALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"                        VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_EMAIL, null,","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"                        VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"                VALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_invalidGender_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"                        INVALID_GENDER, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_nullGender_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"                        null, VALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_invalidAge_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"                        VALID_GENDER, INVALID_AGE, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":123,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":124,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_nullAge_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"                        VALID_GENDER, null, VALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2023-10-14"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_invalidBloodType_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"                        VALID_GENDER, VALID_AGE, INVALID_BLOODTYPE, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-10-14"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-10-14"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-10-14"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"    public void toModelType_nullBloodType_throwsIllegalValueException() {","lastModifiedDate":"2023-10-14"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-10-14"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"                        VALID_GENDER, VALID_AGE , null, VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"        List\u003cJsonAdaptedAllergy\u003e invalidAllergies \u003d new ArrayList\u003c\u003e(VALID_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"        invalidAllergies.add(new JsonAdaptedAllergy(INVALID_ALLERGY));","lastModifiedDate":"2023-10-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_EMAIL, VALID_PHONE,","lastModifiedDate":"2023-10-14"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"                        VALID_GENDER, VALID_AGE , VALID_BLOODTYPE, invalidAllergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":90,"adammangzijun":70}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setGender(person.getGender());","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setAge(person.getAge());","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setBloodType(person.getBloodType());","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setAllergies(person.getAllergies());","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"    public EditPersonDescriptorBuilder withGender(String gender) {","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setGender(new Gender(gender));","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Age} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"    public EditPersonDescriptorBuilder withAge(int age) {","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setAge(new Age(age));","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code BloodType} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"    public EditPersonDescriptorBuilder withBloodType(String bloodType) {","lastModifiedDate":"2023-10-14"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setBloodType(new BloodType(bloodType));","lastModifiedDate":"2023-10-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"    public EditPersonDescriptorBuilder withAllergies(String... allergies) {","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        Set\u003cAllergy\u003e allergySet \u003d Stream.of(allergies).map(Allergy::new).collect(Collectors.toSet());","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"        descriptor.setAllergies(allergySet);","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"Darren159":4,"-":72,"adammangzijun":31}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Age;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.BloodType;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"Darren159"},"content":"import seedu.address.model.person.Gender;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2023-10-14"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    public static final String DEFAULT_GENDER \u003d \"F\";","lastModifiedDate":"2023-10-14"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    public static final int DEFAULT_AGE \u003d 21;","lastModifiedDate":"2023-10-14"},{"lineNumber":26,"author":{"gitId":"Darren159"},"content":"    public static final String DEFAULT_BLOODTYPE \u003d \"O+\";","lastModifiedDate":"2023-10-15"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    public static final String DEFAULT_ALLERGY \u003d \"Ants\";","lastModifiedDate":"2023-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    private Phone phone;","lastModifiedDate":"2023-10-14"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    private Gender gender;","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    private Age age;","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    private BloodType bloodType;","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    private Set\u003cAllergy\u003e allergies;","lastModifiedDate":"2023-10-14"},{"lineNumber":36,"author":{"gitId":"Darren159"},"content":"    private boolean isPinned;","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        gender \u003d new Gender(DEFAULT_GENDER);","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        age \u003d new Age(DEFAULT_AGE);","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"        bloodType \u003d new BloodType(DEFAULT_BLOODTYPE);","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        allergies \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"Darren159"},"content":"        isPinned \u003d false;","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"        gender \u003d personToCopy.getGender();","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"        age \u003d personToCopy.getAge();","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"        bloodType \u003d personToCopy.getBloodType();","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        allergies \u003d new HashSet\u003c\u003e(personToCopy.getAllergies());","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"Darren159"},"content":"        isPinned \u003d personToCopy.isPinned();","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2023-10-14"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Gender} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withGender(String gender) {","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"        this.gender \u003d new Gender(gender);","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code Age} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withAge(int age) {","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"        this.age \u003d new Age(age);","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"     * Sets the {@code BloodType} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withBloodType(String bloodType) {","lastModifiedDate":"2023-10-14"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"        this.bloodType \u003d new BloodType(bloodType);","lastModifiedDate":"2023-10-14"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"        return this;","lastModifiedDate":"2023-10-14"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-10-14"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-10-14"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-10-14"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"     * Parses the {@code allergies} into a {@code Set\u003cAllergy\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2023-10-14"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-10-14"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"    public PersonBuilder withAllergies(String ... allergies) {","lastModifiedDate":"2023-10-14"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"        this.allergies \u003d SampleDataUtil.getAllergySet(allergies);","lastModifiedDate":"2023-10-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":122,"author":{"gitId":"Darren159"},"content":"    /**","lastModifiedDate":"2023-10-15"},{"lineNumber":123,"author":{"gitId":"Darren159"},"content":"     * Sets the {@code isPinned} of the {@code Person} that we are building.","lastModifiedDate":"2023-10-15"},{"lineNumber":124,"author":{"gitId":"Darren159"},"content":"     */","lastModifiedDate":"2023-10-15"},{"lineNumber":125,"author":{"gitId":"Darren159"},"content":"    public PersonBuilder withIsPinned(boolean isPinned) {","lastModifiedDate":"2023-10-15"},{"lineNumber":126,"author":{"gitId":"Darren159"},"content":"        this.isPinned \u003d isPinned;","lastModifiedDate":"2023-10-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":131,"author":{"gitId":"Darren159"},"content":"        return new Person(name, email, phone, gender, age, bloodType, allergies, isPinned);","lastModifiedDate":"2023-10-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"Darren159":14,"-":73,"adammangzijun":47}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ALLERGIES;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BLOODTYPE;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import seedu.address.model.person.Allergy;","lastModifiedDate":"2023-10-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2023-10-14"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        sb.append(PREFIX_GENDER + person.getGender().gender + \" \");","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"        sb.append(PREFIX_AGE + person.getAge().age.toString() + \" \");","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"        sb.append(PREFIX_BLOODTYPE + person.getBloodType().bloodType + \" \");","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        person.getAllergies().stream().forEach(","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"            s -\u003e sb.append(PREFIX_ALLERGIES + s.allergy + \" \")","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.gender).append(\" \"));","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        descriptor.getAge().ifPresent(age -\u003e sb.append(PREFIX_AGE).append(age.age).append(\" \"));","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"Darren159"},"content":"        descriptor.getBloodType().ifPresent(bloodType -\u003e sb.append(PREFIX_BLOODTYPE).append(bloodType.bloodType)","lastModifiedDate":"2023-10-15"},{"lineNumber":57,"author":{"gitId":"Darren159"},"content":"                .append(\" \"));","lastModifiedDate":"2023-10-15"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        if (descriptor.getAllergies().isPresent()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"            Set\u003cAllergy\u003e allergies \u003d descriptor.getAllergies().get();","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"            if (allergies.isEmpty()) {","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"                sb.append(PREFIX_ALLERGIES);","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"                allergies.forEach(s -\u003e sb.append(PREFIX_ALLERGIES).append(s.allergy).append(\" \"));","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"Darren159":6,"-":47,"adammangzijun":15}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":4,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_AGE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":5,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_DUST;","lastModifiedDate":"2023-10-15"},{"lineNumber":6,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALLERGY_PEANUTS;","lastModifiedDate":"2023-10-15"},{"lineNumber":7,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":8,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BLOODTYPE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":11,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":12,"author":{"gitId":"Darren159"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-10-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"alice@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"F\")","lastModifiedDate":"2023-10-14"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"            .withAge(20)","lastModifiedDate":"2023-10-14"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"AB+\")","lastModifiedDate":"2023-10-14"},{"lineNumber":35,"author":{"gitId":"Darren159"},"content":"            .withAllergies(\"Chocolate\").withIsPinned(true).build();","lastModifiedDate":"2023-10-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"johnd@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"98765432\")","lastModifiedDate":"2023-10-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"            .withAge(15)","lastModifiedDate":"2023-10-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"B-\")","lastModifiedDate":"2023-10-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"            .withAllergies(\"Pollen\", \"Soil\").build();","lastModifiedDate":"2023-10-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")","lastModifiedDate":"2023-10-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"heinz@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"95352563\")","lastModifiedDate":"2023-10-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"            .withAge(24)","lastModifiedDate":"2023-10-14"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"AB-\")","lastModifiedDate":"2023-10-14"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"            .withAllergies(\"Dogs\").build();","lastModifiedDate":"2023-10-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")","lastModifiedDate":"2023-10-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"cornelia@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"87652533\")","lastModifiedDate":"2023-10-14"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"            .withAge(26)","lastModifiedDate":"2023-10-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"AB+\")","lastModifiedDate":"2023-10-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"            .withAllergies(\"Cats\").build();","lastModifiedDate":"2023-10-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")","lastModifiedDate":"2023-10-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"9482224\")","lastModifiedDate":"2023-10-14"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"werner@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"F\")","lastModifiedDate":"2023-10-14"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"            .withAge(27)","lastModifiedDate":"2023-10-14"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"A-\")","lastModifiedDate":"2023-10-14"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"            .withAllergies(\"Light\").build();","lastModifiedDate":"2023-10-14"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")","lastModifiedDate":"2023-10-14"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"lydia@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"9482427\")","lastModifiedDate":"2023-10-14"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"F\")","lastModifiedDate":"2023-10-14"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"            .withAge(29)","lastModifiedDate":"2023-10-14"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(\"B+\").build();","lastModifiedDate":"2023-10-14"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")","lastModifiedDate":"2023-10-14"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"anna@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"9482442\")","lastModifiedDate":"2023-10-14"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"            .withAge(30)","lastModifiedDate":"2023-10-14"},{"lineNumber":75,"author":{"gitId":"Darren159"},"content":"            .withBloodType(\"O+\").build();","lastModifiedDate":"2023-10-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")","lastModifiedDate":"2023-10-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"stefan@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"8482424\")","lastModifiedDate":"2023-10-14"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"            .withAge(30)","lastModifiedDate":"2023-10-14"},{"lineNumber":83,"author":{"gitId":"Darren159"},"content":"            .withBloodType(\"A+\").build();","lastModifiedDate":"2023-10-15"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")","lastModifiedDate":"2023-10-14"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(\"hans@example.com\")","lastModifiedDate":"2023-10-14"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(\"8482131\")","lastModifiedDate":"2023-10-14"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"            .withGender(\"M\")","lastModifiedDate":"2023-10-14"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"            .withAge(33)","lastModifiedDate":"2023-10-14"},{"lineNumber":89,"author":{"gitId":"Darren159"},"content":"            .withBloodType(\"B+\").build();","lastModifiedDate":"2023-10-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"            .withGender(VALID_GENDER_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"            .withAge(VALID_AGE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(VALID_BLOODTYPE_AMY)","lastModifiedDate":"2023-10-14"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"            .withAllergies(VALID_ALLERGY_DUST).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"            .withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"            .withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"            .withGender(VALID_GENDER_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"            .withAge(VALID_AGE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"            .withBloodType(VALID_BLOODTYPE_BOB)","lastModifiedDate":"2023-10-14"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"            .withAllergies(VALID_ALLERGY_DUST, VALID_ALLERGY_PEANUTS).build();","lastModifiedDate":"2023-10-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"Darren159":12,"-":47,"adammangzijun":66}}]
